{
    "pipes": [],
    "interfaces": [
        {
            "name": "DataCell",
            "id": "interface-DataCell-a0f0efc2894612d0ad97ca6c3365bee2ee49cb5d144389f4596b9db45bf80bc6576713092c02567817d050db95cc310a1d76e4bcdd4cd6d863e2b900bebc8769",
            "file": "src/lib/biomarker-table/biomarker-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule, MatTableDataSource } from '@angular/material/table';\nimport {\n  BiomarkerTableDataCardComponent,\n  BiomarkerTableDataIconComponent,\n  DataItem,\n} from '@hra-ui/components/molecules';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { GradientPoint, SizeLegend } from '@hra-ui/components/atoms';\n\n/**\n * RGBTriblet of type RGB to store color\n */\ntype RGBTriplet = [number, number, number];\n\n/**\n * An interface representing a single cell of the table.\n */\nexport interface DataCell {\n  /** Represents the color of the icon */\n  color: string;\n  /** Represents the size of the icon */\n  size: number;\n  /** Represents the data for the data card */\n  data: {\n    cell: string;\n    biomarker: string;\n    meanExpression: number;\n    /** Number of datasets for this Tissue */\n    dataset_count: number;\n  };\n}\n\n/**\n * Details of the Tissue\n */\nexport interface TissueInfo {\n  /** ID of the Tissue */\n  id: string;\n  /** Name of the Tissue */\n  label: string;\n}\n\n/** Describes the composition of a single row in the table */\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\n\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\n@Component({\n  selector: 'hra-biomarker-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    BiomarkerTableDataIconComponent,\n    HoverDirective,\n    BiomarkerTableDataCardComponent,\n  ],\n  templateUrl: './biomarker-table.component.html',\n  styleUrls: ['./biomarker-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\n  /**\n   * Input: TissueInfo carrying the details of the tissue open\n   */\n  @Input() tissueInfo: TissueInfo = {\n    id: '',\n    label: '',\n  };\n\n  /** Columns for the table */\n  @Input() columns: string[] = [];\n\n  /** Rows of the table */\n  @Input() data: DataRow<T>[] = [];\n\n  /** Gradient colors along with their stop points */\n  @Input() gradient: GradientPoint[] = [];\n\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  @Input() sizes: SizeLegend[] = [];\n\n  /** Cell name which is hovered, used for highlighting */\n  @Input() highlightedCellName = '';\n\n  /** List of cell ids in the illustration */\n  @Input() illustrationLabels: string[] = [];\n\n  /** Emits cell type label when row is hovered */\n  @Output() readonly rowHover = new EventEmitter<string>();\n\n  /** Getter method to provide the definations of the columns */\n  get columnsWithTypeAndCount(): string[] {\n    return ['type', 'count', ...this.columns];\n  }\n\n  /** Source for the table */\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\n\n  /**\n   * Sets the data source for the table on every change\n   * Sorts the biomarker table on illustrationLabels change\n   * @param changes object consisting of change in the Input\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.dataSource.data = this.data;\n    }\n\n    if ('illustrationLabels' in changes) {\n      this.sortTable();\n    }\n  }\n\n  /**\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\n   */\n  private sortTable(): void {\n    this.dataSource.data = this.data.sort((a, b) => {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n\n    this.dataSource.data = this.dataSource.data.sort((a, b) => {\n      const id1 = this.illustrationLabels.includes(a[0].toLowerCase());\n      const id2 = this.illustrationLabels.includes(b[0].toLowerCase());\n      return id1 && !id2 ? -1 : 1;\n    });\n  }\n\n  /**\n   * Returns true if name matches the highlighted cell name\n   * @param name Cell name\n   */\n  isHighlighted(name: string): boolean {\n    return name.toLowerCase() === this.highlightedCellName.toLowerCase();\n  }\n\n  /** Lerp function to give value beween min and max value based on the given value\n   *\n   * @param value\n   * @param min\n   * @param max\n   * @returns\n   */\n  lerp(value: number, min: number, max: number): number {\n    return min * (1 - value) + max * value;\n  }\n\n  /**\n   * Converts HexCode to RGB\n   * @param hex\n   * @returns\n   */\n  hex2rgb(hex: string): RGBTriplet {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return [r, g, b];\n  }\n\n  /**\n   * Gets Min and Max color grade based on the meanExpression value\n   * @param meanExpression\n   * @returns\n   */\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\n    const index = this.gradient.findIndex((item, i, arr) => {\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\n    });\n\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\n\n    return { minColor, maxColor };\n  }\n\n  /**\n   * Gets Min and Max size grade based on the Percentage value\n   * @param percentage\n   * @returns\n   */\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\n    const index = this.sizes.findIndex((item, i, arr) => {\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\n    });\n    const minSize: number = this.sizes[index]?.radius;\n    const maxSize: number = this.sizes[index + 1].radius;\n    return { minSize, maxSize };\n  }\n\n  /**\n   * Calculates the color of this value on this gradient\n   * @param value\n   * @returns\n   */\n  getColor(value: number): string {\n    const { minColor, maxColor } = this.getMinMaxColor(value);\n    return (\n      '#' +\n      minColor\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\n        .map((component) => Math.round(component).toString(16))\n        .join('')\n    );\n  }\n\n  /**\n   * gets Size of the Cell based on the percentage value\n   * @param value\n   * @returns\n   */\n  getSize(value: number): number {\n    const { minSize, maxSize } = this.getMinMaxSize(value);\n    return this.lerp(value, minSize, maxSize);\n  }\n\n  /**\n   * Processes the object for hover data for Table Cell\n   * @param index index of the row of the datasource\n   * @param row row of the datasource\n   * @returns\n   */\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\n    if (row[index] === undefined) {\n      return [];\n    }\n\n    const {\n      tissueInfo: { id, label },\n    } = this;\n    const {\n      data: { cell, biomarker, meanExpression, dataset_count },\n    } = row[index] as T;\n\n    return [\n      [\n        { label: 'Functional Tissue Unit Name', value: label },\n        { label: 'Uberon ID', value: id },\n        { label: '#Datasets', value: `${dataset_count ?? 0}` },\n      ],\n      [\n        { label: 'Cell Type Name', value: row[0] },\n        { label: 'CL ID', value: cell },\n        { label: 'Number of Cells', value: `${row[1]}` },\n      ],\n      [\n        { label: 'Gene Name', value: this.columns[index - 2] },\n        { label: 'HGNC ID', value: biomarker },\n        { label: 'Mean Expression Value', value: meanExpression.toFixed(6) },\n      ],\n    ];\n  }\n}\n",
            "properties": [
                {
                    "name": "color",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Represents the color of the icon</p>\n",
                    "line": 30,
                    "rawdescription": "\nRepresents the color of the icon"
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "optional": false,
                    "description": "<p>Represents the data for the data card</p>\n",
                    "line": 34,
                    "rawdescription": "\nRepresents the data for the data card"
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "optional": false,
                    "description": "<p>Represents the size of the icon</p>\n",
                    "line": 32,
                    "rawdescription": "\nRepresents the size of the icon"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>An interface representing a single cell of the table.</p>\n",
            "rawdescription": "\n\nAn interface representing a single cell of the table.\n",
            "methods": []
        },
        {
            "name": "TissueInfo",
            "id": "interface-TissueInfo-a0f0efc2894612d0ad97ca6c3365bee2ee49cb5d144389f4596b9db45bf80bc6576713092c02567817d050db95cc310a1d76e4bcdd4cd6d863e2b900bebc8769",
            "file": "src/lib/biomarker-table/biomarker-table.component.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule, MatTableDataSource } from '@angular/material/table';\nimport {\n  BiomarkerTableDataCardComponent,\n  BiomarkerTableDataIconComponent,\n  DataItem,\n} from '@hra-ui/components/molecules';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { GradientPoint, SizeLegend } from '@hra-ui/components/atoms';\n\n/**\n * RGBTriblet of type RGB to store color\n */\ntype RGBTriplet = [number, number, number];\n\n/**\n * An interface representing a single cell of the table.\n */\nexport interface DataCell {\n  /** Represents the color of the icon */\n  color: string;\n  /** Represents the size of the icon */\n  size: number;\n  /** Represents the data for the data card */\n  data: {\n    cell: string;\n    biomarker: string;\n    meanExpression: number;\n    /** Number of datasets for this Tissue */\n    dataset_count: number;\n  };\n}\n\n/**\n * Details of the Tissue\n */\nexport interface TissueInfo {\n  /** ID of the Tissue */\n  id: string;\n  /** Name of the Tissue */\n  label: string;\n}\n\n/** Describes the composition of a single row in the table */\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\n\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\n@Component({\n  selector: 'hra-biomarker-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    BiomarkerTableDataIconComponent,\n    HoverDirective,\n    BiomarkerTableDataCardComponent,\n  ],\n  templateUrl: './biomarker-table.component.html',\n  styleUrls: ['./biomarker-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\n  /**\n   * Input: TissueInfo carrying the details of the tissue open\n   */\n  @Input() tissueInfo: TissueInfo = {\n    id: '',\n    label: '',\n  };\n\n  /** Columns for the table */\n  @Input() columns: string[] = [];\n\n  /** Rows of the table */\n  @Input() data: DataRow<T>[] = [];\n\n  /** Gradient colors along with their stop points */\n  @Input() gradient: GradientPoint[] = [];\n\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  @Input() sizes: SizeLegend[] = [];\n\n  /** Cell name which is hovered, used for highlighting */\n  @Input() highlightedCellName = '';\n\n  /** List of cell ids in the illustration */\n  @Input() illustrationLabels: string[] = [];\n\n  /** Emits cell type label when row is hovered */\n  @Output() readonly rowHover = new EventEmitter<string>();\n\n  /** Getter method to provide the definations of the columns */\n  get columnsWithTypeAndCount(): string[] {\n    return ['type', 'count', ...this.columns];\n  }\n\n  /** Source for the table */\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\n\n  /**\n   * Sets the data source for the table on every change\n   * Sorts the biomarker table on illustrationLabels change\n   * @param changes object consisting of change in the Input\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.dataSource.data = this.data;\n    }\n\n    if ('illustrationLabels' in changes) {\n      this.sortTable();\n    }\n  }\n\n  /**\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\n   */\n  private sortTable(): void {\n    this.dataSource.data = this.data.sort((a, b) => {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n\n    this.dataSource.data = this.dataSource.data.sort((a, b) => {\n      const id1 = this.illustrationLabels.includes(a[0].toLowerCase());\n      const id2 = this.illustrationLabels.includes(b[0].toLowerCase());\n      return id1 && !id2 ? -1 : 1;\n    });\n  }\n\n  /**\n   * Returns true if name matches the highlighted cell name\n   * @param name Cell name\n   */\n  isHighlighted(name: string): boolean {\n    return name.toLowerCase() === this.highlightedCellName.toLowerCase();\n  }\n\n  /** Lerp function to give value beween min and max value based on the given value\n   *\n   * @param value\n   * @param min\n   * @param max\n   * @returns\n   */\n  lerp(value: number, min: number, max: number): number {\n    return min * (1 - value) + max * value;\n  }\n\n  /**\n   * Converts HexCode to RGB\n   * @param hex\n   * @returns\n   */\n  hex2rgb(hex: string): RGBTriplet {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return [r, g, b];\n  }\n\n  /**\n   * Gets Min and Max color grade based on the meanExpression value\n   * @param meanExpression\n   * @returns\n   */\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\n    const index = this.gradient.findIndex((item, i, arr) => {\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\n    });\n\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\n\n    return { minColor, maxColor };\n  }\n\n  /**\n   * Gets Min and Max size grade based on the Percentage value\n   * @param percentage\n   * @returns\n   */\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\n    const index = this.sizes.findIndex((item, i, arr) => {\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\n    });\n    const minSize: number = this.sizes[index]?.radius;\n    const maxSize: number = this.sizes[index + 1].radius;\n    return { minSize, maxSize };\n  }\n\n  /**\n   * Calculates the color of this value on this gradient\n   * @param value\n   * @returns\n   */\n  getColor(value: number): string {\n    const { minColor, maxColor } = this.getMinMaxColor(value);\n    return (\n      '#' +\n      minColor\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\n        .map((component) => Math.round(component).toString(16))\n        .join('')\n    );\n  }\n\n  /**\n   * gets Size of the Cell based on the percentage value\n   * @param value\n   * @returns\n   */\n  getSize(value: number): number {\n    const { minSize, maxSize } = this.getMinMaxSize(value);\n    return this.lerp(value, minSize, maxSize);\n  }\n\n  /**\n   * Processes the object for hover data for Table Cell\n   * @param index index of the row of the datasource\n   * @param row row of the datasource\n   * @returns\n   */\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\n    if (row[index] === undefined) {\n      return [];\n    }\n\n    const {\n      tissueInfo: { id, label },\n    } = this;\n    const {\n      data: { cell, biomarker, meanExpression, dataset_count },\n    } = row[index] as T;\n\n    return [\n      [\n        { label: 'Functional Tissue Unit Name', value: label },\n        { label: 'Uberon ID', value: id },\n        { label: '#Datasets', value: `${dataset_count ?? 0}` },\n      ],\n      [\n        { label: 'Cell Type Name', value: row[0] },\n        { label: 'CL ID', value: cell },\n        { label: 'Number of Cells', value: `${row[1]}` },\n      ],\n      [\n        { label: 'Gene Name', value: this.columns[index - 2] },\n        { label: 'HGNC ID', value: biomarker },\n        { label: 'Mean Expression Value', value: meanExpression.toFixed(6) },\n      ],\n    ];\n  }\n}\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>ID of the Tissue</p>\n",
                    "line": 48,
                    "rawdescription": "\nID of the Tissue"
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>Name of the Tissue</p>\n",
                    "line": 50,
                    "rawdescription": "\nName of the Tissue"
                }
            ],
            "indexSignatures": [],
            "kind": 165,
            "description": "<p>Details of the Tissue</p>\n",
            "rawdescription": "\n\nDetails of the Tissue\n",
            "methods": []
        }
    ],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BiomarkerTableComponent",
            "id": "component-BiomarkerTableComponent-a0f0efc2894612d0ad97ca6c3365bee2ee49cb5d144389f4596b9db45bf80bc6576713092c02567817d050db95cc310a1d76e4bcdd4cd6d863e2b900bebc8769",
            "file": "src/lib/biomarker-table/biomarker-table.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "hra-biomarker-table",
            "styleUrls": [
                "./biomarker-table.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./biomarker-table.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [
                {
                    "name": "columns",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nColumns for the table",
                    "description": "<p>Columns for the table</p>\n",
                    "line": 81,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nRows of the table",
                    "description": "<p>Rows of the table</p>\n",
                    "line": 84,
                    "type": "DataRow<T>[]",
                    "decorators": []
                },
                {
                    "name": "gradient",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nGradient colors along with their stop points",
                    "description": "<p>Gradient colors along with their stop points</p>\n",
                    "line": 87,
                    "type": "GradientPoint[]",
                    "decorators": []
                },
                {
                    "name": "highlightedCellName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nCell name which is hovered, used for highlighting",
                    "description": "<p>Cell name which is hovered, used for highlighting</p>\n",
                    "line": 93,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "illustrationLabels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nList of cell ids in the illustration",
                    "description": "<p>List of cell ids in the illustration</p>\n",
                    "line": 96,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "sizes",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nTaking input for the radius of the circle and the label to be displayed.",
                    "description": "<p>Taking input for the radius of the circle and the label to be displayed.</p>\n",
                    "line": 90,
                    "type": "SizeLegend[]",
                    "decorators": []
                },
                {
                    "name": "tissueInfo",
                    "defaultValue": "{\n    id: '',\n    label: '',\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nInput: TissueInfo carrying the details of the tissue open\n",
                    "description": "<p>Input: TissueInfo carrying the details of the tissue open</p>\n",
                    "line": 75,
                    "type": "TissueInfo",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "rowHover",
                    "defaultValue": "new EventEmitter<string>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nEmits cell type label when row is hovered",
                    "description": "<p>Emits cell type label when row is hovered</p>\n",
                    "line": 99,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dataSource",
                    "defaultValue": "new MatTableDataSource<DataRow<T>>([])",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Source for the table</p>\n",
                    "line": 107,
                    "rawdescription": "\nSource for the table",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "getColor",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 205,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nCalculates the color of this value on this gradient\n",
                    "description": "<p>Calculates the color of this value on this gradient</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5765,
                                "end": 5770,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5759,
                                "end": 5764,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 5777,
                                "end": 5784,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getHoverData",
                    "args": [
                        {
                            "type": "[number, DataRow<T>]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "[][]",
                    "typeParameters": [],
                    "line": 232,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nProcesses the object for hover data for Table Cell\n",
                    "description": "<p>Processes the object for hover data for Table Cell</p>\n",
                    "jsdoctags": [
                        {
                            "type": "[number, DataRow<T>]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "tagName": {
                                "pos": 6500,
                                "end": 6507,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMinMaxColor",
                    "args": [
                        {
                            "name": "meanExpression",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 175,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets Min and Max color grade based on the meanExpression value\n",
                    "description": "<p>Gets Min and Max color grade based on the meanExpression value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4663,
                                "end": 4677,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "meanExpression"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4657,
                                "end": 4662,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4684,
                                "end": 4691,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getMinMaxSize",
                    "args": [
                        {
                            "name": "percentage",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "literal type",
                    "typeParameters": [],
                    "line": 191,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nGets Min and Max size grade based on the Percentage value\n",
                    "description": "<p>Gets Min and Max size grade based on the Percentage value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 5255,
                                "end": 5265,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "percentage"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 5249,
                                "end": 5254,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 5272,
                                "end": 5279,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "getSize",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 221,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\ngets Size of the Cell based on the percentage value\n",
                    "description": "<p>gets Size of the Cell based on the percentage value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 6168,
                                "end": 6173,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 6162,
                                "end": 6167,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 6180,
                                "end": 6187,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "hex2rgb",
                    "args": [
                        {
                            "name": "hex",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "RGBTriplet",
                    "typeParameters": [],
                    "line": 163,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nConverts HexCode to RGB\n",
                    "description": "<p>Converts HexCode to RGB</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4354,
                                "end": 4357,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "hex"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4348,
                                "end": 4353,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4364,
                                "end": 4371,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                },
                {
                    "name": "isHighlighted",
                    "args": [
                        {
                            "name": "name",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 143,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\n\nReturns true if name matches the highlighted cell name\n",
                    "description": "<p>Returns true if name matches the highlighted cell name</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 3900,
                                "end": 3904,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "name"
                            },
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 3894,
                                "end": 3899,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": "<p>Cell name</p>\n"
                        }
                    ]
                },
                {
                    "name": "lerp",
                    "args": [
                        {
                            "name": "value",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "min",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "max",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "number",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nLerp function to give value beween min and max value based on the given value\n\n",
                    "description": "<p>Lerp function to give value beween min and max value based on the given value</p>\n",
                    "jsdoctags": [
                        {
                            "name": {
                                "pos": 4142,
                                "end": 4147,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "value"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4136,
                                "end": 4141,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 4160,
                                "end": 4163,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "min"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4154,
                                "end": 4159,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "name": {
                                "pos": 4176,
                                "end": 4179,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "max"
                            },
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "pos": 4170,
                                "end": 4175,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "param"
                            },
                            "comment": ""
                        },
                        {
                            "tagName": {
                                "pos": 4186,
                                "end": 4193,
                                "flags": 4227072,
                                "modifierFlagsCache": 0,
                                "transformFlags": 0,
                                "kind": 79,
                                "escapedText": "returns"
                            },
                            "comment": ""
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Cell types table, describing the types and quanitites of cells for a specific organ</p>\n",
            "rawdescription": "\nCell types table, describing the types and quanitites of cells for a specific organ",
            "type": "component",
            "sourceCode": "import {\n  ChangeDetectionStrategy,\n  Component,\n  EventEmitter,\n  Input,\n  OnChanges,\n  Output,\n  SimpleChanges,\n} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatTableModule, MatTableDataSource } from '@angular/material/table';\nimport {\n  BiomarkerTableDataCardComponent,\n  BiomarkerTableDataIconComponent,\n  DataItem,\n} from '@hra-ui/components/molecules';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { GradientPoint, SizeLegend } from '@hra-ui/components/atoms';\n\n/**\n * RGBTriblet of type RGB to store color\n */\ntype RGBTriplet = [number, number, number];\n\n/**\n * An interface representing a single cell of the table.\n */\nexport interface DataCell {\n  /** Represents the color of the icon */\n  color: string;\n  /** Represents the size of the icon */\n  size: number;\n  /** Represents the data for the data card */\n  data: {\n    cell: string;\n    biomarker: string;\n    meanExpression: number;\n    /** Number of datasets for this Tissue */\n    dataset_count: number;\n  };\n}\n\n/**\n * Details of the Tissue\n */\nexport interface TissueInfo {\n  /** ID of the Tissue */\n  id: string;\n  /** Name of the Tissue */\n  label: string;\n}\n\n/** Describes the composition of a single row in the table */\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\n\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\n@Component({\n  selector: 'hra-biomarker-table',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatTableModule,\n    BiomarkerTableDataIconComponent,\n    HoverDirective,\n    BiomarkerTableDataCardComponent,\n  ],\n  templateUrl: './biomarker-table.component.html',\n  styleUrls: ['./biomarker-table.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\n  /**\n   * Input: TissueInfo carrying the details of the tissue open\n   */\n  @Input() tissueInfo: TissueInfo = {\n    id: '',\n    label: '',\n  };\n\n  /** Columns for the table */\n  @Input() columns: string[] = [];\n\n  /** Rows of the table */\n  @Input() data: DataRow<T>[] = [];\n\n  /** Gradient colors along with their stop points */\n  @Input() gradient: GradientPoint[] = [];\n\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  @Input() sizes: SizeLegend[] = [];\n\n  /** Cell name which is hovered, used for highlighting */\n  @Input() highlightedCellName = '';\n\n  /** List of cell ids in the illustration */\n  @Input() illustrationLabels: string[] = [];\n\n  /** Emits cell type label when row is hovered */\n  @Output() readonly rowHover = new EventEmitter<string>();\n\n  /** Getter method to provide the definations of the columns */\n  get columnsWithTypeAndCount(): string[] {\n    return ['type', 'count', ...this.columns];\n  }\n\n  /** Source for the table */\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\n\n  /**\n   * Sets the data source for the table on every change\n   * Sorts the biomarker table on illustrationLabels change\n   * @param changes object consisting of change in the Input\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if ('data' in changes) {\n      this.dataSource.data = this.data;\n    }\n\n    if ('illustrationLabels' in changes) {\n      this.sortTable();\n    }\n  }\n\n  /**\n   * Sorts table by cell type alphabetically, then puts cells that are in the illustration on top\n   */\n  private sortTable(): void {\n    this.dataSource.data = this.data.sort((a, b) => {\n      return a[0].toLowerCase() < b[0].toLowerCase() ? -1 : 1;\n    });\n\n    this.dataSource.data = this.dataSource.data.sort((a, b) => {\n      const id1 = this.illustrationLabels.includes(a[0].toLowerCase());\n      const id2 = this.illustrationLabels.includes(b[0].toLowerCase());\n      return id1 && !id2 ? -1 : 1;\n    });\n  }\n\n  /**\n   * Returns true if name matches the highlighted cell name\n   * @param name Cell name\n   */\n  isHighlighted(name: string): boolean {\n    return name.toLowerCase() === this.highlightedCellName.toLowerCase();\n  }\n\n  /** Lerp function to give value beween min and max value based on the given value\n   *\n   * @param value\n   * @param min\n   * @param max\n   * @returns\n   */\n  lerp(value: number, min: number, max: number): number {\n    return min * (1 - value) + max * value;\n  }\n\n  /**\n   * Converts HexCode to RGB\n   * @param hex\n   * @returns\n   */\n  hex2rgb(hex: string): RGBTriplet {\n    const r = parseInt(hex.slice(1, 3), 16);\n    const g = parseInt(hex.slice(3, 5), 16);\n    const b = parseInt(hex.slice(5, 7), 16);\n    return [r, g, b];\n  }\n\n  /**\n   * Gets Min and Max color grade based on the meanExpression value\n   * @param meanExpression\n   * @returns\n   */\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\n    const index = this.gradient.findIndex((item, i, arr) => {\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\n    });\n\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\n    const maxColor: RGBTriplet = this.hex2rgb(this.gradient[index + 1].color);\n\n    return { minColor, maxColor };\n  }\n\n  /**\n   * Gets Min and Max size grade based on the Percentage value\n   * @param percentage\n   * @returns\n   */\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\n    const index = this.sizes.findIndex((item, i, arr) => {\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\n    });\n    const minSize: number = this.sizes[index]?.radius;\n    const maxSize: number = this.sizes[index + 1].radius;\n    return { minSize, maxSize };\n  }\n\n  /**\n   * Calculates the color of this value on this gradient\n   * @param value\n   * @returns\n   */\n  getColor(value: number): string {\n    const { minColor, maxColor } = this.getMinMaxColor(value);\n    return (\n      '#' +\n      minColor\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\n        .map((component) => Math.round(component).toString(16))\n        .join('')\n    );\n  }\n\n  /**\n   * gets Size of the Cell based on the percentage value\n   * @param value\n   * @returns\n   */\n  getSize(value: number): number {\n    const { minSize, maxSize } = this.getMinMaxSize(value);\n    return this.lerp(value, minSize, maxSize);\n  }\n\n  /**\n   * Processes the object for hover data for Table Cell\n   * @param index index of the row of the datasource\n   * @param row row of the datasource\n   * @returns\n   */\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\n    if (row[index] === undefined) {\n      return [];\n    }\n\n    const {\n      tissueInfo: { id, label },\n    } = this;\n    const {\n      data: { cell, biomarker, meanExpression, dataset_count },\n    } = row[index] as T;\n\n    return [\n      [\n        { label: 'Functional Tissue Unit Name', value: label },\n        { label: 'Uberon ID', value: id },\n        { label: '#Datasets', value: `${dataset_count ?? 0}` },\n      ],\n      [\n        { label: 'Cell Type Name', value: row[0] },\n        { label: 'CL ID', value: cell },\n        { label: 'Number of Cells', value: `${row[1]}` },\n      ],\n      [\n        { label: 'Gene Name', value: this.columns[index - 2] },\n        { label: 'HGNC ID', value: biomarker },\n        { label: 'Mean Expression Value', value: meanExpression.toFixed(6) },\n      ],\n    ];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'utils';\n@use 'variables' as vars;\n\n:host {\n  display: block;\n\n  .sr-only {\n    @include utils.sr-only();\n  }\n\n  .table {\n    margin-left: -1px;\n\n    .highlight {\n      background-color: #f8f9fa;\n    }\n    td.type {\n      text-transform: lowercase;\n    }\n  }\n\n  .table th {\n    background-color: #fff7f8;\n    color: #59264d;\n    text-align: right;\n    font-weight: 400;\n  }\n\n  .table td {\n    border-bottom: 0.063rem solid #d3d3d3;\n    border-left: 0.063rem solid #d3d3d3;\n  }\n\n  .table tr {\n    height: 3rem;\n  }\n\n  .table tr:first-child td {\n    border-top: 0rem solid #d3d3d3;\n  }\n\n  tr > td:first-child {\n    text-align: left;\n    padding: 0 2rem;\n  }\n\n  tr > th:first-child {\n    text-align: left;\n    padding: 0 2rem;\n  }\n\n  tr > td:last-of-type {\n    border-right: 0.063rem solid #d3d3d3;\n  }\n\n  tr > th:last-of-type {\n    border-right: 0.063rem solid #d3d3d3;\n    border-left: solid #d3d3d3 1px;\n  }\n\n  .type {\n    height: 3rem;\n    max-width: 26rem;\n    min-width: 17rem;\n    border-radius: 0rem;\n    white-space: nowrap;\n  }\n\n  .count {\n    text-align: right;\n    height: 3rem;\n    min-width: 6.5rem;\n  }\n\n  th:not(:first-child) {\n    border-left: solid #d3d3d3 1px;\n  }\n\n  .icon-header {\n    max-width: 5rem;\n    white-space: nowrap;\n    overflow: hidden;\n    text-overflow: ellipsis;\n  }\n\n  .icon-cell {\n    max-width: 5rem;\n    min-height: 3rem;\n\n    .icon {\n      margin: auto;\n    }\n  }\n}\n\n::ng-deep .mat-mdc-tab-header {\n  margin-left: -1px !important;\n}\n\n.mat-mdc-row:hover .mat-mdc-cell {\n  background-color: #f8f9fa;\n}\n\n::ng-deep .biomarker-table-hover.full-column-name {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: vars.$primary-contrast-rgb;\n  overflow: auto;\n  max-width: fit-content;\n}\n",
                    "styleUrl": "./biomarker-table.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "OnChanges"
            ],
            "accessors": {
                "columnsWithTypeAndCount": {
                    "name": "columnsWithTypeAndCount",
                    "getSignature": {
                        "name": "columnsWithTypeAndCount",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 102,
                        "rawdescription": "\nGetter method to provide the definations of the columns",
                        "description": "<p>Getter method to provide the definations of the columns</p>\n"
                    }
                }
            },
            "templateData": "<table class=\"table\" mat-table [dataSource]=\"dataSource\">\n  <caption class=\"sr-only\">\n    Cell type table by Biomarker\n  </caption>\n\n  <ng-container matColumnDef=\"type\">\n    <th mat-header-cell *matHeaderCellDef>Cell Type</th>\n\n    <td class=\"type\" mat-cell *matCellDef=\"let element\" [class.highlight]=\"isHighlighted(element[0])\">\n      {{ element[0] }}\n    </td>\n  </ng-container>\n\n  <ng-container matColumnDef=\"count\">\n    <th class=\"count\" mat-header-cell *matHeaderCellDef>Cell Count</th>\n\n    <td class=\"count\" mat-cell *matCellDef=\"let element\" [class.highlight]=\"isHighlighted(element[0])\">\n      {{ element[1] !== undefined ? (element[1] | number) : 'no data' }}\n    </td>\n  </ng-container>\n\n  <ng-container *ngFor=\"let column of columns; let index = index\" [matColumnDef]=\"column\">\n    <th class=\"icon-header\" mat-header-cell *matHeaderCellDef [hraHover]=\"columnHover\" [hraHoverData]=\"column\">\n      {{ column }}\n    </th>\n\n    <td class=\"icon-cell\" mat-cell *matCellDef=\"let element\" [class.highlight]=\"isHighlighted(element[0])\">\n      <hra-biomarker-table-data-icon\n        class=\"icon\"\n        *ngIf=\"element[index + 2] !== undefined; else emptyCell\"\n        [color]=\"getColor(element[index + 2].color)\"\n        [size]=\"getSize(element[index + 2].size)\"\n        [hraHover]=\"dataHover\"\n        [hraHoverData]=\"[index + 2, element]\"\n      >\n      </hra-biomarker-table-data-icon>\n\n      <ng-template #emptyCell>\n        <div class=\"empty\" [hraHover]=\"dataHover\" [hraHoverData]=\"[index + 2, element]\"></div>\n      </ng-template>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef=\"columnsWithTypeAndCount; sticky: true\"></tr>\n  <tr mat-row *matRowDef=\"let row; columns: columnsWithTypeAndCount\" (mouseover)=\"rowHover.emit(row[0])\"></tr>\n</table>\n\n<ng-template #columnHover let-columnName>\n  <div class=\"biomarker-table-hover full-column-name\">\n    {{ columnName }}\n  </div>\n</ng-template>\n\n<ng-template #dataHover let-data>\n  <hra-biomarker-table-data-card [data]=\"getHoverData(data)\"> </hra-biomarker-table-data-card>\n</ng-template>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [],
        "functions": [],
        "typealiases": [
            {
                "name": "DataRow",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[string, , ...[]]",
                "file": "src/lib/biomarker-table/biomarker-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>Describes the composition of a single row in the table</p>\n",
                "kind": 183
            },
            {
                "name": "RGBTriplet",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "[number, number, number]",
                "file": "src/lib/biomarker-table/biomarker-table.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "<p>RGBTriblet of type RGB to store color</p>\n",
                "kind": 183
            }
        ],
        "enumerations": [],
        "groupedVariables": {},
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {
            "src/lib/biomarker-table/biomarker-table.component.ts": [
                {
                    "name": "DataRow",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[string, , ...[]]",
                    "file": "src/lib/biomarker-table/biomarker-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>Describes the composition of a single row in the table</p>\n",
                    "kind": 183
                },
                {
                    "name": "RGBTriplet",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "[number, number, number]",
                    "file": "src/lib/biomarker-table/biomarker-table.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "<p>RGBTriblet of type RGB to store color</p>\n",
                    "kind": 183
                }
            ]
        }
    }
}