var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Add.html",[0,0.147,1,1.653]],["body/classes/Add.html",[0,0.206,1,2.791,2,0.702,3,0.187,4,0.297,5,0.187,6,3.23,7,3.23,8,3.161,9,0.215,10,0.986,11,4.244,12,2.862,13,3.831,14,4.674,15,0.692,16,0.617,17,2.036,18,2.985,19,2.312,20,0.499,21,1.195,22,3.161,23,0.724,24,4.983,25,4.241,26,3.503,27,0.502,28,0.023,29,0.502,30,0.333,31,2.299,32,2.447,33,3.394,34,1.005,35,2.132,36,1.615,37,0.243,38,2.528,39,0.289,40,0.884,41,1.128,42,2.799,43,1.195,44,2.799,45,2.474,46,2.799,47,2.799,48,2.799,49,1.709,50,3.161,51,0.015,52,0.015]],["title/classes/AddEntry.html",[0,0.147,53,2.045]],["body/classes/AddEntry.html",[0,0.249,1,2.323,2,0.707,3,0.189,4,0.161,5,0.253,9,0.161,10,0.876,15,0.646,19,1.437,20,0.274,21,1.818,23,0.543,27,0.505,28,0.023,29,0.505,30,0.335,37,0.328,39,0.349,40,0.889,41,1.715,51,0.016,52,0.016,53,2.875,54,2.327,55,2.541,56,2.875,57,3.183,58,3.349,59,3.755,60,3.737,61,3.409,62,1.709,63,1.437,64,0.799,65,1.136,66,2.667,67,2.146,68,1.735,69,0.848,70,2.327,71,3.118,72,3.212,73,2.146,74,1.942,75,2.545,76,2.046,77,1.925,78,1.927,79,2.545,80,2.327,81,1.437,82,2.146,83,2.545,84,2.545,85,2.545]],["title/classes/CellSummarySelectors.html",[0,0.147,86,3.033]],["body/classes/CellSummarySelectors.html",[0,0.165,2,0.753,3,0.201,4,0.172,5,0.201,9,0.172,15,0.729,16,0.663,18,3.27,20,0.383,23,0.758,27,0.706,28,0.023,29,0.706,30,0.469,37,0.382,39,0.231,51,0.016,52,0.016,86,4.447,87,2.535,88,2.381,89,3.983,90,3.556,91,2.793,92,1.783,93,5.221,94,3.069,95,5.221,96,3.855,97,1.891,98,5.221,99,3.983,100,2.535,101,1.244,102,1.681,103,5.221,104,3.983,105,2.287,106,1.21,107,2.008,108,2.481,109,2.713,110,3.983,111,5.221,112,3.983,113,2.008,114,3.983,115,3.983]],["title/injectables/CellSummaryState.html",[109,2.425,116,1.021]],["body/injectables/CellSummaryState.html",[0,0.068,3,0.083,4,0.071,5,0.083,9,0.071,10,0.639,15,0.506,16,0.273,19,1.321,20,0.347,23,0.639,27,0.595,28,0.023,29,0.639,30,0.395,31,1.405,34,1.19,35,1.55,36,0.714,37,0.365,39,0.095,43,0.869,49,1.337,51,0.008,52,0.008,55,1.038,62,1.359,64,0.735,65,0.499,69,1.536,81,1.691,87,2.058,88,1.933,91,1.495,92,0.922,94,2.684,96,0.943,97,1.245,100,2.058,101,0.952,102,1.609,106,0.499,107,1.818,108,1.023,109,1.838,113,1.818,116,0.774,117,0.762,118,1.238,119,1.838,120,1.253,121,2.945,122,2.699,123,2.699,124,2.584,125,2.699,126,3.276,127,2.699,128,1.642,129,1.838,130,2.699,131,0.875,132,1.55,133,1.642,134,2.286,135,3.405,136,2.965,137,1.642,138,3.437,139,3.437,140,2.479,141,1.118,142,1.642,143,1.023,144,4.446,145,2.739,146,2.699,147,2.526,148,1.642,149,2.945,150,1.642,151,1.174,152,2.299,153,1.642,154,2.591,155,2.739,156,1.238,157,2.479,158,2.699,159,1.642,160,0.943,161,0.714,162,3.437,163,1.642,164,1.642,165,1.399,166,0.875,167,1.55,168,1.642,169,1.023,170,2.299,171,2.299,172,2.299,173,1.642,174,0.943,175,1.399,176,1.55,177,1.238,178,1.238,179,1.399,180,2.299,181,2.299,182,1.238,183,2.286,184,2.299,185,2.87,186,2.479,187,1.399,188,1.023,189,1.681,190,2.526,191,1.642,192,2.699,193,2.699,194,1.399,195,1.399,196,2.299,197,2.299,198,2.299,199,1.642,200,1.642,201,1.642,202,1.642,203,2.699,204,2.927,205,1.642,206,1.642,207,3.437,208,1.642,209,3.112,210,2.945,211,1.642,212,1.642,213,1.642,214,1.238,215,2.526,216,1.642,217,1.681,218,1.642,219,2.699,220,0.671,221,0.762,222,1.118,223,1.642,224,2.699,225,1.642,226,3.437,227,1.642,228,1.642,229,1.642,230,2.699,231,1.55,232,2.699,233,2.699,234,0.943,235,2.699,236,1.642,237,2.699,238,1.642,239,1.642,240,1.642,241,1.642,242,2.699,243,1.642,244,1.023,245,1.642,246,1.642,247,1.642,248,2.699,249,1.642,250,3.981,251,1.642,252,2.699,253,3.981,254,1.642,255,1.642,256,1.642,257,1.642,258,1.642,259,1.642,260,1.642,261,1.642,262,2.699,263,1.642,264,1.642,265,1.642,266,2.699,267,1.642,268,1.642,269,1.642,270,1.642,271,3.437,272,1.642,273,2.699,274,1.642]],["title/interfaces/CellSummaryStateModel.html",[96,2.045,275,1.29]],["body/interfaces/CellSummaryStateModel.html",[3,0.127,4,0.109,5,0.127,9,0.109,15,0.405,16,0.419,17,2.061,20,0.476,28,0.023,30,0.226,31,2.32,32,2.194,34,1.023,36,1.644,37,0.165,39,0.371,51,0.012,52,0.012,55,2.078,62,1.722,68,1.168,69,1.03,81,1.453,87,1.095,88,1.029,91,2.47,94,2.818,96,2.896,100,2.883,101,0.913,107,2.328,120,1.754,134,1.446,135,3.381,136,2.013,140,2.826,143,2.354,145,3.141,147,1.446,149,2.354,174,2.17,176,2.17,185,3.769,186,2.354,189,1.568,209,2.354,210,2.354,215,2.606,217,3.535,220,2.653,222,3.435,231,2.17,234,3.104,244,2.354,275,2.056,276,1.341,277,1.568,278,2.849,279,2.849,280,2.849,281,2.849,282,3.09,283,3.866,284,2.849,285,2.849,286,2.849,287,2.574,288,2.896,289,3.141,290,1.568,291,3.681,292,2.826,293,2.826,294,1.714,295,1.714,296,1.898,297,1.714,298,1.898,299,1.898,300,1.898,301,3.09,302,1.714,303,1.714,304,3.366,305,3.858,306,3.09,307,1.714,308,1.568,309,2.574,310,1.714,311,2.574,312,1.714,313,1.714,314,1.714,315,1.714,316,1.714,317,1.714,318,1.898,319,2.849,320,1.898,321,2.849,322,1.898,323,1.898]],["title/classes/ClearEntries.html",[0,0.147,82,2.045]],["body/classes/ClearEntries.html",[0,0.254,1,1.813,2,0.739,3,0.197,4,0.169,5,0.26,9,0.169,10,0.891,15,0.657,19,1.502,21,1.258,28,0.023,37,0.338,39,0.355,40,0.915,41,1.754,51,0.016,52,0.016,53,2.244,54,2.433,55,2.219,56,2.907,58,3.074,59,3.211,61,2.661,62,1.334,63,1.502,64,0.835,65,1.187,66,2.747,67,2.244,68,1.813,69,0.887,70,2.433,71,3.211,72,3.253,73,2.244,74,1.976,75,2.661,76,2.107,77,1.982,78,1.97,79,2.661,80,3.211,81,1.982,82,2.961,83,2.661,84,2.661,85,2.661]],["title/classes/ComputeAggregate.html",[0,0.147,121,2.218]],["body/classes/ComputeAggregate.html",[0,0.231,2,0.692,3,0.185,4,0.158,5,0.185,9,0.213,10,0.934,15,0.529,20,0.269,21,1.179,23,0.532,27,0.495,28,0.023,29,0.495,30,0.329,37,0.324,39,0.324,40,0.876,41,1.698,49,1.5,51,0.015,52,0.015,62,1.25,63,1.408,64,0.783,65,1.113,69,0.831,74,1.799,78,1.907,87,2.148,88,2.018,91,2.716,94,3.193,100,2.798,101,1.39,107,2.299,108,2.28,120,2.292,121,3.724,124,2.292,129,3.363,141,4.072,157,3.075,324,2.494,325,4.509,326,4.252,327,3.662,328,3.662,329,4.212,330,1.7,331,2.28,332,2.494,333,2.761,334,2.494,335,1.593,336,1.818,337,2.494,338,2.494,339,2.761]],["title/injectables/ContactState.html",[116,1.021,340,2.685]],["body/injectables/ContactState.html",[0,0.261,3,0.191,4,0.164,5,0.191,9,0.164,10,0.917,15,0.696,16,0.63,19,1.457,20,0.278,23,0.55,27,0.512,28,0.023,29,0.82,30,0.34,37,0.414,39,0.219,51,0.016,52,0.016,64,0.81,92,1.725,97,1.372,102,1.22,106,1.151,113,1.457,116,1.739,117,1.759,151,1.649,155,3.54,160,2.901,161,1.649,166,2.019,167,3.482,169,2.36,190,2.176,287,3.441,340,4.571,341,3.789,342,5.052,343,4.898,344,6.062,345,5.163,346,5.052,347,6.062,348,5.079,349,5.052,350,5.052,351,3.789,352,4.303,353,4.286,354,5.052,355,4.303,356,3.789,357,3.789,358,3.789,359,3.789,360,3.789]],["title/classes/Download.html",[0,0.147,56,1.549]],["body/classes/Download.html",[0,0.251,1,1.755,2,0.715,3,0.191,4,0.163,5,0.287,9,0.163,10,0.916,15,0.608,19,1.453,20,0.277,21,1.624,23,0.549,27,0.511,28,0.023,29,0.511,30,0.339,37,0.331,39,0.351,40,0.895,41,1.725,51,0.016,52,0.016,53,2.171,54,2.354,55,2.183,56,2.966,58,3.362,59,3.142,61,2.575,62,1.291,63,1.453,64,0.808,65,1.149,66,2.687,67,2.171,68,1.755,69,0.858,70,2.354,71,3.142,72,3.29,73,2.171,74,1.951,75,2.575,76,2.32,77,2.183,78,1.938,79,2.575,80,2.354,81,1.453,82,2.171,83,2.575,84,2.575,85,2.575,361,3.22,362,3.78]],["title/classes/DownloadSelectors.html",[0,0.147,363,3.033]],["body/classes/DownloadSelectors.html",[0,0.173,2,0.792,3,0.211,4,0.181,5,0.211,9,0.181,15,0.639,16,0.696,18,2.962,20,0.307,23,0.608,27,0.566,28,0.023,29,0.566,30,0.376,37,0.354,39,0.242,40,0.743,51,0.017,52,0.017,56,2.347,66,3.475,67,2.405,69,1.225,72,3.372,81,2.074,90,4.547,92,1.841,97,1.516,102,1.737,105,3.427,106,1.272,113,1.61,151,1.822,363,4.594,364,4.187,365,4.752,366,4.499,367,5.394,368,4.752,369,4.187,370,4.187,371,4.187,372,4.187]],["title/injectables/DownloadState.html",[116,1.021,373,2.685]],["body/injectables/DownloadState.html",[0,0.077,1,1.383,3,0.094,4,0.08,5,0.292,9,0.08,10,0.433,15,0.634,16,0.308,19,0.713,20,0.344,23,0.68,27,0.634,28,0.023,29,0.739,30,0.421,34,1.158,35,2.145,37,0.358,39,0.107,40,1.116,45,1.854,51,0.009,52,0.009,53,2.874,55,1.924,56,2.907,58,1.588,62,1.46,67,1.065,69,1.39,71,1.856,72,3.083,73,2.874,80,1.856,81,1.146,82,2.145,92,1.017,97,1.549,101,0.6,102,1.611,106,0.564,113,1.436,116,0.855,117,0.861,131,3.153,132,3.326,151,1.625,155,2.664,160,1.711,161,0.807,169,1.155,182,1.398,183,1.065,188,1.155,190,2.457,220,0.758,352,1.579,365,1.398,366,2.816,368,1.398,373,2.247,374,1.854,375,2.247,376,2.816,377,2.98,378,2.247,379,2.538,380,2.538,381,2.538,382,4.278,383,2.98,384,5.463,385,2.98,386,1.854,387,2.98,388,2.98,389,1.854,390,2.98,391,2.98,392,2.98,393,1.854,394,3.225,395,2.98,396,2.98,397,1.854,398,2.98,399,2.98,400,2.98,401,2.98,402,2.98,403,1.854,404,1.579,405,1.579,406,1.398,407,1.398,408,1.398,409,1.579,410,1.579,411,1.854,412,1.854,413,1.579,414,2.538,415,1.579,416,1.854,417,1.854,418,1.854,419,3.735,420,2.816,421,1.854,422,1.854,423,1.854,424,2.98,425,1.854,426,1.854,427,1.854,428,2.98,429,2.177,430,5.791,431,2.98,432,1.854,433,1.854,434,1.854,435,1.854,436,1.854,437,1.854,438,1.579,439,1.854,440,2.98,441,3.735,442,1.854,443,1.579,444,1.854,445,1.854,446,1.854,447,1.854,448,1.854,449,1.854,450,1.854,451,1.854,452,1.854,453,1.854,454,1.854,455,1.854,456,1.854,457,1.854,458,1.854,459,1.854,460,3.735,461,1.854,462,1.854,463,1.854,464,1.854,465,1.854,466,1.854,467,1.854,468,1.854,469,1.854,470,1.854,471,1.854,472,1.854,473,1.854,474,1.854,475,1.854,476,1.854,477,1.854,478,1.579,479,1.579]],["title/interfaces/GradientPoint.html",[134,2.045,275,1.29]],["body/interfaces/GradientPoint.html",[3,0.13,4,0.112,5,0.13,9,0.112,15,0.276,16,0.429,17,1.882,20,0.479,28,0.023,30,0.232,31,2.341,32,2.222,34,1.382,36,1.675,37,0.169,39,0.373,51,0.012,52,0.012,55,1.771,62,1.743,68,1.198,69,1.046,81,1.48,87,1.123,88,1.055,91,2.222,94,1.911,96,2.211,100,2.655,101,0.775,107,2.282,120,1.787,134,2.211,135,3.748,136,2.72,140,3.697,143,1.607,145,3.8,147,1.482,149,2.398,174,1.482,176,2.211,185,3.748,186,2.398,189,1.607,209,2.398,210,2.398,215,2.645,217,3.18,220,2.549,222,2.622,231,2.211,234,2.933,244,2.398,275,2.075,276,1.375,277,1.607,278,1.946,279,1.946,280,1.946,281,1.946,282,2.622,283,3.72,284,1.946,285,1.946,286,1.946,287,1.758,288,2.645,289,3.18,290,1.607,291,3.72,292,2.868,293,2.868,294,1.758,295,1.758,296,1.946,297,1.758,298,1.946,299,1.946,300,1.946,301,3.137,302,1.758,303,1.758,304,3.402,305,3.884,306,3.137,307,1.758,308,1.607,309,2.622,310,1.758,311,2.622,312,1.758,313,1.758,314,1.758,315,1.758,316,1.758,317,1.758,318,2.903,319,3.85,320,2.903,321,3.85,322,2.903,323,2.903]],["title/modules/HraStateModule.html",[480,3.033,481,2.685]],["body/modules/HraStateModule.html",[0,0.175,3,0.213,4,0.235,5,0.213,9,0.183,12,2.429,15,0.453,28,0.023,37,0.46,39,0.245,51,0.017,52,0.017,56,1.841,106,1.285,107,1.626,109,3.698,120,1.963,161,1.841,340,4.094,343,3.19,373,4.094,481,4.094,482,3.19,483,4.23,484,4.094,485,5.43,486,5.43,487,4.23,488,4.094,489,3.698,490,1.963,491,1.841,492,4.094,493,2.635,494,2.635,495,3.698,496,3.698,497,2.881,498,3.603,499,3.698,500,2.635,501,3.603,502,4.23,503,4.23,504,4.23,505,3.19,506,3.19,507,3.19,508,2.635]],["title/classes/Load.html",[0,0.147,124,1.653]],["body/classes/Load.html",[0,0.236,2,0.72,3,0.192,4,0.164,5,0.192,9,0.164,10,0.945,15,0.408,21,1.226,23,0.553,27,0.515,28,0.023,29,0.515,30,0.342,37,0.332,39,0.33,40,0.9,41,1.731,49,1.54,51,0.016,52,0.016,57,3.242,62,1.73,63,1.464,64,0.814,65,1.157,69,0.864,74,1.835,78,1.945,87,2.205,88,2.071,91,2.479,94,3.14,100,2.479,101,1.357,107,2.335,108,2.371,120,1.767,121,3.156,124,2.819,129,2.593,141,3.451,157,3.156,324,2.593,325,3.821,326,4.137,329,3.821,330,1.767,331,2.371,332,2.593,333,2.87,334,2.593,335,2.205,336,1.89,337,3.451,338,2.593,339,2.87,509,3.807]],["title/classes/Load-1.html",[0,0.123,124,1.384,183,1.712]],["body/classes/Load-1.html",[0,0.208,2,0.953,3,0.254,4,0.218,5,0.254,9,0.218,10,0.942,15,0.648,28,0.022,37,0.33,39,0.292,51,0.019,52,0.019,64,1.078,65,1.531,74,1.623,101,1.306,124,3.012,500,4.041,510,3.432,511,3.432,512,5.039,513,6.053,514,4.564,515,5.039]],["title/classes/LoadReferenceOrgans.html",[0,0.147,516,1.897]],["body/classes/LoadReferenceOrgans.html",[0,0.254,2,0.663,3,0.177,4,0.151,5,0.242,9,0.151,10,0.922,28,0.023,34,1.478,37,0.314,39,0.356,40,1.042,41,1.784,43,1.759,49,1.784,51,0.015,52,0.015,63,1.347,64,0.749,65,1.065,69,0.796,74,1.98,76,2.4,77,2.258,78,2.005,101,0.964,221,2.535,330,1.627,335,2.085,336,1.74,429,2.675,490,1.627,491,2.376,516,2.553,517,1.525,518,1.525,519,2.013,520,2.91,521,2.753,522,2.085,523,1.867,524,2.013,525,3.372,526,3.646,527,1.867,528,3.657,529,3.128,530,1.867,531,3.137,532,3.053,533,1.867,534,1.867,535,1.867]],["title/interfaces/MedicalIllustrationModel.html",[275,1.29,536,2.425]],["body/interfaces/MedicalIllustrationModel.html",[3,0.283,4,0.159,5,0.25,9,0.159,16,0.613,17,2.027,20,0.473,28,0.023,30,0.601,34,1.517,37,0.325,39,0.287,43,1.597,51,0.015,52,0.015,55,1.417,64,0.788,69,0.837,166,1.964,185,2.117,221,2.991,275,2.03,276,1.964,288,2.117,289,2.296,290,2.296,292,2.296,304,2.296,305,4.41,375,3.74,378,2.78,429,2.804,490,2.302,491,2.609,517,1.604,518,1.604,520,2.643,522,2.913,532,3.199,535,2.643,536,3.378,537,2.78,538,5.107,539,4.96,540,5.996,541,3.14,542,3.14,543,3.14,544,3.14,545,3.14,546,3.14,547,3.14,548,3.14,549,3.14,550,3.14,551,3.14,552,3.14,553,3.14,554,3.14,555,3.14]],["title/classes/MedicalIllustrationSelectors.html",[0,0.147,556,3.033]],["body/classes/MedicalIllustrationSelectors.html",[0,0.161,2,0.735,3,0.196,4,0.168,5,0.291,9,0.168,15,0.55,16,0.647,18,3.248,20,0.377,23,0.746,27,0.695,28,0.023,29,0.695,30,0.461,34,1.391,37,0.377,39,0.225,43,1.655,51,0.016,52,0.016,90,3.5,92,1.755,97,1.861,102,2.107,105,2.233,106,1.182,113,1.976,151,2.236,221,2.843,429,2.665,489,2.648,490,2.843,491,2.665,517,2.505,518,2.505,522,2.505,523,2.071,536,4.545,556,4.377,557,3.888,558,5.139,559,5.139,560,3.888,561,5.139,562,3.888,563,3.888,564,5.139,565,3.888,566,3.888]],["title/injectables/MedicalIllustrationState.html",[116,1.021,489,2.425]],["body/injectables/MedicalIllustrationState.html",[0,0.095,3,0.216,4,0.099,5,0.116,9,0.099,10,0.512,15,0.556,16,0.382,19,1.354,20,0.402,23,0.753,27,0.702,28,0.023,29,0.74,30,0.466,37,0.396,39,0.204,40,0.625,45,1.139,51,0.011,52,0.011,64,0.491,69,0.973,88,0.938,92,1.203,97,1.879,101,0.462,102,1.671,106,0.697,107,0.882,113,1.648,116,1.01,117,1.065,119,2.399,124,1.065,126,1.318,132,2.762,151,2.383,154,1.73,155,3.551,160,1.318,161,0.998,165,1.954,166,1.222,167,2.023,169,1.429,175,1.954,188,1.429,190,2.023,195,1.954,196,5.246,197,1.954,198,1.954,220,0.938,221,1.99,334,4.008,335,1.533,404,1.954,405,1.954,408,1.73,414,3,415,1.954,429,2.257,438,1.954,478,1.954,479,1.954,489,2.399,490,2.232,491,1.533,508,2.67,516,2.562,517,2.383,518,2.383,520,2.562,521,1.318,522,0.998,523,1.222,526,2.762,527,3.038,529,2.562,530,3.038,531,2.023,532,2.576,533,3.038,534,3.038,535,2.562,536,1.563,538,3,567,1.954,568,3.522,569,2.294,570,5.642,571,3.522,572,2.294,573,2.294,574,3.522,575,2.294,576,2.294,577,3.522,578,3.522,579,2.294,580,3.522,581,2.294,582,3.522,583,2.294,584,2.294,585,3.522,586,2.294,587,3.522,588,2.294,589,2.294,590,2.294,591,2.294,592,2.294,593,1.954,594,2.294,595,2.294,596,2.294,597,2.294,598,2.294,599,3.522,600,2.294,601,2.294,602,2.294,603,2.294,604,2.294,605,2.294,606,2.294,607,1.954,608,2.294,609,2.294,610,3.522,611,2.294,612,2.294,613,2.294]],["title/classes/RegisterFormat.html",[0,0.147,73,2.045]],["body/classes/RegisterFormat.html",[0,0.25,1,1.751,2,0.713,3,0.19,4,0.163,5,0.254,9,0.163,10,0.879,15,0.648,19,1.45,20,0.277,21,1.622,23,0.548,27,0.51,28,0.023,29,0.51,30,0.339,37,0.33,39,0.35,40,0.894,41,1.723,51,0.016,52,0.016,53,2.166,54,2.349,55,2.18,56,2.822,58,3.021,59,3.137,61,2.569,62,1.288,63,1.45,64,0.807,65,1.146,66,3.224,67,2.166,68,1.751,69,0.856,70,2.349,71,3.769,72,3.383,73,2.893,74,1.949,75,2.569,76,2.317,77,2.18,78,1.936,79,2.569,80,2.349,81,1.45,82,2.166,83,2.569,84,2.569,85,2.569,361,3.212,614,3.771]],["title/interfaces/ScreenModeModel.html",[275,1.29,615,2.425]],["body/interfaces/ScreenModeModel.html",[3,0.256,4,0.219,5,0.256,9,0.219,15,0.543,16,0.843,17,2.483,20,0.372,28,0.022,39,0.294,51,0.019,52,0.019,275,1.836,276,2.701,375,3.823,493,3.158,494,3.158,615,4.138,616,3.453,617,3.453,618,5.07,619,4.593,620,3.736,621,4.138,622,5.174]],["title/classes/ScreenModeSelectors.html",[0,0.147,623,3.033]],["body/classes/ScreenModeSelectors.html",[0,0.179,2,0.819,3,0.219,4,0.187,5,0.219,9,0.187,15,0.59,16,0.72,18,3.01,20,0.318,23,0.629,27,0.586,28,0.023,29,0.586,30,0.389,37,0.361,39,0.251,40,0.769,51,0.017,52,0.017,90,4.588,92,1.882,97,1.568,102,1.775,105,3.482,106,1.316,113,1.665,493,4.263,494,3.975,508,3.433,615,4.347,616,3.754,617,3.754,619,3.754,620,3.166,623,4.695,624,4.331,625,5.512,626,4.331,627,5.512,628,3.689,629,4.331]],["title/injectables/ScreenModeState.html",[116,1.021,492,2.685]],["body/injectables/ScreenModeState.html",[0,0.163,3,0.199,4,0.17,5,0.199,9,0.17,10,0.841,15,0.685,16,0.655,20,0.289,23,0.571,27,0.532,28,0.023,29,0.7,30,0.353,37,0.419,39,0.228,40,0.92,45,1.953,49,2.034,51,0.016,52,0.016,92,1.768,97,1.425,102,1.267,106,1.196,116,1.486,117,1.826,126,2.26,131,2.096,132,2.975,151,1.712,156,2.967,161,1.712,167,3.534,188,2.451,406,2.967,407,2.967,420,2.967,492,3.906,493,4.089,494,3.982,615,3.528,616,3.528,617,3.528,619,3.944,628,3.351,630,3.935,631,5.18,632,4.412,633,3.935,634,5.18,635,3.935,636,3.351,637,3.935,638,4.412,639,3.935]],["title/classes/SendMessage.html",[0,0.147,348,2.685]],["body/classes/SendMessage.html",[0,0.256,2,0.858,3,0.229,4,0.196,5,0.229,9,0.196,10,0.659,20,0.455,21,1.994,23,0.659,25,4.279,27,0.613,28,0.023,29,0.613,30,0.407,37,0.372,39,0.263,41,1.378,51,0.018,52,0.018,64,1.214,65,1.378,74,1.461,78,1.548,166,2.416,275,2.055,345,4.833,348,4.279,353,5.038,355,3.863,381,4.833,640,4.535,641,5.675,642,5.675,643,5.675,644,4.535,645,6.816,646,4.535,647,4.535]],["title/classes/Set.html",[0,0.147,49,1.082]],["body/classes/Set.html",[0,0.189,2,0.865,3,0.231,4,0.198,5,0.231,9,0.246,10,0.664,20,0.336,21,1.473,23,0.664,27,0.618,28,0.023,29,0.618,30,0.411,37,0.3,39,0.265,40,0.812,41,1.39,49,2.035,51,0.018,52,0.018,64,0.978,65,1.39,74,1.473,76,2.331,77,2.193,78,1.561,493,3.553,494,4.054,616,3.885,617,3.885,619,4.234,620,3.57,621,3.885,622,4.858,636,3.895,648,4.573,649,5.704,650,4.573,651,4.573,652,4.573]],["title/classes/Set-1.html",[0,0.123,49,0.906,183,1.712]],["body/classes/Set-1.html",[0,0.199,1,2.238,2,0.669,3,0.178,4,0.299,5,0.178,6,3.385,7,3.385,8,3.011,9,0.208,10,0.976,11,3.011,12,2.03,13,3.737,14,4.675,15,0.698,16,0.588,17,1.97,18,2.926,19,2.266,20,0.499,21,1.138,22,3.011,23,0.797,25,4.137,26,3.417,27,0.478,28,0.023,29,0.478,30,0.317,31,2.408,32,2.564,33,2.408,34,0.957,35,2.03,36,1.538,37,0.232,38,2.408,39,0.279,40,0.856,41,1.074,42,3.635,43,1.553,44,3.635,45,3.062,46,3.635,47,3.635,48,3.635,49,1.979,50,3.011,51,0.015,52,0.015,653,4.821,654,4.821,655,3.535]],["title/classes/SetActiveNode.html",[0,0.147,533,1.897]],["body/classes/SetActiveNode.html",[0,0.25,2,0.634,3,0.169,4,0.145,5,0.235,9,0.145,10,0.933,20,0.246,21,1.08,23,0.487,27,0.453,28,0.023,29,0.453,30,0.301,34,1.445,37,0.305,39,0.351,40,1.023,41,1.751,43,1.856,49,1.839,51,0.014,52,0.014,63,1.289,64,0.717,65,1.019,69,0.761,74,1.949,76,2.474,77,2.327,78,1.968,101,0.675,221,2.477,330,1.557,335,1.459,336,1.665,429,2.634,490,1.557,491,2.322,516,1.787,517,2.023,518,2.023,519,1.926,520,2.477,521,1.926,522,2.508,523,1.787,524,1.926,525,3.476,526,3.597,527,1.787,528,3.589,529,3.071,530,1.787,531,3.476,532,3.25,533,2.477,534,1.787,535,1.787,656,3.354,657,3.354,658,2.856]],["title/classes/SetData.html",[0,0.147,157,2.218]],["body/classes/SetData.html",[0,0.233,2,0.704,3,0.188,4,0.161,5,0.188,9,0.216,10,0.938,15,0.398,20,0.273,21,1.198,23,0.54,27,0.503,28,0.023,29,0.503,30,0.334,37,0.327,39,0.326,40,0.886,41,1.711,49,1.829,51,0.015,52,0.015,62,1.27,63,1.43,64,0.795,65,1.13,69,0.845,74,1.813,78,1.923,87,2.171,88,2.039,91,2.731,94,2.988,100,2.45,101,1.404,107,2.165,108,2.317,120,1.727,121,3.108,124,2.316,129,2.534,141,3.399,157,3.748,324,2.534,325,3.763,326,4.495,329,4.246,330,1.727,331,2.317,332,2.534,333,2.805,334,3.399,335,1.619,336,1.847,337,2.534,338,2.534,339,2.805,659,3.72,660,3.72]],["title/classes/SetMapping.html",[0,0.147,534,1.897]],["body/classes/SetMapping.html",[0,0.251,2,0.638,3,0.17,4,0.146,5,0.27,9,0.146,10,0.934,20,0.248,21,1.087,23,0.49,27,0.456,28,0.023,29,0.456,30,0.303,34,1.642,37,0.306,39,0.351,40,1.026,41,1.756,43,1.724,49,1.844,51,0.014,52,0.014,63,1.297,64,0.722,65,1.025,69,0.766,74,1.954,76,2.479,77,2.333,78,1.973,101,0.679,221,2.816,330,1.566,335,1.468,336,1.675,429,2.73,490,1.566,491,2.33,516,1.798,517,2.032,518,2.032,519,1.938,520,2.488,521,1.938,522,2.032,523,1.798,524,1.938,525,3.484,526,3.604,527,1.798,528,3.599,529,3.079,530,1.798,531,3.075,532,3.012,533,1.798,534,2.488,535,1.798,661,2.874,662,3.374]],["title/classes/SetUri.html",[0,0.147,527,1.897]],["body/classes/SetUri.html",[0,0.251,2,0.636,3,0.17,4,0.145,5,0.235,9,0.145,10,0.933,20,0.247,21,1.082,23,0.488,27,0.454,28,0.023,29,0.454,30,0.302,34,1.64,37,0.305,39,0.351,40,1.024,41,1.753,43,1.858,49,1.841,51,0.014,52,0.014,63,1.292,64,0.719,65,1.021,69,0.763,74,1.951,76,2.476,77,2.329,78,1.969,101,0.676,221,2.48,330,1.56,335,1.462,336,1.668,429,2.727,490,1.56,491,2.51,516,1.79,517,2.026,518,2.026,519,1.93,520,2.481,521,1.93,522,2.026,523,1.79,524,1.93,525,3.479,526,3.762,527,2.481,528,3.593,529,3.073,530,1.79,531,3.069,532,3.007,533,1.79,534,1.79,535,1.79,658,2.862,661,2.862,663,3.36]],["title/classes/SetUriFromIRI.html",[0,0.147,530,1.897]],["body/classes/SetUriFromIRI.html",[0,0.25,2,0.634,3,0.169,4,0.145,5,0.235,9,0.145,10,0.933,20,0.246,21,1.08,23,0.487,27,0.453,28,0.023,29,0.453,30,0.301,34,1.638,37,0.305,39,0.351,40,1.023,41,1.751,43,1.856,49,1.839,51,0.014,52,0.014,63,1.289,64,0.717,65,1.019,69,0.761,74,1.949,76,2.474,77,2.327,78,1.968,101,0.675,221,2.477,330,1.557,335,1.459,336,1.665,429,2.634,490,1.557,491,2.508,516,1.787,517,2.023,518,2.023,519,1.926,520,2.477,521,1.926,522,2.023,523,1.787,524,1.926,525,3.476,526,3.76,527,1.787,528,3.589,529,3.422,530,2.477,531,3.065,532,3.005,533,1.787,534,1.787,535,1.787,664,3.354,665,3.354]],["title/interfaces/SizePoint.html",[147,2.045,275,1.29]],["body/interfaces/SizePoint.html",[3,0.132,4,0.113,5,0.132,9,0.113,15,0.28,16,0.435,17,1.898,20,0.48,28,0.023,30,0.235,31,2.354,32,2.237,34,1.392,36,1.693,37,0.172,39,0.374,51,0.012,52,0.012,55,1.786,62,1.756,68,1.215,69,1.055,81,1.496,87,1.139,88,1.07,91,2.237,94,1.932,96,2.235,100,2.666,101,0.783,107,2.293,120,1.806,134,1.503,135,3.519,136,2.74,140,2.893,143,1.63,145,3.203,147,2.235,149,2.893,174,1.503,176,2.235,185,3.891,186,3.587,189,2.424,209,2.424,210,2.424,215,2.667,217,3.203,220,2.558,222,2.65,231,2.235,234,2.953,244,2.424,275,1.99,276,1.395,277,1.63,278,1.974,279,1.974,280,1.974,281,1.974,282,2.65,283,3.743,284,1.974,285,1.974,286,1.974,287,1.783,288,2.667,289,3.203,290,1.63,291,3.743,292,2.893,293,2.893,294,1.783,295,1.783,296,1.974,297,1.783,298,1.974,299,2.934,300,2.934,301,3.163,302,1.783,303,1.783,304,3.423,305,3.899,306,3.163,307,1.783,308,1.63,309,2.65,310,1.783,311,2.65,312,1.783,313,1.783,314,1.783,315,1.783,316,1.783,317,1.783,318,1.974,319,2.934,320,1.974,321,2.934,322,1.974,323,1.974]],["title/interfaces/Source.html",[4,0.154,275,1.29]],["body/interfaces/Source.html",[3,0.217,4,0.306,5,0.217,6,2.474,7,2.474,9,0.186,10,0.626,16,0.717,17,2.245,20,0.483,28,0.023,31,1.761,32,1.875,34,1.821,37,0.282,39,0.35,51,0.017,52,0.017,106,1.309,131,2.295,167,3.155,177,3.249,178,4.142,220,2.749,275,1.56,276,2.295,666,3.669,667,5.493,668,5.73,669,5.73,670,5.425,671,2.934,672,3.669,673,3.669,674,3.249]],["title/classes/SourceListSelectors.html",[0,0.147,675,3.033]],["body/classes/SourceListSelectors.html",[0,0.244,2,0.776,3,0.207,4,0.296,5,0.207,6,3.057,7,3.057,9,0.23,13,3.626,14,3.626,15,0.694,16,0.682,18,2.934,20,0.301,23,0.596,27,0.555,28,0.023,29,0.555,30,0.368,31,2.556,32,2.316,37,0.387,38,2.794,39,0.238,40,0.728,43,1.714,51,0.017,52,0.017,92,1.817,97,1.486,101,1.258,102,1.714,105,3.394,106,1.247,113,1.577,214,4.014,220,2.176,495,4.414,671,4.259,675,4.534,676,4.103,677,5.323,678,5.323,679,5.323,680,4.103,681,4.103,682,4.103,683,4.103]],["title/injectables/SourceListState.html",[116,1.021,495,2.425]],["body/injectables/SourceListState.html",[0,0.137,1,2.971,3,0.167,4,0.277,5,0.167,6,3.045,7,3.045,9,0.143,10,0.481,12,3.293,13,3.905,14,4.104,15,0.733,16,0.551,20,0.338,23,0.67,26,2.871,27,0.623,28,0.023,29,0.717,30,0.414,31,1.884,32,2.006,33,2.256,37,0.395,38,2.256,39,0.192,40,1.018,42,3.476,43,1.846,44,4.323,45,2.632,46,3.476,47,3.476,48,3.476,49,1.984,51,0.014,52,0.014,77,1.773,92,1.574,97,1.67,101,0.928,102,1.485,106,1.007,116,1.322,117,1.538,119,3.14,126,2.648,131,2.456,132,2.648,151,2.006,156,2.498,161,1.441,188,2.063,406,2.498,407,2.498,420,2.498,495,3.14,632,3.927,638,4.516,671,2.256,674,4.826,684,3.313,685,3.313,686,4.61,687,3.313,688,3.313,689,3.313,690,3.313,691,3.313]],["title/injectables/StateAnalyticsPluginService.html",[116,1.021,496,2.425]],["body/injectables/StateAnalyticsPluginService.html",[0,0.098,3,0.119,4,0.102,5,0.119,9,0.156,10,0.967,12,1.356,15,0.652,16,0.393,19,1.384,20,0.485,23,0.343,26,2.242,27,0.319,28,0.023,29,0.319,30,0.212,34,1.181,35,1.356,36,2.818,37,0.32,39,0.253,40,1.022,43,1.855,45,1.787,51,0.011,52,0.011,69,1.193,92,1.229,101,0.475,102,1.692,106,0.717,113,2.021,116,1.507,117,1.096,132,2.506,136,1.918,151,1.899,154,2.714,160,1.356,161,1.027,174,2.067,190,2.803,204,4.157,220,0.965,326,2.452,331,1.47,338,4.458,376,1.78,394,3.29,413,2.011,484,1.78,488,2.714,496,2.972,497,4.227,498,5.286,505,1.78,506,1.78,507,1.78,508,1.47,525,1.356,620,2.067,621,1.608,692,2.714,693,2.714,694,1.78,695,4.881,696,4.881,697,3.6,698,5.938,699,4.881,700,2.361,701,3.6,702,3.6,703,4.363,704,4.363,705,2.361,706,3.716,707,2.361,708,3.6,709,2.361,710,2.361,711,3.066,712,3.066,713,2.714,714,2.011,715,3.066,716,2.011,717,2.011,718,2.011,719,2.011,720,2.011,721,2.011,722,2.361,723,3.066,724,3.066,725,2.361,726,2.011,727,3.716,728,2.011,729,2.011,730,3.066,731,3.066,732,2.011,733,2.361,734,2.361,735,2.361,736,2.361,737,2.361,738,2.361,739,2.361,740,2.361,741,2.361,742,2.361,743,2.361,744,2.361,745,2.361,746,2.361,747,2.361,748,2.361,749,2.361,750,2.361,751,2.361,752,3.6,753,4.363,754,2.361,755,2.361,756,2.361,757,2.361,758,2.011,759,2.011]],["title/classes/TissueLibrarySelectors.html",[0,0.147,760,3.033]],["body/classes/TissueLibrarySelectors.html",[0,0.242,2,0.763,3,0.203,4,0.174,5,0.203,9,0.227,15,0.665,16,0.671,18,2.909,20,0.43,23,0.586,27,0.545,28,0.023,29,0.545,30,0.362,37,0.407,39,0.233,40,0.716,43,1.695,51,0.016,52,0.016,64,0.862,92,1.797,97,1.46,101,1.33,102,1.695,105,3.366,106,1.225,113,1.55,166,2.148,214,3.969,220,2.151,231,3.366,499,4.389,500,3.869,510,3.585,511,3.585,514,3.969,529,2.148,532,2.613,760,4.483,761,4.032,762,5.263,763,5.263,764,5.263,765,4.684,766,4.032,767,4.032,768,5.263,769,4.032,770,3.434,771,4.032,772,4.032,773,4.032]],["title/injectables/TissueLibraryState.html",[116,1.021,499,2.425]],["body/injectables/TissueLibraryState.html",[0,0.156,3,0.191,4,0.163,5,0.191,9,0.218,10,0.549,15,0.737,16,0.629,19,1.939,20,0.277,23,0.549,27,0.511,28,0.023,29,0.682,30,0.339,33,3.435,37,0.426,39,0.219,40,0.671,43,1.624,51,0.016,52,0.016,64,0.808,77,1.939,92,1.722,97,1.369,101,1.355,102,1.624,106,1.149,113,1.453,116,1.447,117,1.755,119,3.435,124,1.755,126,2.897,131,2.687,152,4.296,155,3.536,160,2.171,161,1.645,166,2.014,169,2.354,190,2.897,194,3.22,335,2.195,408,2.85,499,3.435,500,4.193,510,3.435,511,3.435,514,2.85,670,3.22,732,3.22,765,2.85,770,3.22,774,3.78,775,5.044,776,5.044,777,5.159,778,3.78,779,5.044,780,3.78,781,3.78,782,3.78,783,3.78]],["title/dependencies.html",[784,2.539,785,3.227]],["body/dependencies.html",[28,0.022,51,0.02,52,0.02,161,2.383,785,4.795,786,5.478,787,5.478,788,5.478,789,5.478,790,6.359]],["title/miscellaneous/functions.html",[791,1.712,792,3.645]],["body/miscellaneous/functions.html",[9,0.199,16,0.767,20,0.421,27,0.775,28,0.022,29,0.775,30,0.515,34,1.767,36,2.715,51,0.018,52,0.018,56,2.495,58,2.457,62,2.13,72,2.847,76,1.885,102,1.847,136,2.457,151,2.007,376,3.478,497,4.25,620,2.649,621,3.141,692,3.478,693,3.478,694,4.324,713,3.478,716,3.928,717,3.928,718,3.928,719,3.928,720,3.928,721,3.928,723,3.928,724,3.928,791,2.649,792,3.928,793,5.734,794,3.478,795,5.734,796,3.928,797,3.478,798,4.612]],["title/index.html",[16,0.496,799,2.981,800,2.981]],["body/index.html",[15,0.678,28,0.02,51,0.02,52,0.02,501,4.634,801,5.441,802,6.334,803,5.441,804,6.334,805,6.334,806,5.441,807,5.441,808,5.441]],["title/modules.html",[482,3.654]],["body/modules.html",[28,0.02,51,0.02,52,0.02,365,4.23,481,4.23,482,4.23,809,5.609,810,5.609]],["title/overview.html",[811,4.127]],["body/overview.html",[2,1.026,28,0.02,51,0.02,52,0.02,117,2.517,183,3.115,276,2.889,480,4.619,785,4.767,811,4.619,812,6.322,813,5.423,814,5.423,815,5.423,816,5.423,817,5.423]],["title/properties.html",[17,1.749,784,2.539]],["body/properties.html",[17,2.3,28,0.021,51,0.02,52,0.02,818,5.629,819,5.629]],["title/miscellaneous/typealiases.html",[791,1.712,820,4.279]],["body/miscellaneous/typealiases.html",[4,0.2,6,1.918,7,1.918,10,0.773,15,0.358,16,0.556,20,0.52,28,0.014,31,1.365,32,1.453,36,1.453,51,0.014,52,0.014,55,1.284,58,2.837,59,3.317,66,2.837,68,1.55,81,1.284,87,2.017,88,1.895,91,2.017,100,2.503,101,0.672,107,2.324,118,3.496,120,2.152,126,3.304,131,2.47,135,1.918,167,3.471,176,2.663,177,4.016,178,4.558,179,2.845,215,1.918,234,1.918,244,2.888,277,3.896,288,2.663,291,4.117,292,4.074,293,2.08,294,2.275,295,2.275,297,3.158,308,3.583,368,4.338,384,4.536,500,2.08,510,2.275,511,2.275,517,2.017,518,2.017,522,2.017,537,3.496,567,3.949,570,3.949,666,4.536,671,3.158,672,3.949,673,3.949,674,3.496,765,3.496,777,3.949,791,1.918,794,4.558,797,2.518,821,3.34,822,5.328,823,3.949,824,4.636,825,4.636,826,5.326,827,5.148,828,6.044,829,6.044,830,5.753,831,2.845,832,2.845,833,2.845,834,2.845,835,3.34]],["title/miscellaneous/variables.html",[791,1.712,836,3.645]],["body/miscellaneous/variables.html",[3,0.116,5,0.068,9,0.099,10,0.753,12,0.774,15,0.144,16,0.224,17,1.219,20,0.38,26,1.858,28,0.023,30,0.121,31,1.75,32,1.714,34,0.952,35,4.036,36,3.033,45,0.669,51,0.007,52,0.007,54,0.84,55,0.518,56,1.298,62,2.232,64,0.288,66,1.22,68,0.626,70,0.84,72,1.746,81,1.147,87,1.298,88,1.219,91,0.996,100,0.996,101,0.461,107,0.88,116,0.387,118,2.249,134,0.774,135,2.019,136,0.718,140,1.858,143,0.84,144,1.95,145,2.666,147,0.774,149,2.843,170,1.95,171,1.95,172,2.541,174,0.774,176,0.774,180,1.95,181,1.95,182,1.017,183,1.315,184,1.95,185,3.377,186,1.426,187,1.148,189,2.666,209,1.426,210,1.426,215,1.315,217,1.426,220,2.046,231,1.315,234,1.315,277,2.19,282,0.918,283,2.395,288,0.774,289,2.453,290,2.19,293,1.858,301,2.395,302,0.918,303,0.918,304,3.119,305,4.051,306,2.032,307,1.559,308,0.84,309,1.559,310,0.918,311,2.032,312,0.918,313,0.918,314,0.918,315,0.918,316,0.918,317,0.918,324,1.559,330,1.062,331,1.426,332,0.918,337,1.559,343,1.017,353,1.017,366,2.97,378,3.622,379,1.148,380,1.148,394,2.249,409,1.95,410,1.95,429,0.996,443,3.354,484,1.017,488,1.017,491,1.53,496,0.918,497,2.916,505,1.017,506,1.017,507,1.017,508,1.426,517,0.996,518,0.996,519,1.315,522,0.996,524,0.774,537,1.726,541,1.148,542,1.148,543,1.148,544,1.148,545,1.148,546,1.148,547,1.148,548,1.148,549,1.148,550,1.148,551,1.148,552,1.148,553,1.148,554,1.148,555,1.148,593,1.148,607,1.95,620,0.774,668,1.95,669,3.646,692,1.726,693,1.017,694,2.651,706,1.95,711,2.541,712,2.541,713,1.017,714,1.95,715,1.148,726,1.148,727,2.541,728,1.148,729,1.148,730,1.148,731,1.148,758,1.148,759,1.95,791,0.774,794,2.651,796,2.541,797,1.017,822,3.646,823,1.95,827,2.995,831,2.995,832,2.995,833,2.995,834,2.541,836,1.148,837,4.804,838,6.647,839,1.348,840,2.289,841,6.31,842,2.289,843,1.348,844,2.289,845,2.983,846,2.289,847,3.516,848,2.289,849,2.289,850,2.289,851,2.289,852,2.289,853,2.289,854,2.289,855,2.289,856,2.289,857,2.289,858,2.289,859,2.289,860,5.007,861,2.289,862,2.289,863,4.565,864,3.516,865,2.983,866,2.983,867,2.289,868,3.516,869,2.289,870,1.348,871,1.348,872,1.348,873,3.938,874,1.348,875,1.348,876,1.348,877,1.348,878,5.183,879,5.336,880,1.348,881,1.348,882,2.983,883,1.348,884,1.348,885,2.983,886,2.289,887,1.348,888,1.348,889,1.348,890,1.348,891,1.348,892,1.348,893,1.348,894,1.348,895,2.289,896,2.289,897,1.348,898,1.348,899,3.516,900,1.348,901,1.348,902,1.348,903,1.348,904,1.348,905,1.348,906,1.348,907,1.348,908,1.348,909,1.348,910,1.348,911,1.348,912,1.348,913,1.348,914,2.289,915,1.348,916,1.348,917,1.348,918,1.348,919,1.348,920,1.348,921,1.348,922,1.348,923,1.348,924,1.348,925,1.348,926,1.348,927,3.516,928,1.348,929,1.348,930,1.348,931,1.348,932,1.348,933,1.348,934,1.348,935,1.348,936,2.289,937,1.348,938,1.348,939,1.348,940,2.289,941,1.348,942,1.348]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":182,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":819,"title":{},"body":{"properties.html":{}}}],["000000",{"_index":181,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":183,"title":{"classes/Load-1.html":{},"classes/Set-1.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["15.1.0",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":239,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["2.3.0",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["23",{"_index":816,"title":{},"body":{"overview.html":{}}}],["2dftu",{"_index":550,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":187,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":817,"title":{},"body":{"overview.html":{}}}],["8",{"_index":815,"title":{},"body":{"overview.html":{}}}],["_ctx",{"_index":356,"title":{},"body":{"injectables/ContactState.html":{}}}],["action",{"_index":10,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('[contact",{"_index":647,"title":{},"body":{"classes/SendMessage.html":{}}}],["action('[screenmode",{"_index":652,"title":{},"body":{"classes/Set.html":{}}}],["action('[tissuelibrary",{"_index":515,"title":{},"body":{"classes/Load-1.html":{}}}],["action('add",{"_index":79,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('clear",{"_index":83,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('computeaggregate",{"_index":339,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["action('download",{"_index":84,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('load",{"_index":336,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["action('register",{"_index":75,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('set",{"_index":528,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["action('setdata",{"_index":333,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["action(add",{"_index":686,"title":{},"body":{"injectables/SourceListState.html":{}}}],["action(addentry",{"_index":385,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(clearentries",{"_index":388,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(computeaggregate",{"_index":127,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action(download",{"_index":392,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(load",{"_index":152,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/TissueLibraryState.html":{}}}],["action(loadreferenceorgans",{"_index":571,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(registerformat",{"_index":402,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(sendmessage",{"_index":350,"title":{},"body":{"injectables/ContactState.html":{}}}],["action(set",{"_index":632,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["action(setactivenode",{"_index":574,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(setdata",{"_index":158,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action(setmapping",{"_index":577,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturi",{"_index":582,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturifromiri",{"_index":585,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action.summaries",{"_index":202,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action_log",{"_index":750,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["actiongroup",{"_index":63,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["actiongroup('download",{"_index":70,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('medical",{"_index":524,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":332,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":394,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["actions.ts",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":531,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["add",{"_index":1,"title":{"classes/Add.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["add(undefined",{"_index":685,"title":{},"body":{"injectables/SourceListState.html":{}}}],["addd",{"_index":61,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["added",{"_index":33,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["addentry",{"_index":53,"title":{"classes/AddEntry.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["addentry(ctx",{"_index":383,"title":{},"body":{"injectables/DownloadState.html":{}}}],["adding",{"_index":11,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["adds",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["aggregate",{"_index":100,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregate[string",{"_index":112,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["aggregate[string]['rows'][number",{"_index":296,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["aggregated",{"_index":285,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["aggregatedata",{"_index":203,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregatedata[key",{"_index":212,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregaterow",{"_index":176,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregaterow[2",{"_index":298,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["aggregaterowentry",{"_index":297,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":93,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["aggregates(state",{"_index":95,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["alias",{"_index":178,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":821,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":319,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["analytics",{"_index":497,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["anatomical_structure_of",{"_index":545,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["anchor",{"_index":463,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.click",{"_index":468,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.download",{"_index":466,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.href",{"_index":467,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.remove",{"_index":469,"title":{},"body":{"injectables/DownloadState.html":{}}}],["angular/common",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":405,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["angular/core",{"_index":161,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{}}}],["another",{"_index":302,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apptitle",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":673,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":31,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":756,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["available",{"_index":365,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules.html":{}}}],["b",{"_index":266,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bar",{"_index":321,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["base",{"_index":330,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":228,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["being",{"_index":703,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["between",{"_index":142,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bigint",{"_index":715,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["biomarker",{"_index":234,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":460,"title":{},"body":{"injectables/DownloadState.html":{}}}],["blob([entry.data",{"_index":436,"title":{},"body":{"injectables/DownloadState.html":{}}}],["boolean",{"_index":620,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boolean/number/string/null/bigint/undefined",{"_index":721,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":282,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["brand('downloadformatid",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":437,"title":{},"body":{"injectables/DownloadState.html":{}}}],["browse",{"_index":810,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":459,"title":{},"body":{"injectables/DownloadState.html":{}}}],["builtin",{"_index":411,"title":{},"body":{"injectables/DownloadState.html":{}}}],["calculates",{"_index":138,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["called",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["canceluncompleted",{"_index":578,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["case",{"_index":428,"title":{},"body":{"injectables/DownloadState.html":{}}}],["cell",{"_index":107,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell_schema",{"_index":301,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["cell_schema.array",{"_index":310,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["cell_schema.shape['metadata",{"_index":317,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_aggregate_schema",{"_index":311,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_schema",{"_index":293,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellid",{"_index":219,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummary",{"_index":91,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellsummary[string]['entries",{"_index":224,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummaryselectors",{"_index":86,"title":{"classes/CellSummarySelectors.html":{}},"body":{"classes/CellSummarySelectors.html":{}}}],["cellsummarystate",{"_index":109,"title":{"injectables/CellSummaryState.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"modules/HraStateModule.html":{}}}],["cellsummarystatemodel",{"_index":96,"title":{"interfaces/CellSummaryStateModel.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["check",{"_index":717,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["class",{"_index":0,"title":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{},"overview.html":{}}}],["clear",{"_index":80,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries",{"_index":82,"title":{"classes/ClearEntries.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries(ctx",{"_index":387,"title":{},"body":{"injectables/DownloadState.html":{}}}],["client",{"_index":592,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["color",{"_index":140,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":318,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["columnid",{"_index":235,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindex",{"_index":241,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices",{"_index":230,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices[columnid",{"_index":237,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnlabel",{"_index":236,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns",{"_index":210,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["columns.length",{"_index":238,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns.push(columnlabel",{"_index":240,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["compute",{"_index":325,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["computeaggregate",{"_index":121,"title":{"classes/ComputeAggregate.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["computeaggregate(ctx",{"_index":125,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["computeaggregate(data",{"_index":199,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["computes",{"_index":129,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["constant",{"_index":308,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["constructor(data",{"_index":659,"title":{},"body":{"classes/SetData.html":{}}}],["constructor(format",{"_index":361,"title":{},"body":{"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["constructor(id",{"_index":57,"title":{},"body":{"classes/AddEntry.html":{},"classes/Load.html":{}}}],["constructor(iri",{"_index":664,"title":{},"body":{"classes/SetUriFromIRI.html":{}}}],["constructor(isfullscreen",{"_index":650,"title":{},"body":{"classes/Set.html":{}}}],["constructor(message",{"_index":644,"title":{},"body":{"classes/SendMessage.html":{}}}],["constructor(node",{"_index":656,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["constructor(public",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":41,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["constructor(sourcelist",{"_index":22,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(summaries",{"_index":327,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["constructor(url",{"_index":661,"title":{},"body":{"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["contact",{"_index":343,"title":{},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{},"miscellaneous/variables.html":{}}}],["contact.actions",{"_index":357,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactacknowledgement",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactactions.sendmessage",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactmessage",{"_index":645,"title":{},"body":{"classes/SendMessage.html":{}}}],["contactservice",{"_index":347,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactstate",{"_index":340,"title":{"injectables/ContactState.html":{}},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{}}}],["containing",{"_index":286,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["contains",{"_index":283,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":379,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":126,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["conversion",{"_index":475,"title":{},"body":{"injectables/DownloadState.html":{}}}],["convert",{"_index":377,"title":{},"body":{"injectables/DownloadState.html":{}}}],["converted",{"_index":457,"title":{},"body":{"injectables/DownloadState.html":{}}}],["corresponding",{"_index":222,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["count",{"_index":215,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":207,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["counts[rowid",{"_index":243,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["create",{"_index":337,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["createcustomtype",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('gradient",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('size",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdownloadformatid('png",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid('svg",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid(id",{"_index":798,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('about",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('embed",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('exploreftu",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('illustration",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpage",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpagereadmore",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('portal",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('producttitle",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('apptitle",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('contactacknowledgement",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegend",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegendinfo",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthdescription",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthimg",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthmoretext",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthtitle",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrodescription",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintroimg",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintromoretext",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintropartners",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrotitle",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metrics",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricslogo",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricstitle",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('productlogourl",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('producttitle",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegend",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegendinfo",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":76,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":131,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.dispatch([new",{"_index":416,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.getstate",{"_index":424,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.patchstate",{"_index":213,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ctx.setstate",{"_index":419,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.setstate(data",{"_index":783,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["current",{"_index":43,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["data",{"_index":101,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dataservice",{"_index":194,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/TissueLibraryState.html":{}}}],["decorators",{"_index":97,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["default_gradients",{"_index":180,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["default_loggable_actions",{"_index":711,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["default_sizes",{"_index":184,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":188,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["define",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["defines",{"_index":329,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["dependencies",{"_index":785,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":736,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["depth",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describes",{"_index":278,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":716,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["diff",{"_index":250,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["different",{"_index":380,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":473,"title":{},"body":{"injectables/DownloadState.html":{}}}],["discriminated",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":197,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["dispatch(new",{"_index":198,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["dispatched",{"_index":704,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["display",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.body.appendchild(anchor",{"_index":465,"title":{},"body":{"injectables/DownloadState.html":{}}}],["document.createelement('a",{"_index":464,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download",{"_index":56,"title":{"classes/Download.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["download(ctx",{"_index":391,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.action",{"_index":412,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.model",{"_index":67,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["download_entry",{"_index":831,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format",{"_index":832,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format_id",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_model",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadactions.download",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadcontext",{"_index":384,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloaddata(blob",{"_index":461,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadentry",{"_index":59,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformat",{"_index":66,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadformatid",{"_index":58,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformatid:'${id",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadmodel",{"_index":368,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloadremotedata(url",{"_index":477,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloads",{"_index":471,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadselectors",{"_index":363,"title":{"classes/DownloadSelectors.html":{}},"body":{"classes/DownloadSelectors.html":{}}}],["downloadstate",{"_index":373,"title":{"injectables/DownloadState.html":{}},"body":{"injectables/DownloadState.html":{},"modules/HraStateModule.html":{}}}],["draft.entries",{"_index":423,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.entries[id",{"_index":422,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.formats[format.id",{"_index":421,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.isfullscreen",{"_index":639,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["draft.push(...sourcelist",{"_index":690,"title":{},"body":{"injectables/SourceListState.html":{}}}],["each",{"_index":217,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["effectively",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["embed",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entires",{"_index":390,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entries",{"_index":81,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entries.reduce>((res",{"_index":225,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["entries[format",{"_index":425,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry",{"_index":55,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/RegisterFormat.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.url",{"_index":432,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry?.type",{"_index":427,"title":{},"body":{"injectables/DownloadState.html":{}}}],["error('cannot",{"_index":439,"title":{},"body":{"injectables/DownloadState.html":{}}}],["error('reference",{"_index":602,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["event",{"_index":743,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["execute",{"_index":808,"title":{},"body":{"index.html":{}}}],["exist_asctb",{"_index":551,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["explore",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploreftu",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["extends",{"_index":74,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["extension",{"_index":443,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":331,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["fakebase",{"_index":445,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fakebase).pathname",{"_index":449,"title":{},"body":{"injectables/DownloadState.html":{}}}],["false",{"_index":637,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["feature",{"_index":281,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["fetch",{"_index":474,"title":{},"body":{"injectables/DownloadState.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":430,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fileurl",{"_index":476,"title":{},"body":{"injectables/DownloadState.html":{}}}],["finalpercentage",{"_index":253,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["finding",{"_index":587,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["form",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":72,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["format.id",{"_index":371,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats",{"_index":366,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["formats(state",{"_index":367,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats.ts",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats[id",{"_index":444,"title":{},"body":{"injectables/DownloadState.html":{}}}],["formatted",{"_index":458,"title":{},"body":{"injectables/DownloadState.html":{}}}],["found",{"_index":604,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ftu",{"_index":593,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["ftuservice",{"_index":594,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["full",{"_index":627,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["fullscreen",{"_index":622,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{}}}],["function",{"_index":722,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["functions",{"_index":792,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtion",{"_index":720,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":262,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ga",{"_index":733,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["generated",{"_index":801,"title":{},"body":{"index.html":{}}}],["getactiontypefrominstance",{"_index":707,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getactiontypefrominstance(action",{"_index":745,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getcellcountmap(entries",{"_index":223,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["getrowsandcolumns",{"_index":229,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["gets",{"_index":214,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["getsourcelist",{"_index":678,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getsourcelist(state",{"_index":679,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getstate",{"_index":597,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["getstate().referenceorgans",{"_index":598,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["getting",{"_index":799,"title":{"index.html":{}},"body":{}}],["given",{"_index":141,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["google",{"_index":695,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["googleanalyticsservice",{"_index":709,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["gradient",{"_index":145,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["gradientlegend",{"_index":170,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["gradientlegendinfo",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientpoint",{"_index":134,"title":{"interfaces/GradientPoint.html":{}},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["gradients",{"_index":191,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["graph",{"_index":809,"title":{},"body":{"modules.html":{}}}],["group",{"_index":68,"title":{},"body":{"classes/AddEntry.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guess",{"_index":441,"title":{},"body":{"injectables/DownloadState.html":{}}}],["guessfilename(ctx",{"_index":442,"title":{},"body":{"injectables/DownloadState.html":{}}}],["handle",{"_index":696,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handle(state",{"_index":697,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handler",{"_index":179,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/typealiases.html":{}}}],["handler's",{"_index":672,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":701,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handling",{"_index":119,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["hasdata",{"_index":370,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["header",{"_index":612,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["helper",{"_index":177,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["highpoint",{"_index":249,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["highpoint.percentage",{"_index":251,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["hra",{"_index":64,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["hrastatemodule",{"_index":481,"title":{"modules/HraStateModule.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["http",{"_index":414,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["httpclient",{"_index":404,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["https://base.com",{"_index":446,"title":{},"body":{"injectables/DownloadState.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ids",{"_index":173,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ids.ts",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illustration",{"_index":491,"title":{},"body":{"modules/HraStateModule.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions",{"_index":590,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.actions.ts",{"_index":519,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions.ts:10",{"_index":663,"title":{},"body":{"classes/SetUri.html":{}}}],["illustration.actions.ts:23",{"_index":665,"title":{},"body":{"classes/SetUriFromIRI.html":{}}}],["illustration.actions.ts:36",{"_index":657,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["illustration.actions.ts:49",{"_index":662,"title":{},"body":{"classes/SetMapping.html":{}}}],["illustration.model",{"_index":523,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["illustration.model.ts",{"_index":537,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustration.selectors.ts",{"_index":557,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:14",{"_index":562,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:22",{"_index":560,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state",{"_index":563,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state.ts",{"_index":567,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["illustration.state.ts:34",{"_index":583,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:44",{"_index":586,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:62",{"_index":575,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:70",{"_index":579,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:81",{"_index":572,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration/medical",{"_index":518,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustrations",{"_index":568,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["image",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immer",{"_index":407,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["implements",{"_index":413,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["imports",{"_index":502,"title":{},"body":{"modules/HraStateModule.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":642,"title":{},"body":{"classes/SendMessage.html":{}}}],["inferred",{"_index":830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":287,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["init",{"_index":399,"title":{},"body":{"injectables/DownloadState.html":{}}}],["initializes",{"_index":25,"title":{},"body":{"classes/Add.html":{},"classes/SendMessage.html":{},"classes/Set-1.html":{}}}],["inject",{"_index":160,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["inject(contactservice",{"_index":359,"title":{},"body":{"injectables/ContactState.html":{}}}],["inject(googleanalyticsservice",{"_index":734,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["inject(httpclient",{"_index":415,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["inject(tissueftuservice",{"_index":195,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["inject(tissuelibraryservice",{"_index":781,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["injectable",{"_index":116,"title":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":117,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"overview.html":{}}}],["injectiontoken",{"_index":705,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["injectiontoken('loggable",{"_index":729,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":732,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["input",{"_index":718,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["inset",{"_index":555,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["instance",{"_index":77,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["interface",{"_index":275,"title":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{}},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/SendMessage.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{}}}],["interfaces",{"_index":276,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"overview.html":{}}}],["interpolatecolor",{"_index":122,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatecolor(points",{"_index":133,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolated",{"_index":139,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatesize",{"_index":123,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatesize(points",{"_index":146,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["intro",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iri",{"_index":529,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{}}}],["isfullscreen",{"_index":619,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["isfullscreen(state",{"_index":625,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["isprimitive",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isprimitive(value",{"_index":723,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["item",{"_index":299,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["json.stringify(action",{"_index":747,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["key",{"_index":204,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["label",{"_index":185,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":294,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["lanading",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpage",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthdescription",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthimg",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthmoretext",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthtitle",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedescription",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintroimg",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintromoretext",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagepartners",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagereadmore",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagetitle",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":189,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":501,"title":{},"body":{"modules/HraStateModule.html":{},"index.html":{}}}],["library.actions",{"_index":780,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.actions.ts",{"_index":512,"title":{},"body":{"classes/Load-1.html":{}}}],["library.model",{"_index":770,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["library.model.ts",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["library.selectors.ts",{"_index":761,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.selectors.ts:14",{"_index":767,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state",{"_index":771,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state.ts",{"_index":774,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.state.ts:22",{"_index":778,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library/tissue",{"_index":511,"title":{},"body":{"classes/Load-1.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["link",{"_index":668,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["linkid",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistryactions.navigate",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":12,"title":{},"body":{"classes/Add.html":{},"modules/HraStateModule.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["list.actions",{"_index":689,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.actions.ts",{"_index":8,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["list.actions.ts:17",{"_index":654,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:22",{"_index":655,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:6",{"_index":24,"title":{},"body":{"classes/Add.html":{}}}],["list.model",{"_index":38,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["list.model.ts",{"_index":666,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["list.selectors.ts",{"_index":676,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.selectors.ts:13",{"_index":681,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state",{"_index":682,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state.ts",{"_index":684,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:20",{"_index":687,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:34",{"_index":688,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list/source",{"_index":7,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":124,"title":{"classes/Load.html":{},"classes/Load-1.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"injectables/TissueLibraryState.html":{}}}],["load(ref.object.file",{"_index":606,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["load(undefined",{"_index":150,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["loading",{"_index":513,"title":{},"body":{"classes/Load-1.html":{}}}],["loadreferenceorgans",{"_index":516,"title":{"classes/LoadReferenceOrgans.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["loadreferenceorgans(undefined",{"_index":569,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["loads",{"_index":335,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/TissueLibraryState.html":{}}}],["logaction(action",{"_index":744,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["loggable",{"_index":712,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggable_actions",{"_index":727,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggabletypes",{"_index":737,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logged",{"_index":728,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":702,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logging",{"_index":735,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["login",{"_index":758,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logo",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logs",{"_index":741,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["lowpoint",{"_index":247,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["lowpoint.percentage",{"_index":252,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["managing",{"_index":342,"title":{},"body":{"injectables/ContactState.html":{}}}],["map",{"_index":541,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["mapentry",{"_index":522,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mapping",{"_index":221,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["mapping(state",{"_index":558,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["match",{"_index":603,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["matching",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(rgb1[0",{"_index":259,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[1",{"_index":263,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[2",{"_index":267,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["max",{"_index":273,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["medical",{"_index":490,"title":{},"body":{"modules/HraStateModule.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["medicalillustration",{"_index":591,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationcontext",{"_index":570,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["medicalillustrationmodel",{"_index":536,"title":{"interfaces/MedicalIllustrationModel.html":{}},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationselectors",{"_index":556,"title":{"classes/MedicalIllustrationSelectors.html":{}},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["medicalillustrationstate",{"_index":489,"title":{"injectables/MedicalIllustrationState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["message",{"_index":353,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":345,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["metadata",{"_index":307,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":352,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{}}}],["methods",{"_index":92,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["metrics",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricslogo",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricstitle",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["min",{"_index":271,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["miscellaneous",{"_index":791,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":494,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["mode.actions",{"_index":635,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.actions.ts",{"_index":648,"title":{},"body":{"classes/Set.html":{}}}],["mode.actions.ts:4",{"_index":651,"title":{},"body":{"classes/Set.html":{}}}],["mode.model",{"_index":628,"title":{},"body":{"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["mode.model.ts",{"_index":618,"title":{},"body":{"interfaces/ScreenModeModel.html":{}}}],["mode.selectors.ts",{"_index":624,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.selectors.ts:14",{"_index":626,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.state.ts",{"_index":630,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.state.ts:22",{"_index":633,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode/screen",{"_index":617,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["model",{"_index":375,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{}}}],["module",{"_index":480,"title":{"modules/HraStateModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":482,"title":{"modules.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["more",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":507,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["name.includes",{"_index":455,"title":{},"body":{"injectables/DownloadState.html":{}}}],["name}${extension",{"_index":456,"title":{},"body":{"injectables/DownloadState.html":{}}}],["needs",{"_index":752,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["new",{"_index":45,"title":{},"body":{"classes/Add.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":698,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["next(state",{"_index":740,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngmodule",{"_index":486,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngx",{"_index":710,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxs",{"_index":398,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxs/store",{"_index":106,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["ngxs_plugins",{"_index":488,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["ngxsmodule",{"_index":487,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsmodule.forfeature",{"_index":503,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsnextpluginfn",{"_index":699,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxsoninit",{"_index":382,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsoninit(ctx",{"_index":396,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsplugin",{"_index":708,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["node",{"_index":532,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{}}}],["node_name",{"_index":547,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":724,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":136,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":303,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":802,"title":{},"body":{"index.html":{}}}],["object",{"_index":220,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"injectables/MedicalIllustrationState.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["object.values(formats).filter(hasdata",{"_index":372,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["object.values(state.aggregate",{"_index":114,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["objects",{"_index":32,"title":{},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":155,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["occurrences",{"_index":216,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ones",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["ontologyid",{"_index":548,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":30,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["organ",{"_index":521,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["organ_id",{"_index":544,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organ_label",{"_index":543,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organs",{"_index":535,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["out",{"_index":814,"title":{},"body":{"overview.html":{}}}],["overall",{"_index":279,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["overview",{"_index":811,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":784,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papaparse",{"_index":589,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param",{"_index":40,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["param0",{"_index":595,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param1",{"_index":596,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":588,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parse(result",{"_index":611,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parsedresult",{"_index":610,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parses",{"_index":580,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["partial",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partners",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchstate",{"_index":196,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["path",{"_index":447,"title":{},"body":{"injectables/DownloadState.html":{}}}],["path.split('/').filter((seg",{"_index":451,"title":{},"body":{"injectables/DownloadState.html":{}}}],["payload",{"_index":26,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["peer",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["percentage",{"_index":135,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["percentages",{"_index":320,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["pipe",{"_index":608,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["plugin",{"_index":498,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["plugin.service.ts",{"_index":694,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["plugin.service.ts:51",{"_index":700,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["plugin/default",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugin/state",{"_index":693,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["png_format",{"_index":409,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["point",{"_index":323,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["point.percentage",{"_index":246,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points",{"_index":144,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["points[0",{"_index":272,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points[index",{"_index":248,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points[points.length",{"_index":274,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["portal",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primitive",{"_index":713,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["primitive_types",{"_index":714,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["primitive_types.includes(typeof",{"_index":725,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["private",{"_index":190,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["produce",{"_index":406,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["produce((draft",{"_index":420,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["product",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["productlogourl",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producttitle",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/Set-1.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":670,"title":{},"body":{"interfaces/Source.html":{},"injectables/TissueLibraryState.html":{}}}],["provide",{"_index":505,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":730,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":706,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":504,"title":{},"body":{"modules/HraStateModule.html":{}}}],["provides",{"_index":484,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":653,"title":{},"body":{"classes/Set-1.html":{}}}],["r",{"_index":258,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["radius",{"_index":186,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["read",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["record",{"_index":231,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":599,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref.object.file",{"_index":605,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref.representation_of",{"_index":601,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref/1",{"_index":552,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/doi",{"_index":553,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/notes",{"_index":554,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["reference",{"_index":520,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["referenceorgan",{"_index":540,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["referenceorgans",{"_index":538,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{}}}],["referenceorgans?.find((ref",{"_index":600,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["register",{"_index":71,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat",{"_index":73,"title":{"classes/RegisterFormat.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat(ctx",{"_index":401,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(png_format",{"_index":418,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(svg_format",{"_index":417,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registry",{"_index":400,"title":{},"body":{"injectables/DownloadState.html":{}}}],["removes",{"_index":42,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["rems",{"_index":300,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["representation_of",{"_index":549,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["representing",{"_index":291,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["res",{"_index":227,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["res[id",{"_index":226,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["reset",{"_index":813,"title":{},"body":{"overview.html":{}}}],["resetting",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["resource",{"_index":172,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["resourceregistryselectors",{"_index":164,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["resourceregistryselectors.field",{"_index":192,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["responsetype",{"_index":479,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["rest",{"_index":316,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retreiving",{"_index":762,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["retrieving",{"_index":677,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["return",{"_index":113,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["returns",{"_index":102,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["rgb1",{"_index":254,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[0",{"_index":261,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[1",{"_index":265,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[2",{"_index":269,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2",{"_index":256,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[0",{"_index":260,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[1",{"_index":264,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[2",{"_index":268,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["root",{"_index":731,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":244,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["row.length",{"_index":245,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowid",{"_index":232,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowlabel",{"_index":233,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rows",{"_index":209,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["rows[rowid",{"_index":242,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["run",{"_index":806,"title":{},"body":{"index.html":{}}}],["running",{"_index":803,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":169,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["save",{"_index":472,"title":{},"body":{"injectables/DownloadState.html":{}}}],["schema",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["screen",{"_index":493,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmode",{"_index":636,"title":{},"body":{"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmodemodel",{"_index":615,"title":{"interfaces/ScreenModeModel.html":{}},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["screenmodeselectors",{"_index":623,"title":{"classes/ScreenModeSelectors.html":{}},"body":{"classes/ScreenModeSelectors.html":{}}}],["screenmodestate",{"_index":492,"title":{"injectables/ScreenModeState.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/ScreenModeState.html":{}}}],["seg",{"_index":452,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments",{"_index":450,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments.length",{"_index":453,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments[segments.length",{"_index":454,"title":{},"body":{"injectables/DownloadState.html":{}}}],["selected",{"_index":539,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["selectedformat",{"_index":85,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["selector",{"_index":105,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["selector(['cellsummarystate",{"_index":98,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector(['medicalillustrationstate",{"_index":559,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector(['sourceliststate",{"_index":680,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector(['tissuelibrarystate",{"_index":766,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selector([cellsummarystate",{"_index":111,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector([medicalillustrationstate",{"_index":564,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector([sourceliststate",{"_index":683,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector([tissuelibrarystate",{"_index":772,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selectors",{"_index":90,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{}}}],["selectquerysnapshot",{"_index":162,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["send",{"_index":355,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sending",{"_index":344,"title":{},"body":{"injectables/ContactState.html":{}}}],["sendmessage",{"_index":348,"title":{"classes/SendMessage.html":{}},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sendmessage(_ctx",{"_index":349,"title":{},"body":{"injectables/ContactState.html":{}}}],["sends",{"_index":641,"title":{},"body":{"classes/SendMessage.html":{}}}],["serialize",{"_index":719,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["serialize(this",{"_index":754,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serialized",{"_index":753,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serializes",{"_index":751,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["service",{"_index":154,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["set",{"_index":49,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/SourceListState.html":{}}}],["set(inject(loggable_actions).map(getactiontypefrominstance",{"_index":738,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set(undefined",{"_index":156,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setactive",{"_index":775,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactive(ctx",{"_index":776,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactivenode",{"_index":533,"title":{"classes/SetActiveNode.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["setactivenode(undefined",{"_index":573,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["setdata",{"_index":157,"title":{"classes/SetData.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["setdata(data",{"_index":201,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["setmapping",{"_index":534,"title":{"classes/SetMapping.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["setmapping(undefined",{"_index":576,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["sets",{"_index":334,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{}}}],["setstate",{"_index":638,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setstate(sourcelist",{"_index":691,"title":{},"body":{"injectables/SourceListState.html":{}}}],["setting",{"_index":525,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["seturi",{"_index":527,"title":{"classes/SetUri.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["seturi(undefined",{"_index":581,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["seturifromiri",{"_index":530,"title":{"classes/SetUriFromIRI.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["seturifromiri(undefined",{"_index":584,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["shape",{"_index":280,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["show",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":288,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":149,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["sizelegend",{"_index":171,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/variables.html":{}}}],["sizelegendinfo",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizepoint",{"_index":147,"title":{"interfaces/SizePoint.html":{}},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["sizes",{"_index":193,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["source",{"_index":4,"title":{"interfaces/Source.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["source_spatial_entity",{"_index":546,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["sourcelist",{"_index":14,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sourcelistcontext",{"_index":674,"title":{},"body":{"interfaces/Source.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistmodel",{"_index":671,"title":{},"body":{"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistselectors",{"_index":675,"title":{"classes/SourceListSelectors.html":{}},"body":{"classes/SourceListSelectors.html":{}}}],["sourceliststate",{"_index":495,"title":{"injectables/SourceListState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sources",{"_index":13,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["specific",{"_index":322,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["specified",{"_index":395,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/.../builtin",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cell",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../default",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.action.ts",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.model.ts",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../link",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../medical",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../resource",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../source",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../state",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/cell",{"_index":87,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.actions.ts",{"_index":640,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.actions.ts:5",{"_index":646,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.state.ts",{"_index":341,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/contact/contact.state.ts:16",{"_index":351,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/download/builtin",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts",{"_index":54,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts:10",{"_index":614,"title":{},"body":{"classes/RegisterFormat.html":{}}}],["src/lib/download/download.action.ts:23",{"_index":60,"title":{},"body":{"classes/AddEntry.html":{}}}],["src/lib/download/download.action.ts:38",{"_index":362,"title":{},"body":{"classes/Download.html":{}}}],["src/lib/download/download.model.ts",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.selectors.ts",{"_index":364,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.selectors.ts:14",{"_index":369,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.state.ts",{"_index":374,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:34",{"_index":397,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:44",{"_index":403,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:58",{"_index":386,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:71",{"_index":389,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:85",{"_index":393,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/link",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/medical",{"_index":517,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/resource",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/screen",{"_index":616,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["src/lib/source",{"_index":6,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/state",{"_index":692,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/state.module.ts",{"_index":483,"title":{},"body":{"modules/HraStateModule.html":{}}}],["src/lib/tissue",{"_index":510,"title":{},"body":{"classes/Load-1.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":800,"title":{"index.html":{}},"body":{}}],["state",{"_index":15,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state.isfullscreen",{"_index":629,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["state.mapping",{"_index":566,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state.nodes",{"_index":773,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["state.summaries",{"_index":115,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.url",{"_index":565,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state_logger_provider",{"_index":759,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["stateanalyticspluginservice",{"_index":496,"title":{"injectables/StateAnalyticsPluginService.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["statecontext",{"_index":167,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["states",{"_index":485,"title":{},"body":{"modules/HraStateModule.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["store",{"_index":326,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["stores",{"_index":130,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["storing",{"_index":631,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":312,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":667,"title":{},"body":{"interfaces/Source.html":{}}}],["submitted",{"_index":643,"title":{},"body":{"classes/SendMessage.html":{}}}],["submitting",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summaries",{"_index":94,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{}}}],["summaries(state",{"_index":103,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summaries[key].entries",{"_index":206,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summaries[key].label",{"_index":205,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary",{"_index":120,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["summary.actions",{"_index":175,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["summary.actions.ts",{"_index":324,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["summary.actions.ts:19",{"_index":509,"title":{},"body":{"classes/Load.html":{}}}],["summary.actions.ts:27",{"_index":328,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["summary.actions.ts:8",{"_index":660,"title":{},"body":{"classes/SetData.html":{}}}],["summary.model",{"_index":108,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{}}}],["summary.model.ts",{"_index":277,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["summary.selectors.ts",{"_index":89,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:15",{"_index":104,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:9",{"_index":99,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state",{"_index":110,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state.ts",{"_index":118,"title":{},"body":{"injectables/CellSummaryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["summary.state.ts:175",{"_index":137,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:193",{"_index":148,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:67",{"_index":159,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:74",{"_index":153,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:82",{"_index":128,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary/cell",{"_index":88,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":78,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["svg",{"_index":378,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["svg_format",{"_index":410,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":426,"title":{},"body":{"injectables/DownloadState.html":{}}}],["switchmap",{"_index":168,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["table",{"_index":284,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{}}}],["tap",{"_index":408,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["tap((result",{"_index":609,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["test",{"_index":807,"title":{},"body":{"index.html":{}}}],["tests",{"_index":805,"title":{},"body":{"index.html":{}}}],["text",{"_index":607,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["this.contact.sendmessage(message",{"_index":360,"title":{},"body":{"injectables/ContactState.html":{}}}],["this.dataservice.getcellsummaries(id).pipe(switchmap((data",{"_index":200,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.dataservice.gettissues().pipe(tap((data",{"_index":782,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["this.downloaddata(data",{"_index":434,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloaddata(new",{"_index":435,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloadremotedata(entry.url).pipe(tap((data",{"_index":433,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.ftuservice.getreferenceorgans().pipe(tap((referenceorgans",{"_index":613,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["this.ga.event(type",{"_index":749,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.getcellcountmap(entries",{"_index":208,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.getrowsandcolumns(entries",{"_index":211,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.guessfilename(ctx",{"_index":431,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.hextorgb(highpoint.color",{"_index":257,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.hextorgb(lowpoint.color",{"_index":255,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.http.get(url",{"_index":478,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["this.logaction(action",{"_index":739,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.loggabletypes.has(type",{"_index":746,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.rgbtohex([r",{"_index":270,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.serialize",{"_index":748,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["throw",{"_index":438,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["tissedata",{"_index":768,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissue",{"_index":500,"title":{},"body":{"modules/HraStateModule.html":{},"classes/Load-1.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuedata",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tissueftuservice",{"_index":165,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["tissueitem",{"_index":769,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibrary",{"_index":514,"title":{},"body":{"classes/Load-1.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissuelibrarycontext",{"_index":777,"title":{},"body":{"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrarymodel",{"_index":765,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibraryselectors",{"_index":760,"title":{"classes/TissueLibrarySelectors.html":{}},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibraryservice",{"_index":779,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["tissuelibrarystate",{"_index":499,"title":{"injectables/TissueLibraryState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissues",{"_index":763,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissues(state",{"_index":764,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["title",{"_index":669,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":726,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tooltip",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform((id",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformed",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigerred",{"_index":742,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["true",{"_index":508,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["tuple([z.string",{"_index":314,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":143,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/SizePoint.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":820,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":755,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["types",{"_index":174,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typings",{"_index":542,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/injectors",{"_index":163,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ui/cdk/state",{"_index":65,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/Load-1.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["ui/services",{"_index":166,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SendMessage.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["undefined",{"_index":151,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":218,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["unit",{"_index":804,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":338,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/Load.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["update",{"_index":649,"title":{},"body":{"classes/Set.html":{}}}],["updates",{"_index":634,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["uri",{"_index":526,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["url",{"_index":429,"title":{},"body":{"injectables/DownloadState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":561,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["url(url",{"_index":448,"title":{},"body":{"injectables/DownloadState.html":{}}}],["used",{"_index":376,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":506,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":381,"title":{},"body":{"injectables/DownloadState.html":{},"classes/SendMessage.html":{}}}],["uses",{"_index":354,"title":{},"body":{"injectables/ContactState.html":{}}}],["using",{"_index":346,"title":{},"body":{"injectables/ContactState.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/SizePoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.every(isprimitive",{"_index":757,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["values",{"_index":295,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":358,"title":{},"body":{"injectables/ContactState.html":{}}}],["variables",{"_index":836,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":818,"title":{},"body":{"properties.html":{}}}],["void",{"_index":132,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["whether",{"_index":621,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["window.url.createobjecturl(blob",{"_index":462,"title":{},"body":{"injectables/DownloadState.html":{}}}],["window.url.revokeobjecturl(url",{"_index":470,"title":{},"body":{"injectables/DownloadState.html":{}}}],["without",{"_index":440,"title":{},"body":{"injectables/DownloadState.html":{}}}],["yes",{"_index":658,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetUri.html":{}}}],["z",{"_index":289,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":292,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/typealiases.html":{}}}],["z.literal('data",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal('url",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number",{"_index":306,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":315,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.object",{"_index":304,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.record",{"_index":309,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.record(download_format_id",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":305,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["z.string().array",{"_index":313,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":290,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/SizePoint.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":812,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of adding a list of sources to the SourceList state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of Source objects to be added to the state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Add'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddEntry.html":{"url":"classes/AddEntry.html","title":"class - AddEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entry into download state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: DownloadFormatId, entry: DownloadEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for Addd Entry\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        DownloadEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CellSummarySelectors.html":{"url":"classes/CellSummarySelectors.html","title":"class - CellSummarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CellSummarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                selectors for the CellSummary state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                aggregates\n                            \n                            \n                                    Static\n                                summaries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        aggregates\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregates(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:9\n                \n            \n\n\n            \n                \n                    get the aggregate data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     []\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        summaries\n                        \n                    \n                \n            \n            \n                \n                    \n                    summaries(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:15\n                \n            \n\n\n            \n                \n                    get the summaries data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CellSummary\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Aggregate, CellSummaryStateModel, CellSummary } from './cell-summary.model';\nimport { CellSummaryState } from './cell-summary.state';\n\n/** selectors for the CellSummary state */\nexport class CellSummarySelectors {\n  /** get the aggregate data from the state */\n  @Selector([CellSummaryState])\n  static aggregates(state: CellSummaryStateModel): Aggregate[string][] {\n    return Object.values(state.aggregate);\n  }\n\n  /** get the summaries data from the state */\n  @Selector([CellSummaryState])\n  static summaries(state: CellSummaryStateModel): CellSummary {\n    return state.summaries;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CellSummaryState.html":{"url":"injectables/CellSummaryState.html","title":"injectable - CellSummaryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CellSummaryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling cell summary data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeAggregate\n                            \n                            \n                                interpolateColor\n                            \n                            \n                                interpolateSize\n                            \n                            \n                                load\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        computeAggregate\n                        \n                    \n                \n            \n            \n                \ncomputeAggregate(ctx: Context, action: ComputeAggregate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ComputeAggregate)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:82\n                \n            \n\n\n            \n                \n                    computes aggregate data and stores in the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                Context\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                                ComputeAggregate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolateColor\n                        \n                    \n                \n            \n            \n                \ninterpolateColor(points: GradientPoint[], percentage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:175\n                \n            \n\n\n            \n                \n                    Calculates the interpolated color value at the given percentage between two points in a color gradient.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                GradientPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    percentage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolateSize\n                        \n                    \n                \n            \n            \n                \ninterpolateSize(points: SizePoint[], percentage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:193\n                \n            \n\n\n            \n                \n                    Calculates the interpolated size at a percentage\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                SizePoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    percentage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         number\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        load\n                        \n                    \n                \n            \n            \n                \nload(undefined: Context, undefined: Load)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Load)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:74\n                \n            \n\n\n            \n                \n                    Load summaries from service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Context\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Load\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: Context, undefined: SetData)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetData)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:67\n                \n            \n\n\n            \n                \n                    Set summaries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                Context\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetData\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors } from '@hra-ui/cdk/state';\nimport { TissueFtuService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Observable, switchMap } from 'rxjs';\nimport { GradientLegend, SizeLegend } from '../resource-ids';\nimport { Gradient, Size } from '../resource-types';\nimport { ComputeAggregate, Load, SetData } from './cell-summary.actions';\nimport {\n  Aggregate,\n  AggregateRow,\n  CellSummary,\n  CellSummaryStateModel,\n  GradientPoint,\n  SizePoint,\n} from './cell-summary.model';\n\n/** Helper alias for action handler context */\ntype Context = StateContext;\n\n/** Default gradient points */\nconst DEFAULT_GRADIENTS: GradientPoint[] = [\n  { color: '#000000', percentage: 0 },\n  { color: '#000000', percentage: 1 },\n];\n\n/** Default size points */\nconst DEFAULT_SIZES: SizePoint[] = [\n  { label: '', radius: 1 },\n  { label: '', radius: 5 },\n];\n\n/** State handling cell summary data */\n@State({\n  name: 'cellsummary',\n  defaults: {\n    summaries: {},\n    aggregate: {},\n  },\n})\n@Injectable()\nexport class CellSummaryState {\n  /** Gradient legend points */\n  private readonly gradients = selectQuerySnapshot(\n    ResourceRegistrySelectors.field,\n    GradientLegend,\n    Gradient,\n    'points' as const,\n    DEFAULT_GRADIENTS\n  );\n\n  /** Size legend points */\n  private readonly sizes = selectQuerySnapshot(\n    ResourceRegistrySelectors.field,\n    SizeLegend,\n    Size,\n    'sizes' as const,\n    DEFAULT_SIZES\n  );\n\n  /** Service to load summaries */\n  private readonly dataService = inject(TissueFtuService);\n\n  /** Set summaries */\n  @Action(SetData)\n  set({ patchState, dispatch }: Context, { data }: SetData): Observable {\n    patchState({ summaries: data });\n    return dispatch(new ComputeAggregate(data));\n  }\n\n  /** Load summaries from service */\n  @Action(Load)\n  load({ dispatch }: Context, { id }: Load): Observable {\n    return this.dataService.getCellSummaries(id).pipe(switchMap((data) => dispatch(new SetData(data as CellSummary))));\n  }\n\n  /**\n   * computes aggregate data and stores in the current state\n   */\n  @Action(ComputeAggregate)\n  computeAggregate(ctx: Context, action: ComputeAggregate): void {\n    const summaries = action.summaries;\n    const aggregateData: Aggregate = {};\n\n    for (const key in summaries) {\n      const label = summaries[key].label;\n      const entries = summaries[key].entries;\n\n      const counts = this.getCellCountMap(entries);\n\n      const [rows, columns] = this.getRowsAndColumns(entries, counts);\n\n      aggregateData[key] = {\n        label: label,\n        columns: columns,\n        rows: rows,\n      };\n    }\n\n    ctx.patchState({\n      aggregate: aggregateData,\n    });\n  }\n\n  /** Gets a count of the number of occurrences of each unique cellId in an array of entries,\n   * and returns an object mapping each cellId to its corresponding count. */\n  private getCellCountMap(entries: CellSummary[string]['entries']): { [key: string]: number } {\n    return entries.reduce>((res, { cell: { id }, count }) => {\n      res[id] = res[id] ? res[id] + count : count;\n      return res;\n    }, {});\n  }\n\n  /** Returns an array of rows and columns based on an array of entries */\n  private getRowsAndColumns(\n    entries: CellSummary[string]['entries'],\n    counts: { [key: string]: number }\n  ): [rows: AggregateRow[], columns: string[]] {\n    const columns: string[] = [];\n    const columnIndices: Record = {};\n    const rows: Record = {};\n\n    for (const entry of entries) {\n      const {\n        cell: { id: rowId, label: rowLabel },\n        biomarker: { id: columnId, label: columnLabel },\n      } = entry;\n\n      if (!(columnId in columnIndices)) {\n        columnIndices[columnId] = columns.length + 2;\n        columns.push(columnLabel);\n      }\n      const columnIndex = columnIndices[columnId];\n\n      if (!(rowId in rows)) {\n        rows[rowId] = [rowLabel, counts[rowId]];\n      }\n      const row = rows[rowId];\n\n      if (row.length  point.percentage >= percentage);\n    const lowPoint = points[index - 1];\n    const highPoint = points[index];\n    const diff = highPoint.percentage - lowPoint.percentage;\n    const finalPercentage = (percentage - lowPoint.percentage) / diff;\n\n    const rgb1 = this.hexToRgb(lowPoint.color);\n    const rgb2 = this.hexToRgb(highPoint.color);\n\n    const r = Math.round(rgb1[0] + (rgb2[0] - rgb1[0]) * finalPercentage);\n    const g = Math.round(rgb1[1] + (rgb2[1] - rgb1[1]) * finalPercentage);\n    const b = Math.round(rgb1[2] + (rgb2[2] - rgb1[2]) * finalPercentage);\n\n    return this.rgbToHex([r, g, b]);\n  }\n\n  /** Calculates the interpolated size at a percentage */\n  interpolateSize(points: SizePoint[], percentage: number): number {\n    const { radius: min } = points[0];\n    const { radius: max } = points[points.length - 1];\n    const diff = max - min;\n    return min + diff * percentage;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CellSummaryStateModel.html":{"url":"interfaces/CellSummaryStateModel.html","title":"interface - CellSummaryStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CellSummaryStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                The CellSummaryStateModel interface describes the overall shape of the state for this feature.\nIt has two properties, summaries and aggregate, both of which are of their corresponding types.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregate\n                                        \n                                \n                                \n                                        \n                                            summaries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregate:         Aggregate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Aggregate\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry contains a label and a table of aggregated data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summaries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summaries:         CellSummary\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CellSummary\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry is an object containing information about a single cell and its corresponding biomarker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/** Size legend item */\nexport interface SizePoint {\n  /** Label (percentage) */\n  label: string;\n  /** Radius in rems */\n  radius: number;\n}\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n  metadata: z\n    .object({\n      label: z.string(),\n      value: z.string(),\n    })\n    .array()\n    .array(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA.shape['metadata'],\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClearEntries.html":{"url":"classes/ClearEntries.html","title":"class - ClearEntries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClearEntries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear all entries from download state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeAggregate.html":{"url":"classes/ComputeAggregate.html","title":"class - ComputeAggregate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeAggregate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Compute aggregate of the given data and store to state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(summaries: CellSummary)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:27\n                            \n                        \n\n                \n                    \n                            Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        summaries\n                                                  \n                                                        \n                                                                        CellSummary\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe cell summary data to compute aggregate for.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { CellSummary } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: CellSummary) {\n    super();\n  }\n}\n\n/** Loads cell summaries */\nexport class Load extends Action('Load') {\n  /** Create a Load action */\n  constructor(readonly id: unknown) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: CellSummary) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactState.html":{"url":"injectables/ContactState.html","title":"injectable - ContactState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.state.ts\n        \n\n\n            \n                Description\n            \n            \n                A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact'\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(_ctx: StateContext, undefined: SendMessage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SendMessage)\n                \n            \n\n            \n                \n                    Defined in src/lib/contact/contact.state.ts:16\n                \n            \n\n\n            \n                \n                    An action method for sending a message. It uses SendMessage action class to send messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _ctx\n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SendMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { ContactService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { SendMessage } from './contact.actions';\n\n/** A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact' */\n@State({ name: 'contact' })\n@Injectable()\nexport class ContactState {\n  /** A variable to inject the ContactService */\n  private readonly contact = inject(ContactService);\n\n  /** An action method for sending a message. It uses SendMessage action class to send messages. */\n  @Action(SendMessage)\n  sendMessage(_ctx: StateContext, { message }: SendMessage): Observable {\n    return this.contact.sendMessage(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Download.html":{"url":"classes/Download.html","title":"class - Download","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Download\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Download file Action\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormatId)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of download.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadSelectors.html":{"url":"classes/DownloadSelectors.html","title":"class - DownloadSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Available format selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                formats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        formats\n                        \n                    \n                \n            \n            \n                \n                    \n                    formats(state: DownloadModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors available format for download selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                DownloadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormat[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { DownloadFormat, DownloadModel } from './download.model';\n\n/**\n * Available format selectors\n */\nexport class DownloadSelectors {\n  /**\n   * Selectors available format for download selectors\n   * @param state\n   * @returns\n   */\n  @Selector()\n  static formats(state: DownloadModel): DownloadFormat[] {\n    const { formats, entries } = state;\n    const hasData = (format: DownloadFormat | undefined): format is DownloadFormat =>\n      !!(format && format.id in entries);\n    return Object.values(formats).filter(hasData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DownloadState.html":{"url":"injectables/DownloadState.html","title":"injectable - DownloadState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DownloadState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Download State Model used to convert\nfile from SVG file content to different\nformat and download to user.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEntry\n                            \n                            \n                                clearEntries\n                            \n                            \n                                download\n                            \n                            \n                                ngxsOnInit\n                            \n                            \n                                registerFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEntry\n                        \n                    \n                \n            \n            \n                \naddEntry(ctx: DownloadContext, undefined: AddEntry)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddEntry)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:58\n                \n            \n\n\n            \n                \n                    Add entry into download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                AddEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEntries\n                        \n                    \n                \n            \n            \n                \nclearEntries(ctx: DownloadContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ClearEntries)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:71\n                \n            \n\n\n            \n                \n                    Clear entires from download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(ctx: DownloadContext, undefined: Download)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Download)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:85\n                \n            \n\n\n            \n                \n                    Actions download file in specified format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Download\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngxsOnInit\n                        \n                    \n                \n            \n            \n                \nngxsOnInit(ctx: DownloadContext)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/download/download.state.ts:34\n                \n            \n\n\n            \n                \n                    Ngxs on init and registry default format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerFormat\n                        \n                    \n                \n            \n            \n                \nregisterFormat(ctx: DownloadContext, undefined: RegisterFormat)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(RegisterFormat)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:44\n                \n            \n\n\n            \n                \n                    Actions register format in Download State\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RegisterFormat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, NgxsOnInit, State } from '@ngxs/store';\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\n\nimport { PNG_FORMAT, SVG_FORMAT } from './builtin-formats';\nimport { AddEntry, ClearEntries, Download, RegisterFormat } from './download.action';\nimport { DownloadContext, DownloadFormatId, DownloadModel } from './download.model';\n\n/**\n * Download State Model used to convert\n * file from SVG file content to different\n * format and download to user.\n */\n@State({\n  name: 'download',\n  defaults: {\n    formats: {},\n    entries: {},\n  },\n})\n@Injectable()\nexport class DownloadState implements NgxsOnInit {\n  /**\n   * Http object inject for download state\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Ngxs on init and registry default format\n   * @param ctx\n   */\n  ngxsOnInit(ctx: DownloadContext): void {\n    ctx.dispatch([new RegisterFormat(SVG_FORMAT), new RegisterFormat(PNG_FORMAT)]);\n  }\n\n  /**\n   * Actions register format in Download State\n   * @param ctx\n   * @param { format }\n   */\n  @Action(RegisterFormat)\n  registerFormat(ctx: DownloadContext, { format }: RegisterFormat): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.formats[format.id] = format;\n      })\n    );\n  }\n\n  /**\n   * Add entry into download state\n   * @param ctx\n   * @param { id, entry }\n   */\n  @Action(AddEntry)\n  addEntry(ctx: DownloadContext, { id, entry }: AddEntry): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries[id] = entry;\n      })\n    );\n  }\n\n  /**\n   * Clear entires from download state\n   * @param ctx\n   */\n  @Action(ClearEntries)\n  clearEntries(ctx: DownloadContext): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries = {};\n      })\n    );\n  }\n\n  /**\n   * Actions download file in specified format\n   * @param ctx\n   * @param action\n   */\n  @Action(Download)\n  download(ctx: DownloadContext, { format }: Download): Observable | void {\n    const { entries } = ctx.getState();\n    const entry = entries[format];\n    switch (entry?.type) {\n      case 'url': {\n        const filename = this.guessFilename(ctx, format, entry.url);\n        return this.downloadRemoteData(entry.url).pipe(tap((data) => this.downloadData(data, filename)));\n      }\n\n      case 'data': {\n        const filename = this.guessFilename(ctx, format, '');\n        this.downloadData(new Blob([entry.data]), filename);\n        break;\n      }\n\n      default:\n        throw new Error('Cannot download file without data');\n    }\n  }\n\n  /**\n   * Guess filename\n   * @param ctx\n   * @param id\n   * @param url\n   * @returns filename\n   */\n  private guessFilename(ctx: DownloadContext, id: DownloadFormatId, url: string): string {\n    const { formats } = ctx.getState();\n    const { extension = '' } = formats[id] ?? {};\n    const fakeBase = 'https://base.com';\n    const path = new URL(url, fakeBase).pathname;\n    const segments = path.split('/').filter((seg) => seg !== '');\n    const name = segments.length > 0 ? segments[segments.length - 1] : 'download';\n    const guess = name.includes('.') ? name : `${name}${extension}`;\n\n    return guess;\n  }\n\n  /**\n   * Download converted formatted file to browser\n   * @param blob\n   * @param fileName\n   */\n  private downloadData(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n    anchor.download = filename;\n    anchor.href = url;\n    anchor.click();\n    anchor.remove();\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Downloads and save -  method is used to direct fetch file\n   * if available on url without conversion\n   * @param fileUrl\n   * @param fileName\n   */\n  private downloadRemoteData(url: string): Observable {\n    return this.http.get(url, { responseType: 'blob' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradientPoint.html":{"url":"interfaces/GradientPoint.html","title":"interface - GradientPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradientPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of gradient colors along with their percentages for the gradient bar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            percentage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gradient color at a specific percentage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Percentage point along the gradient bar\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/** Size legend item */\nexport interface SizePoint {\n  /** Label (percentage) */\n  label: string;\n  /** Radius in rems */\n  radius: number;\n}\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n  metadata: z\n    .object({\n      label: z.string(),\n      value: z.string(),\n    })\n    .array()\n    .array(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA.shape['metadata'],\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HraStateModule.html":{"url":"modules/HraStateModule.html","title":"module - HraStateModule","body":"\n                   \n\n\n\n\n    Modules\n    HraStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/state.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Provides all states\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule, NGXS_PLUGINS } from '@ngxs/store';\nimport { CellSummaryState } from './cell-summary';\nimport { ContactState } from './contact';\nimport { DownloadState } from './download';\nimport { MedicalIllustrationState } from './medical-illustration';\nimport { ScreenModeState } from './screen-mode';\nimport { SourceListState } from './source-list';\nimport { StateAnalyticsPluginService } from './state-analytics-plugin';\nimport { TissueLibraryState } from './tissue-library';\n\n/** Provides all states */\n@NgModule({\n  imports: [\n    NgxsModule.forFeature([\n      CellSummaryState,\n      ContactState,\n      DownloadState,\n      MedicalIllustrationState,\n      ScreenModeState,\n      SourceListState,\n      TissueLibraryState,\n    ]),\n  ],\n  providers: [\n    {\n      provide: NGXS_PLUGINS,\n      useExisting: StateAnalyticsPluginService,\n      multi: true,\n    },\n  ],\n})\nexport class HraStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load.html":{"url":"classes/Load.html","title":"class - Load","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Loads cell summaries\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:19\n                            \n                        \n\n                \n                    \n                            Create a Load action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { CellSummary } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: CellSummary) {\n    super();\n  }\n}\n\n/** Loads cell summaries */\nexport class Load extends Action('Load') {\n  /** Create a Load action */\n  constructor(readonly id: unknown) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: CellSummary) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load-1.html":{"url":"classes/Load-1.html","title":"class - Load-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of loading tissue data into the TissueLibrary state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** action of loading tissue data into the TissueLibrary state */\nexport class Load extends Action('[TissueLibrary] Load Tissue Data') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadReferenceOrgans.html":{"url":"classes/LoadReferenceOrgans.html","title":"class - LoadReferenceOrgans","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadReferenceOrgans\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Loads reference organ data\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MedicalIllustrationModel.html":{"url":"interfaces/MedicalIllustrationModel.html","title":"interface - MedicalIllustrationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MedicalIllustrationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for medical illustration model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            mapping\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            node\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            referenceOrgans\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mapping\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mapping:         MapEntry[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mapping info\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         MapEntry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Current selected node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceOrgans\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        referenceOrgans:     ReferenceOrgan[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReferenceOrgan[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    reference organs\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Illustration URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ReferenceOrgan } from '@hra-ui/services';\nimport { z } from 'zod';\n\n/** Map Entry typings */\nconst mapEntry = z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n});\n\nexport type MapEntry = z.infer;\n\n/** Interface for medical illustration model */\nexport interface MedicalIllustrationModel {\n  /** Illustration URL */\n  url?: string;\n  /** Current selected node */\n  node?: MapEntry;\n  /** Mapping info */\n  mapping?: MapEntry[];\n  /** reference organs */\n  referenceOrgans?: ReferenceOrgan[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MedicalIllustrationSelectors.html":{"url":"classes/MedicalIllustrationSelectors.html","title":"class - MedicalIllustrationSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MedicalIllustrationSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for medical illustration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                mapping\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        mapping\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapping(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:22\n                \n            \n\n\n            \n                \n                    Returns current mapping file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MapEntry[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Returns illustration url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\n\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\nimport { MedicalIllustrationState } from './medical-illustration.state';\n\n/**\n * Selectors for medical illustration\n */\nexport class MedicalIllustrationSelectors {\n  /**\n   * Returns illustration url\n   */\n  @Selector([MedicalIllustrationState])\n  static url(state: MedicalIllustrationModel): string | undefined {\n    return state.url;\n  }\n\n  /**\n   * Returns current mapping file\n   */\n  @Selector([MedicalIllustrationState])\n  static mapping(state: MedicalIllustrationModel): MapEntry[] {\n    return state.mapping ?? [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MedicalIllustrationState.html":{"url":"injectables/MedicalIllustrationState.html","title":"injectable - MedicalIllustrationState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MedicalIllustrationState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling medical illustrations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadReferenceOrgans\n                            \n                            \n                                setActiveNode\n                            \n                            \n                                setMapping\n                            \n                            \n                                setUri\n                            \n                            \n                                setUriFromIRI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadReferenceOrgans\n                        \n                    \n                \n            \n            \n                \nloadReferenceOrgans(undefined: MedicalIllustrationContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadReferenceOrgans)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:81\n                \n            \n\n\n            \n                \n                    Loads reference organs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setActiveNode\n                        \n                    \n                \n            \n            \n                \nsetActiveNode(undefined: MedicalIllustrationContext, undefined: SetActiveNode)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetActiveNode)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:62\n                \n            \n\n\n            \n                \n                    Sets active node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetActiveNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMapping\n                        \n                    \n                \n            \n            \n                \nsetMapping(undefined: MedicalIllustrationContext, undefined: SetMapping)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetMapping, {cancelUncompleted: true})\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:70\n                \n            \n\n\n            \n                \n                    Parses and sets mapping info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetMapping\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUri\n                        \n                    \n                \n            \n            \n                \nsetUri(undefined: MedicalIllustrationContext, undefined: SetUri)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUri)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:34\n                \n            \n\n\n            \n                \n                    Sets illustration URI\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUri\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUriFromIRI\n                        \n                    \n                \n            \n            \n                \nsetUriFromIRI(undefined: MedicalIllustrationContext, undefined: SetUriFromIRI)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUriFromIRI)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:44\n                \n            \n\n\n            \n                \n                    Sets uri by finding it from reference organs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUriFromIRI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { TissueFtuService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { parse } from 'papaparse';\nimport { Observable, tap } from 'rxjs';\nimport { Load } from '../cell-summary/cell-summary.actions';\nimport { LoadReferenceOrgans, SetActiveNode, SetMapping, SetUri, SetUriFromIRI } from './medical-illustration.actions';\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\n\nexport type MedicalIllustrationContext = StateContext;\n\n/**\n * State handling medical illustrations\n */\n@State({\n  name: 'medicalIllustration',\n  defaults: {},\n})\n@Injectable()\nexport class MedicalIllustrationState {\n  /**\n   * Http client\n   */\n  private readonly http = inject(HttpClient);\n\n  /** Ftu service */\n  private readonly ftuService = inject(TissueFtuService);\n\n  /**\n   * Sets illustration URI\n   */\n  @Action(SetUri)\n  setUri({ patchState }: MedicalIllustrationContext, { url }: SetUri): void {\n    patchState({ url: url, node: undefined });\n  }\n\n  /**\n   * Sets uri by finding it from reference organs\n   * @param param0 state context\n   * @param param1 Action object with iri\n   */\n  @Action(SetUriFromIRI)\n  setUriFromIRI(\n    { patchState, getState, dispatch }: MedicalIllustrationContext,\n    { iri }: SetUriFromIRI\n  ): Observable {\n    const referenceOrgans = getState().referenceOrgans;\n    const ref = referenceOrgans?.find((ref) => ref.representation_of === iri);\n    if (ref === undefined) {\n      throw new Error('Reference organ with match iri not found');\n    }\n    patchState({ url: ref.object.file });\n\n    return dispatch(new Load(ref.object.file));\n  }\n\n  /**\n   * Sets active node\n   */\n  @Action(SetActiveNode)\n  setActiveNode({ patchState }: MedicalIllustrationContext, { node }: SetActiveNode): void {\n    patchState({ node });\n  }\n\n  /**\n   * Parses and sets mapping info\n   */\n  @Action(SetMapping, { cancelUncompleted: true })\n  setMapping({ patchState }: MedicalIllustrationContext, { url }: SetMapping): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      tap((result) => {\n        const parsedResult = parse(result, { header: true }).data;\n        patchState({ mapping: parsedResult });\n      })\n    );\n  }\n\n  /** Loads reference organs */\n  @Action(LoadReferenceOrgans)\n  loadReferenceOrgans({ patchState }: MedicalIllustrationContext): Observable {\n    return this.ftuService.getReferenceOrgans().pipe(tap((referenceOrgans) => patchState({ referenceOrgans })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterFormat.html":{"url":"classes/RegisterFormat.html","title":"class - RegisterFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Register format into state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormat)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of register format.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormat\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenModeModel.html":{"url":"interfaces/ScreenModeModel.html","title":"interface - ScreenModeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenModeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode state model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isFullScreen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isFullScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFullScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether in fullscreen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ScreenModeModel {\n  /** Whether in fullscreen */\n  isFullScreen: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenModeSelectors.html":{"url":"classes/ScreenModeSelectors.html","title":"class - ScreenModeSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenModeSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFullScreen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isFullScreen\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFullScreen(state: ScreenModeModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors screen mode selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ScreenModeModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if full screen\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/**\n * Screen mode selectors\n */\nexport class ScreenModeSelectors {\n  /**\n   * Selectors screen mode selectors\n   * @param state\n   * @returns true if full screen\n   */\n  @Selector()\n  static isFullScreen(state: ScreenModeModel): boolean {\n    return state.isFullScreen;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenModeState.html":{"url":"injectables/ScreenModeState.html","title":"injectable - ScreenModeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenModeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State storing the screen mode\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.state.ts:22\n                \n            \n\n\n            \n                \n                    Updates the screen mode\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport produce from 'immer';\nimport { Set } from './screen-mode.actions';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/** State storing the screen mode */\n@State({\n  name: 'screenmode',\n  defaults: {\n    isFullScreen: false,\n  },\n})\n@Injectable()\nexport class ScreenModeState {\n  /**\n   * Updates the screen mode\n   * @param ctx State context\n   * @param action Action with new mode\n   */\n  @Action(Set)\n  set({ setState }: StateContext, { isFullScreen }: Set): void {\n    setState(\n      produce((draft: ScreenModeModel) => {\n        draft.isFullScreen = isFullScreen;\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessage.html":{"url":"classes/SendMessage.html","title":"class - SendMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                A class which sends individual messages submitted by user.\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: ContactMessage)\n                    \n                \n                        \n                            \n                                Defined in src/lib/contact/contact.actions.ts:5\n                            \n                        \n\n                \n                    \n                            A constructor which initializes the message of type ContactMessage interface.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    ContactMessage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { ContactMessage } from '@hra-ui/services';\n\n/** A class which sends individual messages submitted by user. */\nexport class SendMessage extends Action('[Contact] Send Message') {\n  /** A constructor which initializes the message of type ContactMessage interface. */\n  constructor(readonly message: ContactMessage) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Update the screen mode\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(isFullScreen: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/screen-mode/screen-mode.actions.ts:4\n                            \n                        \n\n                \n                    \n                            Creates an instance of Set\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        isFullScreen\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether the mode is fullscreen\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** Update the screen mode */\nexport class Set extends Action('[Screenmode] Set Screenmode') {\n  /**\n   * Creates an instance of Set\n   * @param isFullScreen Whether the mode is fullscreen\n   */\n  constructor(readonly isFullScreen: boolean) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                An action that removes all current sources and adds new ones, effectively resetting the state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sourceList\n                            \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of source objects to be set as the new state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sourceList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Source[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:22\n                        \n                    \n\n            \n                \n                    array of source objects to be set as the new state\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Set'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetActiveNode.html":{"url":"classes/SetActiveNode.html","title":"class - SetActiveNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetActiveNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current active node\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node?: MapEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:36\n                            \n                        \n\n                \n                    \n                            Creates an instance of set active node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        MapEntry\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetData.html":{"url":"classes/SetData.html","title":"class - SetData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Set data to store\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: CellSummary)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Defines the SetData action, which sets data to the store.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        CellSummary\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to set to the store.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { CellSummary } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: CellSummary) {\n    super();\n  }\n}\n\n/** Loads cell summaries */\nexport class Load extends Action('Load') {\n  /** Create a Load action */\n  constructor(readonly id: unknown) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: CellSummary) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetMapping.html":{"url":"classes/SetMapping.html","title":"class - SetMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the mapping file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:49\n                            \n                        \n\n                \n                    \n                            Creates an instance of set mapping.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUri.html":{"url":"classes/SetUri.html","title":"class - SetUri","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUri\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url?: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUriFromIRI.html":{"url":"classes/SetUriFromIRI.html","title":"class - SetUriFromIRI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUriFromIRI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI from IRI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(iri: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri from iri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        iri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SizePoint.html":{"url":"interfaces/SizePoint.html","title":"interface - SizePoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SizePoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Size legend item\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            radius\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Label (percentage)\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        radius\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        radius:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Radius in rems\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/** Size legend item */\nexport interface SizePoint {\n  /** Label (percentage) */\n  label: string;\n  /** Radius in rems */\n  radius: number;\n}\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n  metadata: z\n    .object({\n      label: z.string(),\n      value: z.string(),\n    })\n    .array()\n    .array(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA.shape['metadata'],\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.model.ts\n        \n\n\n            \n                Description\n            \n            \n                structure of a source object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Link property of the source object\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title property of the source object\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StateContext } from '@ngxs/store';\n\n/** structure of a source object */\nexport interface Source {\n  /** Title property of the source object  */\n  title: string;\n  /** Link property of the source object */\n  link: string;\n}\n\n/** Type alias for the array of source objects */\nexport type SourceListModel = Source[];\n\n/** Helper alias for action handler's ctx argument */\nexport type SourceListContext = StateContext;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceListSelectors.html":{"url":"classes/SourceListSelectors.html","title":"class - SourceListSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceListSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retrieving data from the SourceListState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getSourceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getSourceList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourceList(state: SourceListModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['SourceListState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.selectors.ts:13\n                \n            \n\n\n            \n                \n                    Gets the array of data sources from the SourceList object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                SourceListModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current state of the SourceListState\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Source[]\n\n                    \n                    \n                        array of source objects\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Source, SourceListModel } from './source-list.model';\nimport { SourceListState } from './source-list.state';\n\n/** Selector class for retrieving data from the SourceListState */\nexport class SourceListSelectors {\n  /**\n   * Gets the array of data sources from the SourceList object.\n   * @param state The current state of the SourceListState\n   * @returns array of source objects\n   */\n  @Selector([SourceListState])\n  static getSourceList(state: SourceListModel): Source[] {\n    return state;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceListState.html":{"url":"injectables/SourceListState.html","title":"injectable - SourceListState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceListState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling source list data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(undefined: SourceListContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:20\n                \n            \n\n\n            \n                \n                    adds a list of sources to the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: SourceListContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:34\n                \n            \n\n\n            \n                \n                    Removes all current sources and adds new ones, effectively resetting the state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { produce } from 'immer';\nimport { Add, Set } from './source-list.actions';\nimport { SourceListContext, SourceListModel } from './source-list.model';\n\n/** State handling source list data */\n@State({\n  name: 'sourceList',\n  defaults: [],\n})\n@Injectable()\nexport class SourceListState {\n  /**\n   * adds a list of sources to the current state\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be added to the state\n   */\n  @Action(Add)\n  add({ setState }: SourceListContext, { sourceList }: Add) {\n    setState(\n      produce((draft) => {\n        draft.push(...sourceList);\n      })\n    );\n  }\n\n  /**\n   * Removes all current sources and adds new ones, effectively resetting the state.\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be set as the new state\n   */\n  @Action(Set)\n  set({ setState }: SourceListContext, { sourceList }: Set) {\n    setState(sourceList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateAnalyticsPluginService.html":{"url":"injectables/StateAnalyticsPluginService.html","title":"injectable - StateAnalyticsPluginService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateAnalyticsPluginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Analytics Plugin Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(state, action, next: NgxsNextPluginFn)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/state-analytics-plugin/state-analytics-plugin.service.ts:51\n                \n            \n\n\n            \n                \n                    Handles logger plugin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent state of the store with type unknown.\n\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent action being dispatched with type unknown type.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NgxsNextPluginFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnext plugin to handle the action\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nnext plugin with the current state and action.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, InjectionToken, Provider } from '@angular/core';\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, NGXS_PLUGINS } from '@ngxs/store';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\nimport { DEFAULT_LOGGABLE_ACTIONS } from './default-loggable-actions';\n\n/** Primitive types */\nconst PRIMITIVE_TYPES = ['bigint', 'boolean', 'number', 'string'];\n\n/**\n * Determines whether primitive is\n * @param value is string - used to check the input value from serialize funtion\n * @returns type of value - boolean/number/string/null/bigint/undefined\n */\nfunction isPrimitive(value: unknown): value is bigint | boolean | number | string | null | undefined {\n  return value == null || PRIMITIVE_TYPES.includes(typeof value);\n}\n\n/**\n * Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n */\nexport const LOGGABLE_ACTIONS = new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n});\n\n/**\n * Google Analytics Plugin Injectable\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateAnalyticsPluginService implements NgxsPlugin {\n  /**\n   * Injects the service for state analytics plugin.\n   */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Plugin service for logging state analytics\n   * Setting loggable action types from LOGGABLE_ACTIONS dependency.\n   */\n  private readonly loggableTypes = new Set(inject(LOGGABLE_ACTIONS).map(getActionTypeFromInstance));\n\n  /**\n   * Handles logger plugin\n   * @param state -  Current state of the store with type unknown.\n   * @param action - Current action being dispatched with type unknown type.\n   * @param next - next plugin to handle the action\n   * @returns - next plugin with the current state and action.\n   */\n  handle(state: unknown, action: unknown, next: NgxsNextPluginFn) {\n    this.logAction(action);\n    return next(state, action);\n  }\n\n  /**\n   * Logs action trigerred to google analytics event\n   * @param action - Current action being dispatched with type unknown type.\n   * @returns void\n   */\n  private logAction(action: unknown): void {\n    const type = getActionTypeFromInstance(action);\n    if (type && this.loggableTypes.has(type)) {\n      const payload = JSON.stringify(action, this.serialize);\n      this.ga.event(type, 'action_log', payload);\n    }\n  }\n\n  /**\n   * Serializes action data\n   * @param key - key with type unknown that needs to be serialized\n   * @param value - value with type unknown that needs to be serialized\n   * @returns serialized value\n   */\n  private serialize(this: void, key: unknown, value: unknown): unknown {\n    if (key === '' && typeof value === 'object') {\n      return { ...value, type: undefined };\n    } else if (isPrimitive(value) || (Array.isArray(value) && value.every(isPrimitive))) {\n      return value;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * State Login Provider\n */\nexport const STATE_LOGGER_PROVIDER: Provider = {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TissueLibrarySelectors.html":{"url":"classes/TissueLibrarySelectors.html","title":"class - TissueLibrarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TissueLibrarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retreiving data from the TissueLibraryState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        tissues\n                        \n                    \n                \n            \n            \n                \n                    \n                    tissues(state: TissueLibraryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['TissueLibraryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Gets the tissue data from the TissueLibrary object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TissueLibraryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the current state of the TissueLibraryState.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        node data of the type of TisseData.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Iri, TissueItem } from '@hra-ui/services';\nimport { Selector } from '@ngxs/store';\nimport { TissueLibraryModel } from './tissue-library.model';\nimport { TissueLibraryState } from './tissue-library.state';\n\n/** Selector class for retreiving data from the TissueLibraryState */\nexport class TissueLibrarySelectors {\n  /**\n   * Gets the tissue data from the TissueLibrary object.\n   * @param state the current state of the TissueLibraryState.\n   * @returns node data of the type of TisseData.\n   */\n  @Selector([TissueLibraryState])\n  static tissues(state: TissueLibraryModel): Record {\n    return state.nodes as Record;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryState.html":{"url":"injectables/TissueLibraryState.html","title":"injectable - TissueLibraryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling tissue data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActive\n                        \n                    \n                \n            \n            \n                \nsetActive(ctx: TissueLibraryContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Load)\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.state.ts:22\n                \n            \n\n\n            \n                \n                    Loads the tissue data into the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                TissueLibraryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The state context instance\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        data The tissue data to be added to the state\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TissueLibraryService } from '@hra-ui/services';\nimport { Action, State } from '@ngxs/store';\nimport { Observable, tap } from 'rxjs';\nimport { Load } from './tissue-library.actions';\nimport { TissueLibraryContext, TissueLibraryModel } from './tissue-library.model';\n\n/** State handling tissue data*/\n@State({\n  name: 'tissueLibrary',\n})\n@Injectable()\nexport class TissueLibraryState {\n  /** injects the TissueLibraryService into a private readonly property */\n  private readonly dataService = inject(TissueLibraryService);\n  /**\n   * Loads the tissue data into the current state\n   * @param ctx The state context instance\n   * @returns data The tissue data to be added to the state\n   */\n  @Action(Load)\n  setActive(ctx: TissueLibraryContext): Observable {\n    return this.dataService.getTissues().pipe(tap((data) => ctx.setState(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createDownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            isPrimitive   (src/.../state-analytics-plugin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDownloadFormatId\n                        \n                    \n                \n            \n            \n                \ncreateDownloadFormatId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates download format id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormatId\n\n                    \n                    \n                        download format id\n\n                    \n                \n            \n        \n    \n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrimitive\n                        \n                    \n                \n            \n            \n                \nisPrimitive(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether primitive is\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is string - used to check the input value from serialize funtion\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | boolean | number | string | null | undefined\n\n                    \n                    \n                        type of value - boolean/number/string/null/bigint/undefined\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nstate\nThis library was generated with Nx.\nRunning unit tests\nRun nx test state to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        HraStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    23 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    6 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRow   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRowEntry   (src/.../cell-summary.model.ts)\n                        \n                        \n                            Cell   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CellSummary   (src/.../cell-summary.model.ts)\n                        \n                        \n                            Context   (src/.../cell-summary.state.ts)\n                        \n                        \n                            DownloadContext   (src/.../download.model.ts)\n                        \n                        \n                            DownloadEntry   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormat   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            DownloadModel   (src/.../download.model.ts)\n                        \n                        \n                            MapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            MedicalIllustrationContext   (src/.../medical-illustration.state.ts)\n                        \n                        \n                            SourceListContext   (src/.../source-list.model.ts)\n                        \n                        \n                            SourceListModel   (src/.../source-list.model.ts)\n                        \n                        \n                            TissueLibraryContext   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TissueLibraryModel   (src/.../tissue-library.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                    Type representing an aggregate summary of cell values in a group\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRow\n                \n            \n            \n                \n                    Type representing a row in an aggregate summary\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRowEntry\n                \n            \n            \n                \n                    Type representing a single entry in a row with cell, biomarker, count and percentage\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cell\n                \n            \n            \n                \n                    Type representing a single cell value\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummary\n                \n            \n            \n                \n                    Type representing CELL_SUMMARY_SCHEMA which has labels and entries\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/cell-summary/cell-summary.state.ts\n    \n    \n        \n            \n                \n                    \n                    Context\n                \n            \n            \n                \n                    Helper alias for action handler context\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    src/lib/download/download.model.ts\n    \n    \n        \n            \n                \n                    \n                    DownloadContext\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadContext,\nwhich is a state context for the DownloadModel type\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadEntry\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadEntry,\nwhich is inferred from the type of the DOWNLOAD_ENTRY constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormat\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormat,\nwhich is inferred from the type of the DOWNLOAD_FORMAT constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormatId\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormatId,\nwhich is inferred from the type of the DOWNLOAD_FORMAT_ID constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadModel\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadModel,\nwhich is inferred from the type of the DOWNLOAD_MODEL constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n    \n        \n            \n                \n                    \n                    MapEntry\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.state.ts\n    \n    \n        \n            \n                \n                    \n                    MedicalIllustrationContext\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    src/lib/source-list/source-list.model.ts\n    \n    \n        \n            \n                \n                    \n                    SourceListContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SourceListModel\n                \n            \n            \n                \n                    Type alias for the array of source objects\n\n                \n            \n            \n                \n                            Source[]\n\n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.model.ts\n    \n    \n        \n            \n                \n                    \n                    TissueLibraryContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                        StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibraryModel\n                \n            \n            \n                \n                    Type alias for the tissue data\n\n                \n            \n            \n                \n                        TissueData\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            About   (src/.../link-ids.ts)\n                        \n                        \n                            Action   (src/.../cell-summary.actions.ts)\n                        \n                        \n                            Action   (src/.../download.action.ts)\n                        \n                        \n                            Action   (src/.../medical-illustration.actions.ts)\n                        \n                        \n                            AppTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            CELL_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_AGGREGATE_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            ContactAcknowledgement   (src/.../resource-ids.ts)\n                        \n                        \n                            DEFAULT_GRADIENTS   (src/.../cell-summary.state.ts)\n                        \n                        \n                            DEFAULT_LOGGABLE_ACTIONS   (src/.../default-loggable-actions.ts)\n                        \n                        \n                            DEFAULT_SIZES   (src/.../cell-summary.state.ts)\n                        \n                        \n                            DOWNLOAD_ENTRY   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT_ID   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_MODEL   (src/.../download.model.ts)\n                        \n                        \n                            Embed   (src/.../link-ids.ts)\n                        \n                        \n                            ExploreFTU   (src/.../link-ids.ts)\n                        \n                        \n                            Gradient   (src/.../resource-types.ts)\n                        \n                        \n                            GradientLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            GradientLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            Illustration   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPage   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageDepthDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPagePartners   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageReadMore   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LOGGABLE_ACTIONS   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            mapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            Metrics   (src/.../resource-ids.ts)\n                        \n                        \n                            Metrics   (src/.../resource-types.ts)\n                        \n                        \n                            MetricsLogo   (src/.../resource-ids.ts)\n                        \n                        \n                            MetricsTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Png   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            PNG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                        \n                            Portal   (src/.../link-ids.ts)\n                        \n                        \n                            PRIMITIVE_TYPES   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            ProductLogoUrl   (src/.../resource-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../link-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Size   (src/.../resource-types.ts)\n                        \n                        \n                            SizeLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            SizeLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            STATE_LOGGER_PROVIDER   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            Svg   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            SVG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/link-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        About\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('About')\n                    \n                \n\n            \n                \n                    About Link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Embed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Embed')\n                    \n                \n\n            \n                \n                    LinkId for Embed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ExploreFTU\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ExploreFTU')\n                    \n                \n\n            \n                \n                    LinkId for Explore FTU\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Illustration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Illustration')\n                    \n                \n\n            \n                \n                    LinkId for Illustration metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPage')\n                    \n                \n\n            \n                \n                    Landing page id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageReadMore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPageReadMore')\n                    \n                \n\n            \n                \n                    LinkId for read more in landing page content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Portal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Portal')\n                    \n                \n\n            \n                \n                    LinkId for HRA Portal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title link id\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.action.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Download')\n                    \n                \n\n            \n                \n                    Action Group for Download Action\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Medical Illustration')\n                    \n                \n\n            \n                \n                    Action base\n\n                \n            \n\n        \n    \n\n    src/lib/resource-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('AppTitle')\n                    \n                \n\n            \n                \n                    App title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ContactAcknowledgement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ContactAcknowledgement')\n                    \n                \n\n            \n                \n                    Message to display after submitting contact form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegend')\n                    \n                \n\n            \n                \n                    Gradient legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Gradient legend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthDescription')\n                    \n                \n\n            \n                \n                    Lanading Page Depth Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthImg')\n                    \n                \n\n            \n                \n                    Landing Page Depth Img id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthMoreText')\n                    \n                \n\n            \n                \n                    Landing Page Depth More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthTitle')\n                    \n                \n\n            \n                \n                    Landing Page Depth Title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroDescription')\n                    \n                \n\n            \n                \n                    Landing Page Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroImg')\n                    \n                \n\n            \n                \n                    Landing Page Intro Image id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroMoreText')\n                    \n                \n\n            \n                \n                    Landing Page More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPagePartners\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroPartners')\n                    \n                \n\n            \n                \n                    Landing Page Partners id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroTitle')\n                    \n                \n\n            \n                \n                    Landing Page Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('Metrics')\n                    \n                \n\n            \n                \n                    metrics id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsLogo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsLogo')\n                    \n                \n\n            \n                \n                    Metrics Logo id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsTitle')\n                    \n                \n\n            \n                \n                    Metrics Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductLogoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductLogoUrl')\n                    \n                \n\n            \n                \n                    Product logo url id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegend')\n                    \n                \n\n            \n                \n                    Size legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Size legend\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CELL_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n  metadata: z\n    .object({\n      label: z.string(),\n      value: z.string(),\n    })\n    .array()\n    .array(),\n})\n                    \n                \n\n            \n                \n                    The CELL_SCHEMA has an object that contains an id and a label for the cell,\nanother object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_AGGREGATE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA.shape['metadata'],\n          })\n          .optional()\n      )\n      .array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\nan array of columns that are strings, and an array of rows that are AggregateRow objects.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\nwhere each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.state.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_GRADIENTS\n                        \n                    \n                \n            \n                \n                    \n                        Type :         GradientPoint[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  { color: '#000000', percentage: 0 },\n  { color: '#000000', percentage: 1 },\n]\n                    \n                \n\n            \n                \n                    Default gradient points\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DEFAULT_SIZES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         SizePoint[]\n\n                    \n                \n                \n                    \n                        Default value : [\n  { label: '', radius: 1 },\n  { label: '', radius: 5 },\n]\n                    \n                \n\n            \n                \n                    Default size points\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/default-loggable-actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ContactActions.SendMessage,\n  DownloadActions.Download,\n  LinkRegistryActions.Navigate,\n]\n                    \n                \n\n            \n                \n                    Default loggable actions\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [\n  z.object({ type: z.literal('url'), url: z.string() }),\n  z.object({ type: z.literal('data'), data: z.string() }),\n])\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_ENTRY,\nwhich is a discriminated union of two objects with different properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    id: DOWNLOAD_FORMAT_ID,\n    label: z.string(),\n    extension: z.string(),\n  })\n  .partial({ extension: true })\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT,\nwhich is an object with id, label, and extension properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `DownloadFormatId:'${id}'`)\n  .brand('DownloadFormatId')\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT_ID,\nwhich is a string that is transformed into a branded string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_MODEL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  formats: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_FORMAT),\n  entries: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_ENTRY),\n})\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_MODEL,\nwhich is an object with formats and entries properties\n\n                \n            \n\n        \n    \n\n    src/lib/resource-types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Gradient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('gradient', payload())\n                    \n                \n\n            \n                \n                    Gradient legend resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType(\n  'metrics',\n  payload()\n)\n                    \n                \n\n            \n                \n                    Metrics resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Size\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('size', payload())\n                    \n                \n\n            \n                \n                    Size legend resource\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n})\n                    \n                \n\n            \n                \n                    Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRIMITIVE_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['bigint', 'boolean', 'number', 'string']\n                    \n                \n\n            \n                \n                    Primitive types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATE_LOGGER_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n}\n                    \n                \n\n            \n                \n                    State Login Provider\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapEntry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n})\n                    \n                \n\n            \n                \n                    Map Entry typings\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Png\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('png')\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Svg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('svg')\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PNG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Png,\n  label: 'Download Png',\n  extension: '.png',\n}\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Svg,\n  label: 'Download Svg',\n  extension: '.svg',\n}\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
