var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Add.html",[0,0.146,1,1.536]],["body/classes/Add.html",[0,0.198,1,2.548,2,0.644,3,0.203,4,0.332,5,0.203,6,2.979,7,2.979,8,2.909,9,0.236,10,0.975,11,3.962,12,2.855,13,3.566,14,4.414,15,0.654,16,0.515,17,1.947,18,2.739,19,2.22,20,0.384,21,1.17,22,2.909,23,0.647,24,4.679,25,3.968,26,3.246,27,0.437,28,0.025,29,0.437,30,0.297,31,2.213,32,2.373,33,3.136,34,1.028,35,2.096,36,1.533,37,0.264,38,2.303,39,0.318,40,0.94,41,1.17,42,2.562,43,1.17,44,2.562,45,2.419,46,2.562,47,2.562,48,2.562,49,1.935,50,2.909,51,0.017,52,0.017]],["title/classes/AddEntry.html",[0,0.146,53,1.928]],["body/classes/AddEntry.html",[0,0.243,1,2.098,2,0.648,3,0.204,4,0.175,5,0.278,9,0.175,10,0.858,15,0.607,19,1.346,20,0.204,21,1.819,23,0.478,27,0.44,28,0.026,29,0.44,30,0.299,37,0.362,39,0.389,40,0.945,41,1.819,51,0.017,52,0.017,53,2.633,54,2.112,55,2.457,56,2.82,57,3.461,58,3.098,59,3.496,60,3.461,61,3.152,62,1.956,63,1.938,64,0.971,65,1.259,66,2.431,67,1.938,68,1.66,69,1.105,70,2.112,71,2.869,72,2.963,73,1.938,74,2.084,75,2.32,76,2.098,77,1.956,78,2.076,79,2.32,80,2.112,81,1.346,82,1.938,83,2.32,84,2.32,85,2.32]],["title/classes/CellSummarySelectors.html",[0,0.146,86,2.915]],["body/classes/CellSummarySelectors.html",[0,0.157,2,0.694,3,0.219,4,0.187,5,0.219,9,0.187,15,0.693,16,0.555,18,3.022,20,0.291,23,0.681,27,0.626,28,0.025,29,0.626,30,0.425,37,0.426,39,0.252,51,0.018,52,0.018,86,4.17,87,2.651,88,2.651,89,3.708,90,3.301,91,3.434,92,1.572,93,4.925,94,3.299,95,4.925,96,3.925,97,1.677,98,4.925,99,3.708,100,2.94,101,1.652,102,1.473,103,4.925,104,3.708,105,2.076,106,1.109,107,2.361,108,2.485,109,2.765,110,3.708,111,4.925,112,1.791,113,3.708,114,3.708]],["title/injectables/CellSummaryState.html",[109,2.568,115,1.03]],["body/injectables/CellSummaryState.html",[0,0.09,3,0.126,4,0.108,5,0.126,9,0.108,10,0.683,15,0.553,16,0.32,20,0.195,23,0.457,27,0.421,28,0.026,29,0.515,30,0.286,31,1.685,34,1.476,36,0.953,37,0.351,39,0.145,43,1.127,51,0.012,52,0.012,55,1.286,62,1.685,69,2.116,81,1.918,87,1.942,88,1.942,91,1.853,92,1.056,94,2.268,96,1.304,97,0.728,100,2.501,101,1.279,102,1.364,106,0.639,107,2.501,108,1.432,109,2.468,112,1.473,115,0.99,116,1.024,117,2.137,118,2.218,119,1.853,120,3.497,121,3.309,122,3.309,123,2.553,124,3.309,125,2.137,126,2.468,127,3.309,128,1.105,129,1.853,130,2.137,131,2.714,132,3.009,133,2.762,134,2.137,135,2.137,136,2.137,137,2.218,138,1.593,139,2.137,140,1.432,141,3.309,142,1.432,143,0.953,144,2.137,145,2.019,146,1.304,147,2.137,148,3.309,149,3.429,150,3.009,151,2.137,152,2.137,153,4.05,154,2.137,155,3.647,156,3.497,157,2.137,158,2.137,159,2.137,160,1.593,161,3.009,162,2.137,163,2.218,164,2.137,165,3.309,166,0.831,167,1.105,168,1.593,169,1.853,170,2.137,171,3.309,172,2.137,173,4.05,174,2.137,175,2.137,176,2.137,177,3.309,178,2.218,179,3.309,180,3.309,181,1.304,182,3.309,183,2.137,184,3.309,185,2.137,186,2.137,187,2.137,188,2.137,189,3.309,190,2.137,191,1.432,192,2.137,193,2.137,194,2.137,195,3.309,196,1.593,197,2.137,198,3.309,199,2.137,200,3.309,201,4.56,202,2.137,203,2.137,204,2.137,205,2.137,206,2.137,207,2.137,208,2.137,209,2.137,210,3.309,211,2.137,212,2.137,213,2.137,214,3.309,215,2.137,216,2.137,217,2.137,218,2.137]],["title/interfaces/CellSummaryStateModel.html",[96,2.101,219,1.338]],["body/interfaces/CellSummaryStateModel.html",[3,0.142,4,0.121,5,0.142,9,0.121,15,0.383,16,0.359,17,2.015,20,0.369,28,0.026,30,0.207,31,2.015,32,2.16,34,0.718,36,1.07,37,0.185,39,0.413,51,0.013,52,0.013,55,2.019,62,2.015,68,1.15,69,1.388,81,1.405,87,1.15,88,1.15,91,3.057,94,3.057,96,2.954,100,3.065,101,1.22,107,2.796,119,2.024,131,1.608,132,3.331,133,1.343,137,2.916,140,2.423,142,3.246,145,2.206,150,3.71,155,2.423,156,2.423,161,2.654,163,3.66,166,2.401,168,3.611,178,2.423,181,3.169,191,2.423,219,2.019,220,1.343,221,1.608,222,3.061,223,3.061,224,3.061,225,3.061,226,3.244,227,2.423,228,4.072,229,3.061,230,3.061,231,3.061,232,2.696,233,2.954,234,2.436,235,1.343,236,3.874,237,2.436,238,2.436,239,1.789,240,1.789,241,2.031,242,1.789,243,2.031,244,3.611,245,1.789,246,1.789,247,3.482,248,3.798,249,3.244,250,1.608,251,2.696,252,1.789,253,2.696,254,1.789,255,1.789,256,1.789,257,1.789,258,1.789,259,1.789,260,2.031,261,3.061,262,2.031,263,3.061,264,2.031,265,2.031]],["title/classes/ClearEntries.html",[0,0.146,82,1.928]],["body/classes/ClearEntries.html",[0,0.247,1,1.62,2,0.68,3,0.214,4,0.183,5,0.287,9,0.183,10,0.875,15,0.619,19,1.411,21,1.237,28,0.026,37,0.374,39,0.396,40,0.976,41,1.864,51,0.017,52,0.017,53,2.033,54,2.215,55,2.127,56,2.855,58,2.829,59,2.963,61,2.434,62,1.511,63,2.033,64,1.018,65,1.321,66,2.511,67,2.033,68,1.741,69,1.159,70,2.215,71,2.963,72,3.004,73,2.033,74,2.125,75,2.434,76,2.166,77,2.02,78,2.127,79,2.434,80,2.963,81,1.888,82,2.719,83,2.434,84,2.434,85,2.434]],["title/classes/ComputeAggregate.html",[0,0.146,120,2.308]],["body/classes/ComputeAggregate.html",[0,0.202,2,0.663,3,0.209,4,0.179,5,0.209,9,0.241,10,0.904,15,0.506,20,0.209,21,1.206,23,0.489,27,0.45,28,0.025,29,0.45,30,0.306,37,0.416,39,0.324,40,0.959,41,1.626,49,1.736,51,0.017,52,0.017,63,1.982,64,0.992,65,1.287,69,1.13,74,1.736,78,1.856,87,2.289,88,2.289,94,3.381,100,2.982,101,1.873,107,2.59,108,2.373,119,2.673,120,3.876,126,3.56,138,4.312,166,1.376,234,1.982,235,1.982,237,3.025,238,1.982,266,2.64,267,4.896,268,4.502,269,3.54,270,3.54,271,4.574,272,2.64,273,2.373,274,2.64,275,3.56,276,2.997,277,2.64,278,2.997]],["title/injectables/ContactState.html",[115,1.03,279,2.915]],["body/injectables/ContactState.html",[0,0.255,3,0.207,4,0.177,5,0.207,9,0.177,10,0.902,15,0.658,16,0.526,19,1.366,20,0.207,23,0.486,27,0.446,28,0.025,29,0.733,30,0.303,37,0.463,39,0.238,51,0.017,52,0.017,64,0.985,92,1.516,97,1.197,102,1.051,106,1.051,112,1.278,115,1.725,116,1.684,123,3.228,143,1.567,169,1.967,232,3.542,279,4.881,280,3.513,281,4.75,282,5.255,283,5.765,284,4.881,285,4.75,286,5.765,287,4.813,288,4.75,289,1.567,290,4.75,291,3.513,292,4.022,293,4.013,294,4.75,295,4.022,296,3.513,297,3.607,298,2.898,299,2.355,300,2.355,301,3.513,302,3.513,303,3.513,304,3.513]],["title/classes/Download.html",[0,0.146,56,1.536]],["body/classes/Download.html",[0,0.244,1,1.563,2,0.656,3,0.207,4,0.177,5,0.317,9,0.177,10,0.901,15,0.57,19,1.362,20,0.207,21,1.615,23,0.484,27,0.445,28,0.026,29,0.445,30,0.303,37,0.365,39,0.391,40,0.953,41,1.831,51,0.017,52,0.017,53,1.962,54,2.138,55,2.089,56,2.916,58,3.111,59,2.893,61,2.349,62,1.458,63,1.962,64,0.983,65,1.275,66,2.452,67,1.962,68,1.68,69,1.118,70,2.138,71,2.893,72,3.04,73,1.962,74,2.095,75,2.349,76,2.397,77,2.236,78,2.089,79,2.349,80,2.138,81,1.362,82,1.962,83,2.349,84,2.349,85,2.349,305,2.967,306,3.504]],["title/classes/DownloadSelectors.html",[0,0.146,307,2.915]],["body/classes/DownloadSelectors.html",[0,0.166,2,0.733,3,0.231,4,0.197,5,0.231,9,0.197,15,0.602,16,0.586,18,2.722,20,0.231,23,0.541,27,0.497,28,0.026,29,0.497,30,0.338,37,0.393,39,0.266,40,0.786,51,0.018,52,0.018,56,2.276,66,3.227,67,2.192,69,1.629,72,3.125,81,1.984,90,4.29,92,1.629,97,1.333,102,1.527,105,3.18,106,1.171,112,1.423,289,1.746,307,4.321,308,3.914,309,5.095,310,4.234,311,5.103,312,4.487,313,3.914,314,3.914,315,3.914,316,3.914]],["title/classes/DownloadState.html",[0,0.146,317,2.915]],["body/classes/DownloadState.html",[0,0.07,1,1.204,2,0.31,3,0.098,4,0.083,5,0.322,9,0.083,10,0.404,15,0.592,16,0.248,19,0.643,20,0.257,23,0.601,27,0.553,28,0.026,29,0.652,30,0.375,34,1.18,35,2.086,37,0.395,39,0.112,40,1.199,45,1.768,51,0.01,52,0.01,53,2.612,55,1.813,56,2.846,58,1.396,62,1.642,67,0.926,69,1.851,71,1.647,72,2.823,73,2.612,80,1.647,81,1.049,82,1.915,92,0.862,97,1.344,101,0.757,102,1.395,106,0.495,112,1.244,128,2.889,129,3.056,143,0.738,146,1.009,166,0.643,169,2.21,196,1.234,289,1.525,292,1.401,297,2.645,298,1.647,300,1.109,309,1.401,310,2.55,312,1.234,317,2.286,318,1.654,319,2.013,320,2.55,321,2.7,322,2.013,323,2.286,324,2.286,325,2.286,326,2.286,327,4.348,328,2.7,329,5.165,330,2.7,331,1.654,332,2.7,333,2.7,334,1.654,335,2.7,336,2.7,337,2.7,338,1.654,339,2.943,340,2.7,341,2.7,342,1.654,343,2.7,344,2.7,345,2.7,346,2.7,347,2.7,348,1.654,349,1.401,350,1.401,351,1.234,352,1.234,353,1.401,354,1.401,355,1.401,356,1.654,357,1.654,358,2.286,359,1.401,360,1.654,361,1.654,362,1.654,363,3.42,364,2.55,365,1.654,366,1.654,367,1.654,368,2.7,369,1.654,370,1.654,371,1.654,372,2.7,373,2.236,374,5.458,375,2.7,376,1.654,377,1.654,378,1.654,379,1.654,380,1.654,381,1.654,382,1.654,383,1.654,384,2.7,385,3.42,386,1.654,387,1.401,388,1.654,389,1.654,390,1.654,391,1.654,392,1.654,393,1.654,394,1.654,395,1.654,396,1.654,397,1.654,398,1.654,399,1.654,400,1.654,401,1.654,402,1.654,403,1.654,404,1.654,405,3.42,406,1.654,407,1.654,408,1.654,409,1.654,410,1.654,411,1.654,412,1.654,413,1.654,414,1.654,415,1.654,416,1.654,417,1.654,418,1.654,419,1.654,420,1.654,421,1.654,422,1.654,423,1.401,424,1.401]],["title/interfaces/GradientPoint.html",[131,2.308,219,1.338]],["body/interfaces/GradientPoint.html",[3,0.146,4,0.124,5,0.146,9,0.124,15,0.261,16,0.369,17,1.84,20,0.372,28,0.026,30,0.213,31,2.043,32,2.19,34,1.323,36,1.1,37,0.19,39,0.416,51,0.013,52,0.013,55,1.719,62,2.043,68,1.182,69,1.412,81,1.435,87,1.182,88,1.182,91,2.749,94,2.067,96,2.252,100,2.82,101,1.035,107,2.742,119,2.067,131,2.474,132,3.792,133,2.477,137,3.834,140,1.653,142,3.942,145,2.252,150,3.668,155,2.474,156,2.474,161,2.698,163,3.291,166,2.286,168,2.752,178,2.474,181,2.995,191,2.474,219,2.044,220,1.381,221,1.653,222,2.088,223,2.088,224,2.088,225,2.088,226,2.752,227,1.653,228,3.92,229,2.088,230,2.088,231,2.088,232,1.839,233,2.698,234,2.477,235,1.381,236,3.92,237,2.477,238,2.477,239,1.839,240,1.839,241,2.088,242,1.839,243,2.088,244,3.661,245,1.839,246,1.839,247,3.524,248,3.834,249,3.298,250,1.653,251,2.752,252,1.839,253,2.752,254,1.839,255,1.839,256,1.839,257,1.839,258,1.839,259,1.839,260,3.125,261,4.157,262,3.125,263,4.157,264,3.125,265,3.125]],["title/classes/Load.html",[0,0.146,425,2.568]],["body/classes/Load.html",[0,0.203,2,0.898,3,0.283,4,0.242,5,0.283,9,0.242,10,0.933,15,0.615,28,0.024,37,0.369,39,0.325,51,0.021,52,0.021,64,1.344,65,1.744,74,1.744,101,1.747,425,4.647,426,3.213,427,3.213,428,4.794,429,5.797,430,4.177,431,4.323,432,4.794]],["title/interfaces/MedicalIllustrationModel.html",[219,1.338,433,2.308]],["body/interfaces/MedicalIllustrationModel.html",[3,0.322,4,0.182,5,0.286,9,0.182,16,0.541,17,2.014,20,0.359,28,0.025,30,0.54,34,1.633,37,0.278,39,0.328,43,1.649,51,0.017,52,0.017,55,1.404,69,1.153,150,2.204,167,3.235,219,2.122,220,2.023,233,2.204,234,2.023,235,2.023,237,2.023,247,2.421,248,4.598,319,3.609,322,2.694,373,3,433,3.244,434,1.732,435,1.732,436,2.694,437,2.71,438,3.014,439,3.504,440,3.114,441,4.84,442,2.694,443,3.059,444,3.059,445,3.059,446,3.059,447,3.059,448,3.059,449,3.059,450,3.059,451,3.059,452,3.059,453,3.059,454,3.059,455,3.059,456,3.059]],["title/classes/MedicalIllustrationSelectors.html",[0,0.146,457,2.915]],["body/classes/MedicalIllustrationSelectors.html",[0,0.153,2,0.677,3,0.213,4,0.182,5,0.322,9,0.182,15,0.513,16,0.541,18,3,20,0.286,23,0.669,27,0.615,28,0.026,29,0.615,30,0.418,34,1.448,37,0.42,39,0.245,43,1.649,51,0.017,52,0.017,90,3.244,92,1.545,97,1.649,102,1.872,105,2.023,106,1.081,112,1.76,167,3.014,289,2.159,373,2.795,433,4.284,434,2.617,435,2.617,437,3.265,438,3.014,440,2.617,457,4.098,458,3.612,459,4.84,460,4.84,461,3.612,462,4.84,463,3.612,464,2.204,465,2.694,466,3.612,467,4.84,468,3.612,469,3.612]],["title/injectables/MedicalIllustrationState.html",[115,1.03,465,2.568]],["body/injectables/MedicalIllustrationState.html",[0,0.114,3,0.276,4,0.136,5,0.16,9,0.136,10,0.405,15,0.544,16,0.405,19,1.051,20,0.303,23,0.645,27,0.593,28,0.026,29,0.652,30,0.403,37,0.453,39,0.268,51,0.014,52,0.014,69,0.863,92,1.261,97,1.59,101,0.758,102,1.396,106,0.809,112,0.983,115,1.182,116,1.296,118,2.648,123,2.212,129,2.212,143,1.206,146,1.649,167,2.413,169,1.514,277,4.253,289,2.29,297,3.129,298,1.649,300,1.812,349,2.289,350,2.289,358,3.344,359,2.289,373,2.461,423,2.289,424,2.289,433,1.812,434,2.461,435,2.461,437,2.875,438,2.042,439,3.058,440,1.894,442,2.016,464,1.649,465,2.946,470,2.289,471,3.95,472,3.594,473,3.594,474,3.594,475,2.703,476,5.3,477,3.95,478,2.703,479,2.648,480,2.703,481,3.95,482,3.95,483,3.129,484,2.703,485,3.95,486,2.703,487,3.95,488,2.703,489,2.648,490,2.703,491,2.703,492,2.703,493,2.703,494,2.703,495,2.946,496,5.134,497,2.289,498,2.703,499,2.703,500,3.95,501,2.703,502,2.703]],["title/classes/RegisterFormat.html",[0,0.146,73,1.928]],["body/classes/RegisterFormat.html",[0,0.244,1,1.559,2,0.655,3,0.206,4,0.176,5,0.279,9,0.176,10,0.861,15,0.61,19,1.359,20,0.206,21,1.612,23,0.483,27,0.444,28,0.026,29,0.444,30,0.302,37,0.364,39,0.39,40,0.951,41,1.828,51,0.017,52,0.017,53,1.957,54,2.133,55,2.087,56,2.765,58,2.775,59,2.888,61,2.343,62,1.454,63,1.957,64,0.98,65,1.271,66,2.974,67,1.957,68,1.676,69,1.116,70,2.133,71,3.51,72,3.133,73,2.651,74,2.092,75,2.343,76,2.394,77,2.233,78,2.087,79,2.343,80,2.133,81,1.359,82,1.957,83,2.343,84,2.343,85,2.343,305,2.96,503,3.496]],["title/interfaces/ScreenModeModel.html",[219,1.338,504,2.308]],["body/interfaces/ScreenModeModel.html",[3,0.285,4,0.244,5,0.285,9,0.244,15,0.512,16,0.723,17,2.422,20,0.285,28,0.025,39,0.328,51,0.021,52,0.021,219,1.876,220,2.703,319,3.599,504,3.902,505,3.235,506,3.235,507,4.827,508,3.235,509,3.235,510,4.35,511,3.5,512,3.902,513,4.929]],["title/classes/ScreenModeSelectors.html",[0,0.146,514,2.915]],["body/classes/ScreenModeSelectors.html",[0,0.172,2,0.761,3,0.24,4,0.205,5,0.24,9,0.205,15,0.554,16,0.608,18,2.771,20,0.24,23,0.561,27,0.516,28,0.025,29,0.516,30,0.351,37,0.402,39,0.276,40,0.816,51,0.019,52,0.019,90,4.332,92,1.668,97,1.383,102,1.563,105,3.236,106,1.215,112,1.477,483,3.503,504,4.09,505,3.503,506,3.503,508,4.407,509,4.09,510,3.503,511,2.926,514,4.425,515,4.061,516,5.226,517,4.061,518,5.226,519,3.438,520,4.061]],["title/injectables/ScreenModeState.html",[115,1.03,521,2.915]],["body/injectables/ScreenModeState.html",[0,0.155,3,0.216,4,0.185,5,0.216,9,0.185,10,0.823,15,0.647,16,0.548,20,0.216,23,0.506,27,0.465,28,0.026,29,0.62,30,0.316,37,0.47,39,0.248,40,0.981,45,1.892,49,2.332,51,0.018,52,0.018,92,1.558,97,1.246,102,1.095,106,1.095,115,1.46,116,1.754,123,3.282,128,1.892,129,2.734,143,1.632,146,2.233,289,1.632,351,2.729,352,2.729,364,2.729,495,3.641,504,3.272,505,3.272,506,3.272,508,4.21,509,4.093,510,3.682,519,3.098,521,4.133,522,3.659,523,4.882,524,3.098,525,4.133,526,3.659,527,4.882,528,3.659,529,3.098,530,3.659,531,2.453,532,3.659]],["title/classes/SendMessage.html",[0,0.146,287,2.568]],["body/classes/SendMessage.html",[0,0.251,2,0.8,3,0.252,4,0.215,5,0.252,9,0.215,10,0.639,20,0.349,21,2.015,23,0.59,25,4.024,27,0.543,28,0.025,29,0.543,30,0.369,37,0.415,39,0.29,41,1.454,51,0.019,52,0.019,64,1.513,65,1.553,74,1.553,78,1.66,219,2.098,284,4.569,287,4.024,293,4.781,295,3.616,299,2.862,325,4.569,533,4.27,534,5.397,535,5.397,536,5.397,537,4.27,538,6.549,539,4.27,540,4.27]],["title/classes/Set.html",[0,0.146,49,1.252]],["body/classes/Set.html",[0,0.182,2,0.807,3,0.254,4,0.217,5,0.254,9,0.274,10,0.645,20,0.254,21,1.468,23,0.596,27,0.548,28,0.025,29,0.548,30,0.372,37,0.332,39,0.292,40,0.866,41,1.468,49,2.338,51,0.02,52,0.02,64,1.208,65,1.567,74,1.567,76,2.421,77,2.258,78,1.675,505,3.638,506,3.638,508,3.638,509,4.181,510,3.983,511,3.327,512,3.638,513,4.596,529,3.649,541,4.309,542,5.428,543,4.309,544,4.309,545,4.309]],["title/classes/Set-1.html",[0,0.122,49,1.048,196,2.149]],["body/classes/Set-1.html",[0,0.191,1,2.013,2,0.611,3,0.192,4,0.335,5,0.192,6,3.129,7,3.129,8,2.761,9,0.228,10,0.964,11,2.761,12,1.989,13,3.47,14,4.413,15,0.66,16,0.488,17,1.878,18,2.679,19,2.172,20,0.385,21,1.111,22,2.761,23,0.715,25,3.861,26,3.158,27,0.414,28,0.025,29,0.414,30,0.282,31,2.325,32,2.492,33,2.186,34,0.975,35,1.989,36,1.455,37,0.251,38,2.186,39,0.306,40,0.907,41,1.111,42,3.366,43,1.537,44,3.366,45,3.033,46,3.366,47,3.366,48,3.366,49,2.263,50,2.761,51,0.016,52,0.016,546,4.514,547,4.514,548,3.261]],["title/classes/SetActiveNode.html",[0,0.146,472,2.101]],["body/classes/SetActiveNode.html",[0,0.227,2,0.652,3,0.205,4,0.176,5,0.279,9,0.176,10,0.899,20,0.205,21,1.185,23,0.481,27,0.442,28,0.026,29,0.442,30,0.3,34,1.411,37,0.363,39,0.363,40,1.076,41,1.824,43,1.824,49,2.302,51,0.017,52,0.017,64,0.975,65,1.265,74,1.947,76,2.561,77,2.389,78,2.081,167,2.768,373,2.753,434,2.262,435,2.262,437,1.948,438,2.968,439,3.606,440,2.753,464,2.122,472,2.878,473,2.122,474,2.122,479,4.023,489,3.589,549,2.594,550,3.848,551,3.478,552,3.478,553,2.945,554,3.993]],["title/classes/SetData.html",[0,0.146,275,2.568]],["body/classes/SetData.html",[0,0.205,2,0.675,3,0.213,4,0.182,5,0.213,9,0.244,10,0.91,15,0.382,20,0.213,21,1.227,23,0.498,27,0.458,28,0.026,29,0.458,30,0.311,37,0.419,39,0.328,40,0.971,41,1.646,49,2.118,51,0.017,52,0.017,63,2.018,64,1.01,65,1.31,69,1.15,74,1.757,78,1.878,87,2.316,88,2.316,94,3.052,100,2.613,101,1.892,107,2.316,108,2.415,119,2.018,120,3.239,126,2.687,138,3.603,166,2.119,234,2.018,235,2.018,237,2.018,238,2.018,266,2.687,267,4.091,268,4.763,271,4.615,272,2.687,273,2.415,274,2.687,275,4.343,276,3.051,277,3.603,278,3.051,555,3.603,556,3.603]],["title/classes/SetMapping.html",[0,0.146,473,2.101]],["body/classes/SetMapping.html",[0,0.228,2,0.656,3,0.207,4,0.177,5,0.317,9,0.177,10,0.901,20,0.207,21,1.194,23,0.484,27,0.445,28,0.026,29,0.445,30,0.303,34,1.723,37,0.365,39,0.365,40,1.08,41,1.831,43,1.615,49,2.306,51,0.017,52,0.017,64,0.983,65,1.275,74,1.955,76,2.569,77,2.396,78,2.089,167,3.111,373,2.885,434,2.274,435,2.274,437,1.962,438,2.977,439,3.369,440,2.274,464,2.138,472,2.138,473,2.893,474,2.138,479,3.603,489,3.603,549,2.613,550,3.86,554,4.008,557,2.967,558,3.504]],["title/classes/SetUri.html",[0,0.146,474,2.101]],["body/classes/SetUri.html",[0,0.227,2,0.653,3,0.206,4,0.176,5,0.279,9,0.176,10,0.899,20,0.206,21,1.188,23,0.482,27,0.443,28,0.026,29,0.443,30,0.301,34,1.719,37,0.364,39,0.364,40,1.077,41,1.826,43,1.826,49,2.304,51,0.017,52,0.017,64,0.978,65,1.268,74,1.95,76,2.564,77,2.391,78,2.084,167,2.772,373,2.88,434,2.266,435,2.266,437,1.953,438,3.105,439,3.363,440,2.266,464,2.127,472,2.127,473,2.127,474,2.883,479,3.594,489,4.026,549,2.6,550,3.852,553,2.953,554,3.998,557,2.953,559,3.487]],["title/interfaces/Source.html",[4,0.174,219,1.338]],["body/interfaces/Source.html",[3,0.238,4,0.344,5,0.238,6,2.261,7,2.261,9,0.204,10,0.605,16,0.605,17,2.166,20,0.372,28,0.025,31,1.68,32,1.801,34,1.931,37,0.311,39,0.391,51,0.019,52,0.019,106,1.208,123,2.916,128,2.087,166,2.509,219,1.569,220,2.261,560,3.418,561,5.207,562,5.464,563,5.464,564,5.156,565,4.409,566,2.706,567,3.418,568,3.418,569,3.418,570,3.011]],["title/classes/SourceListSelectors.html",[0,0.146,571,2.915]],["body/classes/SourceListSelectors.html",[0,0.238,2,0.717,3,0.226,4,0.332,5,0.226,6,2.817,7,2.817,9,0.254,13,3.372,14,3.372,15,0.657,16,0.573,18,2.693,20,0.226,23,0.529,27,0.487,28,0.025,29,0.487,30,0.331,31,2.482,32,2.244,37,0.432,38,2.566,39,0.26,40,0.769,43,1.713,51,0.018,52,0.018,92,1.605,97,1.304,101,1.673,102,1.505,105,3.146,106,1.145,112,1.392,160,3.751,166,1.955,566,3.999,571,4.259,572,3.829,573,5.03,574,4.621,575,5.03,576,5.03,577,3.829,578,3.829,579,3.829,580,3.829]],["title/injectables/SourceListState.html",[115,1.03,574,2.568]],["body/injectables/SourceListState.html",[0,0.129,1,2.722,3,0.18,4,0.308,5,0.18,6,2.793,7,2.793,9,0.154,10,0.456,12,3.307,13,3.633,14,3.833,15,0.696,16,0.456,20,0.254,23,0.594,26,2.623,27,0.546,28,0.026,29,0.634,30,0.371,31,1.789,32,1.918,33,2.039,37,0.44,38,2.039,39,0.206,40,1.089,42,3.207,43,1.846,44,4.042,45,2.578,46,3.207,47,3.207,48,3.207,49,2.267,51,0.015,52,0.015,77,1.789,92,1.372,97,1.465,101,1.206,102,1.286,106,0.91,115,1.286,116,1.459,118,2.882,128,2.223,129,2.408,143,1.357,146,1.856,289,1.918,351,2.269,352,2.269,364,2.269,495,3.719,524,2.576,525,3.641,531,2.882,566,2.039,570,4.55,574,3.207,581,3.042,582,3.042,583,4.3,584,3.042,585,3.042,586,3.042,587,3.042,588,3.042]],["title/injectables/StateAnalyticsPluginService.html",[115,1.03,589,2.568]],["body/injectables/StateAnalyticsPluginService.html",[0,0.09,3,0.126,4,0.107,5,0.126,9,0.166,10,0.952,12,1.298,15,0.611,16,0.319,19,1.282,20,0.372,23,0.294,26,2.012,27,0.27,28,0.026,29,0.27,30,0.184,34,1.208,35,1.298,36,2.752,37,0.35,39,0.274,40,1.092,43,1.85,45,1.705,51,0.012,52,0.012,69,1.571,92,1.052,101,0.596,102,1.473,106,0.636,112,1.79,115,1.473,116,1.02,129,2.261,133,1.846,143,0.949,149,3.851,166,0.827,169,2.547,227,2.21,268,2.459,273,1.426,289,1.801,298,1.298,320,1.586,326,1.801,339,3.011,483,1.426,511,1.846,512,1.426,550,1.426,589,3.011,590,2.459,591,4.392,592,2.459,593,1.586,594,4.549,595,5.89,596,4.549,597,3.297,598,5.614,599,4.549,600,2.127,601,3.297,602,3.297,603,6.24,604,4.038,605,4.038,606,2.127,607,3.419,608,2.127,609,3.297,610,2.792,611,2.127,612,2.127,613,2.792,614,2.792,615,2.459,616,1.801,617,2.792,618,1.801,619,1.801,620,1.801,621,1.801,622,1.801,623,1.801,624,2.127,625,2.792,626,2.792,627,2.127,628,1.801,629,3.419,630,1.801,631,1.801,632,1.801,633,2.792,634,2.792,635,1.801,636,3.297,637,2.127,638,2.127,639,2.127,640,2.127,641,2.127,642,2.127,643,2.127,644,2.127,645,2.127,646,2.127,647,2.127,648,2.127,649,2.127,650,2.127,651,2.127,652,2.127,653,2.127,654,2.127,655,2.127,656,3.297,657,4.038,658,2.127,659,2.127,660,2.127,661,2.127,662,1.801,663,1.801,664,1.801,665,1.801,666,1.801]],["title/classes/TissueLibrarySelectors.html",[0,0.146,667,2.915]],["body/classes/TissueLibrarySelectors.html",[0,0.236,2,0.708,3,0.223,4,0.191,5,0.223,9,0.252,15,0.629,16,0.566,18,2.676,20,0.329,23,0.522,27,0.48,28,0.025,29,0.48,30,0.326,37,0.457,39,0.256,40,0.759,43,1.698,51,0.018,52,0.018,64,1.059,92,1.591,97,1.287,101,1.777,102,1.491,105,3.125,106,1.13,112,1.374,160,3.718,166,1.938,299,2.532,426,3.342,427,3.342,430,3.978,431,3.718,439,2.792,667,4.221,668,3.777,669,4.986,670,4.601,671,4.986,672,4.986,673,4.426,674,3.777,675,3.777,676,4.986,677,4.986,678,3.198,679,3.777,680,3.198,681,3.777,682,3.777]],["title/injectables/TissueLibraryState.html",[115,1.03,670,2.568]],["body/injectables/TissueLibraryState.html",[0,0.148,3,0.207,4,0.177,5,0.207,9,0.239,10,0.525,15,0.701,16,0.525,19,1.843,20,0.207,23,0.484,27,0.445,28,0.025,29,0.603,30,0.303,33,3.179,37,0.477,39,0.238,40,0.704,43,1.615,51,0.017,52,0.017,64,0.983,77,1.973,92,1.513,97,1.194,101,1.809,102,1.419,106,1.048,112,1.275,115,1.419,116,1.68,118,3.179,128,2.452,143,1.563,169,2.655,297,3.603,298,2.138,299,2.349,300,2.349,353,2.967,425,2.613,426,3.179,427,3.179,430,4.324,431,2.613,531,3.179,564,2.967,635,2.967,670,3.536,673,2.613,678,2.967,683,3.504,684,4.742,685,4.742,686,4.876,687,4.742,688,3.504,689,4.742,690,4.742,691,3.504,692,3.504,693,3.504,694,3.504,695,3.504]],["title/dependencies.html",[696,2.44,697,3.503]],["body/dependencies.html",[28,0.024,51,0.022,52,0.022,143,2.346,697,5.186,698,5.26,699,5.26,700,5.26,701,5.26,702,6.125]],["title/miscellaneous/functions.html",[703,1.614,704,3.503]],["body/miscellaneous/functions.html",[9,0.219,16,0.651,20,0.322,27,0.694,28,0.025,29,0.694,30,0.471,34,1.872,36,2.662,51,0.02,52,0.02,56,2.435,58,2.249,62,2.483,72,2.618,76,1.94,102,1.633,133,2.435,289,1.94,320,3.243,511,2.435,512,2.915,590,3.243,591,4.45,592,3.243,593,4.071,615,3.243,618,3.683,619,3.683,620,3.683,621,3.683,622,3.683,623,3.683,625,3.683,626,3.683,703,2.435,704,3.683,705,5.46,706,3.243,707,5.46,708,3.683,709,3.243,710,4.349]],["title/index.html",[16,0.432,711,2.882,712,2.882]],["body/index.html",[15,0.647,28,0.022,51,0.022,52,0.022,713,5.221,714,5.221,715,6.098,716,5.221,717,6.098,718,6.098,719,5.221,720,5.221,721,5.221]],["title/modules.html",[722,3.967]],["body/modules.html",[28,0.023,51,0.023,52,0.023,722,4.644]],["title/overview.html",[723,3.967]],["body/overview.html",[2,1.004,28,0.022,51,0.022,52,0.022,116,2.57,220,3.001,723,4.538,724,5.36,725,5.36,726,5.36]],["title/properties.html",[17,1.721,696,2.44]],["body/properties.html",[17,2.256,28,0.024,51,0.022,52,0.022,727,5.422,728,5.422]],["title/miscellaneous/typealiases.html",[703,1.614,729,4.137]],["body/miscellaneous/typealiases.html",[4,0.223,6,1.769,7,1.769,10,0.661,15,0.335,16,0.473,20,0.403,28,0.016,31,1.314,32,1.409,36,1.409,51,0.016,52,0.016,55,1.228,58,2.631,59,3.105,66,2.631,68,1.514,81,1.228,87,1.514,88,1.514,91,2.472,100,2.642,101,0.886,107,2.78,119,2.472,123,3.086,128,2.282,132,1.927,145,2.693,161,1.927,181,1.927,191,2.959,221,4.027,233,2.693,236,4.324,237,3.523,238,1.769,239,2.355,240,2.355,242,3.292,250,3.694,312,4.11,329,4.309,426,2.117,427,2.117,430,2.117,434,2.117,435,2.117,436,3.292,440,2.117,470,3.738,476,3.738,531,2.117,560,4.309,565,4.666,566,2.959,567,3.738,568,3.738,569,3.738,570,3.292,673,3.292,680,2.674,686,3.738,703,1.769,706,4.324,709,2.355,730,3.158,731,4.91,732,3.738,733,4.415,734,4.415,735,5.09,736,4.91,737,5.799,738,5.799,739,5.511,740,2.674,741,2.674,742,2.674,743,2.674]],["title/miscellaneous/variables.html",[703,1.614,744,3.503]],["body/miscellaneous/variables.html",[3,0.129,5,0.075,9,0.11,10,0.655,12,0.78,15,0.136,16,0.191,17,1.183,20,0.272,26,1.735,28,0.025,30,0.11,31,1.397,32,1.68,34,1.004,35,4.112,36,2.982,45,0.661,51,0.008,52,0.008,54,0.78,55,0.497,56,1.269,62,2.622,64,0.359,66,1.126,68,0.613,70,0.78,72,1.61,81,1.105,87,1.044,88,1.044,91,1.219,100,1.044,101,0.611,107,1.044,115,0.382,132,1.328,133,0.716,137,0.857,140,0.857,142,2.524,145,0.78,150,3.279,155,1.46,156,1.46,161,1.328,163,1.46,166,1.79,178,1.46,181,1.328,221,2.251,226,0.953,227,0.857,228,2.504,233,0.78,234,1.88,235,1.88,238,1.592,244,2.808,245,0.953,246,0.953,247,3.22,248,4.157,249,2.121,250,0.857,251,1.624,252,0.953,253,2.121,254,0.953,255,0.953,256,0.953,257,0.953,258,0.953,259,3.056,266,1.624,272,0.953,273,1.46,274,0.953,282,1.083,293,0.953,310,2.808,322,3.435,323,1.083,324,1.083,339,2.121,354,1.844,355,1.844,373,1.044,387,3.189,434,0.613,435,0.613,436,1.624,438,1.47,440,1.044,442,0.953,443,1.083,444,1.083,445,1.083,446,1.083,447,1.083,448,1.083,449,1.083,450,1.083,451,1.083,452,1.083,453,1.083,454,1.083,455,1.083,456,1.083,483,1.46,497,1.844,511,0.716,562,1.844,563,3.47,589,0.953,590,1.624,591,3.056,592,0.953,593,2.504,607,1.844,610,1.083,613,2.408,614,2.408,615,0.953,616,1.844,617,1.083,628,1.083,629,2.408,630,1.083,631,1.083,632,1.083,633,1.083,634,1.083,662,1.083,663,1.844,664,1.083,665,1.083,666,1.083,703,0.716,706,2.504,708,2.408,709,0.953,731,2.843,732,1.083,736,2.843,740,2.843,741,2.843,742,2.843,743,2.408,744,1.083,745,4.606,746,6.411,747,1.279,748,2.177,749,6.08,750,2.177,751,1.279,752,2.177,753,2.844,754,2.177,755,3.358,756,2.177,757,2.177,758,2.177,759,2.177,760,2.177,761,2.177,762,2.177,763,2.177,764,2.177,765,2.177,766,2.177,767,2.177,768,2.177,769,4.804,770,2.177,771,2.177,772,4.373,773,3.358,774,2.844,775,2.844,776,2.177,777,3.358,778,2.177,779,2.177,780,1.279,781,1.279,782,1.279,783,3.766,784,1.279,785,1.279,786,1.279,787,1.279,788,1.279,789,1.279,790,4.976,791,5.125,792,1.279,793,1.279,794,2.844,795,1.279,796,1.279,797,2.844,798,2.177,799,1.279,800,1.279,801,1.279,802,1.279,803,1.279,804,1.279,805,1.279,806,4.098,807,1.279,808,2.177,809,2.177,810,1.279,811,1.279,812,3.358,813,1.279,814,1.279,815,1.279,816,1.279,817,1.279,818,1.279,819,1.279,820,1.279,821,1.279,822,1.279,823,1.279,824,1.279,825,1.279,826,1.279,827,2.177,828,1.279,829,1.279,830,1.279,831,1.279,832,1.279,833,1.279,834,1.279,835,1.279,836,1.279,837,1.279,838,1.279,839,1.279,840,3.358,841,1.279,842,1.279,843,1.279,844,1.279,845,1.279,846,1.279,847,1.279,848,1.279,849,2.177,850,1.279,851,2.844,852,1.279,853,1.279,854,2.177,855,1.279,856,2.177,857,1.279]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"classes/DownloadState.html":{}}}],["0.0.1",{"_index":728,"title":{},"body":{"properties.html":{}}}],["1",{"_index":196,"title":{"classes/Set-1.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/DownloadState.html":{}}}],["15.1.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":186,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["2.3.0",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["21",{"_index":725,"title":{},"body":{"overview.html":{}}}],["2dftu",{"_index":451,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":726,"title":{},"body":{"overview.html":{}}}],["7",{"_index":724,"title":{},"body":{"overview.html":{}}}],["_ctx",{"_index":296,"title":{},"body":{"injectables/ContactState.html":{}}}],["action",{"_index":10,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('[contact",{"_index":540,"title":{},"body":{"classes/SendMessage.html":{}}}],["action('[medical",{"_index":554,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["action('[screenmode",{"_index":545,"title":{},"body":{"classes/Set.html":{}}}],["action('[tissuelibrary",{"_index":432,"title":{},"body":{"classes/Load.html":{}}}],["action('add",{"_index":79,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('clear",{"_index":83,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('computeaggregate",{"_index":278,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action('download",{"_index":84,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('register",{"_index":75,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('setdata",{"_index":276,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action(add",{"_index":583,"title":{},"body":{"injectables/SourceListState.html":{}}}],["action(addentry",{"_index":330,"title":{},"body":{"classes/DownloadState.html":{}}}],["action(clearentries",{"_index":333,"title":{},"body":{"classes/DownloadState.html":{}}}],["action(computeaggregate",{"_index":124,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action(download",{"_index":337,"title":{},"body":{"classes/DownloadState.html":{}}}],["action(load",{"_index":687,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["action(registerformat",{"_index":347,"title":{},"body":{"classes/DownloadState.html":{}}}],["action(sendmessage",{"_index":290,"title":{},"body":{"injectables/ContactState.html":{}}}],["action(set",{"_index":525,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["action(setactivenode",{"_index":477,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(setmapping",{"_index":481,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturi",{"_index":487,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action.summaries",{"_index":147,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action_log",{"_index":654,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["actiongroup",{"_index":63,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SetData.html":{}}}],["actiongroup('download",{"_index":70,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":274,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":339,"title":{},"body":{"classes/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["actions.ts",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":479,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["add",{"_index":1,"title":{"classes/Add.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["add(undefined",{"_index":582,"title":{},"body":{"injectables/SourceListState.html":{}}}],["addd",{"_index":61,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["added",{"_index":33,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["addentry",{"_index":53,"title":{"classes/AddEntry.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["addentry(ctx",{"_index":328,"title":{},"body":{"classes/DownloadState.html":{}}}],["adding",{"_index":11,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["adds",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["aggregate",{"_index":100,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregate[string]['rows'][number",{"_index":241,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregated",{"_index":230,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregatedata",{"_index":148,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregatedata[key",{"_index":158,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregaterow",{"_index":145,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregaterow[2",{"_index":243,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregaterowentry",{"_index":242,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":93,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["aggregates(state",{"_index":95,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["alias",{"_index":565,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":730,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":261,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["analytics",{"_index":591,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["anatomical_structure_of",{"_index":446,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["anchor",{"_index":408,"title":{},"body":{"classes/DownloadState.html":{}}}],["anchor.click",{"_index":413,"title":{},"body":{"classes/DownloadState.html":{}}}],["anchor.download",{"_index":411,"title":{},"body":{"classes/DownloadState.html":{}}}],["anchor.href",{"_index":412,"title":{},"body":{"classes/DownloadState.html":{}}}],["anchor.remove",{"_index":414,"title":{},"body":{"classes/DownloadState.html":{}}}],["angular/common",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":350,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["angular/core",{"_index":143,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{}}}],["another",{"_index":245,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apptitle",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":569,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":31,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":660,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["available",{"_index":309,"title":{},"body":{"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{}}}],["b",{"_index":214,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bar",{"_index":263,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["base",{"_index":272,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":175,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["being",{"_index":604,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["between",{"_index":139,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bigint",{"_index":617,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["biomarker",{"_index":181,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":405,"title":{},"body":{"classes/DownloadState.html":{}}}],["blob([entry.data",{"_index":380,"title":{},"body":{"classes/DownloadState.html":{}}}],["boolean",{"_index":511,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boolean/number/string/null/bigint/undefined",{"_index":623,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":226,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["brand('downloadformatid",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":381,"title":{},"body":{"classes/DownloadState.html":{}}}],["browser",{"_index":404,"title":{},"body":{"classes/DownloadState.html":{}}}],["builtin",{"_index":356,"title":{},"body":{"classes/DownloadState.html":{}}}],["calculates",{"_index":135,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["called",{"_index":738,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["canceluncompleted",{"_index":482,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["case",{"_index":372,"title":{},"body":{"classes/DownloadState.html":{}}}],["cell",{"_index":107,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell_schema",{"_index":244,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_schema.array",{"_index":252,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_aggregate_schema",{"_index":253,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_schema",{"_index":238,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellid",{"_index":165,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummary",{"_index":91,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellsummary[string]['entries",{"_index":171,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummaryselectors",{"_index":86,"title":{"classes/CellSummarySelectors.html":{}},"body":{"classes/CellSummarySelectors.html":{}}}],["cellsummarystate",{"_index":109,"title":{"injectables/CellSummaryState.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{}}}],["cellsummarystatemodel",{"_index":96,"title":{"interfaces/CellSummaryStateModel.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["check",{"_index":619,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["class",{"_index":0,"title":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{},"overview.html":{}}}],["clear",{"_index":80,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries",{"_index":82,"title":{"classes/ClearEntries.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries(ctx",{"_index":332,"title":{},"body":{"classes/DownloadState.html":{}}}],["client",{"_index":494,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["color",{"_index":137,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":260,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["columnid",{"_index":182,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindex",{"_index":188,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices",{"_index":177,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices[columnid",{"_index":184,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnlabel",{"_index":183,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns",{"_index":156,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["columns.length",{"_index":185,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns.push(columnlabel",{"_index":187,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["compute",{"_index":267,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate",{"_index":120,"title":{"classes/ComputeAggregate.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate(ctx",{"_index":122,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["computes",{"_index":126,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["constant",{"_index":250,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["constructor(data",{"_index":555,"title":{},"body":{"classes/SetData.html":{}}}],["constructor(format",{"_index":305,"title":{},"body":{"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["constructor(id",{"_index":57,"title":{},"body":{"classes/AddEntry.html":{}}}],["constructor(isfullscreen",{"_index":543,"title":{},"body":{"classes/Set.html":{}}}],["constructor(message",{"_index":537,"title":{},"body":{"classes/SendMessage.html":{}}}],["constructor(node",{"_index":551,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["constructor(public",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":41,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["constructor(sourcelist",{"_index":22,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(summaries",{"_index":269,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["constructor(url",{"_index":557,"title":{},"body":{"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["contact",{"_index":282,"title":{},"body":{"injectables/ContactState.html":{},"miscellaneous/variables.html":{}}}],["contact.actions",{"_index":301,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactacknowledgement",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactactions.sendmessage",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactmessage",{"_index":538,"title":{},"body":{"classes/SendMessage.html":{}}}],["contactservice",{"_index":286,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactstate",{"_index":279,"title":{"injectables/ContactState.html":{}},"body":{"injectables/ContactState.html":{}}}],["containing",{"_index":231,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["contains",{"_index":228,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":323,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":531,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["conversion",{"_index":420,"title":{},"body":{"classes/DownloadState.html":{}}}],["convert",{"_index":321,"title":{},"body":{"classes/DownloadState.html":{}}}],["converted",{"_index":402,"title":{},"body":{"classes/DownloadState.html":{}}}],["corresponding",{"_index":168,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["count",{"_index":161,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":153,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["counts[rowid",{"_index":190,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["create",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('gradient",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('size",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdownloadformatid('png",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid('svg",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid(id",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('about",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('embed",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('exploreftu",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('illustration",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpage",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpagereadmore",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('portal",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('producttitle",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('apptitle",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('contactacknowledgement",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegend",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegendinfo",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthdescription",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthimg",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthmoretext",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthtitle",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrodescription",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintroimg",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintromoretext",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintropartners",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrotitle",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metrics",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricslogo",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricstitle",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('productlogourl",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('producttitle",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegend",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegendinfo",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":76,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":128,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/DownloadState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.dispatch([new",{"_index":360,"title":{},"body":{"classes/DownloadState.html":{}}}],["ctx.getstate",{"_index":368,"title":{},"body":{"classes/DownloadState.html":{}}}],["ctx.patchstate",{"_index":159,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ctx.setstate",{"_index":363,"title":{},"body":{"classes/DownloadState.html":{}}}],["ctx.setstate(data",{"_index":695,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["current",{"_index":43,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["data",{"_index":101,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dataservice",{"_index":692,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["decorators",{"_index":97,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Add.html":{},"classes/DownloadState.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["default_loggable_actions",{"_index":613,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":146,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["define",{"_index":736,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["defines",{"_index":271,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["dependencies",{"_index":697,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["dependency",{"_index":640,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["depth",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describes",{"_index":222,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":618,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["diff",{"_index":198,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["different",{"_index":324,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":418,"title":{},"body":{"classes/DownloadState.html":{}}}],["discriminated",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatched",{"_index":605,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["display",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.body.appendchild(anchor",{"_index":410,"title":{},"body":{"classes/DownloadState.html":{}}}],["document.createelement('a",{"_index":409,"title":{},"body":{"classes/DownloadState.html":{}}}],["download",{"_index":56,"title":{"classes/Download.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["download(ctx",{"_index":336,"title":{},"body":{"classes/DownloadState.html":{}}}],["download.action",{"_index":357,"title":{},"body":{"classes/DownloadState.html":{}}}],["download.model",{"_index":67,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["download_entry",{"_index":740,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format",{"_index":741,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format_id",{"_index":742,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_model",{"_index":743,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadactions.download",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadcontext",{"_index":329,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloaddata(blob",{"_index":406,"title":{},"body":{"classes/DownloadState.html":{}}}],["downloadentry",{"_index":59,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformat",{"_index":66,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadformatid",{"_index":58,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformatid:'${id",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadmodel",{"_index":312,"title":{},"body":{"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloadremotedata(url",{"_index":422,"title":{},"body":{"classes/DownloadState.html":{}}}],["downloads",{"_index":416,"title":{},"body":{"classes/DownloadState.html":{}}}],["downloadselectors",{"_index":307,"title":{"classes/DownloadSelectors.html":{}},"body":{"classes/DownloadSelectors.html":{}}}],["downloadstate",{"_index":317,"title":{"classes/DownloadState.html":{}},"body":{"classes/DownloadState.html":{}}}],["draft.entries",{"_index":367,"title":{},"body":{"classes/DownloadState.html":{}}}],["draft.entries[id",{"_index":366,"title":{},"body":{"classes/DownloadState.html":{}}}],["draft.formats[format.id",{"_index":365,"title":{},"body":{"classes/DownloadState.html":{}}}],["draft.isfullscreen",{"_index":532,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["draft.push(...sourcelist",{"_index":587,"title":{},"body":{"injectables/SourceListState.html":{}}}],["each",{"_index":163,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["effectively",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["embed",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entires",{"_index":335,"title":{},"body":{"classes/DownloadState.html":{}}}],["entries",{"_index":81,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entries.reduce>((res",{"_index":172,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["entries[format",{"_index":369,"title":{},"body":{"classes/DownloadState.html":{}}}],["entry",{"_index":55,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.url",{"_index":376,"title":{},"body":{"classes/DownloadState.html":{}}}],["entry?.type",{"_index":371,"title":{},"body":{"classes/DownloadState.html":{}}}],["error('cannot",{"_index":383,"title":{},"body":{"classes/DownloadState.html":{}}}],["event",{"_index":647,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["execute",{"_index":721,"title":{},"body":{"index.html":{}}}],["exist_asctb",{"_index":452,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["explore",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploreftu",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["extends",{"_index":74,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["extension",{"_index":387,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":273,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["fakebase",{"_index":389,"title":{},"body":{"classes/DownloadState.html":{}}}],["fakebase).pathname",{"_index":393,"title":{},"body":{"classes/DownloadState.html":{}}}],["false",{"_index":530,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["feature",{"_index":225,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["fetch",{"_index":419,"title":{},"body":{"classes/DownloadState.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":374,"title":{},"body":{"classes/DownloadState.html":{}}}],["fileurl",{"_index":421,"title":{},"body":{"classes/DownloadState.html":{}}}],["finalpercentage",{"_index":201,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["form",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":72,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["format.id",{"_index":315,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats",{"_index":310,"title":{},"body":{"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["formats(state",{"_index":311,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats.ts",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats[id",{"_index":388,"title":{},"body":{"classes/DownloadState.html":{}}}],["formatted",{"_index":403,"title":{},"body":{"classes/DownloadState.html":{}}}],["ftu",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":518,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["fullscreen",{"_index":513,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{}}}],["function",{"_index":624,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["functions",{"_index":704,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtion",{"_index":622,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":210,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ga",{"_index":637,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["generated",{"_index":714,"title":{},"body":{"index.html":{}}}],["getactiontypefrominstance",{"_index":608,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getactiontypefrominstance(action",{"_index":649,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getcellcountmap(entries",{"_index":170,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["getrowsandcolumns",{"_index":176,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["gets",{"_index":160,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["getsourcelist",{"_index":575,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getsourcelist(state",{"_index":576,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getting",{"_index":711,"title":{"index.html":{}},"body":{}}],["given",{"_index":138,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["google",{"_index":594,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["googleanalyticsservice",{"_index":611,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["gradient",{"_index":142,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["gradientlegend",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientlegendinfo",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientpoint",{"_index":131,"title":{"interfaces/GradientPoint.html":{}},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["group",{"_index":68,"title":{},"body":{"classes/AddEntry.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guess",{"_index":385,"title":{},"body":{"classes/DownloadState.html":{}}}],["guessfilename(ctx",{"_index":386,"title":{},"body":{"classes/DownloadState.html":{}}}],["handle",{"_index":596,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handle(state",{"_index":597,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handler's",{"_index":568,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":601,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handling",{"_index":118,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["hasdata",{"_index":314,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["header",{"_index":502,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["helper",{"_index":567,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["highpoint",{"_index":197,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["highpoint.percentage",{"_index":199,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["hra",{"_index":64,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":358,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["httpclient",{"_index":349,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["https://base.com",{"_index":390,"title":{},"body":{"classes/DownloadState.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ids.ts",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illustration",{"_index":438,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions",{"_index":492,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.actions.ts",{"_index":549,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["illustration.actions.ts:20",{"_index":552,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["illustration.actions.ts:33",{"_index":558,"title":{},"body":{"classes/SetMapping.html":{}}}],["illustration.actions.ts:7",{"_index":559,"title":{},"body":{"classes/SetUri.html":{}}}],["illustration.model",{"_index":464,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["illustration.model.ts",{"_index":436,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustration.selectors.ts",{"_index":458,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:14",{"_index":463,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:22",{"_index":461,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state",{"_index":466,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state.ts",{"_index":470,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["illustration.state.ts:30",{"_index":488,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:38",{"_index":478,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:46",{"_index":484,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration/medical",{"_index":435,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustrations",{"_index":471,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["image",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immer",{"_index":352,"title":{},"body":{"classes/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["implements",{"_index":326,"title":{},"body":{"classes/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":535,"title":{},"body":{"classes/SendMessage.html":{}}}],["inferred",{"_index":739,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":232,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"interfaces/GradientPoint.html":{}}}],["init",{"_index":344,"title":{},"body":{"classes/DownloadState.html":{}}}],["initializes",{"_index":25,"title":{},"body":{"classes/Add.html":{},"classes/SendMessage.html":{},"classes/Set-1.html":{}}}],["inject",{"_index":298,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["inject(contactservice",{"_index":303,"title":{},"body":{"injectables/ContactState.html":{}}}],["inject(googleanalyticsservice",{"_index":638,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["inject(httpclient",{"_index":359,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["inject(tissuelibraryservice",{"_index":693,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["injectable",{"_index":115,"title":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":116,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"overview.html":{}}}],["injectiontoken",{"_index":606,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["injectiontoken('loggable",{"_index":632,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":635,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["input",{"_index":620,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["inset",{"_index":456,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["instance",{"_index":77,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["interface",{"_index":219,"title":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{}},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/SendMessage.html":{},"interfaces/Source.html":{}}}],["interfaces",{"_index":220,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{},"overview.html":{}}}],["interpolatecolor",{"_index":121,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatecolor(points",{"_index":130,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolated",{"_index":136,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["intro",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfullscreen",{"_index":510,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["isfullscreen(state",{"_index":516,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["isprimitive",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isprimitive(value",{"_index":625,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["json.stringify(action",{"_index":651,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["key",{"_index":149,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["label",{"_index":150,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":239,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["lanading",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpage",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthdescription",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthimg",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthmoretext",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthtitle",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedescription",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintroimg",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintromoretext",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagepartners",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagereadmore",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagetitle",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":713,"title":{},"body":{"index.html":{}}}],["library.actions",{"_index":691,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.actions.ts",{"_index":428,"title":{},"body":{"classes/Load.html":{}}}],["library.model",{"_index":678,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["library.model.ts",{"_index":735,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["library.selectors.ts",{"_index":668,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.selectors.ts:14",{"_index":675,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state",{"_index":679,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state.ts",{"_index":683,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.state.ts:22",{"_index":688,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library/tissue",{"_index":427,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["link",{"_index":562,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["linkid",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistryactions.navigate",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":12,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["list.actions",{"_index":586,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.actions.ts",{"_index":8,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["list.actions.ts:17",{"_index":547,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:22",{"_index":548,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:6",{"_index":24,"title":{},"body":{"classes/Add.html":{}}}],["list.model",{"_index":38,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["list.model.ts",{"_index":560,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["list.selectors.ts",{"_index":572,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.selectors.ts:13",{"_index":578,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state",{"_index":579,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state.ts",{"_index":581,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:20",{"_index":584,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:34",{"_index":585,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list/source",{"_index":7,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":425,"title":{"classes/Load.html":{}},"body":{"classes/Load.html":{},"injectables/TissueLibraryState.html":{}}}],["loading",{"_index":429,"title":{},"body":{"classes/Load.html":{}}}],["loads",{"_index":689,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["logaction(action",{"_index":648,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["loggable",{"_index":614,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggable_actions",{"_index":629,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggabletypes",{"_index":641,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logged",{"_index":631,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":602,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logging",{"_index":639,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["login",{"_index":662,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logo",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logs",{"_index":645,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["lowpoint",{"_index":194,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["lowpoint.percentage",{"_index":200,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["managing",{"_index":281,"title":{},"body":{"injectables/ContactState.html":{}}}],["map",{"_index":442,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["map((result",{"_index":499,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["mapentry",{"_index":440,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mapping",{"_index":167,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["mapping(state",{"_index":459,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["matching",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(rgb1[0",{"_index":207,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[1",{"_index":211,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[2",{"_index":215,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["medical",{"_index":437,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["medicalillustration",{"_index":493,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationcontext",{"_index":476,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["medicalillustrationmodel",{"_index":433,"title":{"interfaces/MedicalIllustrationModel.html":{}},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationselectors",{"_index":457,"title":{"classes/MedicalIllustrationSelectors.html":{}},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["medicalillustrationstate",{"_index":465,"title":{"injectables/MedicalIllustrationState.html":{}},"body":{"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["message",{"_index":293,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":284,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["metadata",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["method",{"_index":292,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadState.html":{}}}],["methods",{"_index":92,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["metrics",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricslogo",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricstitle",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":703,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":509,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["mode.actions",{"_index":528,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.actions.ts",{"_index":541,"title":{},"body":{"classes/Set.html":{}}}],["mode.actions.ts:4",{"_index":544,"title":{},"body":{"classes/Set.html":{}}}],["mode.model",{"_index":519,"title":{},"body":{"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["mode.model.ts",{"_index":507,"title":{},"body":{"interfaces/ScreenModeModel.html":{}}}],["mode.selectors.ts",{"_index":515,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.selectors.ts:14",{"_index":517,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.state.ts",{"_index":522,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.state.ts:22",{"_index":526,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode/screen",{"_index":506,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["model",{"_index":319,"title":{},"body":{"classes/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{}}}],["modules",{"_index":722,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":666,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["name.includes",{"_index":400,"title":{},"body":{"classes/DownloadState.html":{}}}],["name}${extension",{"_index":401,"title":{},"body":{"classes/DownloadState.html":{}}}],["needs",{"_index":656,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["new",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/DownloadState.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":598,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["next(state",{"_index":644,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngx",{"_index":612,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxs",{"_index":343,"title":{},"body":{"classes/DownloadState.html":{}}}],["ngxs/store",{"_index":106,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["ngxs_plugins",{"_index":610,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["ngxsnextpluginfn",{"_index":599,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxsoninit",{"_index":327,"title":{},"body":{"classes/DownloadState.html":{}}}],["ngxsoninit(ctx",{"_index":341,"title":{},"body":{"classes/DownloadState.html":{}}}],["ngxsplugin",{"_index":609,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["node",{"_index":439,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/TissueLibrarySelectors.html":{}}}],["node_name",{"_index":448,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":626,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":133,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":246,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":715,"title":{},"body":{"index.html":{}}}],["object",{"_index":166,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["object.values(formats).filter(hasdata",{"_index":316,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["objects",{"_index":32,"title":{},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":297,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["occurrences",{"_index":162,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ones",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["ontologyid",{"_index":449,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":30,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["organ_id",{"_index":445,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organ_label",{"_index":444,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["overall",{"_index":223,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["overview",{"_index":723,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":696,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papaparse",{"_index":491,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param",{"_index":40,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":490,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parse(result",{"_index":501,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parsedresult",{"_index":500,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parses",{"_index":485,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["partial",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partners",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchstate",{"_index":496,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["path",{"_index":391,"title":{},"body":{"classes/DownloadState.html":{}}}],["path.split('/').filter((seg",{"_index":395,"title":{},"body":{"classes/DownloadState.html":{}}}],["payload",{"_index":26,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["peer",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["percentage",{"_index":132,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["percentages",{"_index":262,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["pipe",{"_index":498,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["plugin",{"_index":595,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["plugin.service.ts",{"_index":593,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["plugin.service.ts:51",{"_index":600,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["plugin/default",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugin/state",{"_index":592,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["png_format",{"_index":354,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["point",{"_index":265,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["point.percentage",{"_index":193,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points",{"_index":141,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points[index",{"_index":195,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["portal",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primitive",{"_index":615,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["primitive_types",{"_index":616,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["primitive_types.includes(typeof",{"_index":627,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["private",{"_index":169,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["produce",{"_index":351,"title":{},"body":{"classes/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["produce((draft",{"_index":364,"title":{},"body":{"classes/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["product",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["productlogourl",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producttitle",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":564,"title":{},"body":{"interfaces/Source.html":{},"injectables/TissueLibraryState.html":{}}}],["provide",{"_index":664,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":633,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":607,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["provides",{"_index":630,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":546,"title":{},"body":{"classes/Set-1.html":{}}}],["r",{"_index":206,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["read",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["record",{"_index":178,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["ref/1",{"_index":453,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/doi",{"_index":454,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/notes",{"_index":455,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":71,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat",{"_index":73,"title":{"classes/RegisterFormat.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat(ctx",{"_index":346,"title":{},"body":{"classes/DownloadState.html":{}}}],["registerformat(png_format",{"_index":362,"title":{},"body":{"classes/DownloadState.html":{}}}],["registerformat(svg_format",{"_index":361,"title":{},"body":{"classes/DownloadState.html":{}}}],["registry",{"_index":345,"title":{},"body":{"classes/DownloadState.html":{}}}],["removes",{"_index":42,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["representation_of",{"_index":450,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["representing",{"_index":236,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["required",{"_index":676,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["res",{"_index":174,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["res[id",{"_index":173,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["resetting",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["resource",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsetype",{"_index":424,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["rest",{"_index":258,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retreiving",{"_index":669,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["retrieving",{"_index":573,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["return",{"_index":112,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["returns",{"_index":102,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["rgb1",{"_index":202,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[0",{"_index":209,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[1",{"_index":213,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[2",{"_index":217,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2",{"_index":204,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[0",{"_index":208,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[1",{"_index":212,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[2",{"_index":216,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["root",{"_index":634,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":191,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["row.length",{"_index":192,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowid",{"_index":179,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowlabel",{"_index":180,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rows",{"_index":155,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["rows[rowid",{"_index":189,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["run",{"_index":719,"title":{},"body":{"index.html":{}}}],["running",{"_index":716,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":300,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["save",{"_index":417,"title":{},"body":{"classes/DownloadState.html":{}}}],["schema",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["screen",{"_index":508,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmode",{"_index":529,"title":{},"body":{"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmodemodel",{"_index":504,"title":{"interfaces/ScreenModeModel.html":{}},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["screenmodeselectors",{"_index":514,"title":{"classes/ScreenModeSelectors.html":{}},"body":{"classes/ScreenModeSelectors.html":{}}}],["screenmodestate",{"_index":521,"title":{"injectables/ScreenModeState.html":{}},"body":{"injectables/ScreenModeState.html":{}}}],["seg",{"_index":396,"title":{},"body":{"classes/DownloadState.html":{}}}],["segments",{"_index":394,"title":{},"body":{"classes/DownloadState.html":{}}}],["segments.length",{"_index":397,"title":{},"body":{"classes/DownloadState.html":{}}}],["segments[segments.length",{"_index":399,"title":{},"body":{"classes/DownloadState.html":{}}}],["selected",{"_index":441,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["selectedformat",{"_index":85,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["selector",{"_index":105,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["selector(['cellsummarystate",{"_index":98,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector(['medicalillustrationstate",{"_index":460,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector(['sourceliststate",{"_index":577,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector(['tissuelibrarystate",{"_index":674,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selector([cellsummarystate",{"_index":111,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector([medicalillustrationstate",{"_index":467,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector([sourceliststate",{"_index":580,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector([tissuelibrarystate",{"_index":681,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selectors",{"_index":90,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{}}}],["send",{"_index":295,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sending",{"_index":283,"title":{},"body":{"injectables/ContactState.html":{}}}],["sendmessage",{"_index":287,"title":{"classes/SendMessage.html":{}},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sendmessage(_ctx",{"_index":288,"title":{},"body":{"injectables/ContactState.html":{}}}],["sends",{"_index":534,"title":{},"body":{"classes/SendMessage.html":{}}}],["serialize",{"_index":621,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["serialize(this",{"_index":658,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serialized",{"_index":657,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serializes",{"_index":655,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["service",{"_index":636,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set",{"_index":49,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"classes/Add.html":{},"classes/ComputeAggregate.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/SourceListState.html":{}}}],["set(inject(loggable_actions).map(getactiontypefrominstance",{"_index":642,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set(undefined",{"_index":524,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setactive",{"_index":684,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactive(ctx",{"_index":685,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactivenode",{"_index":472,"title":{"classes/SetActiveNode.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["setactivenode(undefined",{"_index":475,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["setdata",{"_index":275,"title":{"classes/SetData.html":{}},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["setmapping",{"_index":473,"title":{"classes/SetMapping.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["setmapping(undefined",{"_index":480,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["sets",{"_index":277,"title":{},"body":{"classes/ComputeAggregate.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{}}}],["setstate",{"_index":495,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setstate(sourcelist",{"_index":588,"title":{},"body":{"injectables/SourceListState.html":{}}}],["setting",{"_index":550,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["seturi",{"_index":474,"title":{"classes/SetUri.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["seturi(undefined",{"_index":486,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["shape",{"_index":224,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["show",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":233,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":259,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["sizelegend",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizelegendinfo",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{"interfaces/Source.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["source_spatial_entity",{"_index":447,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["sourcelist",{"_index":14,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sourcelistcontext",{"_index":570,"title":{},"body":{"interfaces/Source.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistmodel",{"_index":566,"title":{},"body":{"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistselectors",{"_index":571,"title":{"classes/SourceListSelectors.html":{}},"body":{"classes/SourceListSelectors.html":{}}}],["sourceliststate",{"_index":574,"title":{"injectables/SourceListState.html":{}},"body":{"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sources",{"_index":13,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["specific",{"_index":264,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["specified",{"_index":340,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/.../builtin",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cell",{"_index":731,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../default",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.action.ts",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.model.ts",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../link",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../medical",{"_index":732,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../resource",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../source",{"_index":733,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../state",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":734,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/cell",{"_index":87,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.actions.ts",{"_index":533,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.actions.ts:5",{"_index":539,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.state.ts",{"_index":280,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/contact/contact.state.ts:16",{"_index":291,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/download/builtin",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts",{"_index":54,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts:10",{"_index":503,"title":{},"body":{"classes/RegisterFormat.html":{}}}],["src/lib/download/download.action.ts:23",{"_index":60,"title":{},"body":{"classes/AddEntry.html":{}}}],["src/lib/download/download.action.ts:38",{"_index":306,"title":{},"body":{"classes/Download.html":{}}}],["src/lib/download/download.model.ts",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.selectors.ts",{"_index":308,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.selectors.ts:14",{"_index":313,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.state.ts",{"_index":318,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/download/download.state.ts:33",{"_index":342,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/download/download.state.ts:43",{"_index":348,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/download/download.state.ts:57",{"_index":331,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/download/download.state.ts:70",{"_index":334,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/download/download.state.ts:84",{"_index":338,"title":{},"body":{"classes/DownloadState.html":{}}}],["src/lib/link",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/medical",{"_index":434,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/resource",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/screen",{"_index":505,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["src/lib/source",{"_index":6,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/state",{"_index":590,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/tissue",{"_index":426,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":712,"title":{"index.html":{}},"body":{}}],["state",{"_index":15,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"classes/SetData.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state.aggregate",{"_index":113,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.isfullscreen",{"_index":520,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["state.mapping",{"_index":469,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state.nodes",{"_index":682,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["state.summaries",{"_index":114,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.url",{"_index":468,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state_logger_provider",{"_index":663,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["stateanalyticspluginservice",{"_index":589,"title":{"injectables/StateAnalyticsPluginService.html":{}},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["statecontext",{"_index":123,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["store",{"_index":268,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["stores",{"_index":127,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["storing",{"_index":523,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":254,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":561,"title":{},"body":{"interfaces/Source.html":{}}}],["submitted",{"_index":536,"title":{},"body":{"classes/SendMessage.html":{}}}],["submitting",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summaries",{"_index":94,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{}}}],["summaries(state",{"_index":103,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summaries[key].entries",{"_index":152,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summaries[key].label",{"_index":151,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary",{"_index":119,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["summary.actions",{"_index":144,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.actions.ts",{"_index":266,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["summary.actions.ts:20",{"_index":270,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["summary.actions.ts:9",{"_index":556,"title":{},"body":{"classes/SetData.html":{}}}],["summary.model",{"_index":108,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["summary.model.ts",{"_index":221,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["summary.selectors.ts",{"_index":89,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:15",{"_index":104,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:9",{"_index":99,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state",{"_index":110,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state.ts",{"_index":117,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:114",{"_index":134,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:20",{"_index":125,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary/cell",{"_index":88,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":78,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["svg",{"_index":322,"title":{},"body":{"classes/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["svg_format",{"_index":355,"title":{},"body":{"classes/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":370,"title":{},"body":{"classes/DownloadState.html":{}}}],["table",{"_index":229,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["tap",{"_index":353,"title":{},"body":{"classes/DownloadState.html":{},"injectables/TissueLibraryState.html":{}}}],["test",{"_index":720,"title":{},"body":{"index.html":{}}}],["tests",{"_index":718,"title":{},"body":{"index.html":{}}}],["text",{"_index":497,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["this.contact.sendmessage(message",{"_index":304,"title":{},"body":{"injectables/ContactState.html":{}}}],["this.dataservice.gettissues().pipe(tap((data",{"_index":694,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["this.downloaddata(data",{"_index":378,"title":{},"body":{"classes/DownloadState.html":{}}}],["this.downloaddata(new",{"_index":379,"title":{},"body":{"classes/DownloadState.html":{}}}],["this.downloadremotedata(entry.url).pipe(tap((data",{"_index":377,"title":{},"body":{"classes/DownloadState.html":{}}}],["this.ga.event(type",{"_index":653,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.getcellcountmap(entries",{"_index":154,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.getrowsandcolumns(entries",{"_index":157,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.guessfilename(ctx",{"_index":375,"title":{},"body":{"classes/DownloadState.html":{}}}],["this.hextorgb(highpoint.color",{"_index":205,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.hextorgb(lowpoint.color",{"_index":203,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.http.get(url",{"_index":423,"title":{},"body":{"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["this.logaction(action",{"_index":643,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.loggabletypes.has(type",{"_index":650,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.rgbtohex([r",{"_index":218,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.serialize",{"_index":652,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["throw",{"_index":382,"title":{},"body":{"classes/DownloadState.html":{}}}],["tissedata",{"_index":677,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissue",{"_index":430,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuedata",{"_index":680,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrary",{"_index":431,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissuelibrarycontext",{"_index":686,"title":{},"body":{"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrarymodel",{"_index":673,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibraryselectors",{"_index":667,"title":{"classes/TissueLibrarySelectors.html":{}},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibraryservice",{"_index":690,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["tissuelibrarystate",{"_index":670,"title":{"injectables/TissueLibraryState.html":{}},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissues",{"_index":671,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissues(state",{"_index":672,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["title",{"_index":563,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":628,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tooltip",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform((id",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformed",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigerred",{"_index":646,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["true",{"_index":483,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["tuple([z.string",{"_index":256,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":140,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":729,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":659,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["types",{"_index":227,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":737,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typings",{"_index":443,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/state",{"_index":65,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["ui/services",{"_index":299,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["undefined",{"_index":289,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"classes/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":164,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["unit",{"_index":717,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":603,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["update",{"_index":542,"title":{},"body":{"classes/Set.html":{}}}],["updates",{"_index":527,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["uri",{"_index":489,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["url",{"_index":373,"title":{},"body":{"classes/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":462,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["url(url",{"_index":392,"title":{},"body":{"classes/DownloadState.html":{}}}],["used",{"_index":320,"title":{},"body":{"classes/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":665,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":325,"title":{},"body":{"classes/DownloadState.html":{},"classes/SendMessage.html":{}}}],["uses",{"_index":294,"title":{},"body":{"injectables/ContactState.html":{}}}],["using",{"_index":285,"title":{},"body":{"injectables/ContactState.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.every(isprimitive",{"_index":661,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["values",{"_index":240,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":302,"title":{},"body":{"injectables/ContactState.html":{}}}],["variables",{"_index":744,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":727,"title":{},"body":{"properties.html":{}}}],["void",{"_index":129,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["whether",{"_index":512,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["window.url.createobjecturl(blob",{"_index":407,"title":{},"body":{"classes/DownloadState.html":{}}}],["window.url.revokeobjecturl(url",{"_index":415,"title":{},"body":{"classes/DownloadState.html":{}}}],["without",{"_index":384,"title":{},"body":{"classes/DownloadState.html":{}}}],["yes",{"_index":553,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetUri.html":{}}}],["z",{"_index":234,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":237,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["z.literal('data",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal('url",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number",{"_index":249,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":257,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.object",{"_index":247,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.record",{"_index":251,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.record(download_format_id",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":248,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.string().array",{"_index":255,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":235,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of adding a list of sources to the SourceList state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of Source objects to be added to the state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Add'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddEntry.html":{"url":"classes/AddEntry.html","title":"class - AddEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entry into download state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: DownloadFormatId, entry: DownloadEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for Addd Entry\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        DownloadEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CellSummarySelectors.html":{"url":"classes/CellSummarySelectors.html","title":"class - CellSummarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CellSummarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                selectors for the CellSummary state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                aggregates\n                            \n                            \n                                    Static\n                                summaries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        aggregates\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregates(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:9\n                \n            \n\n\n            \n                \n                    get the aggregate data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Aggregate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        summaries\n                        \n                    \n                \n            \n            \n                \n                    \n                    summaries(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:15\n                \n            \n\n\n            \n                \n                    get the summaries data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CellSummary\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Aggregate, CellSummaryStateModel, CellSummary } from './cell-summary.model';\nimport { CellSummaryState } from './cell-summary.state';\n\n/** selectors for the CellSummary state */\nexport class CellSummarySelectors {\n  /** get the aggregate data from the state */\n  @Selector([CellSummaryState])\n  static aggregates(state: CellSummaryStateModel): Aggregate {\n    return state.aggregate;\n  }\n\n  /** get the summaries data from the state */\n  @Selector([CellSummaryState])\n  static summaries(state: CellSummaryStateModel): CellSummary {\n    return state.summaries;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CellSummaryState.html":{"url":"injectables/CellSummaryState.html","title":"injectable - CellSummaryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CellSummaryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling cell summary data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeAggregate\n                            \n                            \n                                interpolateColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        computeAggregate\n                        \n                    \n                \n            \n            \n                \ncomputeAggregate(ctx: StateContext, action: ComputeAggregate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ComputeAggregate)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:20\n                \n            \n\n\n            \n                \n                    computes aggregate data and stores in the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                                ComputeAggregate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolateColor\n                        \n                    \n                \n            \n            \n                \ninterpolateColor(points: GradientPoint[], percentage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:114\n                \n            \n\n\n            \n                \n                    Calculates the interpolated color value at the given percentage between two points in a color gradient.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                GradientPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    percentage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { ComputeAggregate } from './cell-summary.actions';\nimport { Aggregate, AggregateRow, CellSummary, CellSummaryStateModel, GradientPoint } from './cell-summary.model';\n\n/** State handling cell summary data */\n@State({\n  name: 'cellsummary',\n  defaults: {\n    summaries: {},\n    aggregate: {},\n  },\n})\n@Injectable()\nexport class CellSummaryState {\n  /**\n   * computes aggregate data and stores in the current state\n   */\n  @Action(ComputeAggregate)\n  computeAggregate(ctx: StateContext, action: ComputeAggregate): void {\n    const summaries = action.summaries;\n    const aggregateData: Aggregate = {};\n\n    for (const key in summaries) {\n      const label = summaries[key].label;\n      const entries = summaries[key].entries;\n\n      const counts = this.getCellCountMap(entries);\n\n      const [rows, columns] = this.getRowsAndColumns(entries, counts);\n\n      aggregateData[key] = {\n        label: label,\n        columns: columns,\n        rows: rows,\n      };\n    }\n\n    ctx.patchState({\n      aggregate: aggregateData,\n    });\n  }\n\n  /** Gets a count of the number of occurrences of each unique cellId in an array of entries,\n   * and returns an object mapping each cellId to its corresponding count. */\n  private getCellCountMap(entries: CellSummary[string]['entries']): { [key: string]: number } {\n    return entries.reduce>((res, { cell: { id }, count }) => {\n      res[id] = res[id] ? res[id] + count : count;\n      return res;\n    }, {});\n  }\n\n  /** Returns an array of rows and columns based on an array of entries */\n  private getRowsAndColumns(\n    entries: CellSummary[string]['entries'],\n    counts: { [key: string]: number }\n  ): [rows: AggregateRow[], columns: string[]] {\n    const columns: string[] = [];\n    const columnIndices: Record = {};\n    const rows: Record = {};\n\n    for (const entry of entries) {\n      const {\n        cell: { id: rowId, label: rowLabel },\n        biomarker: { id: columnId, label: columnLabel },\n      } = entry;\n\n      if (!(columnId in columnIndices)) {\n        columnIndices[columnId] = columns.length + 2;\n        columns.push(columnLabel);\n      }\n      const columnIndex = columnIndices[columnId];\n\n      if (!(rowId in rows)) {\n        rows[rowId] = [rowLabel, counts[rowId]];\n      }\n      const row = rows[rowId];\n\n      if (row.length  point.percentage >= percentage);\n    const lowPoint = points[index - 1];\n    const highPoint = points[index];\n    const diff = highPoint.percentage - lowPoint.percentage;\n    const finalPercentage = (percentage - lowPoint.percentage) / diff;\n\n    const rgb1 = this.hexToRgb(lowPoint.color);\n    const rgb2 = this.hexToRgb(highPoint.color);\n\n    const r = Math.round(rgb1[0] + (rgb2[0] - rgb1[0]) * finalPercentage);\n    const g = Math.round(rgb1[1] + (rgb2[1] - rgb1[1]) * finalPercentage);\n    const b = Math.round(rgb1[2] + (rgb2[2] - rgb1[2]) * finalPercentage);\n\n    return this.rgbToHex([r, g, b]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CellSummaryStateModel.html":{"url":"interfaces/CellSummaryStateModel.html","title":"interface - CellSummaryStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CellSummaryStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                The CellSummaryStateModel interface describes the overall shape of the state for this feature.\nIt has two properties, summaries and aggregate, both of which are of their corresponding types.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregate\n                                        \n                                \n                                \n                                        \n                                            summaries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregate:         Aggregate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Aggregate\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry contains a label and a table of aggregated data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summaries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summaries:         CellSummary\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CellSummary\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry is an object containing information about a single cell and its corresponding biomarker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClearEntries.html":{"url":"classes/ClearEntries.html","title":"class - ClearEntries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClearEntries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear all entries from download state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeAggregate.html":{"url":"classes/ComputeAggregate.html","title":"class - ComputeAggregate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeAggregate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Compute aggregate of the given data and store to state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(summaries: z.infer<>)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        summaries\n                                                  \n                                                        \n                                                                    z.infer<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe cell summary data to compute aggregate for.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactState.html":{"url":"injectables/ContactState.html","title":"injectable - ContactState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.state.ts\n        \n\n\n            \n                Description\n            \n            \n                A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact'\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(_ctx: StateContext, undefined: SendMessage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SendMessage)\n                \n            \n\n            \n                \n                    Defined in src/lib/contact/contact.state.ts:16\n                \n            \n\n\n            \n                \n                    An action method for sending a message. It uses SendMessage action class to send messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _ctx\n                                    \n                                            StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SendMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { ContactService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { SendMessage } from './contact.actions';\n\n/** A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact' */\n@State({ name: 'contact' })\n@Injectable()\nexport class ContactState {\n  /** A variable to inject the ContactService */\n  private readonly contact = inject(ContactService);\n\n  /** An action method for sending a message. It uses SendMessage action class to send messages. */\n  @Action(SendMessage)\n  sendMessage(_ctx: StateContext, { message }: SendMessage): Observable {\n    return this.contact.sendMessage(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Download.html":{"url":"classes/Download.html","title":"class - Download","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Download\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Download file Action\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormatId)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of download.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadSelectors.html":{"url":"classes/DownloadSelectors.html","title":"class - DownloadSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Available format selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                formats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        formats\n                        \n                    \n                \n            \n            \n                \n                    \n                    formats(state: DownloadModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors available format for download selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                DownloadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormat[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { DownloadFormat, DownloadModel } from './download.model';\n\n/**\n * Available format selectors\n */\nexport class DownloadSelectors {\n  /**\n   * Selectors available format for download selectors\n   * @param state\n   * @returns\n   */\n  @Selector()\n  static formats(state: DownloadModel): DownloadFormat[] {\n    const { formats, entries } = state;\n    const hasData = (format: DownloadFormat | undefined): format is DownloadFormat =>\n      !!(format && format.id in entries);\n    return Object.values(formats).filter(hasData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadState.html":{"url":"classes/DownloadState.html","title":"class - DownloadState","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Download State Model used to convert\nfile from SVG file content to different\nformat and download to user.\n\n            \n\n\n            \n                Implements\n            \n            \n                        NgxsOnInit\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEntry\n                            \n                            \n                                clearEntries\n                            \n                            \n                                download\n                            \n                            \n                                ngxsOnInit\n                            \n                            \n                                registerFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEntry\n                        \n                    \n                \n            \n            \n                \naddEntry(ctx: DownloadContext, undefined: AddEntry)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddEntry)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:57\n                \n            \n\n\n            \n                \n                    Add entry into download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                AddEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEntries\n                        \n                    \n                \n            \n            \n                \nclearEntries(ctx: DownloadContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ClearEntries)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:70\n                \n            \n\n\n            \n                \n                    Clear entires from download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(ctx: DownloadContext, undefined: Download)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Download)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:84\n                \n            \n\n\n            \n                \n                    Actions download file in specified format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Download\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngxsOnInit\n                        \n                    \n                \n            \n            \n                \nngxsOnInit(ctx: DownloadContext)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/download/download.state.ts:33\n                \n            \n\n\n            \n                \n                    Ngxs on init and registry default format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerFormat\n                        \n                    \n                \n            \n            \n                \nregisterFormat(ctx: DownloadContext, undefined: RegisterFormat)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(RegisterFormat)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:43\n                \n            \n\n\n            \n                \n                    Actions register format in Download State\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RegisterFormat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject } from '@angular/core';\nimport { Action, NgxsOnInit, State } from '@ngxs/store';\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\n\nimport { PNG_FORMAT, SVG_FORMAT } from './builtin-formats';\nimport { AddEntry, ClearEntries, Download, RegisterFormat } from './download.action';\nimport { DownloadContext, DownloadFormatId, DownloadModel } from './download.model';\n\n/**\n * Download State Model used to convert\n * file from SVG file content to different\n * format and download to user.\n */\n@State({\n  name: 'download',\n  defaults: {\n    formats: {},\n    entries: {},\n  },\n})\nexport class DownloadState implements NgxsOnInit {\n  /**\n   * Http object inject for download state\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Ngxs on init and registry default format\n   * @param ctx\n   */\n  ngxsOnInit(ctx: DownloadContext): void {\n    ctx.dispatch([new RegisterFormat(SVG_FORMAT), new RegisterFormat(PNG_FORMAT)]);\n  }\n\n  /**\n   * Actions register format in Download State\n   * @param ctx\n   * @param { format }\n   */\n  @Action(RegisterFormat)\n  registerFormat(ctx: DownloadContext, { format }: RegisterFormat): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.formats[format.id] = format;\n      })\n    );\n  }\n\n  /**\n   * Add entry into download state\n   * @param ctx\n   * @param { id, entry }\n   */\n  @Action(AddEntry)\n  addEntry(ctx: DownloadContext, { id, entry }: AddEntry): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries[id] = entry;\n      })\n    );\n  }\n\n  /**\n   * Clear entires from download state\n   * @param ctx\n   */\n  @Action(ClearEntries)\n  clearEntries(ctx: DownloadContext): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries = {};\n      })\n    );\n  }\n\n  /**\n   * Actions download file in specified format\n   * @param ctx\n   * @param action\n   */\n  @Action(Download)\n  download(ctx: DownloadContext, { format }: Download): Observable | void {\n    const { entries } = ctx.getState();\n    const entry = entries[format];\n    switch (entry?.type) {\n      case 'url': {\n        const filename = this.guessFilename(ctx, format, entry.url);\n        return this.downloadRemoteData(entry.url).pipe(tap((data) => this.downloadData(data, filename)));\n      }\n\n      case 'data': {\n        const filename = this.guessFilename(ctx, format, '');\n        this.downloadData(new Blob([entry.data]), filename);\n        break;\n      }\n\n      default:\n        throw new Error('Cannot download file without data');\n    }\n  }\n\n  /**\n   * Guess filename\n   * @param ctx\n   * @param id\n   * @param url\n   * @returns filename\n   */\n  private guessFilename(ctx: DownloadContext, id: DownloadFormatId, url: string): string {\n    const { formats } = ctx.getState();\n    const { extension = '' } = formats[id] ?? {};\n    const fakeBase = 'https://base.com';\n    const path = new URL(url, fakeBase).pathname;\n    const segments = path.split('/').filter((seg) => seg !== '');\n    const name = segments.length > 0 ? segments[segments.length - 1] : 'download';\n    const guess = name.includes('.') ? name : `${name}${extension}`;\n\n    return guess;\n  }\n\n  /**\n   * Download converted formatted file to browser\n   * @param blob\n   * @param fileName\n   */\n  private downloadData(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n    anchor.download = filename;\n    anchor.href = url;\n    anchor.click();\n    anchor.remove();\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Downloads and save -  method is used to direct fetch file\n   * if available on url without conversion\n   * @param fileUrl\n   * @param fileName\n   */\n  private downloadRemoteData(url: string): Observable {\n    return this.http.get(url, { responseType: 'blob' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradientPoint.html":{"url":"interfaces/GradientPoint.html","title":"interface - GradientPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradientPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of gradient colors along with their percentages for the gradient bar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            percentage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gradient color at a specific percentage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Percentage point along the gradient bar\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load.html":{"url":"classes/Load.html","title":"class - Load","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of loading tissue data into the TissueLibrary state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** action of loading tissue data into the TissueLibrary state */\nexport class Load extends Action('[TissueLibrary] Load Tissue Data') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MedicalIllustrationModel.html":{"url":"interfaces/MedicalIllustrationModel.html","title":"interface - MedicalIllustrationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MedicalIllustrationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for medical illustration model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            mapping\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            node\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mapping\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mapping:         MapEntry[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mapping info\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         MapEntry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Current selected node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Illustration URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Map Entry typings */\nconst mapEntry = z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n});\n\nexport type MapEntry = z.infer;\n\n/** Interface for medical illustration model */\nexport interface MedicalIllustrationModel {\n  /** Illustration URL */\n  url?: string;\n  /** Current selected node */\n  node?: MapEntry;\n  /** Mapping info */\n  mapping?: MapEntry[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MedicalIllustrationSelectors.html":{"url":"classes/MedicalIllustrationSelectors.html","title":"class - MedicalIllustrationSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MedicalIllustrationSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for medical illustration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                mapping\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        mapping\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapping(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:22\n                \n            \n\n\n            \n                \n                    Returns current mapping file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MapEntry[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Returns illustration url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\n\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\nimport { MedicalIllustrationState } from './medical-illustration.state';\n\n/**\n * Selectors for medical illustration\n */\nexport class MedicalIllustrationSelectors {\n  /**\n   * Returns illustration url\n   */\n  @Selector([MedicalIllustrationState])\n  static url(state: MedicalIllustrationModel): string | undefined {\n    return state.url;\n  }\n\n  /**\n   * Returns current mapping file\n   */\n  @Selector([MedicalIllustrationState])\n  static mapping(state: MedicalIllustrationModel): MapEntry[] {\n    return state.mapping ?? [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MedicalIllustrationState.html":{"url":"injectables/MedicalIllustrationState.html","title":"injectable - MedicalIllustrationState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MedicalIllustrationState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling medical illustrations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActiveNode\n                            \n                            \n                                setMapping\n                            \n                            \n                                setUri\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActiveNode\n                        \n                    \n                \n            \n            \n                \nsetActiveNode(undefined: MedicalIllustrationContext, undefined: SetActiveNode)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetActiveNode)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:38\n                \n            \n\n\n            \n                \n                    Sets active node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetActiveNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMapping\n                        \n                    \n                \n            \n            \n                \nsetMapping(undefined: MedicalIllustrationContext, undefined: SetMapping)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetMapping, {cancelUncompleted: true})\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:46\n                \n            \n\n\n            \n                \n                    Parses and sets mapping info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetMapping\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUri\n                        \n                    \n                \n            \n            \n                \nsetUri(undefined: MedicalIllustrationContext, undefined: SetUri)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUri)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:30\n                \n            \n\n\n            \n                \n                    Sets illustration URI\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUri\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { parse } from 'papaparse';\nimport { map, Observable } from 'rxjs';\n\nimport { SetActiveNode, SetMapping, SetUri } from './medical-illustration.actions';\nimport { MedicalIllustrationModel, MapEntry } from './medical-illustration.model';\n\nexport type MedicalIllustrationContext = StateContext;\n\n/**\n * State handling medical illustrations\n */\n@State({\n  name: 'medicalIllustration',\n  defaults: {},\n})\n@Injectable()\nexport class MedicalIllustrationState {\n  /**\n   * Http client\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Sets illustration URI\n   */\n  @Action(SetUri)\n  setUri({ setState }: MedicalIllustrationContext, { url }: SetUri) {\n    setState({ url: url, node: undefined });\n  }\n\n  /**\n   * Sets active node\n   */\n  @Action(SetActiveNode)\n  setActiveNode({ patchState }: MedicalIllustrationContext, { node }: SetActiveNode) {\n    patchState({ node });\n  }\n\n  /**\n   * Parses and sets mapping info\n   */\n  @Action(SetMapping, { cancelUncompleted: true })\n  setMapping({ patchState }: MedicalIllustrationContext, { url }: SetMapping): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((result) => {\n        const parsedResult = parse(result, { header: true }).data as MapEntry[];\n        patchState({ mapping: parsedResult });\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterFormat.html":{"url":"classes/RegisterFormat.html","title":"class - RegisterFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Register format into state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormat)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of register format.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormat\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenModeModel.html":{"url":"interfaces/ScreenModeModel.html","title":"interface - ScreenModeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenModeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode state model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isFullScreen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isFullScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFullScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether in fullscreen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ScreenModeModel {\n  /** Whether in fullscreen */\n  isFullScreen: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenModeSelectors.html":{"url":"classes/ScreenModeSelectors.html","title":"class - ScreenModeSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenModeSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFullScreen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isFullScreen\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFullScreen(state: ScreenModeModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors screen mode selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ScreenModeModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if full screen\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/**\n * Screen mode selectors\n */\nexport class ScreenModeSelectors {\n  /**\n   * Selectors screen mode selectors\n   * @param state\n   * @returns true if full screen\n   */\n  @Selector()\n  static isFullScreen(state: ScreenModeModel): boolean {\n    return state.isFullScreen;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenModeState.html":{"url":"injectables/ScreenModeState.html","title":"injectable - ScreenModeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenModeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State storing the screen mode\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.state.ts:22\n                \n            \n\n\n            \n                \n                    Updates the screen mode\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport produce from 'immer';\nimport { Set } from './screen-mode.actions';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/** State storing the screen mode */\n@State({\n  name: 'screenmode',\n  defaults: {\n    isFullScreen: false,\n  },\n})\n@Injectable()\nexport class ScreenModeState {\n  /**\n   * Updates the screen mode\n   * @param ctx State context\n   * @param action Action with new mode\n   */\n  @Action(Set)\n  set({ setState }: StateContext, { isFullScreen }: Set): void {\n    setState(\n      produce((draft: ScreenModeModel) => {\n        draft.isFullScreen = isFullScreen;\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessage.html":{"url":"classes/SendMessage.html","title":"class - SendMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                A class which sends individual messages submitted by user.\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: ContactMessage)\n                    \n                \n                        \n                            \n                                Defined in src/lib/contact/contact.actions.ts:5\n                            \n                        \n\n                \n                    \n                            A constructor which initializes the message of type ContactMessage interface.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    ContactMessage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { ContactMessage } from '@hra-ui/services';\n\n/** A class which sends individual messages submitted by user. */\nexport class SendMessage extends Action('[Contact] Send Message') {\n  /** A constructor which initializes the message of type ContactMessage interface. */\n  constructor(readonly message: ContactMessage) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Update the screen mode\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(isFullScreen: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/screen-mode/screen-mode.actions.ts:4\n                            \n                        \n\n                \n                    \n                            Creates an instance of Set\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        isFullScreen\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether the mode is fullscreen\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** Update the screen mode */\nexport class Set extends Action('[Screenmode] Set Screenmode') {\n  /**\n   * Creates an instance of Set\n   * @param isFullScreen Whether the mode is fullscreen\n   */\n  constructor(readonly isFullScreen: boolean) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                An action that removes all current sources and adds new ones, effectively resetting the state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sourceList\n                            \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of source objects to be set as the new state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sourceList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Source[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:22\n                        \n                    \n\n            \n                \n                    array of source objects to be set as the new state\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Set'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetActiveNode.html":{"url":"classes/SetActiveNode.html","title":"class - SetActiveNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetActiveNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current active node\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node?: MapEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of set active node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        MapEntry\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetData.html":{"url":"classes/SetData.html","title":"class - SetData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Set data to store\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: object)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Defines the SetData action, which sets data to the store.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to set to the store.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetMapping.html":{"url":"classes/SetMapping.html","title":"class - SetMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the mapping file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:33\n                            \n                        \n\n                \n                    \n                            Creates an instance of set mapping.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUri.html":{"url":"classes/SetUri.html","title":"class - SetUri","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUri\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url?: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:7\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.model.ts\n        \n\n\n            \n                Description\n            \n            \n                structure of a source object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Link property of the source object\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title property of the source object\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StateContext } from '@ngxs/store';\n\n/** structure of a source object */\nexport interface Source {\n  /** Title property of the source object  */\n  title: string;\n  /** Link property of the source object */\n  link: string;\n}\n\n/** Type alias for the array of source objects */\nexport type SourceListModel = Source[];\n\n/** Helper alias for action handler's ctx argument */\nexport type SourceListContext = StateContext;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceListSelectors.html":{"url":"classes/SourceListSelectors.html","title":"class - SourceListSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceListSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retrieving data from the SourceListState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getSourceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getSourceList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourceList(state: SourceListModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['SourceListState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.selectors.ts:13\n                \n            \n\n\n            \n                \n                    Gets the array of data sources from the SourceList object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                SourceListModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current state of the SourceListState\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Source[]\n\n                    \n                    \n                        array of source objects\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Source, SourceListModel } from './source-list.model';\nimport { SourceListState } from './source-list.state';\n\n/** Selector class for retrieving data from the SourceListState */\nexport class SourceListSelectors {\n  /**\n   * Gets the array of data sources from the SourceList object.\n   * @param state The current state of the SourceListState\n   * @returns array of source objects\n   */\n  @Selector([SourceListState])\n  static getSourceList(state: SourceListModel): Source[] {\n    return state;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceListState.html":{"url":"injectables/SourceListState.html","title":"injectable - SourceListState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceListState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling source list data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(undefined: SourceListContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:20\n                \n            \n\n\n            \n                \n                    adds a list of sources to the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: SourceListContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:34\n                \n            \n\n\n            \n                \n                    Removes all current sources and adds new ones, effectively resetting the state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { produce } from 'immer';\nimport { Add, Set } from './source-list.actions';\nimport { SourceListContext, SourceListModel } from './source-list.model';\n\n/** State handling source list data */\n@State({\n  name: 'sourceList',\n  defaults: [],\n})\n@Injectable()\nexport class SourceListState {\n  /**\n   * adds a list of sources to the current state\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be added to the state\n   */\n  @Action(Add)\n  add({ setState }: SourceListContext, { sourceList }: Add) {\n    setState(\n      produce((draft) => {\n        draft.push(...sourceList);\n      })\n    );\n  }\n\n  /**\n   * Removes all current sources and adds new ones, effectively resetting the state.\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be set as the new state\n   */\n  @Action(Set)\n  set({ setState }: SourceListContext, { sourceList }: Set) {\n    setState(sourceList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateAnalyticsPluginService.html":{"url":"injectables/StateAnalyticsPluginService.html","title":"injectable - StateAnalyticsPluginService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateAnalyticsPluginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Analytics Plugin Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(state, action, next: NgxsNextPluginFn)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/state-analytics-plugin/state-analytics-plugin.service.ts:51\n                \n            \n\n\n            \n                \n                    Handles logger plugin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent state of the store with type unknown.\n\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent action being dispatched with type unknown type.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NgxsNextPluginFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnext plugin to handle the action\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nnext plugin with the current state and action.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, InjectionToken, Provider } from '@angular/core';\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, NGXS_PLUGINS } from '@ngxs/store';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\nimport { DEFAULT_LOGGABLE_ACTIONS } from './default-loggable-actions';\n\n/** Primitive types */\nconst PRIMITIVE_TYPES = ['bigint', 'boolean', 'number', 'string'];\n\n/**\n * Determines whether primitive is\n * @param value is string - used to check the input value from serialize funtion\n * @returns type of value - boolean/number/string/null/bigint/undefined\n */\nfunction isPrimitive(value: unknown): value is bigint | boolean | number | string | null | undefined {\n  return value == null || PRIMITIVE_TYPES.includes(typeof value);\n}\n\n/**\n * Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n */\nexport const LOGGABLE_ACTIONS = new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n});\n\n/**\n * Google Analytics Plugin Injectable\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateAnalyticsPluginService implements NgxsPlugin {\n  /**\n   * Injects the service for state analytics plugin.\n   */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Plugin service for logging state analytics\n   * Setting loggable action types from LOGGABLE_ACTIONS dependency.\n   */\n  private readonly loggableTypes = new Set(inject(LOGGABLE_ACTIONS).map(getActionTypeFromInstance));\n\n  /**\n   * Handles logger plugin\n   * @param state -  Current state of the store with type unknown.\n   * @param action - Current action being dispatched with type unknown type.\n   * @param next - next plugin to handle the action\n   * @returns - next plugin with the current state and action.\n   */\n  handle(state: unknown, action: unknown, next: NgxsNextPluginFn) {\n    this.logAction(action);\n    return next(state, action);\n  }\n\n  /**\n   * Logs action trigerred to google analytics event\n   * @param action - Current action being dispatched with type unknown type.\n   * @returns void\n   */\n  private logAction(action: unknown): void {\n    const type = getActionTypeFromInstance(action);\n    if (type && this.loggableTypes.has(type)) {\n      const payload = JSON.stringify(action, this.serialize);\n      this.ga.event(type, 'action_log', payload);\n    }\n  }\n\n  /**\n   * Serializes action data\n   * @param key - key with type unknown that needs to be serialized\n   * @param value - value with type unknown that needs to be serialized\n   * @returns serialized value\n   */\n  private serialize(this: void, key: unknown, value: unknown): unknown {\n    if (key === '' && typeof value === 'object') {\n      return { ...value, type: undefined };\n    } else if (isPrimitive(value) || (Array.isArray(value) && value.every(isPrimitive))) {\n      return value;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * State Login Provider\n */\nexport const STATE_LOGGER_PROVIDER: Provider = {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TissueLibrarySelectors.html":{"url":"classes/TissueLibrarySelectors.html","title":"class - TissueLibrarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TissueLibrarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retreiving data from the TissueLibraryState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        tissues\n                        \n                    \n                \n            \n            \n                \n                    \n                    tissues(state: TissueLibraryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['TissueLibraryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Gets the tissue data from the TissueLibrary object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TissueLibraryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the current state of the TissueLibraryState.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Required<>\n\n                    \n                    \n                        node data of the type of TisseData.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { TissueLibraryModel } from './tissue-library.model';\nimport { TissueLibraryState } from './tissue-library.state';\nimport { TissueData } from '@hra-ui/services';\n\n/** Selector class for retreiving data from the TissueLibraryState */\nexport class TissueLibrarySelectors {\n  /**\n   * Gets the tissue data from the TissueLibrary object.\n   * @param state the current state of the TissueLibraryState.\n   * @returns node data of the type of TisseData.\n   */\n  @Selector([TissueLibraryState])\n  static tissues(state: TissueLibraryModel): Required {\n    return state.nodes;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryState.html":{"url":"injectables/TissueLibraryState.html","title":"injectable - TissueLibraryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling tissue data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActive\n                        \n                    \n                \n            \n            \n                \nsetActive(ctx: TissueLibraryContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Load)\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.state.ts:22\n                \n            \n\n\n            \n                \n                    Loads the tissue data into the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                TissueLibraryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The state context instance\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        data The tissue data to be added to the state\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TissueLibraryService } from '@hra-ui/services';\nimport { Action, State } from '@ngxs/store';\nimport { Observable, tap } from 'rxjs';\nimport { Load } from './tissue-library.actions';\nimport { TissueLibraryContext, TissueLibraryModel } from './tissue-library.model';\n\n/** State handling tissue data*/\n@State({\n  name: 'tissueLibrary',\n})\n@Injectable()\nexport class TissueLibraryState {\n  /** injects the TissueLibraryService into a private readonly property */\n  private readonly dataService = inject(TissueLibraryService);\n  /**\n   * Loads the tissue data into the current state\n   * @param ctx The state context instance\n   * @returns data The tissue data to be added to the state\n   */\n  @Action(Load)\n  setActive(ctx: TissueLibraryContext): Observable {\n    return this.dataService.getTissues().pipe(tap((data) => ctx.setState(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createDownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            isPrimitive   (src/.../state-analytics-plugin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDownloadFormatId\n                        \n                    \n                \n            \n            \n                \ncreateDownloadFormatId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates download format id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormatId\n\n                    \n                    \n                        download format id\n\n                    \n                \n            \n        \n    \n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrimitive\n                        \n                    \n                \n            \n            \n                \nisPrimitive(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether primitive is\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is string - used to check the input value from serialize funtion\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | boolean | number | string | null | undefined\n\n                    \n                    \n                        type of value - boolean/number/string/null/bigint/undefined\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nstate\nThis library was generated with Nx.\nRunning unit tests\nRun nx test state to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    7 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    21 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRow   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRowEntry   (src/.../cell-summary.model.ts)\n                        \n                        \n                            Cell   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CellSummary   (src/.../cell-summary.model.ts)\n                        \n                        \n                            DownloadContext   (src/.../download.model.ts)\n                        \n                        \n                            DownloadEntry   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormat   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            DownloadModel   (src/.../download.model.ts)\n                        \n                        \n                            MapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            MedicalIllustrationContext   (src/.../medical-illustration.state.ts)\n                        \n                        \n                            SourceListContext   (src/.../source-list.model.ts)\n                        \n                        \n                            SourceListModel   (src/.../source-list.model.ts)\n                        \n                        \n                            TissueLibraryContext   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TissueLibraryModel   (src/.../tissue-library.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                    Type representing an aggregate summary of cell values in a group\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRow\n                \n            \n            \n                \n                    Type representing a row in an aggregate summary\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRowEntry\n                \n            \n            \n                \n                    Type representing a single entry in a row with cell, biomarker, count and percentage\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cell\n                \n            \n            \n                \n                    Type representing a single cell value\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummary\n                \n            \n            \n                \n                    Type representing CELL_SUMMARY_SCHEMA which has labels and entries\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/download/download.model.ts\n    \n    \n        \n            \n                \n                    \n                    DownloadContext\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadContext,\nwhich is a state context for the DownloadModel type\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadEntry\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadEntry,\nwhich is inferred from the type of the DOWNLOAD_ENTRY constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormat\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormat,\nwhich is inferred from the type of the DOWNLOAD_FORMAT constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormatId\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormatId,\nwhich is inferred from the type of the DOWNLOAD_FORMAT_ID constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadModel\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadModel,\nwhich is inferred from the type of the DOWNLOAD_MODEL constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n    \n        \n            \n                \n                    \n                    MapEntry\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.state.ts\n    \n    \n        \n            \n                \n                    \n                    MedicalIllustrationContext\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    src/lib/source-list/source-list.model.ts\n    \n    \n        \n            \n                \n                    \n                    SourceListContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SourceListModel\n                \n            \n            \n                \n                    Type alias for the array of source objects\n\n                \n            \n            \n                \n                            Source[]\n\n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.model.ts\n    \n    \n        \n            \n                \n                    \n                    TissueLibraryContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibraryModel\n                \n            \n            \n                \n                    Type alias for the tissue data\n\n                \n            \n            \n                \n                        TissueData\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            About   (src/.../link-ids.ts)\n                        \n                        \n                            Action   (src/.../cell-summary.actions.ts)\n                        \n                        \n                            Action   (src/.../download.action.ts)\n                        \n                        \n                            AppTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            CELL_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_AGGREGATE_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            ContactAcknowledgement   (src/.../resource-ids.ts)\n                        \n                        \n                            DEFAULT_LOGGABLE_ACTIONS   (src/.../default-loggable-actions.ts)\n                        \n                        \n                            DOWNLOAD_ENTRY   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT_ID   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_MODEL   (src/.../download.model.ts)\n                        \n                        \n                            Embed   (src/.../link-ids.ts)\n                        \n                        \n                            ExploreFTU   (src/.../link-ids.ts)\n                        \n                        \n                            Gradient   (src/.../resource-types.ts)\n                        \n                        \n                            GradientLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            GradientLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            Illustration   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPage   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageDepthDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPagePartners   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageReadMore   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LOGGABLE_ACTIONS   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            mapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            Metrics   (src/.../resource-ids.ts)\n                        \n                        \n                            Metrics   (src/.../resource-types.ts)\n                        \n                        \n                            MetricsLogo   (src/.../resource-ids.ts)\n                        \n                        \n                            MetricsTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Png   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            PNG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                        \n                            Portal   (src/.../link-ids.ts)\n                        \n                        \n                            PRIMITIVE_TYPES   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            ProductLogoUrl   (src/.../resource-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../link-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Size   (src/.../resource-types.ts)\n                        \n                        \n                            SizeLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            SizeLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            STATE_LOGGER_PROVIDER   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            Svg   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            SVG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/link-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        About\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('About')\n                    \n                \n\n            \n                \n                    About Link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Embed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Embed')\n                    \n                \n\n            \n                \n                    LinkId for Embed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ExploreFTU\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ExploreFTU')\n                    \n                \n\n            \n                \n                    LinkId for Explore FTU\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Illustration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Illustration')\n                    \n                \n\n            \n                \n                    LinkId for Illustration metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPage')\n                    \n                \n\n            \n                \n                    Landing page id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageReadMore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPageReadMore')\n                    \n                \n\n            \n                \n                    LinkId for read more in landing page content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Portal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Portal')\n                    \n                \n\n            \n                \n                    LinkId for HRA Portal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title link id\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.action.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Download')\n                    \n                \n\n            \n                \n                    Action Group for Download Action\n\n                \n            \n\n        \n    \n\n    src/lib/resource-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('AppTitle')\n                    \n                \n\n            \n                \n                    App title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ContactAcknowledgement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ContactAcknowledgement')\n                    \n                \n\n            \n                \n                    Message to display after submitting contact form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegend')\n                    \n                \n\n            \n                \n                    Gradient legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Gradient legend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthDescription')\n                    \n                \n\n            \n                \n                    Lanading Page Depth Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthImg')\n                    \n                \n\n            \n                \n                    Landing Page Depth Img id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthMoreText')\n                    \n                \n\n            \n                \n                    Landing Page Depth More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthTitle')\n                    \n                \n\n            \n                \n                    Landing Page Depth Title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroDescription')\n                    \n                \n\n            \n                \n                    Landing Page Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroImg')\n                    \n                \n\n            \n                \n                    Landing Page Intro Image id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroMoreText')\n                    \n                \n\n            \n                \n                    Landing Page More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPagePartners\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroPartners')\n                    \n                \n\n            \n                \n                    Landing Page Partners id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroTitle')\n                    \n                \n\n            \n                \n                    Landing Page Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('Metrics')\n                    \n                \n\n            \n                \n                    metrics id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsLogo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsLogo')\n                    \n                \n\n            \n                \n                    Metrics Logo id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsTitle')\n                    \n                \n\n            \n                \n                    Metrics Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductLogoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductLogoUrl')\n                    \n                \n\n            \n                \n                    Product logo url id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegend')\n                    \n                \n\n            \n                \n                    Size legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Size legend\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CELL_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n})\n                    \n                \n\n            \n                \n                    The CELL_SCHEMA has an object that contains an id and a label for the cell,\nanother object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_AGGREGATE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\nan array of columns that are strings, and an array of rows that are AggregateRow objects.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\nwhere each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/default-loggable-actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ContactActions.SendMessage,\n  DownloadActions.Download,\n  LinkRegistryActions.Navigate,\n]\n                    \n                \n\n            \n                \n                    Default loggable actions\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [\n  z.object({ type: z.literal('url'), url: z.string() }),\n  z.object({ type: z.literal('data'), data: z.string() }),\n])\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_ENTRY,\nwhich is a discriminated union of two objects with different properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    id: DOWNLOAD_FORMAT_ID,\n    label: z.string(),\n    extension: z.string(),\n  })\n  .partial({ extension: true })\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT,\nwhich is an object with id, label, and extension properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `DownloadFormatId:'${id}'`)\n  .brand('DownloadFormatId')\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT_ID,\nwhich is a string that is transformed into a branded string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_MODEL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  formats: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_FORMAT),\n  entries: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_ENTRY),\n})\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_MODEL,\nwhich is an object with formats and entries properties\n\n                \n            \n\n        \n    \n\n    src/lib/resource-types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Gradient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('gradient', payload())\n                    \n                \n\n            \n                \n                    Gradient legend resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType(\n  'metrics',\n  payload()\n)\n                    \n                \n\n            \n                \n                    Metrics resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Size\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('size', payload())\n                    \n                \n\n            \n                \n                    Size legend resource\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n})\n                    \n                \n\n            \n                \n                    Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRIMITIVE_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['bigint', 'boolean', 'number', 'string']\n                    \n                \n\n            \n                \n                    Primitive types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATE_LOGGER_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n}\n                    \n                \n\n            \n                \n                    State Login Provider\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapEntry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n})\n                    \n                \n\n            \n                \n                    Map Entry typings\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Png\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('png')\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Svg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('svg')\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PNG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Png,\n  label: 'Download Png',\n  extension: '.png',\n}\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Svg,\n  label: 'Download Svg',\n  extension: '.svg',\n}\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
