var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Add.html",[0,0.127,1,1.559]],["body/classes/Add.html",[0,0.173,1,2.585,2,0.713,3,0.197,4,0.324,5,0.197,6,3.012,7,3.012,8,2.925,9,0.23,10,1.02,11,3.987,12,2.648,13,3.598,14,4.458,15,0.635,16,0.537,17,1.976,18,2.776,19,2.258,20,0.43,21,1.191,22,2.925,23,0.678,24,4.702,25,3.999,26,3.278,27,0.46,28,0.025,29,0.46,30,0.32,31,2.248,32,2.407,33,3.163,34,1.049,35,2.114,36,1.552,37,0.257,38,2.321,39,0.309,40,0.971,41,1.191,42,2.579,43,1.191,44,2.579,45,2.447,46,2.579,47,2.579,48,2.579,49,1.97,50,2.925,51,0.016,52,0.016]],["title/classes/AddEntry.html",[0,0.127,53,1.951]],["body/classes/AddEntry.html",[0,0.212,1,2.127,2,0.718,3,0.199,4,0.17,5,0.27,9,0.17,10,0.897,15,0.59,19,1.366,20,0.228,21,1.854,23,0.501,27,0.463,28,0.025,29,0.463,30,0.322,37,0.352,39,0.378,40,0.976,41,1.854,51,0.016,52,0.016,53,2.661,54,2.13,55,2.5,56,2.672,57,3.476,58,3.137,59,3.532,60,3.476,61,3.179,62,1.986,63,1.957,64,0.992,65,1.28,66,2.459,67,1.957,68,1.679,69,1.126,70,2.13,71,2.896,72,3.004,73,1.957,74,2.122,75,2.338,76,2.127,77,1.986,78,2.111,79,2.338,80,2.13,81,1.366,82,1.957,83,2.338,84,2.338,85,2.338]],["title/classes/CellSummarySelectors.html",[0,0.127,86,2.937]],["body/classes/CellSummarySelectors.html",[0,0.137,2,0.769,3,0.213,4,0.182,5,0.213,9,0.182,15,0.673,16,0.58,18,3.065,20,0.325,23,0.714,27,0.659,28,0.025,29,0.659,30,0.459,37,0.414,39,0.244,51,0.017,52,0.017,86,4.197,87,2.687,88,2.687,89,3.724,90,3.33,91,3.474,92,1.604,93,4.951,94,3.337,95,4.951,96,3.967,97,1.709,98,4.951,99,3.724,100,2.981,101,1.692,102,1.505,103,4.951,104,3.724,105,2.097,106,1.063,107,2.228,108,2.505,109,2.505,110,3.724,111,4.951,112,1.823,113,3.724,114,3.724]],["title/injectables/CellSummaryState.html",[109,2.33,115,0.928]],["body/injectables/CellSummaryState.html",[0,0.079,3,0.122,4,0.105,5,0.122,9,0.105,10,0.713,15,0.537,16,0.333,20,0.218,23,0.479,27,0.442,28,0.025,29,0.542,30,0.308,31,1.708,34,1.507,36,0.964,37,0.341,39,0.141,43,1.146,51,0.012,52,0.012,55,1.305,62,1.708,69,2.162,81,1.948,87,1.964,88,1.964,91,1.869,92,1.076,94,2.289,96,1.313,97,0.739,100,2.533,101,1.307,102,1.393,106,0.611,107,2.36,108,1.441,109,2.233,112,1.497,115,0.89,116,0.964,117,2.142,118,2.233,119,1.728,120,3.527,121,3.32,122,3.32,123,2.579,124,3.32,125,2.142,126,2.482,127,3.32,128,1.115,129,1.869,130,2.142,131,2.735,132,3.038,133,2.791,134,2.142,135,2.142,136,2.142,137,2.233,138,1.601,139,2.142,140,1.441,141,3.32,142,1.441,143,0.9,144,2.142,145,2.035,146,1.313,147,2.142,148,3.32,149,3.447,150,3.038,151,2.142,152,2.142,153,4.066,154,2.142,155,3.679,156,3.527,157,2.142,158,2.142,159,2.142,160,1.601,161,3.038,162,2.142,163,2.233,164,2.142,165,3.32,166,0.842,167,1.115,168,1.601,169,1.869,170,2.142,171,3.32,172,2.142,173,4.066,174,2.142,175,2.142,176,2.142,177,3.32,178,2.233,179,3.32,180,3.32,181,1.313,182,3.32,183,2.142,184,3.32,185,2.142,186,2.142,187,2.142,188,2.142,189,3.32,190,2.142,191,1.441,192,2.142,193,2.142,194,2.142,195,3.32,196,1.441,197,2.142,198,3.32,199,2.142,200,3.32,201,4.581,202,2.142,203,2.142,204,2.142,205,2.142,206,2.142,207,2.142,208,2.142,209,2.142,210,3.32,211,2.142,212,2.142,213,2.142,214,3.32,215,2.142,216,2.142,217,2.142,218,2.142]],["title/interfaces/CellSummaryStateModel.html",[96,2.123,219,1.362]],["body/interfaces/CellSummaryStateModel.html",[3,0.137,4,0.117,5,0.137,9,0.117,15,0.371,16,0.375,17,2.044,20,0.413,28,0.025,30,0.223,31,2.044,32,2.189,34,0.731,36,1.082,37,0.179,39,0.401,51,0.013,52,0.013,55,2.052,62,2.044,68,1.162,69,1.415,81,1.426,87,1.162,88,1.162,91,3.091,94,3.091,96,2.982,100,3.107,101,1.247,107,2.639,119,1.888,131,1.618,132,3.364,133,1.354,137,2.939,140,2.441,142,3.273,145,2.224,150,3.749,155,2.441,156,2.441,161,2.678,163,3.692,166,2.442,168,3.637,178,2.441,181,3.2,191,2.441,219,2.052,220,1.354,221,1.618,222,3.076,223,3.076,224,3.076,225,3.076,226,3.266,227,2.441,228,4.104,229,3.076,230,3.076,231,3.076,232,2.712,233,2.982,234,2.46,235,1.354,236,3.903,237,2.46,238,2.46,239,1.798,240,1.798,241,2.039,242,1.798,243,2.039,244,3.637,245,1.798,246,1.798,247,3.512,248,3.833,249,3.266,250,1.618,251,2.712,252,1.798,253,2.712,254,1.798,255,1.798,256,1.798,257,1.798,258,1.798,259,1.798,260,2.039,261,3.076,262,2.039,263,3.076,264,2.039,265,2.039]],["title/classes/ClearEntries.html",[0,0.127,82,1.951]],["body/classes/ClearEntries.html",[0,0.216,1,1.641,2,0.753,3,0.208,4,0.178,5,0.279,9,0.178,10,0.915,15,0.602,19,1.433,21,1.259,28,0.025,37,0.363,39,0.386,40,1.008,41,1.9,51,0.017,52,0.017,53,2.053,54,2.235,55,2.163,56,2.706,58,2.864,59,2.992,61,2.453,62,1.532,63,2.053,64,1.041,65,1.343,66,2.541,67,2.053,68,1.762,69,1.181,70,2.235,71,2.992,72,3.046,73,2.053,74,2.164,75,2.453,76,2.197,77,2.051,78,2.163,79,2.453,80,2.992,81,1.919,82,2.749,83,2.453,84,2.453,85,2.453]],["title/classes/ComputeAggregate.html",[0,0.127,120,2.33]],["body/classes/ComputeAggregate.html",[0,0.176,2,0.734,3,0.203,4,0.174,5,0.203,9,0.234,10,0.946,15,0.491,20,0.233,21,1.227,23,0.513,27,0.474,28,0.025,29,0.474,30,0.33,37,0.404,39,0.315,40,0.991,41,1.657,49,1.767,51,0.017,52,0.017,63,2.001,64,1.015,65,1.309,69,1.151,74,1.767,78,1.886,87,2.318,88,2.318,94,3.42,100,3.024,101,1.919,107,2.444,108,2.391,119,2.497,120,3.912,126,3.587,138,4.348,166,1.397,234,2.001,235,2.001,237,3.059,238,2.001,266,2.657,267,4.931,268,4.541,269,3.555,270,3.555,271,4.606,272,2.657,273,2.391,274,2.657,275,3.587,276,3.014,277,2.657,278,3.014]],["title/injectables/ContactState.html",[115,0.928,279,2.59]],["body/injectables/ContactState.html",[0,0.223,3,0.202,4,0.172,5,0.202,9,0.172,10,0.943,15,0.639,16,0.549,19,1.387,20,0.232,23,0.509,27,0.47,28,0.025,29,0.772,30,0.327,37,0.451,39,0.232,51,0.017,52,0.017,64,1.007,92,1.547,97,1.218,102,1.073,106,1.007,112,1.299,115,1.553,116,1.587,123,3.265,143,1.482,169,1.986,232,3.569,279,4.335,280,3.528,281,4.774,282,4.668,283,5.799,284,4.916,285,4.774,286,5.799,287,4.855,288,4.774,289,1.587,290,4.774,291,3.528,292,4.048,293,4.045,294,4.774,295,4.048,296,3.528,297,3.64,298,2.926,299,2.373,300,2.373,301,3.528,302,3.528,303,3.528,304,3.528]],["title/classes/Download.html",[0,0.127,56,1.456]],["body/classes/Download.html",[0,0.213,1,1.583,2,0.727,3,0.201,4,0.172,5,0.309,9,0.172,10,0.943,15,0.553,19,1.383,20,0.231,21,1.645,23,0.508,27,0.469,28,0.025,29,0.469,30,0.326,37,0.355,39,0.38,40,0.984,41,1.866,51,0.017,52,0.017,53,1.981,54,2.157,55,2.124,56,2.764,58,3.15,59,2.921,61,2.367,62,1.478,63,1.981,64,1.004,65,1.296,66,2.48,67,1.981,68,1.7,69,1.14,70,2.157,71,2.921,72,3.083,73,1.981,74,2.133,75,2.367,76,2.432,77,2.271,78,2.124,79,2.367,80,2.157,81,1.383,82,1.981,83,2.367,84,2.367,85,2.367,305,2.983,306,3.519]],["title/classes/DownloadSelectors.html",[0,0.127,307,2.937]],["body/classes/DownloadSelectors.html",[0,0.145,2,0.812,3,0.225,4,0.192,5,0.225,9,0.192,15,0.585,16,0.612,18,2.759,20,0.258,23,0.567,27,0.524,28,0.025,29,0.524,30,0.365,37,0.382,39,0.258,40,0.812,51,0.018,52,0.018,56,2.156,66,3.268,67,2.214,69,1.662,72,3.169,81,2.017,90,4.332,92,1.662,97,1.358,102,1.56,105,3.216,106,1.122,112,1.448,289,1.769,307,4.35,308,3.932,309,4.526,310,4.27,311,5.131,312,4.526,313,3.932,314,3.932,315,3.932,316,3.932]],["title/injectables/DownloadState.html",[115,0.928,317,2.59]],["body/injectables/DownloadState.html",[0,0.061,1,1.218,3,0.095,4,0.081,5,0.313,9,0.081,10,0.421,15,0.575,16,0.258,19,0.651,20,0.287,23,0.63,27,0.582,28,0.025,29,0.687,30,0.405,34,1.204,35,2.103,37,0.384,39,0.109,40,1.239,45,1.786,51,0.009,52,0.009,53,2.638,55,1.841,56,2.697,58,1.409,62,1.664,67,0.933,69,1.889,71,1.659,72,2.861,73,2.638,80,1.659,81,1.064,82,1.932,92,0.877,97,1.368,101,0.773,102,1.425,106,0.473,112,1.263,115,0.725,116,0.746,128,2.924,129,3.089,143,0.696,146,1.016,166,0.651,169,2.23,196,1.115,289,1.544,292,1.405,297,2.664,298,1.659,300,1.115,309,1.239,310,2.565,312,1.239,317,2.023,318,1.657,319,2.023,320,2.565,321,2.707,322,2.023,323,2.295,324,2.295,325,2.295,326,3.961,327,2.707,328,5.202,329,2.707,330,1.657,331,2.707,332,2.707,333,1.657,334,2.707,335,2.707,336,2.707,337,1.657,338,2.961,339,2.707,340,2.707,341,1.657,342,2.707,343,2.707,344,2.707,345,2.707,346,2.707,347,1.657,348,1.405,349,1.405,350,1.239,351,1.239,352,1.405,353,1.405,354,1.405,355,1.657,356,1.657,357,1.405,358,2.295,359,1.405,360,1.657,361,1.657,362,1.657,363,3.431,364,2.565,365,1.657,366,1.657,367,1.657,368,2.707,369,1.657,370,1.657,371,1.657,372,2.707,373,2.263,374,5.487,375,2.707,376,1.657,377,1.657,378,1.657,379,1.657,380,1.657,381,1.657,382,1.657,383,1.657,384,2.707,385,3.431,386,1.657,387,1.405,388,1.657,389,1.657,390,1.657,391,1.657,392,1.657,393,1.657,394,1.657,395,1.657,396,1.657,397,1.657,398,1.657,399,1.657,400,1.657,401,1.657,402,1.657,403,1.657,404,1.657,405,3.431,406,1.657,407,1.657,408,1.657,409,1.657,410,1.657,411,1.657,412,1.657,413,1.657,414,1.657,415,1.657,416,1.657,417,1.657,418,1.657,419,1.657,420,1.657,421,1.657,422,1.657,423,1.405,424,1.405]],["title/interfaces/GradientPoint.html",[131,2.33,219,1.362]],["body/interfaces/GradientPoint.html",[3,0.141,4,0.121,5,0.141,9,0.121,15,0.253,16,0.385,17,1.867,20,0.416,28,0.025,30,0.229,31,2.073,32,2.22,34,1.351,36,1.113,37,0.184,39,0.404,51,0.013,52,0.013,55,1.746,62,2.073,68,1.195,69,1.439,81,1.456,87,1.195,88,1.195,91,2.778,94,2.086,96,2.271,100,2.857,101,1.058,107,2.588,119,1.928,131,2.492,132,3.833,133,2.502,137,3.869,140,1.664,142,3.978,145,2.271,150,3.707,155,2.492,156,2.492,161,2.723,163,3.319,166,2.325,168,2.77,178,2.492,181,3.024,191,2.492,219,2.077,220,1.393,221,1.664,222,2.097,223,2.097,224,2.097,225,2.097,226,2.77,227,1.664,228,3.95,229,2.097,230,2.097,231,2.097,232,1.849,233,2.723,234,2.502,235,1.393,236,3.95,237,2.502,238,2.502,239,1.849,240,1.849,241,2.097,242,1.849,243,2.097,244,3.688,245,1.849,246,1.849,247,3.555,248,3.869,249,3.321,250,1.664,251,2.77,252,1.849,253,2.77,254,1.849,255,1.849,256,1.849,257,1.849,258,1.849,259,1.849,260,3.141,261,4.183,262,3.141,263,4.183,264,3.141,265,3.141]],["title/modules/HraStateModule.html",[425,2.937,426,2.59]],["body/modules/HraStateModule.html",[0,0.146,3,0.227,4,0.252,5,0.227,9,0.194,12,2.239,15,0.407,28,0.025,37,0.506,39,0.261,51,0.018,52,0.018,56,1.671,106,1.135,107,1.789,109,3.477,119,2.069,143,1.671,279,3.864,282,2.973,317,3.864,426,3.864,427,2.973,428,3.977,429,3.864,430,5.169,431,5.169,432,3.977,433,3.864,434,3.477,435,2.069,436,1.921,437,3.864,438,2.437,439,2.437,440,3.477,441,3.477,442,2.675,443,3.371,444,3.477,445,2.437,446,3.371,447,3.977,448,3.977,449,3.977,450,2.973,451,2.973,452,2.973,453,2.437]],["title/classes/Load.html",[0,0.127,454,2.59]],["body/classes/Load.html",[0,0.177,2,0.996,3,0.275,4,0.236,5,0.275,9,0.236,10,0.977,15,0.597,28,0.024,37,0.359,39,0.316,51,0.02,52,0.02,64,1.376,65,1.775,74,1.775,101,1.79,445,3.844,454,4.689,455,3.243,456,3.243,457,4.822,458,5.834,459,4.361,460,4.822]],["title/interfaces/MedicalIllustrationModel.html",[219,1.362,461,2.33]],["body/interfaces/MedicalIllustrationModel.html",[3,0.314,4,0.177,5,0.278,9,0.177,16,0.565,17,2.044,20,0.401,28,0.025,30,0.584,34,1.669,37,0.27,39,0.319,43,1.68,51,0.017,52,0.017,55,1.426,69,1.175,150,2.223,167,3.277,219,2.157,220,2.043,233,2.223,234,2.043,235,2.043,237,2.043,247,2.44,248,4.645,319,3.637,322,2.712,373,3.042,435,2.532,436,2.833,461,3.272,462,1.753,463,1.753,464,2.712,465,3.545,466,3.158,467,4.865,468,2.712,469,3.076,470,3.076,471,3.076,472,3.076,473,3.076,474,3.076,475,3.076,476,3.076,477,3.076,478,3.076,479,3.076,480,3.076,481,3.076,482,3.076]],["title/classes/MedicalIllustrationSelectors.html",[0,0.127,483,2.937]],["body/classes/MedicalIllustrationSelectors.html",[0,0.133,2,0.749,3,0.207,4,0.177,5,0.314,9,0.177,15,0.498,16,0.565,18,3.042,20,0.319,23,0.702,27,0.648,28,0.025,29,0.648,30,0.451,34,1.479,37,0.408,39,0.238,43,1.68,51,0.017,52,0.017,90,3.272,92,1.576,97,1.68,102,1.915,105,2.043,106,1.036,112,1.791,167,3.052,289,2.189,373,2.833,434,2.44,435,3.052,436,2.833,461,4.326,462,2.652,463,2.652,466,2.652,483,4.125,484,3.628,485,4.865,486,4.865,487,3.628,488,4.865,489,3.628,490,2.223,491,3.628,492,4.865,493,3.628,494,3.628]],["title/injectables/MedicalIllustrationState.html",[115,0.928,434,2.33]],["body/injectables/MedicalIllustrationState.html",[0,0.1,3,0.268,4,0.132,5,0.155,9,0.132,10,0.422,15,0.528,16,0.422,19,1.066,20,0.339,23,0.676,27,0.625,28,0.025,29,0.687,30,0.435,37,0.441,39,0.26,51,0.014,52,0.014,69,0.878,92,1.285,97,1.619,101,0.774,102,1.426,106,0.774,112,0.998,115,1.063,116,1.22,118,2.668,123,2.233,129,2.233,143,1.139,146,1.662,167,2.441,169,1.527,277,4.288,289,2.322,297,3.154,298,1.662,300,1.824,348,2.299,349,2.299,358,3.363,359,2.299,373,2.493,423,2.299,424,2.299,434,2.668,435,2.685,436,1.916,453,2.874,461,1.824,462,2.493,463,2.493,465,3.092,466,1.916,468,2.027,490,1.662,495,2.299,496,3.966,497,3.631,498,3.631,499,3.631,500,2.712,501,5.339,502,3.966,503,2.712,504,2.668,505,2.712,506,3.966,507,3.966,508,2.712,509,3.966,510,2.712,511,3.966,512,2.712,513,2.668,514,2.712,515,2.712,516,2.712,517,2.712,518,2.712,519,2.965,520,5.16,521,2.299,522,2.712,523,2.712,524,3.966,525,2.712,526,2.712]],["title/classes/RegisterFormat.html",[0,0.127,73,1.951]],["body/classes/RegisterFormat.html",[0,0.213,1,1.579,2,0.725,3,0.2,4,0.171,5,0.272,9,0.171,10,0.901,15,0.592,19,1.38,20,0.23,21,1.643,23,0.506,27,0.468,28,0.025,29,0.468,30,0.326,37,0.354,39,0.38,40,0.983,41,1.863,51,0.017,52,0.017,53,1.976,54,2.151,55,2.121,56,2.62,58,2.809,59,2.916,61,2.361,62,1.475,63,1.976,64,1.002,65,1.292,66,3.011,67,1.976,68,1.696,69,1.137,70,2.151,71,3.546,72,3.177,73,2.679,74,2.13,75,2.361,76,2.429,77,2.268,78,2.121,79,2.361,80,2.151,81,1.38,82,1.976,83,2.361,84,2.361,85,2.361,305,2.976,527,3.51]],["title/interfaces/ScreenModeModel.html",[219,1.362,528,2.33]],["body/interfaces/ScreenModeModel.html",[3,0.277,4,0.237,5,0.277,9,0.237,15,0.497,16,0.756,17,2.461,20,0.319,28,0.024,39,0.319,51,0.02,52,0.02,219,1.908,220,2.734,319,3.63,438,2.976,439,2.976,528,3.94,529,3.266,530,3.266,531,4.855,532,4.394,533,3.542,534,3.94,535,4.966]],["title/classes/ScreenModeSelectors.html",[0,0.127,536,2.937]],["body/classes/ScreenModeSelectors.html",[0,0.15,2,0.843,3,0.233,4,0.199,5,0.233,9,0.199,15,0.538,16,0.635,18,2.809,20,0.268,23,0.589,27,0.544,28,0.025,29,0.544,30,0.378,37,0.391,39,0.268,40,0.843,51,0.018,52,0.018,90,4.376,92,1.703,97,1.409,102,1.598,105,3.274,106,1.165,112,1.502,438,4.055,439,3.763,453,3.221,528,4.13,529,3.535,530,3.535,532,3.535,533,2.959,536,4.456,537,4.081,538,5.256,539,4.081,540,5.256,541,3.459,542,4.081]],["title/injectables/ScreenModeState.html",[115,0.928,437,2.59]],["body/injectables/ScreenModeState.html",[0,0.135,3,0.21,4,0.18,5,0.21,9,0.18,10,0.86,15,0.629,16,0.572,20,0.241,23,0.53,27,0.49,28,0.025,29,0.654,30,0.341,37,0.457,39,0.241,40,1.014,45,1.913,49,2.376,51,0.017,52,0.017,92,1.59,97,1.269,102,1.118,106,1.049,115,1.315,116,1.654,123,3.32,128,1.913,129,2.763,143,1.544,146,2.252,289,1.654,350,2.747,351,2.747,364,2.747,437,3.668,438,3.873,439,3.765,519,3.668,528,3.301,529,3.301,530,3.301,532,3.716,541,3.116,543,3.675,544,4.908,545,3.116,546,4.161,547,3.675,548,4.908,549,3.675,550,3.116,551,3.675,552,2.472,553,3.675]],["title/classes/SendMessage.html",[0,0.127,287,2.59]],["body/classes/SendMessage.html",[0,0.219,2,0.887,3,0.245,4,0.21,5,0.245,9,0.21,10,0.668,20,0.391,21,2.055,23,0.619,25,4.058,27,0.572,28,0.025,29,0.572,30,0.398,37,0.404,39,0.282,41,1.482,51,0.019,52,0.019,64,1.549,65,1.58,74,1.58,78,1.687,219,2.133,284,4.602,287,4.058,293,4.824,295,3.639,299,2.887,325,4.602,554,4.292,555,5.429,556,5.429,557,5.429,558,4.292,559,6.592,560,4.292,561,4.292]],["title/classes/Set.html",[0,0.127,49,1.276]],["body/classes/Set.html",[0,0.159,2,0.895,3,0.247,4,0.212,5,0.247,9,0.267,10,0.675,20,0.284,21,1.496,23,0.625,27,0.577,28,0.025,29,0.577,30,0.402,37,0.322,39,0.284,40,0.895,41,1.496,49,2.382,51,0.019,52,0.019,64,1.237,65,1.595,74,1.595,76,2.457,77,2.294,78,1.703,438,3.346,439,3.847,529,3.673,530,3.673,532,4.022,533,3.366,534,3.673,535,4.629,550,3.673,562,4.332,563,5.46,564,4.332,565,4.332,566,4.332]],["title/classes/Set-1.html",[0,0.107,49,1.068,196,1.95]],["body/classes/Set-1.html",[0,0.167,1,2.041,2,0.676,3,0.187,4,0.326,5,0.187,6,3.164,7,3.164,8,2.775,9,0.222,10,1.009,11,2.775,12,1.843,13,3.501,14,4.457,15,0.641,16,0.51,17,1.906,18,2.715,19,2.208,20,0.43,21,1.13,22,2.775,23,0.751,25,3.891,26,3.19,27,0.436,28,0.025,29,0.436,30,0.304,31,2.361,32,2.528,33,2.202,34,0.995,35,2.006,36,1.473,37,0.244,38,2.202,39,0.298,40,0.937,41,1.13,42,3.39,43,1.566,44,3.39,45,3.071,46,3.39,47,3.39,48,3.39,49,2.305,50,2.775,51,0.016,52,0.016,567,4.536,568,4.536,569,3.273]],["title/classes/SetActiveNode.html",[0,0.127,497,2.123]],["body/classes/SetActiveNode.html",[0,0.198,2,0.721,3,0.199,4,0.171,5,0.271,9,0.171,10,0.94,20,0.229,21,1.206,23,0.504,27,0.465,28,0.025,29,0.465,30,0.324,34,1.442,37,0.353,39,0.353,40,1.112,41,1.859,43,1.859,49,2.345,51,0.017,52,0.017,64,0.997,65,1.286,74,1.982,76,2.598,77,2.426,78,2.116,167,2.802,373,2.79,435,1.818,436,2.79,462,2.291,463,2.291,465,3.649,466,2.79,490,2.14,497,2.906,498,2.14,499,2.14,504,4.061,513,3.621,570,2.611,571,3.884,572,3.493,573,3.493,574,2.961,575,4.025]],["title/classes/SetData.html",[0,0.127,275,2.59]],["body/classes/SetData.html",[0,0.179,2,0.747,3,0.207,4,0.177,5,0.207,9,0.237,10,0.952,15,0.37,20,0.237,21,1.249,23,0.522,27,0.482,28,0.025,29,0.482,30,0.336,37,0.408,39,0.319,40,1.003,41,1.677,49,2.157,51,0.017,52,0.017,63,2.037,64,1.033,65,1.332,69,1.172,74,1.788,78,1.909,87,2.346,88,2.346,94,3.087,100,2.648,101,1.939,107,2.185,108,2.434,119,1.883,120,3.267,126,2.705,138,3.63,166,2.154,234,2.037,235,2.037,237,2.037,238,2.037,266,2.705,267,4.117,268,4.805,271,4.647,272,2.705,273,2.434,274,2.705,275,4.38,276,3.068,277,3.63,278,3.068,576,3.619,577,3.619]],["title/classes/SetMapping.html",[0,0.127,498,2.123]],["body/classes/SetMapping.html",[0,0.199,2,0.727,3,0.201,4,0.172,5,0.309,9,0.172,10,0.943,20,0.231,21,1.215,23,0.508,27,0.469,28,0.025,29,0.469,30,0.326,34,1.761,37,0.355,39,0.355,40,1.116,41,1.866,43,1.645,49,2.35,51,0.017,52,0.017,64,1.004,65,1.296,74,1.99,76,2.606,77,2.434,78,2.124,167,3.15,373,2.924,435,1.831,436,2.798,462,2.303,463,2.303,465,3.408,466,2.303,490,2.157,497,2.157,498,2.921,499,2.157,504,3.635,513,3.635,570,2.631,571,3.896,575,4.04,578,2.983,579,3.519]],["title/classes/SetUri.html",[0,0.127,499,2.123]],["body/classes/SetUri.html",[0,0.198,2,0.723,3,0.2,4,0.171,5,0.271,9,0.171,10,0.941,20,0.23,21,1.209,23,0.505,27,0.466,28,0.025,29,0.466,30,0.325,34,1.758,37,0.353,39,0.354,40,1.114,41,1.861,43,1.861,49,2.346,51,0.017,52,0.017,64,0.999,65,1.289,74,1.985,76,2.601,77,2.429,78,2.119,167,2.805,373,2.919,435,1.822,436,2.919,462,2.295,463,2.295,465,3.402,466,2.295,490,2.146,497,2.146,498,2.146,499,2.911,504,3.626,513,4.065,570,2.617,571,3.888,574,2.969,575,4.03,578,2.969,580,3.502]],["title/interfaces/Source.html",[4,0.169,219,1.362]],["body/interfaces/Source.html",[3,0.232,4,0.336,5,0.232,6,2.284,7,2.284,9,0.198,10,0.632,16,0.632,17,2.2,20,0.416,28,0.025,31,1.704,32,1.825,34,1.975,37,0.302,39,0.381,51,0.018,52,0.018,106,1.158,123,2.948,128,2.111,166,2.553,219,1.595,220,2.284,581,3.44,582,5.236,583,5.507,584,5.507,585,5.194,586,4.439,587,2.729,588,3.44,589,3.44,590,3.44,591,3.033]],["title/classes/SourceListSelectors.html",[0,0.127,592,2.937]],["body/classes/SourceListSelectors.html",[0,0.208,2,0.794,3,0.22,4,0.323,5,0.22,6,2.848,7,2.848,9,0.247,13,3.402,14,3.402,15,0.638,16,0.599,18,2.73,20,0.252,23,0.555,27,0.512,28,0.025,29,0.512,30,0.357,31,2.522,32,2.276,37,0.42,38,2.587,39,0.252,40,0.794,43,1.746,51,0.018,52,0.018,92,1.638,97,1.328,101,1.713,102,1.538,105,3.182,106,1.098,112,1.416,160,3.781,166,1.988,440,4.194,587,4.038,592,4.288,593,3.846,594,5.058,595,5.058,596,5.058,597,3.846,598,3.846,599,3.846,600,3.846]],["title/injectables/SourceListState.html",[115,0.928,440,2.33]],["body/injectables/SourceListState.html",[0,0.112,1,2.762,3,0.174,4,0.3,5,0.174,6,2.822,7,2.822,9,0.149,10,0.475,12,3.069,13,3.666,14,3.868,15,0.676,16,0.475,20,0.284,23,0.623,26,2.647,27,0.575,28,0.025,29,0.668,30,0.401,31,1.815,32,1.944,33,2.054,37,0.428,38,2.054,39,0.2,40,1.126,42,3.229,43,1.882,44,4.074,45,2.609,46,3.229,47,3.229,48,3.229,49,2.309,51,0.015,52,0.015,77,1.815,92,1.399,97,1.491,101,1.233,102,1.313,106,0.871,115,1.157,116,1.374,118,2.906,128,2.248,129,2.432,143,1.283,146,1.871,289,1.944,350,2.282,351,2.282,364,2.282,440,2.906,519,3.747,545,2.588,546,3.662,552,2.906,587,2.054,591,4.589,601,3.053,602,3.053,603,4.32,604,3.053,605,3.053,606,3.053,607,3.053,608,3.053]],["title/injectables/StateAnalyticsPluginService.html",[115,0.928,441,2.33]],["body/injectables/StateAnalyticsPluginService.html",[0,0.078,3,0.122,4,0.104,5,0.122,9,0.162,10,0.996,12,1.2,15,0.593,16,0.332,19,1.3,20,0.416,23,0.308,26,2.028,27,0.284,28,0.025,29,0.284,30,0.198,34,1.233,35,1.307,36,2.793,37,0.34,39,0.266,40,1.128,43,1.885,45,1.722,51,0.012,52,0.012,69,1.602,92,1.072,101,0.609,102,1.504,106,0.609,112,1.821,115,1.325,116,0.959,129,2.283,133,1.863,143,0.896,149,3.874,166,0.838,169,2.573,227,2.225,268,2.473,273,1.434,289,1.824,298,1.307,320,1.594,338,3.031,357,1.807,429,1.594,433,2.473,441,2.727,442,3.984,443,5.022,450,1.594,451,1.594,452,1.594,453,1.307,533,1.863,534,1.434,571,1.434,609,2.473,610,2.473,611,1.594,612,4.569,613,4.569,614,3.309,615,5.645,616,4.569,617,2.132,618,3.309,619,3.309,620,6.278,621,4.054,622,4.054,623,2.132,624,3.437,625,2.132,626,3.309,627,2.132,628,2.132,629,2.805,630,2.805,631,2.473,632,1.807,633,2.805,634,1.807,635,1.807,636,1.807,637,1.807,638,1.807,639,1.807,640,2.132,641,2.805,642,2.805,643,2.132,644,1.807,645,3.437,646,1.807,647,1.807,648,2.805,649,2.805,650,1.807,651,3.309,652,2.132,653,2.132,654,2.132,655,2.132,656,2.132,657,2.132,658,2.132,659,2.132,660,2.132,661,2.132,662,2.132,663,2.132,664,2.132,665,2.132,666,2.132,667,2.132,668,2.132,669,2.132,670,2.132,671,3.309,672,4.054,673,2.132,674,2.132,675,2.132,676,2.132,677,1.807,678,1.807]],["title/classes/TissueLibrarySelectors.html",[0,0.127,679,2.937]],["body/classes/TissueLibrarySelectors.html",[0,0.206,2,0.784,3,0.217,4,0.185,5,0.217,9,0.245,15,0.611,16,0.591,18,2.712,20,0.368,23,0.547,27,0.505,28,0.025,29,0.505,30,0.352,37,0.444,39,0.249,40,0.784,43,1.73,51,0.017,52,0.017,64,1.083,92,1.624,97,1.31,101,1.82,102,1.524,105,3.16,106,1.083,112,1.397,160,3.747,166,1.97,299,2.552,444,4.176,445,3.659,455,3.372,456,3.372,459,3.747,465,2.822,679,4.25,680,3.794,681,5.013,682,5.013,683,5.013,684,4.463,685,3.794,686,3.794,687,5.013,688,5.013,689,3.217,690,3.794,691,3.217,692,3.794,693,3.794]],["title/injectables/TissueLibraryState.html",[115,0.928,444,2.33]],["body/injectables/TissueLibraryState.html",[0,0.129,3,0.201,4,0.172,5,0.201,9,0.233,10,0.548,15,0.681,16,0.548,19,1.873,20,0.231,23,0.508,27,0.469,28,0.025,29,0.635,30,0.326,33,3.206,37,0.464,39,0.231,40,0.727,43,1.645,51,0.017,52,0.017,64,1.004,77,2.002,92,1.544,97,1.215,101,1.853,102,1.449,106,1.004,112,1.296,115,1.277,116,1.583,118,3.206,128,2.48,143,1.478,169,2.684,297,3.635,298,2.157,299,2.367,300,2.367,352,2.983,444,3.206,445,3.978,454,2.631,455,3.206,456,3.206,459,2.631,552,3.206,585,2.983,650,2.983,684,2.631,689,2.983,694,3.519,695,4.766,696,4.766,697,4.911,698,4.766,699,3.519,700,4.766,701,4.766,702,3.519,703,3.519,704,3.519,705,3.519,706,3.519]],["title/dependencies.html",[707,2.458,708,3.112]],["body/dependencies.html",[28,0.024,51,0.021,52,0.021,143,2.224,708,4.609,709,5.294,710,5.294,711,5.294,712,5.294,713,6.166]],["title/miscellaneous/functions.html",[714,1.633,715,3.53]],["body/miscellaneous/functions.html",[9,0.214,16,0.681,20,0.36,27,0.732,28,0.024,29,0.732,30,0.509,34,1.915,36,2.702,51,0.019,52,0.019,56,2.307,58,2.275,62,2.523,72,2.653,76,1.967,102,1.67,133,2.462,289,1.967,320,3.268,442,4.039,533,2.462,534,2.941,609,3.268,610,3.268,611,4.105,631,3.268,634,3.707,635,3.707,636,3.707,637,3.707,638,3.707,639,3.707,641,3.707,642,3.707,714,2.462,715,3.707,716,5.492,717,3.268,718,5.492,719,3.707,720,3.268,721,4.372]],["title/index.html",[16,0.451,722,2.9,723,2.9]],["body/index.html",[15,0.628,28,0.021,51,0.021,52,0.021,446,4.455,724,5.255,725,6.139,726,5.255,727,6.139,728,6.139,729,5.255,730,5.255,731,5.255]],["title/modules.html",[427,3.525]],["body/modules.html",[28,0.022,51,0.022,52,0.022,309,4.065,426,4.065,427,4.065,732,5.437,733,5.437]],["title/overview.html",[734,3.998]],["body/overview.html",[2,1.081,28,0.021,51,0.021,52,0.021,116,2.355,196,3.521,220,2.948,425,4.438,708,4.579,734,4.438,735,6.126,736,5.235,737,5.235,738,5.235,739,5.235,740,5.235]],["title/properties.html",[17,1.749,707,2.458]],["body/properties.html",[17,2.293,28,0.023,51,0.022,52,0.022,741,5.459,742,5.459]],["title/miscellaneous/typealiases.html",[714,1.633,743,4.164]],["body/miscellaneous/typealiases.html",[4,0.217,6,1.785,7,1.785,10,0.691,15,0.324,16,0.494,20,0.451,28,0.015,31,1.332,32,1.426,36,1.426,51,0.015,52,0.015,55,1.246,58,2.662,59,3.135,66,2.662,68,1.531,81,1.246,87,1.531,88,1.531,91,2.497,100,2.677,101,0.905,107,2.624,119,2.308,123,3.12,128,2.308,132,1.943,145,2.718,161,1.943,181,1.943,191,2.983,221,4.065,233,2.718,236,4.36,237,3.565,238,1.785,239,2.37,240,2.37,242,3.316,250,3.727,312,4.142,328,4.337,445,1.943,455,2.132,456,2.132,462,2.143,463,2.143,464,3.316,466,2.143,495,3.76,501,3.76,552,2.132,581,4.337,586,4.698,587,2.983,588,3.76,589,3.76,590,3.76,591,3.316,684,3.316,691,2.687,697,3.76,714,1.785,717,4.36,720,2.37,744,3.17,745,4.945,746,3.76,747,4.436,748,4.436,749,5.116,750,4.945,751,5.833,752,5.833,753,5.542,754,2.687,755,2.687,756,2.687,757,2.687]],["title/miscellaneous/variables.html",[714,1.633,758,3.53]],["body/miscellaneous/variables.html",[3,0.125,5,0.073,9,0.107,10,0.684,12,0.721,15,0.131,16,0.199,17,1.198,20,0.304,26,1.747,28,0.024,30,0.119,31,1.415,32,1.7,34,1.024,35,4.157,36,3.027,45,0.666,51,0.008,52,0.008,54,0.784,55,0.503,56,1.198,62,2.664,64,0.365,66,1.135,68,0.618,70,0.784,72,1.627,81,1.121,87,1.054,88,1.054,91,1.228,100,1.054,101,0.623,107,0.982,115,0.343,132,1.337,133,0.721,137,0.861,140,0.861,142,2.542,145,0.784,150,3.31,155,1.468,156,1.468,161,1.337,163,1.468,166,1.818,178,1.468,181,1.337,221,2.266,226,0.957,227,0.861,228,2.518,233,0.784,234,1.896,235,1.896,238,1.605,244,2.825,245,0.957,246,0.957,247,3.246,248,4.196,249,2.132,250,0.861,251,1.631,252,0.957,253,2.132,254,0.957,255,0.957,256,0.957,257,0.957,258,0.957,259,3.075,266,1.631,272,0.957,273,1.468,274,0.957,282,0.957,293,0.957,310,2.825,322,3.458,323,1.085,324,1.085,338,2.132,353,1.85,354,1.85,373,1.054,387,3.204,429,0.957,433,0.957,436,1.378,441,0.861,442,2.767,450,0.957,451,0.957,452,0.957,453,1.337,462,0.618,463,0.618,464,1.631,466,1.054,468,0.957,469,1.085,470,1.085,471,1.085,472,1.085,473,1.085,474,1.085,475,1.085,476,1.085,477,1.085,478,1.085,479,1.085,480,1.085,481,1.085,482,1.085,521,1.85,533,0.721,583,1.85,584,3.488,609,1.631,610,0.957,611,2.518,624,1.85,629,2.417,630,2.417,631,0.957,632,1.85,633,1.085,644,1.085,645,2.417,646,1.085,647,1.085,648,1.085,649,1.085,677,1.085,678,1.85,714,0.721,717,2.518,719,2.417,720,0.957,745,2.856,746,1.085,750,2.856,754,2.856,755,2.856,756,2.856,757,2.417,758,1.085,759,4.626,760,6.451,761,1.28,762,2.182,763,6.115,764,2.182,765,1.28,766,2.182,767,2.851,768,2.182,769,3.368,770,2.182,771,2.182,772,2.182,773,2.182,774,2.182,775,2.182,776,2.182,777,2.182,778,2.182,779,2.182,780,2.182,781,2.182,782,2.182,783,4.826,784,2.182,785,2.182,786,4.392,787,3.368,788,2.851,789,2.851,790,2.182,791,3.368,792,2.182,793,2.182,794,1.28,795,1.28,796,1.28,797,3.779,798,1.28,799,1.28,800,1.28,801,1.28,802,1.28,803,1.28,804,4.999,805,5.151,806,1.28,807,1.28,808,2.851,809,1.28,810,1.28,811,2.851,812,2.182,813,1.28,814,1.28,815,1.28,816,1.28,817,1.28,818,1.28,819,1.28,820,4.114,821,1.28,822,2.182,823,2.182,824,1.28,825,1.28,826,3.368,827,1.28,828,1.28,829,1.28,830,1.28,831,1.28,832,1.28,833,1.28,834,1.28,835,1.28,836,1.28,837,1.28,838,1.28,839,1.28,840,1.28,841,2.182,842,1.28,843,1.28,844,1.28,845,1.28,846,1.28,847,1.28,848,1.28,849,1.28,850,1.28,851,1.28,852,1.28,853,1.28,854,3.368,855,1.28,856,1.28,857,1.28,858,1.28,859,1.28,860,1.28,861,1.28,862,1.28,863,2.182,864,1.28,865,2.851,866,1.28,867,1.28,868,2.182,869,1.28,870,2.182,871,1.28]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"injectables/DownloadState.html":{}}}],["0.0.1",{"_index":742,"title":{},"body":{"properties.html":{}}}],["1",{"_index":196,"title":{"classes/Set-1.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"overview.html":{}}}],["15.1.0",{"_index":713,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":186,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["2.3.0",{"_index":710,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":739,"title":{},"body":{"overview.html":{}}}],["2dftu",{"_index":477,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":740,"title":{},"body":{"overview.html":{}}}],["8",{"_index":738,"title":{},"body":{"overview.html":{}}}],["_ctx",{"_index":296,"title":{},"body":{"injectables/ContactState.html":{}}}],["action",{"_index":10,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('[contact",{"_index":561,"title":{},"body":{"classes/SendMessage.html":{}}}],["action('[medical",{"_index":575,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["action('[screenmode",{"_index":566,"title":{},"body":{"classes/Set.html":{}}}],["action('[tissuelibrary",{"_index":460,"title":{},"body":{"classes/Load.html":{}}}],["action('add",{"_index":79,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('clear",{"_index":83,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('computeaggregate",{"_index":278,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action('download",{"_index":84,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('register",{"_index":75,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('setdata",{"_index":276,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action(add",{"_index":603,"title":{},"body":{"injectables/SourceListState.html":{}}}],["action(addentry",{"_index":329,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(clearentries",{"_index":332,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(computeaggregate",{"_index":124,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action(download",{"_index":336,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(load",{"_index":698,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["action(registerformat",{"_index":346,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(sendmessage",{"_index":290,"title":{},"body":{"injectables/ContactState.html":{}}}],["action(set",{"_index":546,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["action(setactivenode",{"_index":502,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(setmapping",{"_index":506,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturi",{"_index":511,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action.summaries",{"_index":147,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action_log",{"_index":669,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["actiongroup",{"_index":63,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SetData.html":{}}}],["actiongroup('download",{"_index":70,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":274,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":338,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["actions.ts",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":504,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["add",{"_index":1,"title":{"classes/Add.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["add(undefined",{"_index":602,"title":{},"body":{"injectables/SourceListState.html":{}}}],["addd",{"_index":61,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["added",{"_index":33,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["addentry",{"_index":53,"title":{"classes/AddEntry.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["addentry(ctx",{"_index":327,"title":{},"body":{"injectables/DownloadState.html":{}}}],["adding",{"_index":11,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["adds",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["aggregate",{"_index":100,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregate[string]['rows'][number",{"_index":241,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregated",{"_index":230,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregatedata",{"_index":148,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregatedata[key",{"_index":158,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregaterow",{"_index":145,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregaterow[2",{"_index":243,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregaterowentry",{"_index":242,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":93,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["aggregates(state",{"_index":95,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["alias",{"_index":586,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":261,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["analytics",{"_index":442,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["anatomical_structure_of",{"_index":472,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["anchor",{"_index":408,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.click",{"_index":413,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.download",{"_index":411,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.href",{"_index":412,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.remove",{"_index":414,"title":{},"body":{"injectables/DownloadState.html":{}}}],["angular/common",{"_index":712,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":349,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["angular/core",{"_index":143,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{}}}],["another",{"_index":245,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apptitle",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":590,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":31,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":675,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["available",{"_index":309,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules.html":{}}}],["b",{"_index":214,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bar",{"_index":263,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["base",{"_index":272,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":175,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["being",{"_index":621,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["between",{"_index":139,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bigint",{"_index":633,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["biomarker",{"_index":181,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":405,"title":{},"body":{"injectables/DownloadState.html":{}}}],["blob([entry.data",{"_index":380,"title":{},"body":{"injectables/DownloadState.html":{}}}],["boolean",{"_index":533,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boolean/number/string/null/bigint/undefined",{"_index":639,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":226,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["brand('downloadformatid",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":381,"title":{},"body":{"injectables/DownloadState.html":{}}}],["browse",{"_index":733,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":404,"title":{},"body":{"injectables/DownloadState.html":{}}}],["builtin",{"_index":355,"title":{},"body":{"injectables/DownloadState.html":{}}}],["calculates",{"_index":135,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["called",{"_index":752,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["canceluncompleted",{"_index":507,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["case",{"_index":372,"title":{},"body":{"injectables/DownloadState.html":{}}}],["cell",{"_index":107,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell_schema",{"_index":244,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_schema.array",{"_index":252,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_aggregate_schema",{"_index":253,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_schema",{"_index":238,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellid",{"_index":165,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummary",{"_index":91,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellsummary[string]['entries",{"_index":171,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummaryselectors",{"_index":86,"title":{"classes/CellSummarySelectors.html":{}},"body":{"classes/CellSummarySelectors.html":{}}}],["cellsummarystate",{"_index":109,"title":{"injectables/CellSummaryState.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"modules/HraStateModule.html":{}}}],["cellsummarystatemodel",{"_index":96,"title":{"interfaces/CellSummaryStateModel.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["check",{"_index":635,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["class",{"_index":0,"title":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{},"overview.html":{}}}],["clear",{"_index":80,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries",{"_index":82,"title":{"classes/ClearEntries.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries(ctx",{"_index":331,"title":{},"body":{"injectables/DownloadState.html":{}}}],["client",{"_index":518,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["color",{"_index":137,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":260,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["columnid",{"_index":182,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindex",{"_index":188,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices",{"_index":177,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices[columnid",{"_index":184,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnlabel",{"_index":183,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns",{"_index":156,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["columns.length",{"_index":185,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns.push(columnlabel",{"_index":187,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["compute",{"_index":267,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate",{"_index":120,"title":{"classes/ComputeAggregate.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate(ctx",{"_index":122,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["computes",{"_index":126,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["constant",{"_index":250,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["constructor(data",{"_index":576,"title":{},"body":{"classes/SetData.html":{}}}],["constructor(format",{"_index":305,"title":{},"body":{"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["constructor(id",{"_index":57,"title":{},"body":{"classes/AddEntry.html":{}}}],["constructor(isfullscreen",{"_index":564,"title":{},"body":{"classes/Set.html":{}}}],["constructor(message",{"_index":558,"title":{},"body":{"classes/SendMessage.html":{}}}],["constructor(node",{"_index":572,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["constructor(public",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":41,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["constructor(sourcelist",{"_index":22,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(summaries",{"_index":269,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["constructor(url",{"_index":578,"title":{},"body":{"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["contact",{"_index":282,"title":{},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{},"miscellaneous/variables.html":{}}}],["contact.actions",{"_index":301,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactacknowledgement",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactactions.sendmessage",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactmessage",{"_index":559,"title":{},"body":{"classes/SendMessage.html":{}}}],["contactservice",{"_index":286,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactstate",{"_index":279,"title":{"injectables/ContactState.html":{}},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{}}}],["containing",{"_index":231,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["contains",{"_index":228,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":323,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":552,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["conversion",{"_index":420,"title":{},"body":{"injectables/DownloadState.html":{}}}],["convert",{"_index":321,"title":{},"body":{"injectables/DownloadState.html":{}}}],["converted",{"_index":402,"title":{},"body":{"injectables/DownloadState.html":{}}}],["corresponding",{"_index":168,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["count",{"_index":161,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":153,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["counts[rowid",{"_index":190,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["create",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('gradient",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('size",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdownloadformatid('png",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid('svg",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid(id",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('about",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('embed",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('exploreftu",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('illustration",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpage",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpagereadmore",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('portal",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('producttitle",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('apptitle",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('contactacknowledgement",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegend",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegendinfo",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthdescription",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthimg",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthmoretext",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthtitle",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrodescription",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintroimg",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintromoretext",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintropartners",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrotitle",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metrics",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricslogo",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricstitle",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('productlogourl",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('producttitle",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegend",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegendinfo",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":76,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":128,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.dispatch([new",{"_index":360,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.getstate",{"_index":368,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.patchstate",{"_index":159,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ctx.setstate",{"_index":363,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.setstate(data",{"_index":706,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["current",{"_index":43,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["data",{"_index":101,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dataservice",{"_index":703,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["decorators",{"_index":97,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Add.html":{},"injectables/DownloadState.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["default_loggable_actions",{"_index":629,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":146,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["define",{"_index":750,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["defines",{"_index":271,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["dependencies",{"_index":708,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":655,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["depth",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describes",{"_index":222,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":634,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["diff",{"_index":198,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["different",{"_index":324,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":418,"title":{},"body":{"injectables/DownloadState.html":{}}}],["discriminated",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatched",{"_index":622,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["display",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.body.appendchild(anchor",{"_index":410,"title":{},"body":{"injectables/DownloadState.html":{}}}],["document.createelement('a",{"_index":409,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download",{"_index":56,"title":{"classes/Download.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["download(ctx",{"_index":335,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.action",{"_index":356,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.model",{"_index":67,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["download_entry",{"_index":754,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format",{"_index":755,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format_id",{"_index":756,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_model",{"_index":757,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadactions.download",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadcontext",{"_index":328,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloaddata(blob",{"_index":406,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadentry",{"_index":59,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformat",{"_index":66,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadformatid",{"_index":58,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformatid:'${id",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadmodel",{"_index":312,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloadremotedata(url",{"_index":422,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloads",{"_index":416,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadselectors",{"_index":307,"title":{"classes/DownloadSelectors.html":{}},"body":{"classes/DownloadSelectors.html":{}}}],["downloadstate",{"_index":317,"title":{"injectables/DownloadState.html":{}},"body":{"injectables/DownloadState.html":{},"modules/HraStateModule.html":{}}}],["draft.entries",{"_index":367,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.entries[id",{"_index":366,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.formats[format.id",{"_index":365,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.isfullscreen",{"_index":553,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["draft.push(...sourcelist",{"_index":607,"title":{},"body":{"injectables/SourceListState.html":{}}}],["each",{"_index":163,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["effectively",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["embed",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entires",{"_index":334,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entries",{"_index":81,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entries.reduce>((res",{"_index":172,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["entries[format",{"_index":369,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry",{"_index":55,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.url",{"_index":376,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry?.type",{"_index":371,"title":{},"body":{"injectables/DownloadState.html":{}}}],["error('cannot",{"_index":383,"title":{},"body":{"injectables/DownloadState.html":{}}}],["event",{"_index":662,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["execute",{"_index":731,"title":{},"body":{"index.html":{}}}],["exist_asctb",{"_index":478,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["explore",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploreftu",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["extends",{"_index":74,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["extension",{"_index":387,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":273,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["fakebase",{"_index":389,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fakebase).pathname",{"_index":393,"title":{},"body":{"injectables/DownloadState.html":{}}}],["false",{"_index":551,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["feature",{"_index":225,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["fetch",{"_index":419,"title":{},"body":{"injectables/DownloadState.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":374,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fileurl",{"_index":421,"title":{},"body":{"injectables/DownloadState.html":{}}}],["finalpercentage",{"_index":201,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["form",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":72,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["format.id",{"_index":315,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats",{"_index":310,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["formats(state",{"_index":311,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats.ts",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats[id",{"_index":388,"title":{},"body":{"injectables/DownloadState.html":{}}}],["formatted",{"_index":403,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ftu",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["full",{"_index":540,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["fullscreen",{"_index":535,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{}}}],["function",{"_index":640,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["functions",{"_index":715,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtion",{"_index":638,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":210,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ga",{"_index":652,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["generated",{"_index":724,"title":{},"body":{"index.html":{}}}],["getactiontypefrominstance",{"_index":625,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getactiontypefrominstance(action",{"_index":664,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getcellcountmap(entries",{"_index":170,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["getrowsandcolumns",{"_index":176,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["gets",{"_index":160,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["getsourcelist",{"_index":595,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getsourcelist(state",{"_index":596,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getting",{"_index":722,"title":{"index.html":{}},"body":{}}],["given",{"_index":138,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["google",{"_index":612,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["googleanalyticsservice",{"_index":627,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["gradient",{"_index":142,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["gradientlegend",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientlegendinfo",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientpoint",{"_index":131,"title":{"interfaces/GradientPoint.html":{}},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["graph",{"_index":732,"title":{},"body":{"modules.html":{}}}],["group",{"_index":68,"title":{},"body":{"classes/AddEntry.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guess",{"_index":385,"title":{},"body":{"injectables/DownloadState.html":{}}}],["guessfilename(ctx",{"_index":386,"title":{},"body":{"injectables/DownloadState.html":{}}}],["handle",{"_index":613,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handle(state",{"_index":614,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handler's",{"_index":589,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":618,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handling",{"_index":118,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["hasdata",{"_index":314,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["header",{"_index":526,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["helper",{"_index":588,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["highpoint",{"_index":197,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["highpoint.percentage",{"_index":199,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["hra",{"_index":64,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["hrastatemodule",{"_index":426,"title":{"modules/HraStateModule.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["http",{"_index":358,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["httpclient",{"_index":348,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["https://base.com",{"_index":390,"title":{},"body":{"injectables/DownloadState.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ids.ts",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illustration",{"_index":436,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions",{"_index":516,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.actions.ts",{"_index":570,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["illustration.actions.ts:20",{"_index":573,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["illustration.actions.ts:33",{"_index":579,"title":{},"body":{"classes/SetMapping.html":{}}}],["illustration.actions.ts:7",{"_index":580,"title":{},"body":{"classes/SetUri.html":{}}}],["illustration.model",{"_index":490,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["illustration.model.ts",{"_index":464,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustration.selectors.ts",{"_index":484,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:14",{"_index":489,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:22",{"_index":487,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state",{"_index":491,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state.ts",{"_index":495,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["illustration.state.ts:30",{"_index":512,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:38",{"_index":503,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:46",{"_index":508,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration/medical",{"_index":463,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustrations",{"_index":496,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["image",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immer",{"_index":351,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["implements",{"_index":357,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["imports",{"_index":447,"title":{},"body":{"modules/HraStateModule.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":556,"title":{},"body":{"classes/SendMessage.html":{}}}],["inferred",{"_index":753,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":232,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"interfaces/GradientPoint.html":{}}}],["init",{"_index":343,"title":{},"body":{"injectables/DownloadState.html":{}}}],["initializes",{"_index":25,"title":{},"body":{"classes/Add.html":{},"classes/SendMessage.html":{},"classes/Set-1.html":{}}}],["inject",{"_index":298,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["inject(contactservice",{"_index":303,"title":{},"body":{"injectables/ContactState.html":{}}}],["inject(googleanalyticsservice",{"_index":653,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["inject(httpclient",{"_index":359,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["inject(tissuelibraryservice",{"_index":704,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["injectable",{"_index":115,"title":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":116,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"overview.html":{}}}],["injectiontoken",{"_index":623,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["injectiontoken('loggable",{"_index":647,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":650,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["input",{"_index":636,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["inset",{"_index":482,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["instance",{"_index":77,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["interface",{"_index":219,"title":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{}},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/SendMessage.html":{},"interfaces/Source.html":{}}}],["interfaces",{"_index":220,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{},"overview.html":{}}}],["interpolatecolor",{"_index":121,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatecolor(points",{"_index":130,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolated",{"_index":136,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["intro",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isfullscreen",{"_index":532,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["isfullscreen(state",{"_index":538,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["isprimitive",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isprimitive(value",{"_index":641,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["json.stringify(action",{"_index":666,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["key",{"_index":149,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["label",{"_index":150,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":239,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["lanading",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpage",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthdescription",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthimg",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthmoretext",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthtitle",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedescription",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintroimg",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintromoretext",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagepartners",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagereadmore",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagetitle",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":446,"title":{},"body":{"modules/HraStateModule.html":{},"index.html":{}}}],["library.actions",{"_index":702,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.actions.ts",{"_index":457,"title":{},"body":{"classes/Load.html":{}}}],["library.model",{"_index":689,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["library.model.ts",{"_index":749,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["library.selectors.ts",{"_index":680,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.selectors.ts:14",{"_index":686,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state",{"_index":690,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state.ts",{"_index":694,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.state.ts:22",{"_index":699,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library/tissue",{"_index":456,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["link",{"_index":583,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["linkid",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistryactions.navigate",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":12,"title":{},"body":{"classes/Add.html":{},"modules/HraStateModule.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["list.actions",{"_index":606,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.actions.ts",{"_index":8,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["list.actions.ts:17",{"_index":568,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:22",{"_index":569,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:6",{"_index":24,"title":{},"body":{"classes/Add.html":{}}}],["list.model",{"_index":38,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["list.model.ts",{"_index":581,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["list.selectors.ts",{"_index":593,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.selectors.ts:13",{"_index":598,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state",{"_index":599,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state.ts",{"_index":601,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:20",{"_index":604,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:34",{"_index":605,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list/source",{"_index":7,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":454,"title":{"classes/Load.html":{}},"body":{"classes/Load.html":{},"injectables/TissueLibraryState.html":{}}}],["loading",{"_index":458,"title":{},"body":{"classes/Load.html":{}}}],["loads",{"_index":700,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["logaction(action",{"_index":663,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["loggable",{"_index":630,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggable_actions",{"_index":645,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggabletypes",{"_index":656,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logged",{"_index":646,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":619,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logging",{"_index":654,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["login",{"_index":677,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logo",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logs",{"_index":660,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["lowpoint",{"_index":194,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["lowpoint.percentage",{"_index":200,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["managing",{"_index":281,"title":{},"body":{"injectables/ContactState.html":{}}}],["map",{"_index":468,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["map((result",{"_index":523,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["mapentry",{"_index":466,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mapping",{"_index":167,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["mapping(state",{"_index":485,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["matching",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(rgb1[0",{"_index":207,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[1",{"_index":211,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[2",{"_index":215,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["medical",{"_index":435,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["medicalillustration",{"_index":517,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationcontext",{"_index":501,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["medicalillustrationmodel",{"_index":461,"title":{"interfaces/MedicalIllustrationModel.html":{}},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationselectors",{"_index":483,"title":{"classes/MedicalIllustrationSelectors.html":{}},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["medicalillustrationstate",{"_index":434,"title":{"injectables/MedicalIllustrationState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["message",{"_index":293,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":284,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["metadata",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["method",{"_index":292,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{}}}],["methods",{"_index":92,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["metrics",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricslogo",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricstitle",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":714,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":439,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["mode.actions",{"_index":549,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.actions.ts",{"_index":562,"title":{},"body":{"classes/Set.html":{}}}],["mode.actions.ts:4",{"_index":565,"title":{},"body":{"classes/Set.html":{}}}],["mode.model",{"_index":541,"title":{},"body":{"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["mode.model.ts",{"_index":531,"title":{},"body":{"interfaces/ScreenModeModel.html":{}}}],["mode.selectors.ts",{"_index":537,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.selectors.ts:14",{"_index":539,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.state.ts",{"_index":543,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.state.ts:22",{"_index":547,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode/screen",{"_index":530,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["model",{"_index":319,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{}}}],["module",{"_index":425,"title":{"modules/HraStateModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":427,"title":{"modules.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["more",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":452,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["name.includes",{"_index":400,"title":{},"body":{"injectables/DownloadState.html":{}}}],["name}${extension",{"_index":401,"title":{},"body":{"injectables/DownloadState.html":{}}}],["needs",{"_index":671,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["new",{"_index":45,"title":{},"body":{"classes/Add.html":{},"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":615,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["next(state",{"_index":659,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngmodule",{"_index":431,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngx",{"_index":628,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxs",{"_index":342,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxs/store",{"_index":106,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["ngxs_plugins",{"_index":433,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["ngxsmodule",{"_index":432,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsmodule.forfeature",{"_index":448,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsnextpluginfn",{"_index":616,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxsoninit",{"_index":326,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsoninit(ctx",{"_index":340,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsplugin",{"_index":626,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["node",{"_index":465,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/TissueLibrarySelectors.html":{}}}],["node_name",{"_index":474,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":642,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":133,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":246,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":725,"title":{},"body":{"index.html":{}}}],["object",{"_index":166,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["object.values(formats).filter(hasdata",{"_index":316,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["objects",{"_index":32,"title":{},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":297,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["occurrences",{"_index":162,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ones",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["ontologyid",{"_index":475,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":30,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["organ_id",{"_index":471,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organ_label",{"_index":470,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":737,"title":{},"body":{"overview.html":{}}}],["overall",{"_index":223,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["overview",{"_index":734,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":707,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papaparse",{"_index":515,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param",{"_index":40,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":514,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parse(result",{"_index":525,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parsedresult",{"_index":524,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parses",{"_index":509,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["partial",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partners",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchstate",{"_index":520,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["path",{"_index":391,"title":{},"body":{"injectables/DownloadState.html":{}}}],["path.split('/').filter((seg",{"_index":395,"title":{},"body":{"injectables/DownloadState.html":{}}}],["payload",{"_index":26,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["peer",{"_index":711,"title":{},"body":{"dependencies.html":{}}}],["percentage",{"_index":132,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["percentages",{"_index":262,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["pipe",{"_index":522,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["plugin",{"_index":443,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["plugin.service.ts",{"_index":611,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["plugin.service.ts:51",{"_index":617,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["plugin/default",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugin/state",{"_index":610,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["png_format",{"_index":353,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["point",{"_index":265,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["point.percentage",{"_index":193,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points",{"_index":141,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points[index",{"_index":195,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["portal",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primitive",{"_index":631,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["primitive_types",{"_index":632,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["primitive_types.includes(typeof",{"_index":643,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["private",{"_index":169,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["produce",{"_index":350,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["produce((draft",{"_index":364,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["product",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["productlogourl",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producttitle",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":585,"title":{},"body":{"interfaces/Source.html":{},"injectables/TissueLibraryState.html":{}}}],["provide",{"_index":450,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":648,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":624,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":449,"title":{},"body":{"modules/HraStateModule.html":{}}}],["provides",{"_index":429,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":567,"title":{},"body":{"classes/Set-1.html":{}}}],["r",{"_index":206,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["read",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["record",{"_index":178,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["ref/1",{"_index":479,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/doi",{"_index":480,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/notes",{"_index":481,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["register",{"_index":71,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat",{"_index":73,"title":{"classes/RegisterFormat.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat(ctx",{"_index":345,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(png_format",{"_index":362,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(svg_format",{"_index":361,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registry",{"_index":344,"title":{},"body":{"injectables/DownloadState.html":{}}}],["removes",{"_index":42,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["representation_of",{"_index":476,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["representing",{"_index":236,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["required",{"_index":687,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["res",{"_index":174,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["res[id",{"_index":173,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["reset",{"_index":736,"title":{},"body":{"overview.html":{}}}],["resetting",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["resource",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsetype",{"_index":424,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["rest",{"_index":258,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retreiving",{"_index":681,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["retrieving",{"_index":594,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["return",{"_index":112,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["returns",{"_index":102,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["rgb1",{"_index":202,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[0",{"_index":209,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[1",{"_index":213,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[2",{"_index":217,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2",{"_index":204,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[0",{"_index":208,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[1",{"_index":212,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[2",{"_index":216,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["root",{"_index":649,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":191,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["row.length",{"_index":192,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowid",{"_index":179,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowlabel",{"_index":180,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rows",{"_index":155,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["rows[rowid",{"_index":189,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["run",{"_index":729,"title":{},"body":{"index.html":{}}}],["running",{"_index":726,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":300,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["save",{"_index":417,"title":{},"body":{"injectables/DownloadState.html":{}}}],["schema",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["screen",{"_index":438,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmode",{"_index":550,"title":{},"body":{"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmodemodel",{"_index":528,"title":{"interfaces/ScreenModeModel.html":{}},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["screenmodeselectors",{"_index":536,"title":{"classes/ScreenModeSelectors.html":{}},"body":{"classes/ScreenModeSelectors.html":{}}}],["screenmodestate",{"_index":437,"title":{"injectables/ScreenModeState.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/ScreenModeState.html":{}}}],["seg",{"_index":396,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments",{"_index":394,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments.length",{"_index":397,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments[segments.length",{"_index":399,"title":{},"body":{"injectables/DownloadState.html":{}}}],["selected",{"_index":467,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["selectedformat",{"_index":85,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["selector",{"_index":105,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["selector(['cellsummarystate",{"_index":98,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector(['medicalillustrationstate",{"_index":486,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector(['sourceliststate",{"_index":597,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector(['tissuelibrarystate",{"_index":685,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selector([cellsummarystate",{"_index":111,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector([medicalillustrationstate",{"_index":492,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector([sourceliststate",{"_index":600,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector([tissuelibrarystate",{"_index":692,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selectors",{"_index":90,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{}}}],["send",{"_index":295,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sending",{"_index":283,"title":{},"body":{"injectables/ContactState.html":{}}}],["sendmessage",{"_index":287,"title":{"classes/SendMessage.html":{}},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sendmessage(_ctx",{"_index":288,"title":{},"body":{"injectables/ContactState.html":{}}}],["sends",{"_index":555,"title":{},"body":{"classes/SendMessage.html":{}}}],["serialize",{"_index":637,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["serialize(this",{"_index":673,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serialized",{"_index":672,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serializes",{"_index":670,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["service",{"_index":651,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set",{"_index":49,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"classes/Add.html":{},"classes/ComputeAggregate.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/SourceListState.html":{}}}],["set(inject(loggable_actions).map(getactiontypefrominstance",{"_index":657,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set(undefined",{"_index":545,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setactive",{"_index":695,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactive(ctx",{"_index":696,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactivenode",{"_index":497,"title":{"classes/SetActiveNode.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["setactivenode(undefined",{"_index":500,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["setdata",{"_index":275,"title":{"classes/SetData.html":{}},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["setmapping",{"_index":498,"title":{"classes/SetMapping.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["setmapping(undefined",{"_index":505,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["sets",{"_index":277,"title":{},"body":{"classes/ComputeAggregate.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{}}}],["setstate",{"_index":519,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setstate(sourcelist",{"_index":608,"title":{},"body":{"injectables/SourceListState.html":{}}}],["setting",{"_index":571,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["seturi",{"_index":499,"title":{"classes/SetUri.html":{}},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["seturi(undefined",{"_index":510,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["shape",{"_index":224,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["show",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":233,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":259,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["sizelegend",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizelegendinfo",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{"interfaces/Source.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["source_spatial_entity",{"_index":473,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["sourcelist",{"_index":14,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sourcelistcontext",{"_index":591,"title":{},"body":{"interfaces/Source.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistmodel",{"_index":587,"title":{},"body":{"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistselectors",{"_index":592,"title":{"classes/SourceListSelectors.html":{}},"body":{"classes/SourceListSelectors.html":{}}}],["sourceliststate",{"_index":440,"title":{"injectables/SourceListState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sources",{"_index":13,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["specific",{"_index":264,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["specified",{"_index":339,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/.../builtin",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cell",{"_index":745,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../default",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.action.ts",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.model.ts",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../link",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../medical",{"_index":746,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../resource",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../source",{"_index":747,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../state",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":748,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/cell",{"_index":87,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.actions.ts",{"_index":554,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.actions.ts:5",{"_index":560,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.state.ts",{"_index":280,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/contact/contact.state.ts:16",{"_index":291,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/download/builtin",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts",{"_index":54,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts:10",{"_index":527,"title":{},"body":{"classes/RegisterFormat.html":{}}}],["src/lib/download/download.action.ts:23",{"_index":60,"title":{},"body":{"classes/AddEntry.html":{}}}],["src/lib/download/download.action.ts:38",{"_index":306,"title":{},"body":{"classes/Download.html":{}}}],["src/lib/download/download.model.ts",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.selectors.ts",{"_index":308,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.selectors.ts:14",{"_index":313,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.state.ts",{"_index":318,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:34",{"_index":341,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:44",{"_index":347,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:58",{"_index":330,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:71",{"_index":333,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:85",{"_index":337,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/link",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/medical",{"_index":462,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/resource",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/screen",{"_index":529,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["src/lib/source",{"_index":6,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/state",{"_index":609,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/state.module.ts",{"_index":428,"title":{},"body":{"modules/HraStateModule.html":{}}}],["src/lib/tissue",{"_index":455,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":723,"title":{"index.html":{}},"body":{}}],["state",{"_index":15,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"classes/SetData.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state.aggregate",{"_index":113,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.isfullscreen",{"_index":542,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["state.mapping",{"_index":494,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state.nodes",{"_index":693,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["state.summaries",{"_index":114,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.url",{"_index":493,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state_logger_provider",{"_index":678,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["stateanalyticspluginservice",{"_index":441,"title":{"injectables/StateAnalyticsPluginService.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["statecontext",{"_index":123,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["states",{"_index":430,"title":{},"body":{"modules/HraStateModule.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["store",{"_index":268,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["stores",{"_index":127,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["storing",{"_index":544,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":254,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":582,"title":{},"body":{"interfaces/Source.html":{}}}],["submitted",{"_index":557,"title":{},"body":{"classes/SendMessage.html":{}}}],["submitting",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summaries",{"_index":94,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{}}}],["summaries(state",{"_index":103,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summaries[key].entries",{"_index":152,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summaries[key].label",{"_index":151,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary",{"_index":119,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["summary.actions",{"_index":144,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.actions.ts",{"_index":266,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["summary.actions.ts:20",{"_index":270,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["summary.actions.ts:9",{"_index":577,"title":{},"body":{"classes/SetData.html":{}}}],["summary.model",{"_index":108,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["summary.model.ts",{"_index":221,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["summary.selectors.ts",{"_index":89,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:15",{"_index":104,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:9",{"_index":99,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state",{"_index":110,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state.ts",{"_index":117,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:114",{"_index":134,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:20",{"_index":125,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary/cell",{"_index":88,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":78,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["svg",{"_index":322,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["svg_format",{"_index":354,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":370,"title":{},"body":{"injectables/DownloadState.html":{}}}],["table",{"_index":229,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["tap",{"_index":352,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/TissueLibraryState.html":{}}}],["test",{"_index":730,"title":{},"body":{"index.html":{}}}],["tests",{"_index":728,"title":{},"body":{"index.html":{}}}],["text",{"_index":521,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["this.contact.sendmessage(message",{"_index":304,"title":{},"body":{"injectables/ContactState.html":{}}}],["this.dataservice.gettissues().pipe(tap((data",{"_index":705,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["this.downloaddata(data",{"_index":378,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloaddata(new",{"_index":379,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloadremotedata(entry.url).pipe(tap((data",{"_index":377,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.ga.event(type",{"_index":668,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.getcellcountmap(entries",{"_index":154,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.getrowsandcolumns(entries",{"_index":157,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.guessfilename(ctx",{"_index":375,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.hextorgb(highpoint.color",{"_index":205,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.hextorgb(lowpoint.color",{"_index":203,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.http.get(url",{"_index":423,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["this.logaction(action",{"_index":658,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.loggabletypes.has(type",{"_index":665,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.rgbtohex([r",{"_index":218,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.serialize",{"_index":667,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["throw",{"_index":382,"title":{},"body":{"injectables/DownloadState.html":{}}}],["tissedata",{"_index":688,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissue",{"_index":445,"title":{},"body":{"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuedata",{"_index":691,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrary",{"_index":459,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissuelibrarycontext",{"_index":697,"title":{},"body":{"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrarymodel",{"_index":684,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibraryselectors",{"_index":679,"title":{"classes/TissueLibrarySelectors.html":{}},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibraryservice",{"_index":701,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["tissuelibrarystate",{"_index":444,"title":{"injectables/TissueLibraryState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissues",{"_index":682,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissues(state",{"_index":683,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["title",{"_index":584,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":644,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tooltip",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform((id",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformed",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigerred",{"_index":661,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["true",{"_index":453,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":709,"title":{},"body":{"dependencies.html":{}}}],["tuple([z.string",{"_index":256,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":140,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":743,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":674,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["types",{"_index":227,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":751,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typings",{"_index":469,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/state",{"_index":65,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["ui/services",{"_index":299,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["undefined",{"_index":289,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":164,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["unit",{"_index":727,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":620,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["update",{"_index":563,"title":{},"body":{"classes/Set.html":{}}}],["updates",{"_index":548,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["uri",{"_index":513,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["url",{"_index":373,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":488,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["url(url",{"_index":392,"title":{},"body":{"injectables/DownloadState.html":{}}}],["used",{"_index":320,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":451,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":325,"title":{},"body":{"injectables/DownloadState.html":{},"classes/SendMessage.html":{}}}],["uses",{"_index":294,"title":{},"body":{"injectables/ContactState.html":{}}}],["using",{"_index":285,"title":{},"body":{"injectables/ContactState.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.every(isprimitive",{"_index":676,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["values",{"_index":240,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":302,"title":{},"body":{"injectables/ContactState.html":{}}}],["variables",{"_index":758,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":741,"title":{},"body":{"properties.html":{}}}],["void",{"_index":129,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["whether",{"_index":534,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["window.url.createobjecturl(blob",{"_index":407,"title":{},"body":{"injectables/DownloadState.html":{}}}],["window.url.revokeobjecturl(url",{"_index":415,"title":{},"body":{"injectables/DownloadState.html":{}}}],["without",{"_index":384,"title":{},"body":{"injectables/DownloadState.html":{}}}],["yes",{"_index":574,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetUri.html":{}}}],["z",{"_index":234,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":237,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["z.literal('data",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal('url",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number",{"_index":249,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":257,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.object",{"_index":247,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.record",{"_index":251,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.record(download_format_id",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":248,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.string().array",{"_index":255,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":235,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":735,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of adding a list of sources to the SourceList state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of Source objects to be added to the state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Add'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddEntry.html":{"url":"classes/AddEntry.html","title":"class - AddEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entry into download state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: DownloadFormatId, entry: DownloadEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for Addd Entry\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        DownloadEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CellSummarySelectors.html":{"url":"classes/CellSummarySelectors.html","title":"class - CellSummarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CellSummarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                selectors for the CellSummary state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                aggregates\n                            \n                            \n                                    Static\n                                summaries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        aggregates\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregates(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:9\n                \n            \n\n\n            \n                \n                    get the aggregate data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Aggregate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        summaries\n                        \n                    \n                \n            \n            \n                \n                    \n                    summaries(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:15\n                \n            \n\n\n            \n                \n                    get the summaries data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CellSummary\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Aggregate, CellSummaryStateModel, CellSummary } from './cell-summary.model';\nimport { CellSummaryState } from './cell-summary.state';\n\n/** selectors for the CellSummary state */\nexport class CellSummarySelectors {\n  /** get the aggregate data from the state */\n  @Selector([CellSummaryState])\n  static aggregates(state: CellSummaryStateModel): Aggregate {\n    return state.aggregate;\n  }\n\n  /** get the summaries data from the state */\n  @Selector([CellSummaryState])\n  static summaries(state: CellSummaryStateModel): CellSummary {\n    return state.summaries;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CellSummaryState.html":{"url":"injectables/CellSummaryState.html","title":"injectable - CellSummaryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CellSummaryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling cell summary data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeAggregate\n                            \n                            \n                                interpolateColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        computeAggregate\n                        \n                    \n                \n            \n            \n                \ncomputeAggregate(ctx: StateContext, action: ComputeAggregate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ComputeAggregate)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:20\n                \n            \n\n\n            \n                \n                    computes aggregate data and stores in the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                                ComputeAggregate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolateColor\n                        \n                    \n                \n            \n            \n                \ninterpolateColor(points: GradientPoint[], percentage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:114\n                \n            \n\n\n            \n                \n                    Calculates the interpolated color value at the given percentage between two points in a color gradient.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                GradientPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    percentage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { ComputeAggregate } from './cell-summary.actions';\nimport { Aggregate, AggregateRow, CellSummary, CellSummaryStateModel, GradientPoint } from './cell-summary.model';\n\n/** State handling cell summary data */\n@State({\n  name: 'cellsummary',\n  defaults: {\n    summaries: {},\n    aggregate: {},\n  },\n})\n@Injectable()\nexport class CellSummaryState {\n  /**\n   * computes aggregate data and stores in the current state\n   */\n  @Action(ComputeAggregate)\n  computeAggregate(ctx: StateContext, action: ComputeAggregate): void {\n    const summaries = action.summaries;\n    const aggregateData: Aggregate = {};\n\n    for (const key in summaries) {\n      const label = summaries[key].label;\n      const entries = summaries[key].entries;\n\n      const counts = this.getCellCountMap(entries);\n\n      const [rows, columns] = this.getRowsAndColumns(entries, counts);\n\n      aggregateData[key] = {\n        label: label,\n        columns: columns,\n        rows: rows,\n      };\n    }\n\n    ctx.patchState({\n      aggregate: aggregateData,\n    });\n  }\n\n  /** Gets a count of the number of occurrences of each unique cellId in an array of entries,\n   * and returns an object mapping each cellId to its corresponding count. */\n  private getCellCountMap(entries: CellSummary[string]['entries']): { [key: string]: number } {\n    return entries.reduce>((res, { cell: { id }, count }) => {\n      res[id] = res[id] ? res[id] + count : count;\n      return res;\n    }, {});\n  }\n\n  /** Returns an array of rows and columns based on an array of entries */\n  private getRowsAndColumns(\n    entries: CellSummary[string]['entries'],\n    counts: { [key: string]: number }\n  ): [rows: AggregateRow[], columns: string[]] {\n    const columns: string[] = [];\n    const columnIndices: Record = {};\n    const rows: Record = {};\n\n    for (const entry of entries) {\n      const {\n        cell: { id: rowId, label: rowLabel },\n        biomarker: { id: columnId, label: columnLabel },\n      } = entry;\n\n      if (!(columnId in columnIndices)) {\n        columnIndices[columnId] = columns.length + 2;\n        columns.push(columnLabel);\n      }\n      const columnIndex = columnIndices[columnId];\n\n      if (!(rowId in rows)) {\n        rows[rowId] = [rowLabel, counts[rowId]];\n      }\n      const row = rows[rowId];\n\n      if (row.length  point.percentage >= percentage);\n    const lowPoint = points[index - 1];\n    const highPoint = points[index];\n    const diff = highPoint.percentage - lowPoint.percentage;\n    const finalPercentage = (percentage - lowPoint.percentage) / diff;\n\n    const rgb1 = this.hexToRgb(lowPoint.color);\n    const rgb2 = this.hexToRgb(highPoint.color);\n\n    const r = Math.round(rgb1[0] + (rgb2[0] - rgb1[0]) * finalPercentage);\n    const g = Math.round(rgb1[1] + (rgb2[1] - rgb1[1]) * finalPercentage);\n    const b = Math.round(rgb1[2] + (rgb2[2] - rgb1[2]) * finalPercentage);\n\n    return this.rgbToHex([r, g, b]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CellSummaryStateModel.html":{"url":"interfaces/CellSummaryStateModel.html","title":"interface - CellSummaryStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CellSummaryStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                The CellSummaryStateModel interface describes the overall shape of the state for this feature.\nIt has two properties, summaries and aggregate, both of which are of their corresponding types.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregate\n                                        \n                                \n                                \n                                        \n                                            summaries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregate:         Aggregate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Aggregate\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry contains a label and a table of aggregated data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summaries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summaries:         CellSummary\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CellSummary\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry is an object containing information about a single cell and its corresponding biomarker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClearEntries.html":{"url":"classes/ClearEntries.html","title":"class - ClearEntries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClearEntries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear all entries from download state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeAggregate.html":{"url":"classes/ComputeAggregate.html","title":"class - ComputeAggregate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeAggregate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Compute aggregate of the given data and store to state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(summaries: z.infer<>)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        summaries\n                                                  \n                                                        \n                                                                    z.infer<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe cell summary data to compute aggregate for.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactState.html":{"url":"injectables/ContactState.html","title":"injectable - ContactState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.state.ts\n        \n\n\n            \n                Description\n            \n            \n                A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact'\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(_ctx: StateContext, undefined: SendMessage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SendMessage)\n                \n            \n\n            \n                \n                    Defined in src/lib/contact/contact.state.ts:16\n                \n            \n\n\n            \n                \n                    An action method for sending a message. It uses SendMessage action class to send messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _ctx\n                                    \n                                            StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SendMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { ContactService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { SendMessage } from './contact.actions';\n\n/** A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact' */\n@State({ name: 'contact' })\n@Injectable()\nexport class ContactState {\n  /** A variable to inject the ContactService */\n  private readonly contact = inject(ContactService);\n\n  /** An action method for sending a message. It uses SendMessage action class to send messages. */\n  @Action(SendMessage)\n  sendMessage(_ctx: StateContext, { message }: SendMessage): Observable {\n    return this.contact.sendMessage(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Download.html":{"url":"classes/Download.html","title":"class - Download","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Download\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Download file Action\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormatId)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of download.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadSelectors.html":{"url":"classes/DownloadSelectors.html","title":"class - DownloadSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Available format selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                formats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        formats\n                        \n                    \n                \n            \n            \n                \n                    \n                    formats(state: DownloadModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors available format for download selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                DownloadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormat[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { DownloadFormat, DownloadModel } from './download.model';\n\n/**\n * Available format selectors\n */\nexport class DownloadSelectors {\n  /**\n   * Selectors available format for download selectors\n   * @param state\n   * @returns\n   */\n  @Selector()\n  static formats(state: DownloadModel): DownloadFormat[] {\n    const { formats, entries } = state;\n    const hasData = (format: DownloadFormat | undefined): format is DownloadFormat =>\n      !!(format && format.id in entries);\n    return Object.values(formats).filter(hasData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DownloadState.html":{"url":"injectables/DownloadState.html","title":"injectable - DownloadState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DownloadState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Download State Model used to convert\nfile from SVG file content to different\nformat and download to user.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEntry\n                            \n                            \n                                clearEntries\n                            \n                            \n                                download\n                            \n                            \n                                ngxsOnInit\n                            \n                            \n                                registerFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEntry\n                        \n                    \n                \n            \n            \n                \naddEntry(ctx: DownloadContext, undefined: AddEntry)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddEntry)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:58\n                \n            \n\n\n            \n                \n                    Add entry into download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                AddEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEntries\n                        \n                    \n                \n            \n            \n                \nclearEntries(ctx: DownloadContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ClearEntries)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:71\n                \n            \n\n\n            \n                \n                    Clear entires from download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(ctx: DownloadContext, undefined: Download)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Download)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:85\n                \n            \n\n\n            \n                \n                    Actions download file in specified format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Download\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngxsOnInit\n                        \n                    \n                \n            \n            \n                \nngxsOnInit(ctx: DownloadContext)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/download/download.state.ts:34\n                \n            \n\n\n            \n                \n                    Ngxs on init and registry default format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerFormat\n                        \n                    \n                \n            \n            \n                \nregisterFormat(ctx: DownloadContext, undefined: RegisterFormat)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(RegisterFormat)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:44\n                \n            \n\n\n            \n                \n                    Actions register format in Download State\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RegisterFormat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, NgxsOnInit, State } from '@ngxs/store';\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\n\nimport { PNG_FORMAT, SVG_FORMAT } from './builtin-formats';\nimport { AddEntry, ClearEntries, Download, RegisterFormat } from './download.action';\nimport { DownloadContext, DownloadFormatId, DownloadModel } from './download.model';\n\n/**\n * Download State Model used to convert\n * file from SVG file content to different\n * format and download to user.\n */\n@State({\n  name: 'download',\n  defaults: {\n    formats: {},\n    entries: {},\n  },\n})\n@Injectable()\nexport class DownloadState implements NgxsOnInit {\n  /**\n   * Http object inject for download state\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Ngxs on init and registry default format\n   * @param ctx\n   */\n  ngxsOnInit(ctx: DownloadContext): void {\n    ctx.dispatch([new RegisterFormat(SVG_FORMAT), new RegisterFormat(PNG_FORMAT)]);\n  }\n\n  /**\n   * Actions register format in Download State\n   * @param ctx\n   * @param { format }\n   */\n  @Action(RegisterFormat)\n  registerFormat(ctx: DownloadContext, { format }: RegisterFormat): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.formats[format.id] = format;\n      })\n    );\n  }\n\n  /**\n   * Add entry into download state\n   * @param ctx\n   * @param { id, entry }\n   */\n  @Action(AddEntry)\n  addEntry(ctx: DownloadContext, { id, entry }: AddEntry): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries[id] = entry;\n      })\n    );\n  }\n\n  /**\n   * Clear entires from download state\n   * @param ctx\n   */\n  @Action(ClearEntries)\n  clearEntries(ctx: DownloadContext): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries = {};\n      })\n    );\n  }\n\n  /**\n   * Actions download file in specified format\n   * @param ctx\n   * @param action\n   */\n  @Action(Download)\n  download(ctx: DownloadContext, { format }: Download): Observable | void {\n    const { entries } = ctx.getState();\n    const entry = entries[format];\n    switch (entry?.type) {\n      case 'url': {\n        const filename = this.guessFilename(ctx, format, entry.url);\n        return this.downloadRemoteData(entry.url).pipe(tap((data) => this.downloadData(data, filename)));\n      }\n\n      case 'data': {\n        const filename = this.guessFilename(ctx, format, '');\n        this.downloadData(new Blob([entry.data]), filename);\n        break;\n      }\n\n      default:\n        throw new Error('Cannot download file without data');\n    }\n  }\n\n  /**\n   * Guess filename\n   * @param ctx\n   * @param id\n   * @param url\n   * @returns filename\n   */\n  private guessFilename(ctx: DownloadContext, id: DownloadFormatId, url: string): string {\n    const { formats } = ctx.getState();\n    const { extension = '' } = formats[id] ?? {};\n    const fakeBase = 'https://base.com';\n    const path = new URL(url, fakeBase).pathname;\n    const segments = path.split('/').filter((seg) => seg !== '');\n    const name = segments.length > 0 ? segments[segments.length - 1] : 'download';\n    const guess = name.includes('.') ? name : `${name}${extension}`;\n\n    return guess;\n  }\n\n  /**\n   * Download converted formatted file to browser\n   * @param blob\n   * @param fileName\n   */\n  private downloadData(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n    anchor.download = filename;\n    anchor.href = url;\n    anchor.click();\n    anchor.remove();\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Downloads and save -  method is used to direct fetch file\n   * if available on url without conversion\n   * @param fileUrl\n   * @param fileName\n   */\n  private downloadRemoteData(url: string): Observable {\n    return this.http.get(url, { responseType: 'blob' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradientPoint.html":{"url":"interfaces/GradientPoint.html","title":"interface - GradientPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradientPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of gradient colors along with their percentages for the gradient bar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            percentage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gradient color at a specific percentage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Percentage point along the gradient bar\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HraStateModule.html":{"url":"modules/HraStateModule.html","title":"module - HraStateModule","body":"\n                   \n\n\n\n\n    Modules\n    HraStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/state.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Provides all states\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule, NGXS_PLUGINS } from '@ngxs/store';\nimport { CellSummaryState } from './cell-summary';\nimport { ContactState } from './contact';\nimport { DownloadState } from './download';\nimport { MedicalIllustrationState } from './medical-illustration';\nimport { ScreenModeState } from './screen-mode';\nimport { SourceListState } from './source-list';\nimport { StateAnalyticsPluginService } from './state-analytics-plugin';\nimport { TissueLibraryState } from './tissue-library';\n\n/** Provides all states */\n@NgModule({\n  imports: [\n    NgxsModule.forFeature([\n      CellSummaryState,\n      ContactState,\n      DownloadState,\n      MedicalIllustrationState,\n      ScreenModeState,\n      SourceListState,\n      TissueLibraryState,\n    ]),\n  ],\n  providers: [\n    {\n      provide: NGXS_PLUGINS,\n      useExisting: StateAnalyticsPluginService,\n      multi: true,\n    },\n  ],\n})\nexport class HraStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load.html":{"url":"classes/Load.html","title":"class - Load","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of loading tissue data into the TissueLibrary state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** action of loading tissue data into the TissueLibrary state */\nexport class Load extends Action('[TissueLibrary] Load Tissue Data') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MedicalIllustrationModel.html":{"url":"interfaces/MedicalIllustrationModel.html","title":"interface - MedicalIllustrationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MedicalIllustrationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for medical illustration model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            mapping\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            node\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mapping\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mapping:         MapEntry[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mapping info\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         MapEntry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Current selected node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Illustration URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Map Entry typings */\nconst mapEntry = z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n});\n\nexport type MapEntry = z.infer;\n\n/** Interface for medical illustration model */\nexport interface MedicalIllustrationModel {\n  /** Illustration URL */\n  url?: string;\n  /** Current selected node */\n  node?: MapEntry;\n  /** Mapping info */\n  mapping?: MapEntry[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MedicalIllustrationSelectors.html":{"url":"classes/MedicalIllustrationSelectors.html","title":"class - MedicalIllustrationSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MedicalIllustrationSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for medical illustration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                mapping\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        mapping\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapping(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:22\n                \n            \n\n\n            \n                \n                    Returns current mapping file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MapEntry[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Returns illustration url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\n\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\nimport { MedicalIllustrationState } from './medical-illustration.state';\n\n/**\n * Selectors for medical illustration\n */\nexport class MedicalIllustrationSelectors {\n  /**\n   * Returns illustration url\n   */\n  @Selector([MedicalIllustrationState])\n  static url(state: MedicalIllustrationModel): string | undefined {\n    return state.url;\n  }\n\n  /**\n   * Returns current mapping file\n   */\n  @Selector([MedicalIllustrationState])\n  static mapping(state: MedicalIllustrationModel): MapEntry[] {\n    return state.mapping ?? [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MedicalIllustrationState.html":{"url":"injectables/MedicalIllustrationState.html","title":"injectable - MedicalIllustrationState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MedicalIllustrationState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling medical illustrations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActiveNode\n                            \n                            \n                                setMapping\n                            \n                            \n                                setUri\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActiveNode\n                        \n                    \n                \n            \n            \n                \nsetActiveNode(undefined: MedicalIllustrationContext, undefined: SetActiveNode)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetActiveNode)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:38\n                \n            \n\n\n            \n                \n                    Sets active node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetActiveNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMapping\n                        \n                    \n                \n            \n            \n                \nsetMapping(undefined: MedicalIllustrationContext, undefined: SetMapping)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetMapping, {cancelUncompleted: true})\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:46\n                \n            \n\n\n            \n                \n                    Parses and sets mapping info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetMapping\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUri\n                        \n                    \n                \n            \n            \n                \nsetUri(undefined: MedicalIllustrationContext, undefined: SetUri)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUri)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:30\n                \n            \n\n\n            \n                \n                    Sets illustration URI\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUri\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { parse } from 'papaparse';\nimport { map, Observable } from 'rxjs';\n\nimport { SetActiveNode, SetMapping, SetUri } from './medical-illustration.actions';\nimport { MedicalIllustrationModel, MapEntry } from './medical-illustration.model';\n\nexport type MedicalIllustrationContext = StateContext;\n\n/**\n * State handling medical illustrations\n */\n@State({\n  name: 'medicalIllustration',\n  defaults: {},\n})\n@Injectable()\nexport class MedicalIllustrationState {\n  /**\n   * Http client\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Sets illustration URI\n   */\n  @Action(SetUri)\n  setUri({ setState }: MedicalIllustrationContext, { url }: SetUri) {\n    setState({ url: url, node: undefined });\n  }\n\n  /**\n   * Sets active node\n   */\n  @Action(SetActiveNode)\n  setActiveNode({ patchState }: MedicalIllustrationContext, { node }: SetActiveNode) {\n    patchState({ node });\n  }\n\n  /**\n   * Parses and sets mapping info\n   */\n  @Action(SetMapping, { cancelUncompleted: true })\n  setMapping({ patchState }: MedicalIllustrationContext, { url }: SetMapping): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((result) => {\n        const parsedResult = parse(result, { header: true }).data as MapEntry[];\n        patchState({ mapping: parsedResult });\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterFormat.html":{"url":"classes/RegisterFormat.html","title":"class - RegisterFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Register format into state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormat)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of register format.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormat\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenModeModel.html":{"url":"interfaces/ScreenModeModel.html","title":"interface - ScreenModeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenModeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode state model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isFullScreen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isFullScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFullScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether in fullscreen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ScreenModeModel {\n  /** Whether in fullscreen */\n  isFullScreen: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenModeSelectors.html":{"url":"classes/ScreenModeSelectors.html","title":"class - ScreenModeSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenModeSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFullScreen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isFullScreen\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFullScreen(state: ScreenModeModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors screen mode selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ScreenModeModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if full screen\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/**\n * Screen mode selectors\n */\nexport class ScreenModeSelectors {\n  /**\n   * Selectors screen mode selectors\n   * @param state\n   * @returns true if full screen\n   */\n  @Selector()\n  static isFullScreen(state: ScreenModeModel): boolean {\n    return state.isFullScreen;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenModeState.html":{"url":"injectables/ScreenModeState.html","title":"injectable - ScreenModeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenModeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State storing the screen mode\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.state.ts:22\n                \n            \n\n\n            \n                \n                    Updates the screen mode\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport produce from 'immer';\nimport { Set } from './screen-mode.actions';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/** State storing the screen mode */\n@State({\n  name: 'screenmode',\n  defaults: {\n    isFullScreen: false,\n  },\n})\n@Injectable()\nexport class ScreenModeState {\n  /**\n   * Updates the screen mode\n   * @param ctx State context\n   * @param action Action with new mode\n   */\n  @Action(Set)\n  set({ setState }: StateContext, { isFullScreen }: Set): void {\n    setState(\n      produce((draft: ScreenModeModel) => {\n        draft.isFullScreen = isFullScreen;\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessage.html":{"url":"classes/SendMessage.html","title":"class - SendMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                A class which sends individual messages submitted by user.\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: ContactMessage)\n                    \n                \n                        \n                            \n                                Defined in src/lib/contact/contact.actions.ts:5\n                            \n                        \n\n                \n                    \n                            A constructor which initializes the message of type ContactMessage interface.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    ContactMessage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { ContactMessage } from '@hra-ui/services';\n\n/** A class which sends individual messages submitted by user. */\nexport class SendMessage extends Action('[Contact] Send Message') {\n  /** A constructor which initializes the message of type ContactMessage interface. */\n  constructor(readonly message: ContactMessage) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Update the screen mode\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(isFullScreen: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/screen-mode/screen-mode.actions.ts:4\n                            \n                        \n\n                \n                    \n                            Creates an instance of Set\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        isFullScreen\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether the mode is fullscreen\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** Update the screen mode */\nexport class Set extends Action('[Screenmode] Set Screenmode') {\n  /**\n   * Creates an instance of Set\n   * @param isFullScreen Whether the mode is fullscreen\n   */\n  constructor(readonly isFullScreen: boolean) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                An action that removes all current sources and adds new ones, effectively resetting the state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sourceList\n                            \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of source objects to be set as the new state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sourceList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Source[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:22\n                        \n                    \n\n            \n                \n                    array of source objects to be set as the new state\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Set'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetActiveNode.html":{"url":"classes/SetActiveNode.html","title":"class - SetActiveNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetActiveNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current active node\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node?: MapEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Creates an instance of set active node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        MapEntry\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetData.html":{"url":"classes/SetData.html","title":"class - SetData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Set data to store\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: object)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Defines the SetData action, which sets data to the store.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to set to the store.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetMapping.html":{"url":"classes/SetMapping.html","title":"class - SetMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the mapping file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:33\n                            \n                        \n\n                \n                    \n                            Creates an instance of set mapping.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUri.html":{"url":"classes/SetUri.html","title":"class - SetUri","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUri\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url?: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:7\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('[Medical Illustration] Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('[Medical Illustration] Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('[Medical Illustration] Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.model.ts\n        \n\n\n            \n                Description\n            \n            \n                structure of a source object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Link property of the source object\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title property of the source object\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StateContext } from '@ngxs/store';\n\n/** structure of a source object */\nexport interface Source {\n  /** Title property of the source object  */\n  title: string;\n  /** Link property of the source object */\n  link: string;\n}\n\n/** Type alias for the array of source objects */\nexport type SourceListModel = Source[];\n\n/** Helper alias for action handler's ctx argument */\nexport type SourceListContext = StateContext;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceListSelectors.html":{"url":"classes/SourceListSelectors.html","title":"class - SourceListSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceListSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retrieving data from the SourceListState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getSourceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getSourceList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourceList(state: SourceListModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['SourceListState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.selectors.ts:13\n                \n            \n\n\n            \n                \n                    Gets the array of data sources from the SourceList object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                SourceListModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current state of the SourceListState\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Source[]\n\n                    \n                    \n                        array of source objects\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Source, SourceListModel } from './source-list.model';\nimport { SourceListState } from './source-list.state';\n\n/** Selector class for retrieving data from the SourceListState */\nexport class SourceListSelectors {\n  /**\n   * Gets the array of data sources from the SourceList object.\n   * @param state The current state of the SourceListState\n   * @returns array of source objects\n   */\n  @Selector([SourceListState])\n  static getSourceList(state: SourceListModel): Source[] {\n    return state;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceListState.html":{"url":"injectables/SourceListState.html","title":"injectable - SourceListState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceListState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling source list data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(undefined: SourceListContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:20\n                \n            \n\n\n            \n                \n                    adds a list of sources to the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: SourceListContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:34\n                \n            \n\n\n            \n                \n                    Removes all current sources and adds new ones, effectively resetting the state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { produce } from 'immer';\nimport { Add, Set } from './source-list.actions';\nimport { SourceListContext, SourceListModel } from './source-list.model';\n\n/** State handling source list data */\n@State({\n  name: 'sourceList',\n  defaults: [],\n})\n@Injectable()\nexport class SourceListState {\n  /**\n   * adds a list of sources to the current state\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be added to the state\n   */\n  @Action(Add)\n  add({ setState }: SourceListContext, { sourceList }: Add) {\n    setState(\n      produce((draft) => {\n        draft.push(...sourceList);\n      })\n    );\n  }\n\n  /**\n   * Removes all current sources and adds new ones, effectively resetting the state.\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be set as the new state\n   */\n  @Action(Set)\n  set({ setState }: SourceListContext, { sourceList }: Set) {\n    setState(sourceList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateAnalyticsPluginService.html":{"url":"injectables/StateAnalyticsPluginService.html","title":"injectable - StateAnalyticsPluginService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateAnalyticsPluginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Analytics Plugin Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(state, action, next: NgxsNextPluginFn)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/state-analytics-plugin/state-analytics-plugin.service.ts:51\n                \n            \n\n\n            \n                \n                    Handles logger plugin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent state of the store with type unknown.\n\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent action being dispatched with type unknown type.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NgxsNextPluginFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnext plugin to handle the action\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nnext plugin with the current state and action.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, InjectionToken, Provider } from '@angular/core';\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, NGXS_PLUGINS } from '@ngxs/store';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\nimport { DEFAULT_LOGGABLE_ACTIONS } from './default-loggable-actions';\n\n/** Primitive types */\nconst PRIMITIVE_TYPES = ['bigint', 'boolean', 'number', 'string'];\n\n/**\n * Determines whether primitive is\n * @param value is string - used to check the input value from serialize funtion\n * @returns type of value - boolean/number/string/null/bigint/undefined\n */\nfunction isPrimitive(value: unknown): value is bigint | boolean | number | string | null | undefined {\n  return value == null || PRIMITIVE_TYPES.includes(typeof value);\n}\n\n/**\n * Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n */\nexport const LOGGABLE_ACTIONS = new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n});\n\n/**\n * Google Analytics Plugin Injectable\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateAnalyticsPluginService implements NgxsPlugin {\n  /**\n   * Injects the service for state analytics plugin.\n   */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Plugin service for logging state analytics\n   * Setting loggable action types from LOGGABLE_ACTIONS dependency.\n   */\n  private readonly loggableTypes = new Set(inject(LOGGABLE_ACTIONS).map(getActionTypeFromInstance));\n\n  /**\n   * Handles logger plugin\n   * @param state -  Current state of the store with type unknown.\n   * @param action - Current action being dispatched with type unknown type.\n   * @param next - next plugin to handle the action\n   * @returns - next plugin with the current state and action.\n   */\n  handle(state: unknown, action: unknown, next: NgxsNextPluginFn) {\n    this.logAction(action);\n    return next(state, action);\n  }\n\n  /**\n   * Logs action trigerred to google analytics event\n   * @param action - Current action being dispatched with type unknown type.\n   * @returns void\n   */\n  private logAction(action: unknown): void {\n    const type = getActionTypeFromInstance(action);\n    if (type && this.loggableTypes.has(type)) {\n      const payload = JSON.stringify(action, this.serialize);\n      this.ga.event(type, 'action_log', payload);\n    }\n  }\n\n  /**\n   * Serializes action data\n   * @param key - key with type unknown that needs to be serialized\n   * @param value - value with type unknown that needs to be serialized\n   * @returns serialized value\n   */\n  private serialize(this: void, key: unknown, value: unknown): unknown {\n    if (key === '' && typeof value === 'object') {\n      return { ...value, type: undefined };\n    } else if (isPrimitive(value) || (Array.isArray(value) && value.every(isPrimitive))) {\n      return value;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * State Login Provider\n */\nexport const STATE_LOGGER_PROVIDER: Provider = {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TissueLibrarySelectors.html":{"url":"classes/TissueLibrarySelectors.html","title":"class - TissueLibrarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TissueLibrarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retreiving data from the TissueLibraryState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        tissues\n                        \n                    \n                \n            \n            \n                \n                    \n                    tissues(state: TissueLibraryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['TissueLibraryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Gets the tissue data from the TissueLibrary object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TissueLibraryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the current state of the TissueLibraryState.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Required<>\n\n                    \n                    \n                        node data of the type of TisseData.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { TissueLibraryModel } from './tissue-library.model';\nimport { TissueLibraryState } from './tissue-library.state';\nimport { TissueData } from '@hra-ui/services';\n\n/** Selector class for retreiving data from the TissueLibraryState */\nexport class TissueLibrarySelectors {\n  /**\n   * Gets the tissue data from the TissueLibrary object.\n   * @param state the current state of the TissueLibraryState.\n   * @returns node data of the type of TisseData.\n   */\n  @Selector([TissueLibraryState])\n  static tissues(state: TissueLibraryModel): Required {\n    return state.nodes;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryState.html":{"url":"injectables/TissueLibraryState.html","title":"injectable - TissueLibraryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling tissue data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActive\n                        \n                    \n                \n            \n            \n                \nsetActive(ctx: TissueLibraryContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Load)\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.state.ts:22\n                \n            \n\n\n            \n                \n                    Loads the tissue data into the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                TissueLibraryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The state context instance\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        data The tissue data to be added to the state\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TissueLibraryService } from '@hra-ui/services';\nimport { Action, State } from '@ngxs/store';\nimport { Observable, tap } from 'rxjs';\nimport { Load } from './tissue-library.actions';\nimport { TissueLibraryContext, TissueLibraryModel } from './tissue-library.model';\n\n/** State handling tissue data*/\n@State({\n  name: 'tissueLibrary',\n})\n@Injectable()\nexport class TissueLibraryState {\n  /** injects the TissueLibraryService into a private readonly property */\n  private readonly dataService = inject(TissueLibraryService);\n  /**\n   * Loads the tissue data into the current state\n   * @param ctx The state context instance\n   * @returns data The tissue data to be added to the state\n   */\n  @Action(Load)\n  setActive(ctx: TissueLibraryContext): Observable {\n    return this.dataService.getTissues().pipe(tap((data) => ctx.setState(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createDownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            isPrimitive   (src/.../state-analytics-plugin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDownloadFormatId\n                        \n                    \n                \n            \n            \n                \ncreateDownloadFormatId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates download format id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormatId\n\n                    \n                    \n                        download format id\n\n                    \n                \n            \n        \n    \n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrimitive\n                        \n                    \n                \n            \n            \n                \nisPrimitive(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether primitive is\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is string - used to check the input value from serialize funtion\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | boolean | number | string | null | undefined\n\n                    \n                    \n                        type of value - boolean/number/string/null/bigint/undefined\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nstate\nThis library was generated with Nx.\nRunning unit tests\nRun nx test state to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        HraStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRow   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRowEntry   (src/.../cell-summary.model.ts)\n                        \n                        \n                            Cell   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CellSummary   (src/.../cell-summary.model.ts)\n                        \n                        \n                            DownloadContext   (src/.../download.model.ts)\n                        \n                        \n                            DownloadEntry   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormat   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            DownloadModel   (src/.../download.model.ts)\n                        \n                        \n                            MapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            MedicalIllustrationContext   (src/.../medical-illustration.state.ts)\n                        \n                        \n                            SourceListContext   (src/.../source-list.model.ts)\n                        \n                        \n                            SourceListModel   (src/.../source-list.model.ts)\n                        \n                        \n                            TissueLibraryContext   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TissueLibraryModel   (src/.../tissue-library.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                    Type representing an aggregate summary of cell values in a group\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRow\n                \n            \n            \n                \n                    Type representing a row in an aggregate summary\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRowEntry\n                \n            \n            \n                \n                    Type representing a single entry in a row with cell, biomarker, count and percentage\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cell\n                \n            \n            \n                \n                    Type representing a single cell value\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummary\n                \n            \n            \n                \n                    Type representing CELL_SUMMARY_SCHEMA which has labels and entries\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/download/download.model.ts\n    \n    \n        \n            \n                \n                    \n                    DownloadContext\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadContext,\nwhich is a state context for the DownloadModel type\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadEntry\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadEntry,\nwhich is inferred from the type of the DOWNLOAD_ENTRY constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormat\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormat,\nwhich is inferred from the type of the DOWNLOAD_FORMAT constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormatId\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormatId,\nwhich is inferred from the type of the DOWNLOAD_FORMAT_ID constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadModel\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadModel,\nwhich is inferred from the type of the DOWNLOAD_MODEL constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n    \n        \n            \n                \n                    \n                    MapEntry\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.state.ts\n    \n    \n        \n            \n                \n                    \n                    MedicalIllustrationContext\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    src/lib/source-list/source-list.model.ts\n    \n    \n        \n            \n                \n                    \n                    SourceListContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SourceListModel\n                \n            \n            \n                \n                    Type alias for the array of source objects\n\n                \n            \n            \n                \n                            Source[]\n\n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.model.ts\n    \n    \n        \n            \n                \n                    \n                    TissueLibraryContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibraryModel\n                \n            \n            \n                \n                    Type alias for the tissue data\n\n                \n            \n            \n                \n                        TissueData\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            About   (src/.../link-ids.ts)\n                        \n                        \n                            Action   (src/.../download.action.ts)\n                        \n                        \n                            Action   (src/.../cell-summary.actions.ts)\n                        \n                        \n                            AppTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            CELL_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_AGGREGATE_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            ContactAcknowledgement   (src/.../resource-ids.ts)\n                        \n                        \n                            DEFAULT_LOGGABLE_ACTIONS   (src/.../default-loggable-actions.ts)\n                        \n                        \n                            DOWNLOAD_ENTRY   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT_ID   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_MODEL   (src/.../download.model.ts)\n                        \n                        \n                            Embed   (src/.../link-ids.ts)\n                        \n                        \n                            ExploreFTU   (src/.../link-ids.ts)\n                        \n                        \n                            Gradient   (src/.../resource-types.ts)\n                        \n                        \n                            GradientLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            GradientLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            Illustration   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPage   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageDepthDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPagePartners   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageReadMore   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LOGGABLE_ACTIONS   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            mapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            Metrics   (src/.../resource-ids.ts)\n                        \n                        \n                            Metrics   (src/.../resource-types.ts)\n                        \n                        \n                            MetricsLogo   (src/.../resource-ids.ts)\n                        \n                        \n                            MetricsTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Png   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            PNG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                        \n                            Portal   (src/.../link-ids.ts)\n                        \n                        \n                            PRIMITIVE_TYPES   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            ProductLogoUrl   (src/.../resource-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../link-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Size   (src/.../resource-types.ts)\n                        \n                        \n                            SizeLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            SizeLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            STATE_LOGGER_PROVIDER   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            Svg   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            SVG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/link-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        About\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('About')\n                    \n                \n\n            \n                \n                    About Link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Embed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Embed')\n                    \n                \n\n            \n                \n                    LinkId for Embed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ExploreFTU\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ExploreFTU')\n                    \n                \n\n            \n                \n                    LinkId for Explore FTU\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Illustration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Illustration')\n                    \n                \n\n            \n                \n                    LinkId for Illustration metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPage')\n                    \n                \n\n            \n                \n                    Landing page id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageReadMore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPageReadMore')\n                    \n                \n\n            \n                \n                    LinkId for read more in landing page content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Portal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Portal')\n                    \n                \n\n            \n                \n                    LinkId for HRA Portal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title link id\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.action.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Download')\n                    \n                \n\n            \n                \n                    Action Group for Download Action\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    src/lib/resource-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('AppTitle')\n                    \n                \n\n            \n                \n                    App title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ContactAcknowledgement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ContactAcknowledgement')\n                    \n                \n\n            \n                \n                    Message to display after submitting contact form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegend')\n                    \n                \n\n            \n                \n                    Gradient legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Gradient legend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthDescription')\n                    \n                \n\n            \n                \n                    Lanading Page Depth Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthImg')\n                    \n                \n\n            \n                \n                    Landing Page Depth Img id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthMoreText')\n                    \n                \n\n            \n                \n                    Landing Page Depth More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthTitle')\n                    \n                \n\n            \n                \n                    Landing Page Depth Title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroDescription')\n                    \n                \n\n            \n                \n                    Landing Page Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroImg')\n                    \n                \n\n            \n                \n                    Landing Page Intro Image id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroMoreText')\n                    \n                \n\n            \n                \n                    Landing Page More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPagePartners\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroPartners')\n                    \n                \n\n            \n                \n                    Landing Page Partners id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroTitle')\n                    \n                \n\n            \n                \n                    Landing Page Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('Metrics')\n                    \n                \n\n            \n                \n                    metrics id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsLogo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsLogo')\n                    \n                \n\n            \n                \n                    Metrics Logo id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsTitle')\n                    \n                \n\n            \n                \n                    Metrics Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductLogoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductLogoUrl')\n                    \n                \n\n            \n                \n                    Product logo url id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegend')\n                    \n                \n\n            \n                \n                    Size legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Size legend\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CELL_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n})\n                    \n                \n\n            \n                \n                    The CELL_SCHEMA has an object that contains an id and a label for the cell,\nanother object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_AGGREGATE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\nan array of columns that are strings, and an array of rows that are AggregateRow objects.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\nwhere each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/default-loggable-actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ContactActions.SendMessage,\n  DownloadActions.Download,\n  LinkRegistryActions.Navigate,\n]\n                    \n                \n\n            \n                \n                    Default loggable actions\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [\n  z.object({ type: z.literal('url'), url: z.string() }),\n  z.object({ type: z.literal('data'), data: z.string() }),\n])\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_ENTRY,\nwhich is a discriminated union of two objects with different properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    id: DOWNLOAD_FORMAT_ID,\n    label: z.string(),\n    extension: z.string(),\n  })\n  .partial({ extension: true })\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT,\nwhich is an object with id, label, and extension properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `DownloadFormatId:'${id}'`)\n  .brand('DownloadFormatId')\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT_ID,\nwhich is a string that is transformed into a branded string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_MODEL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  formats: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_FORMAT),\n  entries: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_ENTRY),\n})\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_MODEL,\nwhich is an object with formats and entries properties\n\n                \n            \n\n        \n    \n\n    src/lib/resource-types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Gradient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('gradient', payload())\n                    \n                \n\n            \n                \n                    Gradient legend resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType(\n  'metrics',\n  payload()\n)\n                    \n                \n\n            \n                \n                    Metrics resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Size\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('size', payload())\n                    \n                \n\n            \n                \n                    Size legend resource\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n})\n                    \n                \n\n            \n                \n                    Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRIMITIVE_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['bigint', 'boolean', 'number', 'string']\n                    \n                \n\n            \n                \n                    Primitive types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATE_LOGGER_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n}\n                    \n                \n\n            \n                \n                    State Login Provider\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapEntry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n})\n                    \n                \n\n            \n                \n                    Map Entry typings\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Png\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('png')\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Svg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('svg')\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PNG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Png,\n  label: 'Download Png',\n  extension: '.png',\n}\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Svg,\n  label: 'Download Svg',\n  extension: '.svg',\n}\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
