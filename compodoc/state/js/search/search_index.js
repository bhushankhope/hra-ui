var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/Add.html",[0,0.152,1,1.604]],["body/classes/Add.html",[0,0.209,1,2.685,2,0.681,3,0.191,4,0.309,5,0.191,6,3.116,7,3.116,8,3.03,9,0.222,10,0.966,11,4.105,12,2.748,13,3.708,14,4.564,15,0.723,16,0.596,17,2.067,18,2.877,19,2.355,20,0.465,21,1.187,22,3.03,23,0.699,24,4.83,25,4.113,26,3.385,27,0.479,28,0.024,29,0.479,30,0.341,31,2.344,32,2.505,33,3.27,34,0.99,35,2.204,36,1.631,37,0.249,38,2.414,39,0.297,40,0.863,41,1.117,42,2.678,43,1.117,44,2.678,45,2.367,46,2.678,47,2.678,48,2.678,49,1.824,50,3.03,51,0.016,52,0.016]],["title/classes/AddEntry.html",[0,0.152,53,1.995]],["body/classes/AddEntry.html",[0,0.255,1,2.22,2,0.686,3,0.193,4,0.165,5,0.26,9,0.165,10,0.853,15,0.673,19,1.441,20,0.25,21,1.831,23,0.52,27,0.482,28,0.024,29,0.482,30,0.344,37,0.338,39,0.362,40,0.868,41,1.723,51,0.016,52,0.016,53,2.761,54,2.22,55,2.599,56,2.773,57,3.592,58,3.24,59,3.639,60,3.592,61,3.286,62,2.077,63,1.441,64,0.83,65,1.196,66,2.557,67,2.043,68,1.76,69,0.883,70,2.22,71,3,72,3.106,73,2.043,74,1.961,75,2.432,76,1.947,77,1.828,78,1.946,79,2.432,80,2.22,81,1.441,82,2.043,83,2.432,84,2.432,85,2.432]],["title/classes/CellSummarySelectors.html",[0,0.152,86,2.98]],["body/classes/CellSummarySelectors.html",[0,0.166,2,0.733,3,0.206,4,0.176,5,0.206,9,0.176,15,0.765,16,0.641,18,3.166,20,0.354,23,0.735,27,0.682,28,0.024,29,0.682,30,0.486,37,0.396,39,0.236,51,0.017,52,0.017,86,4.313,87,2.786,88,2.786,89,3.84,90,3.436,91,3.578,92,1.69,93,5.075,94,3.441,95,5.075,96,4.072,97,1.797,98,5.075,99,3.84,100,3.082,101,1.313,102,1.59,103,5.075,104,3.84,105,2.184,106,1.133,107,2.321,108,2.6,109,2.6,110,3.84,111,5.075,112,1.911,113,3.84,114,3.84]],["title/injectables/CellSummaryState.html",[109,2.374,115,0.974]],["body/injectables/CellSummaryState.html",[0,0.097,3,0.12,4,0.103,5,0.12,9,0.103,10,0.683,15,0.616,16,0.374,20,0.24,23,0.499,27,0.463,28,0.024,29,0.564,30,0.33,31,1.798,34,1.415,36,1.024,37,0.329,39,0.138,43,1.08,51,0.011,52,0.011,55,1.383,62,1.798,69,1.67,81,2.044,87,2.06,88,2.06,91,1.961,92,1.148,94,2.391,96,1.384,97,0.793,100,2.638,101,1.025,102,1.479,106,0.661,107,2.462,108,1.516,109,2.334,112,1.583,115,0.957,116,1.024,117,2.24,118,2.334,119,1.816,120,3.644,121,3.448,122,3.448,123,2.685,124,3.448,125,2.24,126,2.589,127,3.448,128,1.18,129,1.961,130,2.24,131,2.846,132,3.15,133,2.899,134,2.24,135,2.24,136,2.24,137,2.334,138,1.682,139,2.24,140,1.516,141,3.448,142,1.516,143,0.958,144,2.24,145,2.131,146,1.384,147,2.24,148,3.448,149,3.572,150,3.15,151,2.24,152,2.24,153,4.203,154,2.24,155,3.796,156,3.644,157,2.24,158,2.24,159,2.24,160,1.682,161,3.15,162,2.24,163,2.334,164,2.24,165,3.448,166,0.844,167,1.024,168,1.682,169,1.961,170,2.24,171,3.448,172,2.24,173,4.203,174,2.24,175,2.24,176,2.24,177,3.448,178,2.131,179,3.448,180,3.448,181,1.384,182,3.448,183,2.24,184,3.448,185,2.24,186,2.24,187,2.24,188,2.24,189,3.448,190,2.24,191,1.516,192,2.24,193,2.24,194,2.24,195,3.448,196,1.516,197,2.24,198,3.448,199,2.24,200,3.448,201,4.72,202,2.24,203,2.24,204,2.24,205,2.24,206,2.24,207,2.24,208,2.24,209,2.24,210,3.448,211,2.24,212,2.24,213,2.24,214,3.448,215,2.24,216,2.24,217,2.24,218,2.24]],["title/interfaces/CellSummaryStateModel.html",[96,2.167,219,1.407]],["body/interfaces/CellSummaryStateModel.html",[3,0.135,4,0.115,5,0.135,9,0.115,15,0.43,16,0.419,17,2.141,20,0.448,28,0.024,30,0.24,31,2.141,32,2.288,34,0.697,36,1.148,37,0.175,39,0.384,51,0.012,52,0.012,55,2.15,62,2.141,68,1.23,69,1.108,81,1.508,87,1.23,88,1.23,91,3.2,94,3.2,96,3.092,100,3.212,101,0.979,107,2.743,119,1.98,131,1.699,132,3.476,133,1.428,137,3.051,140,2.545,142,3.388,145,2.323,150,3.859,155,2.545,156,2.545,161,2.785,163,3.808,166,2.388,168,3.757,178,2.323,181,3.312,191,2.545,219,2.15,220,1.428,221,1.699,222,3.194,223,3.194,224,3.194,225,3.194,226,3.384,227,2.545,228,4.224,229,3.194,230,3.194,231,3.194,232,2.822,233,3.092,234,2.564,235,1.428,236,4.024,237,2.564,238,2.564,239,1.885,240,1.885,241,2.133,242,1.885,243,2.133,244,3.757,245,1.885,246,1.885,247,3.628,248,3.948,249,3.384,250,1.699,251,2.822,252,1.885,253,2.822,254,1.885,255,1.885,256,1.885,257,1.885,258,1.885,259,1.885,260,2.133,261,3.194,262,2.133,263,3.194,264,2.133,265,2.133]],["title/classes/ClearEntries.html",[0,0.152,82,1.995]],["body/classes/ClearEntries.html",[0,0.26,1,1.721,2,0.719,3,0.202,4,0.173,5,0.268,9,0.173,10,0.869,15,0.686,19,1.509,21,1.253,28,0.024,37,0.349,39,0.369,40,0.895,41,1.764,51,0.016,52,0.016,53,2.141,54,2.325,55,2.258,56,2.805,58,2.965,59,3.095,61,2.547,62,1.61,63,1.509,64,0.87,65,1.253,66,2.638,67,2.141,68,1.844,69,0.925,70,2.325,71,3.095,72,3.148,73,2.141,74,1.998,75,2.547,76,2.009,77,1.886,78,1.992,79,2.547,80,3.095,81,2.009,82,2.849,83,2.547,84,2.547,85,2.547]],["title/classes/ComputeAggregate.html",[0,0.152,120,2.374]],["body/classes/ComputeAggregate.html",[0,0.214,2,0.701,3,0.197,4,0.168,5,0.197,9,0.226,10,0.897,15,0.563,20,0.256,21,1.222,23,0.532,27,0.493,28,0.024,29,0.493,30,0.351,37,0.388,39,0.303,40,0.88,41,1.543,49,1.64,51,0.016,52,0.016,63,1.472,64,0.849,65,1.222,69,0.903,74,1.64,78,1.744,87,2.413,88,2.413,94,3.525,100,3.126,101,1.485,107,2.542,108,2.485,119,2.595,120,4.022,126,3.698,138,4.461,166,1.382,234,2.088,235,2.088,237,3.162,238,2.088,266,2.756,267,5.048,268,4.652,269,3.671,270,3.671,271,4.724,272,1.799,273,2.485,274,2.756,275,3.698,276,3.119,277,2.756,278,3.119]],["title/injectables/ContactState.html",[115,0.974,279,2.633]],["body/injectables/ContactState.html",[0,0.268,3,0.195,4,0.167,5,0.195,9,0.167,10,0.895,15,0.728,16,0.609,19,1.462,20,0.254,23,0.528,27,0.489,28,0.024,29,0.795,30,0.349,37,0.431,39,0.224,51,0.016,52,0.016,64,0.842,92,1.632,97,1.29,102,1.142,106,1.075,112,1.372,115,1.645,116,1.666,123,3.369,143,1.559,169,2.073,232,3.68,279,4.447,280,3.644,281,4.901,282,4.779,283,5.923,284,5.033,285,4.901,286,5.923,287,4.965,288,4.901,289,1.666,290,4.901,291,3.644,292,4.165,293,4.158,294,4.901,295,4.165,296,3.644,297,3.749,298,3.029,299,2.073,300,2.467,301,3.644,302,3.644,303,3.644,304,3.644]],["title/classes/Download.html",[0,0.152,56,1.501]],["body/classes/Download.html",[0,0.257,1,1.662,2,0.694,3,0.195,4,0.167,5,0.297,9,0.167,10,0.894,15,0.633,19,1.458,20,0.253,21,1.629,23,0.526,27,0.488,28,0.024,29,0.488,30,0.348,37,0.341,39,0.364,40,0.875,41,1.733,51,0.016,52,0.016,53,2.068,54,2.247,55,2.219,56,2.865,58,3.253,59,3.024,61,2.461,62,1.555,63,1.458,64,0.84,65,1.21,66,2.578,67,2.068,68,1.781,69,0.894,70,2.247,71,3.024,72,3.185,73,2.068,74,1.97,75,2.461,76,2.219,77,2.083,78,1.958,79,2.461,80,2.247,81,1.458,82,2.068,83,2.461,84,2.461,85,2.461,305,3.089,306,3.635]],["title/classes/DownloadSelectors.html",[0,0.152,307,2.98]],["body/classes/DownloadSelectors.html",[0,0.175,2,0.773,3,0.217,4,0.186,5,0.217,9,0.186,15,0.667,16,0.676,18,2.858,20,0.282,23,0.586,27,0.544,28,0.024,29,0.544,30,0.387,37,0.366,39,0.249,40,0.723,51,0.017,52,0.017,56,2.248,66,3.37,67,2.302,69,1.292,72,3.27,81,2.107,90,4.438,92,1.749,97,1.433,102,1.646,105,3.318,106,1.194,112,1.524,289,1.851,307,4.464,308,4.047,309,4.635,310,4.379,311,5.253,312,4.635,313,4.047,314,4.047,315,4.047,316,4.047]],["title/injectables/DownloadState.html",[115,0.974,317,2.633]],["body/injectables/DownloadState.html",[0,0.075,1,1.292,3,0.093,4,0.08,5,0.302,9,0.08,10,0.409,15,0.658,16,0.291,19,0.698,20,0.314,23,0.653,27,0.605,28,0.024,29,0.712,30,0.431,34,1.139,35,2.203,37,0.369,39,0.107,40,1.096,45,1.746,51,0.009,52,0.009,53,2.747,55,1.937,56,2.8,58,1.488,62,1.755,67,0.99,69,1.467,71,1.745,72,2.967,73,2.747,80,1.745,81,1.133,82,2.027,92,0.94,97,1.452,101,0.613,102,1.513,106,0.513,112,1.342,115,0.784,116,0.796,128,3.033,129,3.201,143,0.745,146,1.076,166,0.656,169,2.333,196,1.178,289,1.63,292,1.479,297,2.776,298,1.745,300,1.178,309,1.307,310,2.676,312,1.307,317,2.121,318,1.741,319,2.121,320,2.676,321,2.824,322,2.121,323,2.4,324,2.4,325,2.4,326,4.101,327,2.824,328,5.325,329,2.824,330,1.741,331,2.824,332,2.824,333,1.741,334,2.824,335,2.824,336,2.824,337,1.741,338,3.079,339,2.824,340,2.824,341,1.741,342,2.824,343,2.824,344,2.824,345,2.824,346,2.824,347,1.741,348,1.479,349,1.479,350,1.307,351,1.307,352,1.307,353,1.479,354,1.479,355,1.741,356,1.741,357,1.479,358,2.4,359,1.479,360,1.741,361,1.741,362,1.741,363,3.564,364,2.676,365,1.741,366,1.741,367,1.741,368,2.824,369,1.741,370,1.741,371,1.741,372,2.824,373,2.066,374,5.627,375,2.824,376,1.741,377,1.741,378,1.741,379,1.741,380,1.741,381,1.741,382,1.479,383,1.741,384,2.824,385,3.564,386,1.741,387,1.479,388,1.741,389,1.741,390,1.741,391,1.741,392,1.741,393,1.741,394,1.741,395,1.741,396,1.741,397,1.741,398,1.741,399,1.741,400,1.741,401,1.741,402,1.741,403,1.741,404,1.741,405,3.564,406,1.741,407,1.741,408,1.741,409,1.741,410,1.741,411,1.741,412,1.741,413,1.741,414,1.741,415,1.741,416,1.741,417,1.741,418,1.741,419,1.741,420,1.741,421,1.741,422,1.741,423,1.479,424,1.479]],["title/interfaces/GradientPoint.html",[131,2.374,219,1.407]],["body/interfaces/GradientPoint.html",[3,0.138,4,0.118,5,0.138,9,0.118,15,0.295,16,0.431,17,1.96,20,0.45,28,0.024,30,0.247,31,2.17,32,2.319,34,1.272,36,1.179,37,0.18,39,0.387,51,0.013,52,0.013,55,1.837,62,2.17,68,1.264,69,1.126,81,1.539,87,1.264,88,1.264,91,2.885,94,2.182,96,2.37,100,2.962,101,0.833,107,2.691,119,2.021,131,2.597,132,3.943,133,2.605,137,3.984,140,1.746,142,4.093,145,2.37,150,3.818,155,2.597,156,2.597,161,2.83,163,3.433,166,2.277,168,2.88,178,2.37,181,3.134,191,2.597,219,2.175,220,1.467,221,1.746,222,2.192,223,2.192,224,2.192,225,2.192,226,2.88,227,1.746,228,4.071,229,2.192,230,2.192,231,2.192,232,1.936,233,2.83,234,2.605,235,1.467,236,4.071,237,2.605,238,2.605,239,1.936,240,1.936,241,2.192,242,1.936,243,2.192,244,3.808,245,1.936,246,1.936,247,3.67,248,3.984,249,3.439,250,1.746,251,2.88,252,1.936,253,2.88,254,1.936,255,1.936,256,1.936,257,1.936,258,1.936,259,1.936,260,3.26,261,4.31,262,3.26,263,4.31,264,3.26,265,3.26]],["title/modules/HraStateModule.html",[425,2.98,426,2.633]],["body/modules/HraStateModule.html",[0,0.177,3,0.219,4,0.243,5,0.219,9,0.188,12,2.328,15,0.468,28,0.024,37,0.482,39,0.252,51,0.017,52,0.017,56,1.751,106,1.207,107,1.871,109,3.581,119,2.155,143,1.751,279,3.972,282,3.072,317,3.972,426,3.972,427,3.072,428,4.091,429,3.972,430,5.29,431,5.29,432,4.091,433,3.972,434,3.581,435,1.871,436,1.751,437,3.972,438,2.528,439,2.528,440,3.581,441,3.581,442,2.77,443,3.477,444,3.581,445,2.528,446,3.477,447,4.091,448,4.091,449,4.091,450,3.072,451,3.072,452,3.072,453,2.528]],["title/classes/Load.html",[0,0.152,454,2.633]],["body/classes/Load.html",[0,0.213,2,0.941,3,0.264,4,0.226,5,0.264,9,0.226,10,0.924,15,0.679,28,0.023,37,0.343,39,0.303,51,0.02,52,0.02,64,1.138,65,1.64,74,1.64,101,1.385,445,3.942,454,4.789,455,3.334,456,3.334,457,4.924,458,5.94,459,4.46,460,4.924]],["title/classes/LoadReferenceOrgans.html",[0,0.152,461,1.847]],["body/classes/LoadReferenceOrgans.html",[0,0.26,2,0.641,3,0.18,4,0.154,5,0.249,9,0.154,10,0.899,28,0.024,34,1.474,37,0.323,39,0.37,40,1.023,41,1.794,43,1.664,49,1.906,51,0.015,52,0.015,63,1.347,64,0.776,65,1.118,69,0.826,74,2,76,2.296,77,2.156,78,2.027,101,1.007,167,2.428,272,1.646,373,2.57,435,1.536,436,2.272,461,2.442,462,1.437,463,1.437,464,1.911,465,2.442,466,2.797,467,2.637,468,1.984,469,1.769,470,1.911,471,3.257,472,3.533,473,1.769,474,3.538,475,3.016,476,1.769,477,3.02,478,2.944,479,1.769,480,1.769,481,2.075,482,1.769]],["title/interfaces/MedicalIllustrationModel.html",[219,1.407,483,2.374]],["body/interfaces/MedicalIllustrationModel.html",[3,0.293,4,0.162,5,0.258,9,0.162,16,0.591,17,2.057,20,0.44,28,0.024,30,0.628,34,1.515,37,0.335,39,0.296,43,1.506,51,0.016,52,0.016,55,1.42,64,0.819,69,0.871,150,2.188,167,2.886,219,2.189,220,2.014,233,2.188,234,2.014,235,2.014,237,2.014,247,2.397,248,4.716,299,2.014,319,3.609,322,2.659,373,2.701,435,2.198,436,2.505,462,1.515,463,1.515,466,2.532,468,2.811,478,3.093,482,2.532,483,3.254,484,2.659,485,4.974,486,4.807,487,5.854,488,3.009,489,3.009,490,3.009,491,3.009,492,3.009,493,3.009,494,3.009,495,3.009,496,3.009,497,3.009,498,3.009,499,3.009,500,3.009,501,3.009,502,3.009]],["title/classes/MedicalIllustrationSelectors.html",[0,0.152,503,2.98]],["body/classes/MedicalIllustrationSelectors.html",[0,0.162,2,0.715,3,0.201,4,0.172,5,0.301,9,0.172,15,0.571,16,0.625,18,3.143,20,0.348,23,0.723,27,0.67,28,0.024,29,0.67,30,0.478,34,1.386,37,0.391,39,0.23,43,1.564,51,0.016,52,0.016,90,3.379,92,1.662,97,1.767,102,2.01,105,2.13,106,1.104,112,1.88,167,2.738,289,2.282,373,2.562,434,2.535,435,2.738,436,2.562,462,2.402,463,2.402,468,2.402,469,1.972,483,4.433,503,4.241,504,3.744,505,4.991,506,4.991,507,3.744,508,4.991,509,3.744,510,3.744,511,4.991,512,3.744,513,3.744]],["title/injectables/MedicalIllustrationState.html",[115,0.974,434,2.374]],["body/injectables/MedicalIllustrationState.html",[0,0.096,3,0.223,4,0.101,5,0.118,9,0.101,10,0.494,15,0.579,16,0.369,19,1.367,20,0.373,23,0.733,27,0.68,28,0.024,29,0.719,30,0.484,37,0.402,39,0.21,40,0.609,45,1.081,51,0.011,52,0.011,64,0.51,69,1.024,92,1.135,97,1.792,101,0.479,102,1.586,106,0.651,112,1.284,115,0.947,116,1.009,118,2.308,123,1.939,129,3.044,143,0.944,146,1.364,166,0.831,167,1.904,169,1.939,277,4.326,289,2.447,297,3.427,298,1.364,299,1.255,300,1.494,348,1.875,349,1.875,352,1.657,358,2.897,359,1.875,373,2.166,382,1.875,423,1.875,424,1.875,434,2.308,435,2.142,436,1.458,453,2.574,461,2.467,462,2.289,463,2.289,465,1.796,466,2.467,467,1.255,468,0.944,469,1.163,472,2.664,473,2.938,475,2.467,476,2.938,477,1.939,478,2.481,479,2.938,480,2.938,482,2.467,483,1.494,485,2.897,514,1.875,515,3.409,516,2.207,517,5.532,518,3.409,519,2.207,520,2.207,521,3.409,522,2.207,523,2.207,524,3.409,525,3.409,526,2.207,527,3.409,528,2.207,529,3.409,530,2.207,531,2.207,532,3.409,533,2.207,534,3.409,535,2.207,536,2.207,537,2.207,538,2.207,539,2.207,540,2.207,541,1.875,542,1.875,543,2.207,544,2.207,545,6.039,546,2.207,547,1.364,548,2.207,549,2.207,550,2.207,551,3.409,552,2.207,553,2.207,554,2.207,555,2.207,556,2.207,557,2.207,558,1.875,559,2.207,560,2.207,561,3.409,562,2.207,563,2.207,564,2.207]],["title/classes/RegisterFormat.html",[0,0.152,73,1.995]],["body/classes/RegisterFormat.html",[0,0.256,1,1.658,2,0.693,3,0.194,4,0.166,5,0.262,9,0.166,10,0.856,15,0.676,19,1.455,20,0.253,21,1.627,23,0.525,27,0.487,28,0.024,29,0.487,30,0.347,37,0.341,39,0.364,40,0.873,41,1.731,51,0.016,52,0.016,53,2.063,54,2.241,55,2.216,56,2.72,58,2.91,59,3.019,61,2.455,62,1.552,63,1.455,64,0.838,65,1.208,66,3.114,67,2.063,68,1.777,69,0.892,70,2.241,71,3.653,72,3.279,73,2.779,74,1.968,75,2.455,76,2.216,77,2.081,78,1.956,79,2.455,80,2.241,81,1.455,82,2.063,83,2.455,84,2.455,85,2.455,305,3.082,565,3.626]],["title/interfaces/ScreenModeModel.html",[219,1.407,566,2.374]],["body/interfaces/ScreenModeModel.html",[3,0.266,4,0.227,5,0.266,9,0.227,15,0.567,16,0.828,17,2.552,20,0.346,28,0.023,39,0.305,51,0.02,52,0.02,219,1.988,220,2.82,319,3.722,438,3.063,439,3.063,566,4.037,567,3.356,568,3.356,569,4.957,570,4.493,571,3.639,572,4.037,573,5.068]],["title/classes/ScreenModeSelectors.html",[0,0.152,574,2.98]],["body/classes/ScreenModeSelectors.html",[0,0.182,2,0.801,3,0.225,4,0.192,5,0.225,9,0.192,15,0.615,16,0.7,18,2.907,20,0.292,23,0.607,27,0.563,28,0.024,29,0.563,30,0.401,37,0.375,39,0.258,40,0.75,51,0.018,52,0.018,90,4.48,92,1.79,97,1.485,102,1.685,105,3.375,106,1.237,112,1.58,438,4.158,439,3.866,453,3.322,566,4.236,567,3.639,568,3.639,570,3.639,571,3.058,574,4.568,575,4.194,576,5.376,577,4.194,578,5.376,579,3.564,580,4.194]],["title/injectables/ScreenModeState.html",[115,0.974,437,2.633]],["body/injectables/ScreenModeState.html",[0,0.164,3,0.203,4,0.174,5,0.203,9,0.174,10,0.818,15,0.716,16,0.633,20,0.264,23,0.549,27,0.509,28,0.024,29,0.676,30,0.363,37,0.437,39,0.233,40,0.9,45,1.858,49,2.187,51,0.017,52,0.017,92,1.676,97,1.342,102,1.188,106,1.118,115,1.398,116,1.734,123,3.423,128,1.997,129,2.863,143,1.622,146,2.343,289,1.734,350,2.847,351,2.847,364,2.847,437,3.779,438,3.979,439,3.871,547,2.343,566,3.407,567,3.407,568,3.407,570,3.825,579,3.222,581,3.791,582,5.033,583,3.222,584,4.277,585,3.791,586,5.033,587,3.791,588,3.222,589,3.791,590,4.277,591,3.791]],["title/classes/SendMessage.html",[0,0.152,287,2.633]],["body/classes/SendMessage.html",[0,0.263,2,0.841,3,0.236,4,0.202,5,0.236,9,0.202,10,0.638,20,0.423,21,2.021,23,0.638,25,4.163,27,0.591,28,0.023,29,0.591,30,0.421,37,0.387,39,0.271,41,1.38,51,0.018,52,0.018,64,1.282,65,1.466,74,1.466,78,1.559,219,2.224,284,4.712,287,4.163,293,4.929,295,3.742,299,2.505,325,4.712,592,4.404,593,5.544,594,5.544,595,5.544,596,4.404,597,6.702,598,4.404,599,4.404]],["title/classes/Set.html",[0,0.152,49,1.168]],["body/classes/Set.html",[0,0.193,2,0.849,3,0.238,4,0.204,5,0.238,9,0.256,10,0.643,20,0.31,21,1.479,23,0.643,27,0.597,28,0.024,29,0.597,30,0.425,37,0.31,39,0.273,40,0.794,41,1.392,49,2.192,51,0.018,52,0.018,64,1.027,65,1.479,74,1.479,76,2.236,77,2.1,78,1.573,438,3.446,439,3.949,567,3.774,568,3.774,570,4.125,571,3.466,572,3.774,573,4.738,588,3.776,600,4.443,601,5.575,602,4.443,603,4.443,604,4.443]],["title/classes/Set-1.html",[0,0.127,49,0.977,196,1.986]],["body/classes/Set-1.html",[0,0.202,1,2.133,2,0.647,3,0.182,4,0.312,5,0.182,6,3.269,7,3.269,8,2.88,9,0.214,10,0.955,11,2.88,12,1.928,13,3.611,14,4.564,15,0.73,16,0.566,17,1.996,18,2.816,19,2.305,20,0.465,21,1.128,22,2.88,23,0.772,25,4.006,26,3.297,27,0.455,28,0.024,29,0.455,30,0.324,31,2.459,32,2.628,33,2.294,34,0.941,35,2.094,36,1.55,37,0.236,38,2.294,39,0.287,40,0.834,41,1.062,42,3.503,43,1.462,44,3.503,45,2.953,46,3.503,47,3.503,48,3.503,49,2.125,50,2.88,51,0.015,52,0.015,605,4.665,606,4.665,607,3.389]],["title/classes/SetActiveNode.html",[0,0.152,479,1.847]],["body/classes/SetActiveNode.html",[0,0.256,2,0.613,3,0.172,4,0.147,5,0.241,9,0.147,10,0.91,20,0.224,21,1.068,23,0.464,27,0.431,28,0.024,29,0.431,30,0.307,34,1.439,37,0.313,39,0.364,40,1.003,41,1.759,43,1.759,49,1.967,51,0.015,52,0.015,63,1.287,64,0.741,65,1.068,69,0.789,74,1.967,76,2.37,77,2.225,78,1.987,101,0.697,167,2.369,272,1.572,373,2.528,435,1.467,436,2.217,461,1.69,462,1.921,463,1.921,464,1.825,465,1.69,466,2.366,467,1.825,468,2.401,469,1.69,470,1.825,471,3.361,472,3.483,473,1.69,474,3.469,475,2.957,476,1.69,477,3.361,478,3.143,479,2.366,480,1.69,481,1.982,482,1.69,608,3.208,609,3.208,610,2.726]],["title/classes/SetData.html",[0,0.152,275,2.633]],["body/classes/SetData.html",[0,0.216,2,0.713,3,0.2,4,0.171,5,0.2,9,0.229,10,0.902,15,0.427,20,0.26,21,1.244,23,0.541,27,0.502,28,0.024,29,0.502,30,0.357,37,0.391,39,0.307,40,0.891,41,1.561,49,1.992,51,0.016,52,0.016,63,1.498,64,0.863,65,1.244,69,0.918,74,1.659,78,1.764,87,2.442,88,2.442,94,3.19,100,2.747,101,1.5,107,2.279,108,2.528,119,1.968,120,3.373,126,2.804,138,3.741,166,2.112,234,2.125,235,2.125,237,2.125,238,2.125,266,2.804,267,4.234,268,4.914,271,4.765,272,1.83,273,2.528,274,2.804,275,4.492,276,3.174,277,3.741,278,3.174,611,3.735,612,3.735]],["title/classes/SetMapping.html",[0,0.152,480,1.847]],["body/classes/SetMapping.html",[0,0.257,2,0.617,3,0.173,4,0.148,5,0.279,9,0.148,10,0.912,20,0.225,21,1.075,23,0.467,27,0.434,28,0.024,29,0.434,30,0.309,34,1.644,37,0.314,39,0.365,40,1.006,41,1.764,43,1.629,49,1.972,51,0.015,52,0.015,63,1.295,64,0.746,65,1.075,69,0.794,74,1.972,76,2.375,77,2.23,78,1.992,101,0.701,167,2.708,272,1.582,373,2.625,435,1.476,436,2.224,461,1.701,462,1.93,463,1.93,464,1.837,465,1.701,466,2.376,467,1.837,468,1.93,469,1.701,470,1.837,471,3.369,472,3.49,473,1.701,474,3.478,475,2.965,476,1.701,477,2.958,478,2.902,479,1.701,480,2.376,481,1.995,482,1.701,613,2.743,614,3.228]],["title/classes/SetUri.html",[0,0.152,473,1.847]],["body/classes/SetUri.html",[0,0.256,2,0.614,3,0.172,4,0.147,5,0.241,9,0.147,10,0.911,20,0.224,21,1.07,23,0.465,27,0.432,28,0.024,29,0.432,30,0.308,34,1.642,37,0.314,39,0.364,40,1.004,41,1.76,43,1.76,49,1.969,51,0.015,52,0.015,63,1.289,64,0.743,65,1.07,69,0.79,74,1.969,76,2.372,77,2.227,78,1.989,101,0.698,167,2.372,272,1.575,373,2.621,435,1.47,436,2.404,461,1.693,462,1.924,463,1.924,464,1.829,465,1.693,466,2.369,467,1.829,468,1.924,469,1.693,470,1.829,471,3.363,472,3.651,473,2.369,474,3.472,475,2.959,476,1.693,477,2.951,478,2.897,479,1.693,480,1.693,481,1.987,482,1.693,610,2.732,613,2.732,615,3.214]],["title/classes/SetUriFromIRI.html",[0,0.152,476,1.847]],["body/classes/SetUriFromIRI.html",[0,0.256,2,0.613,3,0.172,4,0.147,5,0.241,9,0.147,10,0.91,20,0.224,21,1.068,23,0.464,27,0.431,28,0.024,29,0.431,30,0.307,34,1.641,37,0.313,39,0.364,40,1.003,41,1.759,43,1.759,49,1.967,51,0.015,52,0.015,63,1.287,64,0.741,65,1.068,69,0.789,74,1.967,76,2.37,77,2.225,78,1.987,101,0.697,167,2.369,272,1.572,373,2.528,435,1.467,436,2.401,461,1.69,462,1.921,463,1.921,464,1.825,465,1.69,466,2.366,467,1.825,468,1.921,469,1.69,470,1.825,471,3.361,472,3.649,473,1.69,474,3.469,475,3.311,476,2.366,477,2.947,478,2.895,479,1.69,480,1.69,481,1.982,482,1.69,616,3.208,617,3.208]],["title/interfaces/Source.html",[4,0.161,219,1.407]],["body/interfaces/Source.html",[3,0.224,4,0.32,5,0.224,6,2.373,7,2.373,9,0.191,10,0.604,16,0.697,17,2.292,20,0.45,28,0.024,31,1.785,32,1.907,34,1.835,37,0.291,39,0.364,51,0.018,52,0.018,106,1.23,123,3.047,128,2.197,166,2.489,219,1.673,220,2.373,618,3.545,619,5.356,620,5.616,621,5.616,622,5.306,623,4.552,624,2.824,625,3.545,626,3.545,627,3.545,628,3.132]],["title/classes/SourceListSelectors.html",[0,0.152,629,2.98]],["body/classes/SourceListSelectors.html",[0,0.25,2,0.757,3,0.212,4,0.309,5,0.212,6,2.947,7,2.947,9,0.238,13,3.507,14,3.507,15,0.727,16,0.662,18,2.829,20,0.276,23,0.574,27,0.532,28,0.024,29,0.532,30,0.379,31,2.62,32,2.369,37,0.402,38,2.682,39,0.244,40,0.708,43,1.623,51,0.017,52,0.017,92,1.725,97,1.402,101,1.33,102,1.623,105,3.284,106,1.169,112,1.492,160,3.89,166,1.951,440,4.301,624,4.145,629,4.402,630,3.962,631,5.181,632,5.181,633,5.181,634,3.962,635,3.962,636,3.962,637,3.962]],["title/injectables/SourceListState.html",[115,0.974,440,2.374]],["body/injectables/SourceListState.html",[0,0.137,1,2.864,3,0.17,4,0.287,5,0.17,6,2.927,7,2.927,9,0.145,10,0.459,12,3.175,13,3.778,14,3.981,15,0.768,16,0.529,20,0.31,23,0.644,26,2.75,27,0.598,28,0.024,29,0.691,30,0.426,31,1.904,32,2.035,33,2.144,37,0.41,38,2.144,39,0.195,40,0.998,42,3.342,43,1.749,44,4.191,45,2.521,46,3.342,47,3.342,48,3.342,49,2.129,51,0.015,52,0.015,77,1.676,92,1.482,97,1.575,101,0.966,102,1.395,106,0.934,115,1.236,116,1.448,118,3.013,128,2.344,129,2.532,143,1.355,146,1.957,289,2.035,350,2.378,351,2.378,364,2.378,440,3.013,547,2.75,583,2.691,584,3.782,590,4.373,624,2.144,628,4.703,638,3.167,639,3.167,640,4.45,641,3.167,642,3.167,643,3.167,644,3.167,645,3.167]],["title/injectables/StateAnalyticsPluginService.html",[115,0.974,441,2.374]],["body/injectables/StateAnalyticsPluginService.html",[0,0.097,3,0.12,4,0.102,5,0.12,9,0.158,10,0.944,12,1.269,15,0.678,16,0.372,19,1.378,20,0.451,23,0.323,26,2.123,27,0.299,28,0.024,29,0.299,30,0.213,34,1.164,35,1.378,36,2.897,37,0.328,39,0.258,40,1.001,43,1.754,45,1.684,51,0.011,52,0.011,69,1.251,92,1.144,101,0.484,102,1.594,106,0.658,112,1.916,115,1.412,116,1.02,129,2.384,133,1.955,143,0.954,149,4.002,166,0.84,169,2.679,227,2.326,268,2.58,273,1.51,289,1.917,298,1.378,320,1.674,338,3.147,357,1.895,429,1.674,433,2.58,441,2.838,442,4.1,443,5.147,450,1.674,451,1.674,452,1.674,453,1.378,471,1.269,542,2.92,571,1.955,572,1.51,646,2.58,647,2.58,648,1.674,649,4.709,650,4.709,651,3.436,652,5.781,653,4.709,654,2.23,655,3.436,656,3.436,657,6.405,658,4.191,659,4.191,660,2.23,661,3.562,662,2.23,663,3.436,664,2.23,665,2.23,666,2.92,667,2.92,668,2.58,669,1.895,670,2.92,671,1.895,672,1.895,673,1.895,674,1.895,675,1.895,676,1.895,677,2.23,678,2.92,679,2.92,680,2.23,681,1.895,682,3.562,683,1.895,684,1.895,685,2.92,686,2.92,687,1.895,688,2.23,689,2.23,690,2.23,691,2.23,692,2.23,693,2.23,694,2.23,695,2.23,696,2.23,697,2.23,698,2.23,699,2.23,700,2.23,701,2.23,702,2.23,703,2.23,704,2.23,705,2.23,706,2.23,707,3.436,708,4.191,709,2.23,710,2.23,711,2.23,712,2.23,713,1.895,714,1.895]],["title/classes/TissueLibrarySelectors.html",[0,0.152,715,2.98]],["body/classes/TissueLibrarySelectors.html",[0,0.248,2,0.743,3,0.209,4,0.178,5,0.209,9,0.235,15,0.695,16,0.65,18,2.803,20,0.399,23,0.563,27,0.522,28,0.024,29,0.522,30,0.372,37,0.424,39,0.239,40,0.695,43,1.604,51,0.017,52,0.017,64,0.899,92,1.704,97,1.377,101,1.408,102,1.604,105,3.255,106,1.147,112,1.465,160,3.844,166,1.928,178,3.536,299,2.213,444,4.276,445,3.757,455,3.465,456,3.465,459,3.844,475,2.049,478,2.508,715,4.35,716,3.89,717,5.119,718,5.119,719,5.119,720,4.565,721,3.89,722,3.89,723,5.119,724,3.89,725,3.306,726,3.89,727,3.89,728,3.89]],["title/injectables/TissueLibraryState.html",[115,0.974,444,2.374]],["body/injectables/TissueLibraryState.html",[0,0.158,3,0.195,4,0.167,5,0.195,9,0.224,10,0.526,15,0.774,16,0.607,19,1.963,20,0.253,23,0.526,27,0.488,28,0.024,29,0.657,30,0.348,33,3.313,37,0.443,39,0.224,40,0.65,43,1.533,51,0.016,52,0.016,64,0.84,77,1.843,92,1.629,97,1.287,101,1.435,102,1.533,106,1.072,112,1.369,115,1.359,116,1.662,118,3.313,128,2.578,143,1.555,169,2.784,297,3.745,298,2.247,299,2.068,300,2.461,352,2.73,444,3.313,445,4.084,454,2.73,455,3.313,456,3.313,459,2.73,465,2.578,547,3.024,622,3.089,687,3.089,720,2.73,725,3.089,729,3.635,730,4.893,731,4.893,732,5.028,733,4.893,734,3.635,735,4.893,736,3.635,737,3.635,738,3.635,739,3.635,740,3.635]],["title/dependencies.html",[741,2.493,742,3.165]],["body/dependencies.html",[28,0.023,51,0.021,52,0.021,143,2.304,742,4.702,743,5.384,744,5.384,745,5.384,746,5.384,747,6.262]],["title/miscellaneous/functions.html",[748,1.669,749,3.582]],["body/miscellaneous/functions.html",[9,0.206,16,0.749,20,0.391,27,0.753,28,0.023,29,0.753,30,0.536,34,1.78,36,2.798,51,0.018,52,0.018,56,2.399,58,2.362,62,2.618,72,2.747,76,1.798,102,1.757,133,2.55,289,2.05,320,3.366,442,4.142,571,2.55,572,3.035,646,3.366,647,3.366,648,4.21,668,3.366,671,3.809,672,3.809,673,3.809,674,3.809,675,3.809,676,3.809,678,3.809,679,3.809,748,2.55,749,3.809,750,5.607,751,3.366,752,5.607,753,3.809,754,3.366,755,4.483]],["title/index.html",[16,0.49,756,2.934,757,2.934]],["body/index.html",[15,0.713,28,0.02,51,0.02,52,0.02,446,4.543,758,5.346,759,6.236,760,5.346,761,6.236,762,6.236,763,5.346,764,5.346,765,5.346]],["title/modules.html",[427,3.586]],["body/modules.html",[28,0.021,51,0.021,52,0.021,309,4.147,426,4.147,427,4.147,766,5.523,767,5.523]],["title/overview.html",[768,4.058]],["body/overview.html",[2,1.017,28,0.02,51,0.02,52,0.02,116,2.436,196,3.606,220,3.03,425,4.527,742,4.673,768,4.527,769,6.223,770,5.327,771,5.327,772,5.327,773,5.327,774,5.327]],["title/properties.html",[17,1.803,741,2.493]],["body/properties.html",[17,2.372,28,0.022,51,0.021,52,0.021,775,5.543,776,5.543]],["title/miscellaneous/typealiases.html",[748,1.669,777,4.215]],["body/miscellaneous/typealiases.html",[4,0.209,6,1.869,7,1.869,10,0.661,15,0.376,16,0.549,20,0.487,28,0.015,31,1.406,32,1.502,36,1.502,51,0.015,52,0.015,55,1.318,58,2.764,59,3.243,66,2.764,68,1.61,81,1.318,87,1.61,88,1.61,91,2.597,100,2.779,101,0.713,107,2.725,119,2.405,123,3.226,128,2.405,132,2.03,145,2.821,161,2.03,181,2.03,191,3.091,221,4.176,233,2.821,236,4.475,237,3.67,238,1.869,239,2.467,240,2.467,242,3.428,250,3.839,312,4.258,328,4.459,445,2.03,455,2.224,456,2.224,462,1.953,463,1.953,468,1.953,484,3.428,514,3.88,517,3.88,547,2.03,618,4.459,623,4.819,624,3.091,625,3.88,626,3.88,627,3.88,628,3.428,720,3.428,732,3.88,748,1.869,751,4.475,754,2.467,778,3.285,779,5.064,780,3.88,781,4.566,782,4.566,783,5.247,784,5.064,785,5.96,786,5.96,787,5.671,788,2.792,789,2.792,790,2.792,791,2.792,792,3.285]],["title/miscellaneous/variables.html",[748,1.669,793,3.582]],["body/miscellaneous/variables.html",[3,0.121,5,0.071,9,0.104,10,0.741,12,0.758,15,0.152,16,0.223,17,1.261,20,0.331,26,1.822,28,0.023,30,0.127,31,1.486,32,1.779,34,0.965,35,4.266,36,3.133,45,0.653,51,0.007,52,0.007,54,0.823,55,0.534,56,1.261,62,2.762,64,0.308,66,1.192,68,0.653,70,0.823,72,1.702,81,1.182,87,1.108,88,1.108,91,1.287,100,1.108,101,0.491,107,1.034,115,0.37,132,1.398,133,0.758,137,0.902,140,0.902,142,2.634,145,0.823,150,3.413,155,1.531,156,1.531,161,1.398,163,1.531,166,1.787,178,1.398,181,1.398,221,2.352,226,1.001,227,0.902,228,2.609,233,0.823,234,1.976,235,1.976,238,1.677,244,2.922,245,1.001,246,1.001,247,3.348,248,4.302,249,2.213,250,0.902,251,1.699,252,1.001,253,2.213,254,1.001,255,1.001,256,1.001,257,1.001,258,1.001,259,3.176,266,1.699,272,1.108,273,1.531,274,1.001,282,1.001,293,1.001,310,2.922,322,3.563,323,1.132,324,1.132,338,2.213,353,1.922,354,1.922,373,0.968,387,3.306,429,1.001,433,1.001,436,1.486,441,0.902,442,2.863,450,1.001,451,1.001,452,1.001,453,1.398,462,0.968,463,0.968,464,1.287,468,0.968,470,0.758,484,1.699,488,1.132,489,1.132,490,1.132,491,1.132,492,1.132,493,1.132,494,1.132,495,1.132,496,1.132,497,1.132,498,1.132,499,1.132,500,1.132,501,1.132,502,1.132,541,1.132,558,1.922,571,0.758,620,1.922,621,3.594,646,1.699,647,1.001,648,2.609,661,1.922,666,2.505,667,2.505,668,1.001,669,1.922,670,1.132,681,1.132,682,2.505,683,1.132,684,1.132,685,1.132,686,1.132,713,1.132,714,1.922,748,0.758,751,2.609,753,2.505,754,1.001,779,2.952,780,1.922,784,2.952,788,2.952,789,2.952,790,2.952,791,2.505,793,1.132,794,4.745,795,6.564,796,1.332,797,2.262,798,6.232,799,2.262,800,1.332,801,2.262,802,2.948,803,2.262,804,3.474,805,2.262,806,2.262,807,2.262,808,2.262,809,2.262,810,2.262,811,2.262,812,2.262,813,2.262,814,2.262,815,2.262,816,2.262,817,2.262,818,4.946,819,2.262,820,2.262,821,4.509,822,3.474,823,2.948,824,2.948,825,2.262,826,3.474,827,2.262,828,2.262,829,1.332,830,1.332,831,1.332,832,3.891,833,1.332,834,1.332,835,1.332,836,1.332,837,1.332,838,5.12,839,5.271,840,1.332,841,1.332,842,2.948,843,1.332,844,1.332,845,2.948,846,2.262,847,1.332,848,1.332,849,1.332,850,1.332,851,1.332,852,1.332,853,1.332,854,4.229,855,1.332,856,2.262,857,2.262,858,1.332,859,1.332,860,3.474,861,1.332,862,1.332,863,1.332,864,1.332,865,1.332,866,1.332,867,1.332,868,1.332,869,1.332,870,1.332,871,1.332,872,1.332,873,1.332,874,1.332,875,2.262,876,1.332,877,1.332,878,1.332,879,1.332,880,1.332,881,1.332,882,1.332,883,1.332,884,1.332,885,1.332,886,1.332,887,1.332,888,3.474,889,1.332,890,1.332,891,1.332,892,1.332,893,1.332,894,1.332,895,1.332,896,1.332,897,2.262,898,1.332,899,2.948,900,1.332,901,1.332,902,2.262,903,1.332,904,2.262,905,1.332]]],"invertedIndex":[["",{"_index":28,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":398,"title":{},"body":{"injectables/DownloadState.html":{}}}],["0.0.1",{"_index":776,"title":{},"body":{"properties.html":{}}}],["1",{"_index":196,"title":{"classes/Set-1.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"overview.html":{}}}],["15.1.0",{"_index":747,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":186,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["2.3.0",{"_index":744,"title":{},"body":{"dependencies.html":{}}}],["22",{"_index":773,"title":{},"body":{"overview.html":{}}}],["2dftu",{"_index":497,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":774,"title":{},"body":{"overview.html":{}}}],["8",{"_index":772,"title":{},"body":{"overview.html":{}}}],["_ctx",{"_index":296,"title":{},"body":{"injectables/ContactState.html":{}}}],["action",{"_index":10,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('[contact",{"_index":599,"title":{},"body":{"classes/SendMessage.html":{}}}],["action('[screenmode",{"_index":604,"title":{},"body":{"classes/Set.html":{}}}],["action('[tissuelibrary",{"_index":460,"title":{},"body":{"classes/Load.html":{}}}],["action('add",{"_index":79,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('clear",{"_index":83,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('computeaggregate",{"_index":278,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action('download",{"_index":84,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('load",{"_index":481,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["action('register",{"_index":75,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["action('set",{"_index":474,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["action('setdata",{"_index":276,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["action(add",{"_index":640,"title":{},"body":{"injectables/SourceListState.html":{}}}],["action(addentry",{"_index":329,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(clearentries",{"_index":332,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(computeaggregate",{"_index":124,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action(download",{"_index":336,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(load",{"_index":733,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["action(loadreferenceorgans",{"_index":518,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(registerformat",{"_index":346,"title":{},"body":{"injectables/DownloadState.html":{}}}],["action(sendmessage",{"_index":290,"title":{},"body":{"injectables/ContactState.html":{}}}],["action(set",{"_index":584,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["action(setactivenode",{"_index":521,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(setmapping",{"_index":524,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturi",{"_index":529,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action(seturifromiri",{"_index":532,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["action.summaries",{"_index":147,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["action_log",{"_index":705,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["actiongroup",{"_index":63,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["actiongroup('download",{"_index":70,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('medical",{"_index":470,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":274,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["actions",{"_index":338,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["actions.ts",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["active",{"_index":477,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["add",{"_index":1,"title":{"classes/Add.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["add(undefined",{"_index":639,"title":{},"body":{"injectables/SourceListState.html":{}}}],["addd",{"_index":61,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["added",{"_index":33,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["addentry",{"_index":53,"title":{"classes/AddEntry.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["addentry(ctx",{"_index":327,"title":{},"body":{"injectables/DownloadState.html":{}}}],["adding",{"_index":11,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["adds",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["aggregate",{"_index":100,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregate[string]['rows'][number",{"_index":241,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregated",{"_index":230,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregatedata",{"_index":148,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregatedata[key",{"_index":158,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["aggregaterow",{"_index":145,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["aggregaterow[2",{"_index":243,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["aggregaterowentry",{"_index":242,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["aggregates",{"_index":93,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["aggregates(state",{"_index":95,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["alias",{"_index":623,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":778,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":261,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["analytics",{"_index":442,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["anatomical_structure_of",{"_index":492,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["anchor",{"_index":408,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.click",{"_index":413,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.download",{"_index":411,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.href",{"_index":412,"title":{},"body":{"injectables/DownloadState.html":{}}}],["anchor.remove",{"_index":414,"title":{},"body":{"injectables/DownloadState.html":{}}}],["angular/common",{"_index":746,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":349,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["angular/core",{"_index":143,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{}}}],["another",{"_index":245,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["app",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["apptitle",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["argument",{"_index":627,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":31,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["array.isarray(value",{"_index":711,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["available",{"_index":309,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules.html":{}}}],["b",{"_index":214,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bar",{"_index":263,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["base",{"_index":272,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":175,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["being",{"_index":658,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["between",{"_index":139,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["bigint",{"_index":670,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["biomarker",{"_index":181,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["blob",{"_index":405,"title":{},"body":{"injectables/DownloadState.html":{}}}],["blob([entry.data",{"_index":380,"title":{},"body":{"injectables/DownloadState.html":{}}}],["boolean",{"_index":571,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["boolean/number/string/null/bigint/undefined",{"_index":676,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["both",{"_index":226,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["brand('downloadformatid",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["branded",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":381,"title":{},"body":{"injectables/DownloadState.html":{}}}],["browse",{"_index":767,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":404,"title":{},"body":{"injectables/DownloadState.html":{}}}],["builtin",{"_index":355,"title":{},"body":{"injectables/DownloadState.html":{}}}],["calculates",{"_index":135,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["called",{"_index":786,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["canceluncompleted",{"_index":525,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["case",{"_index":372,"title":{},"body":{"injectables/DownloadState.html":{}}}],["cell",{"_index":107,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell_schema",{"_index":244,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_schema.array",{"_index":252,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_aggregate_schema",{"_index":253,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_schema",{"_index":238,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellid",{"_index":165,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummary",{"_index":91,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellsummary[string]['entries",{"_index":171,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["cellsummaryselectors",{"_index":86,"title":{"classes/CellSummarySelectors.html":{}},"body":{"classes/CellSummarySelectors.html":{}}}],["cellsummarystate",{"_index":109,"title":{"injectables/CellSummaryState.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"modules/HraStateModule.html":{}}}],["cellsummarystatemodel",{"_index":96,"title":{"interfaces/CellSummaryStateModel.html":{}},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["check",{"_index":672,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["class",{"_index":0,"title":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{},"overview.html":{}}}],["clear",{"_index":80,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries",{"_index":82,"title":{"classes/ClearEntries.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["clearentries(ctx",{"_index":331,"title":{},"body":{"injectables/DownloadState.html":{}}}],["client",{"_index":540,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["color",{"_index":137,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["colors",{"_index":260,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["columnid",{"_index":182,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindex",{"_index":188,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices",{"_index":177,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnindices[columnid",{"_index":184,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columnlabel",{"_index":183,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns",{"_index":156,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["columns.length",{"_index":185,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["columns.push(columnlabel",{"_index":187,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["compute",{"_index":267,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate",{"_index":120,"title":{"classes/ComputeAggregate.html":{}},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["computeaggregate(ctx",{"_index":122,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["computes",{"_index":126,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["constant",{"_index":250,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":21,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["constructor(data",{"_index":611,"title":{},"body":{"classes/SetData.html":{}}}],["constructor(format",{"_index":305,"title":{},"body":{"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["constructor(id",{"_index":57,"title":{},"body":{"classes/AddEntry.html":{}}}],["constructor(iri",{"_index":616,"title":{},"body":{"classes/SetUriFromIRI.html":{}}}],["constructor(isfullscreen",{"_index":602,"title":{},"body":{"classes/Set.html":{}}}],["constructor(message",{"_index":596,"title":{},"body":{"classes/SendMessage.html":{}}}],["constructor(node",{"_index":608,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["constructor(public",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":41,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["constructor(sourcelist",{"_index":22,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["constructor(summaries",{"_index":269,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["constructor(url",{"_index":613,"title":{},"body":{"classes/SetMapping.html":{},"classes/SetUri.html":{}}}],["contact",{"_index":282,"title":{},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{},"miscellaneous/variables.html":{}}}],["contact.actions",{"_index":301,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactacknowledgement",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactactions.sendmessage",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["contactmessage",{"_index":597,"title":{},"body":{"classes/SendMessage.html":{}}}],["contactservice",{"_index":286,"title":{},"body":{"injectables/ContactState.html":{}}}],["contactstate",{"_index":279,"title":{"injectables/ContactState.html":{}},"body":{"injectables/ContactState.html":{},"modules/HraStateModule.html":{}}}],["containing",{"_index":231,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["contains",{"_index":228,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["content",{"_index":323,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["context",{"_index":547,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["conversion",{"_index":420,"title":{},"body":{"injectables/DownloadState.html":{}}}],["convert",{"_index":321,"title":{},"body":{"injectables/DownloadState.html":{}}}],["converted",{"_index":402,"title":{},"body":{"injectables/DownloadState.html":{}}}],["corresponding",{"_index":168,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["count",{"_index":161,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["counts",{"_index":153,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["counts[rowid",{"_index":190,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["create",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('gradient",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createcustomtype('size",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createdownloadformatid('png",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid('svg",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createdownloadformatid(id",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('about",{"_index":830,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('embed",{"_index":831,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('exploreftu",{"_index":833,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('illustration",{"_index":835,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpage",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('landingpagereadmore",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('portal",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid('producttitle",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('apptitle",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('contactacknowledgement",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegend",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('gradientlegendinfo",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthdescription",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthimg",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthmoretext",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpagedepthtitle",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrodescription",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintroimg",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintromoretext",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintropartners",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('landingpageintrotitle",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metrics",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricslogo",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('metricstitle",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('productlogourl",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('producttitle",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegend",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createresourceid('sizelegendinfo",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":76,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":128,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.dispatch([new",{"_index":360,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.getstate",{"_index":368,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.patchstate",{"_index":159,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ctx.setstate",{"_index":363,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ctx.setstate(data",{"_index":740,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["current",{"_index":43,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["data",{"_index":101,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["dataservice",{"_index":737,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["decorators",{"_index":97,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["default",{"_index":35,"title":{},"body":{"classes/Add.html":{},"injectables/DownloadState.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["default_loggable_actions",{"_index":666,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":146,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["define",{"_index":784,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":23,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["defines",{"_index":271,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["dependencies",{"_index":742,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dependency",{"_index":691,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["depth",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["describes",{"_index":222,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["description",{"_index":9,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["determines",{"_index":671,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["diff",{"_index":198,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["different",{"_index":324,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["direct",{"_index":418,"title":{},"body":{"injectables/DownloadState.html":{}}}],["discriminated",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatched",{"_index":659,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["display",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["document.body.appendchild(anchor",{"_index":410,"title":{},"body":{"injectables/DownloadState.html":{}}}],["document.createelement('a",{"_index":409,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download",{"_index":56,"title":{"classes/Download.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["download(ctx",{"_index":335,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.action",{"_index":356,"title":{},"body":{"injectables/DownloadState.html":{}}}],["download.model",{"_index":67,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["download_entry",{"_index":788,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format",{"_index":789,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_format_id",{"_index":790,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["download_model",{"_index":791,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadactions.download",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadcontext",{"_index":328,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloaddata(blob",{"_index":406,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadentry",{"_index":59,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformat",{"_index":66,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["downloadformatid",{"_index":58,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["downloadformatid:'${id",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["downloadmodel",{"_index":312,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/typealiases.html":{}}}],["downloadremotedata(url",{"_index":422,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloads",{"_index":416,"title":{},"body":{"injectables/DownloadState.html":{}}}],["downloadselectors",{"_index":307,"title":{"classes/DownloadSelectors.html":{}},"body":{"classes/DownloadSelectors.html":{}}}],["downloadstate",{"_index":317,"title":{"injectables/DownloadState.html":{}},"body":{"injectables/DownloadState.html":{},"modules/HraStateModule.html":{}}}],["draft.entries",{"_index":367,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.entries[id",{"_index":366,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.formats[format.id",{"_index":365,"title":{},"body":{"injectables/DownloadState.html":{}}}],["draft.isfullscreen",{"_index":591,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["draft.push(...sourcelist",{"_index":644,"title":{},"body":{"injectables/SourceListState.html":{}}}],["each",{"_index":163,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["effectively",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["embed",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entires",{"_index":334,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entries",{"_index":81,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entries.reduce>((res",{"_index":172,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["entries[format",{"_index":369,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry",{"_index":55,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.url",{"_index":376,"title":{},"body":{"injectables/DownloadState.html":{}}}],["entry?.type",{"_index":371,"title":{},"body":{"injectables/DownloadState.html":{}}}],["error('cannot",{"_index":383,"title":{},"body":{"injectables/DownloadState.html":{}}}],["error('reference",{"_index":554,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["event",{"_index":698,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["execute",{"_index":765,"title":{},"body":{"index.html":{}}}],["exist_asctb",{"_index":498,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["explore",{"_index":834,"title":{},"body":{"miscellaneous/variables.html":{}}}],["exploreftu",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["export",{"_index":39,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["extends",{"_index":74,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["extension",{"_index":387,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":273,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["fakebase",{"_index":389,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fakebase).pathname",{"_index":393,"title":{},"body":{"injectables/DownloadState.html":{}}}],["false",{"_index":589,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["feature",{"_index":225,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["fetch",{"_index":419,"title":{},"body":{"injectables/DownloadState.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["filename",{"_index":374,"title":{},"body":{"injectables/DownloadState.html":{}}}],["fileurl",{"_index":421,"title":{},"body":{"injectables/DownloadState.html":{}}}],["finalpercentage",{"_index":201,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["finding",{"_index":534,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["form",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["format",{"_index":72,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["format.id",{"_index":315,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats",{"_index":310,"title":{},"body":{"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["formats(state",{"_index":311,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["formats.ts",{"_index":823,"title":{},"body":{"miscellaneous/variables.html":{}}}],["formats[id",{"_index":388,"title":{},"body":{"injectables/DownloadState.html":{}}}],["formatted",{"_index":403,"title":{},"body":{"injectables/DownloadState.html":{}}}],["found",{"_index":556,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ftu",{"_index":541,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["ftuservice",{"_index":543,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["full",{"_index":578,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["fullscreen",{"_index":573,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{}}}],["function",{"_index":677,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["functions",{"_index":749,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["funtion",{"_index":675,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["g",{"_index":210,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ga",{"_index":688,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["generated",{"_index":758,"title":{},"body":{"index.html":{}}}],["getactiontypefrominstance",{"_index":662,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getactiontypefrominstance(action",{"_index":700,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["getcellcountmap(entries",{"_index":170,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["getrowsandcolumns",{"_index":176,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["gets",{"_index":160,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["getsourcelist",{"_index":632,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getsourcelist(state",{"_index":633,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["getstate",{"_index":549,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["getstate().referenceorgans",{"_index":550,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["getting",{"_index":756,"title":{"index.html":{}},"body":{}}],["given",{"_index":138,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["google",{"_index":649,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["googleanalyticsservice",{"_index":664,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["gradient",{"_index":142,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["gradientlegend",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientlegendinfo",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["gradientpoint",{"_index":131,"title":{"interfaces/GradientPoint.html":{}},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["graph",{"_index":766,"title":{},"body":{"modules.html":{}}}],["group",{"_index":68,"title":{},"body":{"classes/AddEntry.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["guess",{"_index":385,"title":{},"body":{"injectables/DownloadState.html":{}}}],["guessfilename(ctx",{"_index":386,"title":{},"body":{"injectables/DownloadState.html":{}}}],["handle",{"_index":650,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handle(state",{"_index":651,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handler's",{"_index":626,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["handles",{"_index":655,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["handling",{"_index":118,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["hasdata",{"_index":314,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["header",{"_index":563,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["helper",{"_index":625,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["highpoint",{"_index":197,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["highpoint.percentage",{"_index":199,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["hra",{"_index":64,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["hrastatemodule",{"_index":426,"title":{"modules/HraStateModule.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["http",{"_index":358,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["httpclient",{"_index":348,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["https://base.com",{"_index":390,"title":{},"body":{"injectables/DownloadState.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/AddEntry.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/RegisterFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ids.ts",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illustration",{"_index":436,"title":{},"body":{"modules/HraStateModule.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions",{"_index":538,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.actions.ts",{"_index":464,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["illustration.actions.ts:10",{"_index":615,"title":{},"body":{"classes/SetUri.html":{}}}],["illustration.actions.ts:23",{"_index":617,"title":{},"body":{"classes/SetUriFromIRI.html":{}}}],["illustration.actions.ts:36",{"_index":609,"title":{},"body":{"classes/SetActiveNode.html":{}}}],["illustration.actions.ts:49",{"_index":614,"title":{},"body":{"classes/SetMapping.html":{}}}],["illustration.model",{"_index":469,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["illustration.model.ts",{"_index":484,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustration.selectors.ts",{"_index":504,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:14",{"_index":509,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.selectors.ts:22",{"_index":507,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state",{"_index":510,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["illustration.state.ts",{"_index":514,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["illustration.state.ts:33",{"_index":530,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:43",{"_index":533,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:56",{"_index":522,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:64",{"_index":526,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration.state.ts:75",{"_index":519,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["illustration/medical",{"_index":463,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustrations",{"_index":515,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["image",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["img",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["immer",{"_index":351,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["implements",{"_index":357,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["import",{"_index":37,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["imports",{"_index":447,"title":{},"body":{"modules/HraStateModule.html":{}}}],["index",{"_index":16,"title":{"index.html":{}},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["individual",{"_index":594,"title":{},"body":{"classes/SendMessage.html":{}}}],["inferred",{"_index":787,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["information",{"_index":232,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"injectables/ContactState.html":{},"interfaces/GradientPoint.html":{}}}],["init",{"_index":343,"title":{},"body":{"injectables/DownloadState.html":{}}}],["initializes",{"_index":25,"title":{},"body":{"classes/Add.html":{},"classes/SendMessage.html":{},"classes/Set-1.html":{}}}],["inject",{"_index":298,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["inject(contactservice",{"_index":303,"title":{},"body":{"injectables/ContactState.html":{}}}],["inject(googleanalyticsservice",{"_index":689,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["inject(httpclient",{"_index":359,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["inject(tissueftuservice",{"_index":544,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["inject(tissuelibraryservice",{"_index":738,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["injectable",{"_index":115,"title":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/variables.html":{}}}],["injectables",{"_index":116,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{},"overview.html":{}}}],["injectiontoken",{"_index":660,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["injectiontoken('loggable",{"_index":684,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":687,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["input",{"_index":673,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["inset",{"_index":502,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["instance",{"_index":77,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/SourceListState.html":{},"injectables/TissueLibraryState.html":{}}}],["interface",{"_index":219,"title":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{}},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/SendMessage.html":{},"interfaces/Source.html":{}}}],["interfaces",{"_index":220,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"interfaces/Source.html":{},"overview.html":{}}}],["interpolatecolor",{"_index":121,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolatecolor(points",{"_index":130,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["interpolated",{"_index":136,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["intro",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["iri",{"_index":475,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{}}}],["isfullscreen",{"_index":570,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["isfullscreen(state",{"_index":576,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["isprimitive",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isprimitive(value",{"_index":678,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["json.stringify(action",{"_index":702,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["key",{"_index":149,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["label",{"_index":150,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["labels",{"_index":239,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["lanading",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landing",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpage",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthdescription",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthimg",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthmoretext",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedepthtitle",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagedescription",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintroimg",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpageintromoretext",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagepartners",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagereadmore",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["landingpagetitle",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["legend",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["library",{"_index":446,"title":{},"body":{"modules/HraStateModule.html":{},"index.html":{}}}],["library.actions",{"_index":736,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.actions.ts",{"_index":457,"title":{},"body":{"classes/Load.html":{}}}],["library.model",{"_index":725,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["library.model.ts",{"_index":783,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["library.selectors.ts",{"_index":716,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.selectors.ts:14",{"_index":722,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state",{"_index":726,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["library.state.ts",{"_index":729,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library.state.ts:22",{"_index":734,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["library/tissue",{"_index":456,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["link",{"_index":620,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["linkid",{"_index":832,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistryactions.navigate",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["list",{"_index":12,"title":{},"body":{"classes/Add.html":{},"modules/HraStateModule.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["list.actions",{"_index":643,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.actions.ts",{"_index":8,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{}}}],["list.actions.ts:17",{"_index":606,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:22",{"_index":607,"title":{},"body":{"classes/Set-1.html":{}}}],["list.actions.ts:6",{"_index":24,"title":{},"body":{"classes/Add.html":{}}}],["list.model",{"_index":38,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["list.model.ts",{"_index":618,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["list.selectors.ts",{"_index":630,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.selectors.ts:13",{"_index":635,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state",{"_index":636,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["list.state.ts",{"_index":638,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:20",{"_index":641,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list.state.ts:34",{"_index":642,"title":{},"body":{"injectables/SourceListState.html":{}}}],["list/source",{"_index":7,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":454,"title":{"classes/Load.html":{}},"body":{"classes/Load.html":{},"injectables/TissueLibraryState.html":{}}}],["loading",{"_index":458,"title":{},"body":{"classes/Load.html":{}}}],["loadreferenceorgans",{"_index":461,"title":{"classes/LoadReferenceOrgans.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["loadreferenceorgans(undefined",{"_index":516,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["loads",{"_index":465,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/TissueLibraryState.html":{}}}],["logaction(action",{"_index":699,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["loggable",{"_index":667,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggable_actions",{"_index":682,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["loggabletypes",{"_index":692,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logged",{"_index":683,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logger",{"_index":656,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["logging",{"_index":690,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["login",{"_index":713,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["logo",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logs",{"_index":696,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["lowpoint",{"_index":194,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["lowpoint.percentage",{"_index":200,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["managing",{"_index":281,"title":{},"body":{"injectables/ContactState.html":{}}}],["map",{"_index":488,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["mapentry",{"_index":468,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mapping",{"_index":167,"title":{},"body":{"injectables/CellSummaryState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["mapping(state",{"_index":505,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["match",{"_index":555,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["matching",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.round(rgb1[0",{"_index":207,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[1",{"_index":211,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["math.round(rgb1[2",{"_index":215,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["medical",{"_index":435,"title":{},"body":{"modules/HraStateModule.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["medicalillustration",{"_index":539,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationcontext",{"_index":517,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/typealiases.html":{}}}],["medicalillustrationmodel",{"_index":483,"title":{"interfaces/MedicalIllustrationModel.html":{}},"body":{"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["medicalillustrationselectors",{"_index":503,"title":{"classes/MedicalIllustrationSelectors.html":{}},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["medicalillustrationstate",{"_index":434,"title":{"injectables/MedicalIllustrationState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{}}}],["message",{"_index":293,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":284,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["metadata",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["method",{"_index":292,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{}}}],["methods",{"_index":92,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["metrics",{"_index":818,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricslogo",{"_index":819,"title":{},"body":{"miscellaneous/variables.html":{}}}],["metricstitle",{"_index":820,"title":{},"body":{"miscellaneous/variables.html":{}}}],["miscellaneous",{"_index":748,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mode",{"_index":439,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["mode.actions",{"_index":587,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.actions.ts",{"_index":600,"title":{},"body":{"classes/Set.html":{}}}],["mode.actions.ts:4",{"_index":603,"title":{},"body":{"classes/Set.html":{}}}],["mode.model",{"_index":579,"title":{},"body":{"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["mode.model.ts",{"_index":569,"title":{},"body":{"interfaces/ScreenModeModel.html":{}}}],["mode.selectors.ts",{"_index":575,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.selectors.ts:14",{"_index":577,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["mode.state.ts",{"_index":581,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode.state.ts:22",{"_index":585,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["mode/screen",{"_index":568,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["model",{"_index":319,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{}}}],["module",{"_index":425,"title":{"modules/HraStateModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":427,"title":{"modules.html":{}},"body":{"modules/HraStateModule.html":{},"modules.html":{}}}],["more",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["multi",{"_index":452,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["name",{"_index":29,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["name.includes",{"_index":400,"title":{},"body":{"injectables/DownloadState.html":{}}}],["name}${extension",{"_index":401,"title":{},"body":{"injectables/DownloadState.html":{}}}],["needs",{"_index":707,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["new",{"_index":45,"title":{},"body":{"classes/Add.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":652,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["next(state",{"_index":695,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngmodule",{"_index":431,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngx",{"_index":665,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxs",{"_index":342,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxs/store",{"_index":106,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"modules/HraStateModule.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["ngxs_plugins",{"_index":433,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["ngxsmodule",{"_index":432,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsmodule.forfeature",{"_index":448,"title":{},"body":{"modules/HraStateModule.html":{}}}],["ngxsnextpluginfn",{"_index":653,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["ngxsoninit",{"_index":326,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsoninit(ctx",{"_index":340,"title":{},"body":{"injectables/DownloadState.html":{}}}],["ngxsplugin",{"_index":663,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["node",{"_index":478,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/TissueLibrarySelectors.html":{}}}],["node_name",{"_index":494,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":679,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["number",{"_index":133,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["numbers",{"_index":246,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":759,"title":{},"body":{"index.html":{}}}],["object",{"_index":166,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["object.values(formats).filter(hasdata",{"_index":316,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["objects",{"_index":32,"title":{},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":297,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["occurrences",{"_index":162,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["ones",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["ontologyid",{"_index":495,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["optional",{"_index":30,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["organ",{"_index":467,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["organ_id",{"_index":491,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organ_label",{"_index":490,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["organs",{"_index":482,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["out",{"_index":771,"title":{},"body":{"overview.html":{}}}],["overall",{"_index":223,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["overview",{"_index":768,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":741,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["page",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["papaparse",{"_index":537,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param",{"_index":40,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["param0",{"_index":546,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["param1",{"_index":548,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parameters",{"_index":27,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":536,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parse(result",{"_index":562,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parsedresult",{"_index":561,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["parses",{"_index":527,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["partial",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["partners",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["patchstate",{"_index":545,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["path",{"_index":391,"title":{},"body":{"injectables/DownloadState.html":{}}}],["path.split('/').filter((seg",{"_index":395,"title":{},"body":{"injectables/DownloadState.html":{}}}],["payload",{"_index":26,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["peer",{"_index":745,"title":{},"body":{"dependencies.html":{}}}],["percentage",{"_index":132,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["percentages",{"_index":262,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["pipe",{"_index":559,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["plugin",{"_index":443,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["plugin.service.ts",{"_index":648,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["plugin.service.ts:51",{"_index":654,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["plugin/default",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["plugin/state",{"_index":647,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["png",{"_index":821,"title":{},"body":{"miscellaneous/variables.html":{}}}],["png_format",{"_index":353,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["point",{"_index":265,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["point.percentage",{"_index":193,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points",{"_index":141,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["points[index",{"_index":195,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["portal",{"_index":824,"title":{},"body":{"miscellaneous/variables.html":{}}}],["primitive",{"_index":668,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["primitive_types",{"_index":669,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["primitive_types.includes(typeof",{"_index":680,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["private",{"_index":169,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["produce",{"_index":350,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["produce((draft",{"_index":364,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["product",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["productlogourl",{"_index":825,"title":{},"body":{"miscellaneous/variables.html":{}}}],["producttitle",{"_index":826,"title":{},"body":{"miscellaneous/variables.html":{}}}],["properties",{"_index":17,"title":{"properties.html":{}},"body":{"classes/Add.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"interfaces/ScreenModeModel.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"properties.html":{},"miscellaneous/variables.html":{}}}],["property",{"_index":622,"title":{},"body":{"interfaces/Source.html":{},"injectables/TissueLibraryState.html":{}}}],["provide",{"_index":450,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providedin",{"_index":685,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["provider",{"_index":661,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":449,"title":{},"body":{"modules/HraStateModule.html":{}}}],["provides",{"_index":429,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["public",{"_index":605,"title":{},"body":{"classes/Set-1.html":{}}}],["r",{"_index":206,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["read",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["readonly",{"_index":19,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"injectables/TissueLibraryState.html":{}}}],["record",{"_index":178,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/TissueLibrarySelectors.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":551,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref.object.file",{"_index":557,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref.representation_of",{"_index":553,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["ref/1",{"_index":499,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/doi",{"_index":500,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ref/1/notes",{"_index":501,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["reference",{"_index":466,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["referenceorgan",{"_index":487,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["referenceorgans",{"_index":485,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{}}}],["referenceorgans?.find((ref",{"_index":552,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["register",{"_index":71,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat",{"_index":73,"title":{"classes/RegisterFormat.html":{}},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"injectables/DownloadState.html":{},"classes/RegisterFormat.html":{}}}],["registerformat(ctx",{"_index":345,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(png_format",{"_index":362,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registerformat(svg_format",{"_index":361,"title":{},"body":{"injectables/DownloadState.html":{}}}],["registry",{"_index":344,"title":{},"body":{"injectables/DownloadState.html":{}}}],["removes",{"_index":42,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["representation_of",{"_index":496,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["representing",{"_index":236,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["res",{"_index":174,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["res[id",{"_index":173,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["reset",{"_index":770,"title":{},"body":{"overview.html":{}}}],["resetting",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"injectables/SourceListState.html":{}}}],["resource",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["responsetype",{"_index":424,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["rest",{"_index":258,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retreiving",{"_index":717,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["retrieving",{"_index":631,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["return",{"_index":112,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["returns",{"_index":102,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{}}}],["rgb1",{"_index":202,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[0",{"_index":209,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[1",{"_index":213,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb1[2",{"_index":217,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2",{"_index":204,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[0",{"_index":208,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[1",{"_index":212,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rgb2[2",{"_index":216,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["root",{"_index":686,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["row",{"_index":191,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["row.length",{"_index":192,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowid",{"_index":179,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rowlabel",{"_index":180,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["rows",{"_index":155,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["rows[rowid",{"_index":189,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["run",{"_index":763,"title":{},"body":{"index.html":{}}}],["running",{"_index":760,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":300,"title":{},"body":{"injectables/ContactState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["save",{"_index":417,"title":{},"body":{"injectables/DownloadState.html":{}}}],["schema",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["screen",{"_index":438,"title":{},"body":{"modules/HraStateModule.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmode",{"_index":588,"title":{},"body":{"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["screenmodemodel",{"_index":566,"title":{"interfaces/ScreenModeModel.html":{}},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{}}}],["screenmodeselectors",{"_index":574,"title":{"classes/ScreenModeSelectors.html":{}},"body":{"classes/ScreenModeSelectors.html":{}}}],["screenmodestate",{"_index":437,"title":{"injectables/ScreenModeState.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/ScreenModeState.html":{}}}],["seg",{"_index":396,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments",{"_index":394,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments.length",{"_index":397,"title":{},"body":{"injectables/DownloadState.html":{}}}],["segments[segments.length",{"_index":399,"title":{},"body":{"injectables/DownloadState.html":{}}}],["selected",{"_index":486,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{}}}],["selectedformat",{"_index":85,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{}}}],["selector",{"_index":105,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["selector(['cellsummarystate",{"_index":98,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector(['medicalillustrationstate",{"_index":506,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector(['sourceliststate",{"_index":634,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector(['tissuelibrarystate",{"_index":721,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selector([cellsummarystate",{"_index":111,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["selector([medicalillustrationstate",{"_index":511,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["selector([sourceliststate",{"_index":637,"title":{},"body":{"classes/SourceListSelectors.html":{}}}],["selector([tissuelibrarystate",{"_index":727,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["selectors",{"_index":90,"title":{},"body":{"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{}}}],["send",{"_index":295,"title":{},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sending",{"_index":283,"title":{},"body":{"injectables/ContactState.html":{}}}],["sendmessage",{"_index":287,"title":{"classes/SendMessage.html":{}},"body":{"injectables/ContactState.html":{},"classes/SendMessage.html":{}}}],["sendmessage(_ctx",{"_index":288,"title":{},"body":{"injectables/ContactState.html":{}}}],["sends",{"_index":593,"title":{},"body":{"classes/SendMessage.html":{}}}],["serialize",{"_index":674,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["serialize(this",{"_index":709,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serialized",{"_index":708,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["serializes",{"_index":706,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["service",{"_index":542,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["set",{"_index":49,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"classes/Add.html":{},"classes/ComputeAggregate.html":{},"classes/LoadReferenceOrgans.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/SourceListState.html":{}}}],["set(inject(loggable_actions).map(getactiontypefrominstance",{"_index":693,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["set(undefined",{"_index":583,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setactive",{"_index":730,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactive(ctx",{"_index":731,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["setactivenode",{"_index":479,"title":{"classes/SetActiveNode.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["setactivenode(undefined",{"_index":520,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["setdata",{"_index":275,"title":{"classes/SetData.html":{}},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["setmapping",{"_index":480,"title":{"classes/SetMapping.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["setmapping(undefined",{"_index":523,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["sets",{"_index":277,"title":{},"body":{"classes/ComputeAggregate.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetData.html":{}}}],["setstate",{"_index":590,"title":{},"body":{"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{}}}],["setstate(sourcelist",{"_index":645,"title":{},"body":{"injectables/SourceListState.html":{}}}],["setting",{"_index":471,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["seturi",{"_index":473,"title":{"classes/SetUri.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["seturi(undefined",{"_index":528,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["seturifromiri",{"_index":476,"title":{"classes/SetUriFromIRI.html":{}},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["seturifromiri(undefined",{"_index":531,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["shape",{"_index":224,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["show",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":233,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["size",{"_index":259,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["sizelegend",{"_index":827,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sizelegendinfo",{"_index":828,"title":{},"body":{"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{"interfaces/Source.html":{}},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["source_spatial_entity",{"_index":493,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["sourcelist",{"_index":14,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sourcelistcontext",{"_index":628,"title":{},"body":{"interfaces/Source.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistmodel",{"_index":624,"title":{},"body":{"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["sourcelistselectors",{"_index":629,"title":{"classes/SourceListSelectors.html":{}},"body":{"classes/SourceListSelectors.html":{}}}],["sourceliststate",{"_index":440,"title":{"injectables/SourceListState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["sources",{"_index":13,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{}}}],["specific",{"_index":264,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["specified",{"_index":339,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/.../builtin",{"_index":822,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../cell",{"_index":779,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../default",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.action.ts",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../download.model.ts",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../link",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../medical",{"_index":780,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../resource",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../source",{"_index":781,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../state",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":782,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/lib/cell",{"_index":87,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.actions.ts",{"_index":592,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.actions.ts:5",{"_index":598,"title":{},"body":{"classes/SendMessage.html":{}}}],["src/lib/contact/contact.state.ts",{"_index":280,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/contact/contact.state.ts:16",{"_index":291,"title":{},"body":{"injectables/ContactState.html":{}}}],["src/lib/download/builtin",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts",{"_index":54,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/Download.html":{},"classes/RegisterFormat.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.action.ts:10",{"_index":565,"title":{},"body":{"classes/RegisterFormat.html":{}}}],["src/lib/download/download.action.ts:23",{"_index":60,"title":{},"body":{"classes/AddEntry.html":{}}}],["src/lib/download/download.action.ts:38",{"_index":306,"title":{},"body":{"classes/Download.html":{}}}],["src/lib/download/download.model.ts",{"_index":754,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/download/download.selectors.ts",{"_index":308,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.selectors.ts:14",{"_index":313,"title":{},"body":{"classes/DownloadSelectors.html":{}}}],["src/lib/download/download.state.ts",{"_index":318,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:34",{"_index":341,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:44",{"_index":347,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:58",{"_index":330,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:71",{"_index":333,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/download/download.state.ts:85",{"_index":337,"title":{},"body":{"injectables/DownloadState.html":{}}}],["src/lib/link",{"_index":829,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/medical",{"_index":462,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/resource",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/screen",{"_index":567,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set.html":{}}}],["src/lib/source",{"_index":6,"title":{},"body":{"classes/Add.html":{},"classes/Set-1.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/state",{"_index":646,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/state.module.ts",{"_index":428,"title":{},"body":{"modules/HraStateModule.html":{}}}],["src/lib/tissue",{"_index":455,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":757,"title":{"index.html":{}},"body":{}}],["state",{"_index":15,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/Set-1.html":{},"classes/SetData.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"index.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state.aggregate",{"_index":113,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.isfullscreen",{"_index":580,"title":{},"body":{"classes/ScreenModeSelectors.html":{}}}],["state.mapping",{"_index":513,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state.nodes",{"_index":728,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["state.summaries",{"_index":114,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["state.url",{"_index":512,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["state_logger_provider",{"_index":714,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["stateanalyticspluginservice",{"_index":441,"title":{"injectables/StateAnalyticsPluginService.html":{}},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["statecontext",{"_index":123,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/ContactState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"interfaces/Source.html":{},"miscellaneous/typealiases.html":{}}}],["states",{"_index":430,"title":{},"body":{"modules/HraStateModule.html":{}}}],["static",{"_index":18,"title":{},"body":{"classes/Add.html":{},"classes/CellSummarySelectors.html":{},"classes/DownloadSelectors.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/ScreenModeSelectors.html":{},"classes/Set-1.html":{},"classes/SourceListSelectors.html":{},"classes/TissueLibrarySelectors.html":{}}}],["store",{"_index":268,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["stores",{"_index":127,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["storing",{"_index":582,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["string",{"_index":34,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":254,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":619,"title":{},"body":{"interfaces/Source.html":{}}}],["submitted",{"_index":595,"title":{},"body":{"classes/SendMessage.html":{}}}],["submitting",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["summaries",{"_index":94,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{}}}],["summaries(state",{"_index":103,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summaries[key].entries",{"_index":152,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summaries[key].label",{"_index":151,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary",{"_index":119,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"modules/HraStateModule.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["summary.actions",{"_index":144,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.actions.ts",{"_index":266,"title":{},"body":{"classes/ComputeAggregate.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["summary.actions.ts:20",{"_index":270,"title":{},"body":{"classes/ComputeAggregate.html":{}}}],["summary.actions.ts:9",{"_index":612,"title":{},"body":{"classes/SetData.html":{}}}],["summary.model",{"_index":108,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"classes/ComputeAggregate.html":{},"classes/SetData.html":{}}}],["summary.model.ts",{"_index":221,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["summary.selectors.ts",{"_index":89,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:15",{"_index":104,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.selectors.ts:9",{"_index":99,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state",{"_index":110,"title":{},"body":{"classes/CellSummarySelectors.html":{}}}],["summary.state.ts",{"_index":117,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:114",{"_index":134,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary.state.ts:20",{"_index":125,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["summary/cell",{"_index":88,"title":{},"body":{"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["super",{"_index":78,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["svg",{"_index":322,"title":{},"body":{"injectables/DownloadState.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["svg_format",{"_index":354,"title":{},"body":{"injectables/DownloadState.html":{},"miscellaneous/variables.html":{}}}],["switch",{"_index":370,"title":{},"body":{"injectables/DownloadState.html":{}}}],["table",{"_index":229,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{}}}],["tap",{"_index":352,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/TissueLibraryState.html":{}}}],["tap((result",{"_index":560,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["test",{"_index":764,"title":{},"body":{"index.html":{}}}],["tests",{"_index":762,"title":{},"body":{"index.html":{}}}],["text",{"_index":558,"title":{},"body":{"injectables/MedicalIllustrationState.html":{},"miscellaneous/variables.html":{}}}],["this.contact.sendmessage(message",{"_index":304,"title":{},"body":{"injectables/ContactState.html":{}}}],["this.dataservice.gettissues().pipe(tap((data",{"_index":739,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["this.downloaddata(data",{"_index":378,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloaddata(new",{"_index":379,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.downloadremotedata(entry.url).pipe(tap((data",{"_index":377,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.ftuservice.getreferenceorgans().pipe(tap((referenceorgans",{"_index":564,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["this.ga.event(type",{"_index":704,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.getcellcountmap(entries",{"_index":154,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.getrowsandcolumns(entries",{"_index":157,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.guessfilename(ctx",{"_index":375,"title":{},"body":{"injectables/DownloadState.html":{}}}],["this.hextorgb(highpoint.color",{"_index":205,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.hextorgb(lowpoint.color",{"_index":203,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.http.get(url",{"_index":423,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["this.logaction(action",{"_index":694,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.loggabletypes.has(type",{"_index":701,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["this.rgbtohex([r",{"_index":218,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["this.serialize",{"_index":703,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["throw",{"_index":382,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{}}}],["tissedata",{"_index":723,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissue",{"_index":445,"title":{},"body":{"modules/HraStateModule.html":{},"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuedata",{"_index":792,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["tissueftuservice",{"_index":535,"title":{},"body":{"injectables/MedicalIllustrationState.html":{}}}],["tissueitem",{"_index":724,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibrary",{"_index":459,"title":{},"body":{"classes/Load.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissuelibrarycontext",{"_index":732,"title":{},"body":{"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrarymodel",{"_index":720,"title":{},"body":{"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibraryselectors",{"_index":715,"title":{"classes/TissueLibrarySelectors.html":{}},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissuelibraryservice",{"_index":735,"title":{},"body":{"injectables/TissueLibraryState.html":{}}}],["tissuelibrarystate",{"_index":444,"title":{"injectables/TissueLibraryState.html":{}},"body":{"modules/HraStateModule.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["tissues",{"_index":718,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["tissues(state",{"_index":719,"title":{},"body":{"classes/TissueLibrarySelectors.html":{}}}],["title",{"_index":621,"title":{},"body":{"interfaces/Source.html":{},"miscellaneous/variables.html":{}}}],["token",{"_index":681,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tooltip",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform((id",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformed",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["trigerred",{"_index":697,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["true",{"_index":453,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/MedicalIllustrationState.html":{},"classes/ScreenModeSelectors.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":743,"title":{},"body":{"dependencies.html":{}}}],["tuple([z.string",{"_index":256,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["two",{"_index":140,"title":{},"body":{"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":20,"title":{},"body":{"classes/Add.html":{},"classes/AddEntry.html":{},"classes/CellSummarySelectors.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"injectables/ContactState.html":{},"classes/Download.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/RegisterFormat.html":{},"interfaces/ScreenModeModel.html":{},"classes/ScreenModeSelectors.html":{},"injectables/ScreenModeState.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"interfaces/Source.html":{},"classes/SourceListSelectors.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":777,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":710,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["types",{"_index":227,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["types.ts",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["typescript",{"_index":785,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typings",{"_index":489,"title":{},"body":{"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/state",{"_index":65,"title":{},"body":{"classes/AddEntry.html":{},"classes/ClearEntries.html":{},"classes/ComputeAggregate.html":{},"classes/Download.html":{},"classes/Load.html":{},"classes/LoadReferenceOrgans.html":{},"classes/RegisterFormat.html":{},"classes/SendMessage.html":{},"classes/Set.html":{},"classes/SetActiveNode.html":{},"classes/SetData.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["ui/services",{"_index":299,"title":{},"body":{"injectables/ContactState.html":{},"interfaces/MedicalIllustrationModel.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SendMessage.html":{},"classes/TissueLibrarySelectors.html":{},"injectables/TissueLibraryState.html":{}}}],["undefined",{"_index":289,"title":{},"body":{"injectables/ContactState.html":{},"classes/DownloadSelectors.html":{},"injectables/DownloadState.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unique",{"_index":164,"title":{},"body":{"injectables/CellSummaryState.html":{}}}],["unit",{"_index":761,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":657,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["update",{"_index":601,"title":{},"body":{"classes/Set.html":{}}}],["updates",{"_index":586,"title":{},"body":{"injectables/ScreenModeState.html":{}}}],["uri",{"_index":472,"title":{},"body":{"classes/LoadReferenceOrgans.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{}}}],["url",{"_index":373,"title":{},"body":{"injectables/DownloadState.html":{},"classes/LoadReferenceOrgans.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/MedicalIllustrationSelectors.html":{},"injectables/MedicalIllustrationState.html":{},"classes/SetActiveNode.html":{},"classes/SetMapping.html":{},"classes/SetUri.html":{},"classes/SetUriFromIRI.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":508,"title":{},"body":{"classes/MedicalIllustrationSelectors.html":{}}}],["url(url",{"_index":392,"title":{},"body":{"injectables/DownloadState.html":{}}}],["used",{"_index":320,"title":{},"body":{"injectables/DownloadState.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["useexisting",{"_index":451,"title":{},"body":{"modules/HraStateModule.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":325,"title":{},"body":{"injectables/DownloadState.html":{},"classes/SendMessage.html":{}}}],["uses",{"_index":294,"title":{},"body":{"injectables/ContactState.html":{}}}],["using",{"_index":285,"title":{},"body":{"injectables/ContactState.html":{}}}],["value",{"_index":36,"title":{},"body":{"classes/Add.html":{},"injectables/CellSummaryState.html":{},"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"classes/Set-1.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["value.every(isprimitive",{"_index":712,"title":{},"body":{"injectables/StateAnalyticsPluginService.html":{}}}],["values",{"_index":240,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/typealiases.html":{}}}],["variable",{"_index":302,"title":{},"body":{"injectables/ContactState.html":{}}}],["variables",{"_index":793,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":775,"title":{},"body":{"properties.html":{}}}],["void",{"_index":129,"title":{},"body":{"injectables/CellSummaryState.html":{},"injectables/DownloadState.html":{},"injectables/MedicalIllustrationState.html":{},"injectables/ScreenModeState.html":{},"injectables/SourceListState.html":{},"injectables/StateAnalyticsPluginService.html":{}}}],["whether",{"_index":572,"title":{},"body":{"interfaces/ScreenModeModel.html":{},"classes/Set.html":{},"injectables/StateAnalyticsPluginService.html":{},"miscellaneous/functions.html":{}}}],["window.url.createobjecturl(blob",{"_index":407,"title":{},"body":{"injectables/DownloadState.html":{}}}],["window.url.revokeobjecturl(url",{"_index":415,"title":{},"body":{"injectables/DownloadState.html":{}}}],["without",{"_index":384,"title":{},"body":{"injectables/DownloadState.html":{}}}],["yes",{"_index":610,"title":{},"body":{"classes/SetActiveNode.html":{},"classes/SetUri.html":{}}}],["z",{"_index":234,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":237,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/typealiases.html":{}}}],["z.literal('data",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal('url",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number",{"_index":249,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":257,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.object",{"_index":247,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.record",{"_index":251,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["z.record(download_format_id",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":248,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"miscellaneous/variables.html":{}}}],["z.string().array",{"_index":255,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"interfaces/GradientPoint.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":235,"title":{},"body":{"interfaces/CellSummaryStateModel.html":{},"classes/ComputeAggregate.html":{},"interfaces/GradientPoint.html":{},"interfaces/MedicalIllustrationModel.html":{},"classes/SetData.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":769,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of adding a list of sources to the SourceList state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of Source objects to be added to the state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Add'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:6\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddEntry.html":{"url":"classes/AddEntry.html","title":"class - AddEntry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddEntry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entry into download state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: DownloadFormatId, entry: DownloadEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:23\n                            \n                        \n\n                \n                    \n                            Constructor for Addd Entry\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        DownloadEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CellSummarySelectors.html":{"url":"classes/CellSummarySelectors.html","title":"class - CellSummarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CellSummarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                selectors for the CellSummary state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                aggregates\n                            \n                            \n                                    Static\n                                summaries\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        aggregates\n                        \n                    \n                \n            \n            \n                \n                    \n                    aggregates(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:9\n                \n            \n\n\n            \n                \n                    get the aggregate data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Aggregate\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        summaries\n                        \n                    \n                \n            \n            \n                \n                    \n                    summaries(state: CellSummaryStateModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['CellSummaryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.selectors.ts:15\n                \n            \n\n\n            \n                \n                    get the summaries data from the state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                CellSummaryStateModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         CellSummary\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Aggregate, CellSummaryStateModel, CellSummary } from './cell-summary.model';\nimport { CellSummaryState } from './cell-summary.state';\n\n/** selectors for the CellSummary state */\nexport class CellSummarySelectors {\n  /** get the aggregate data from the state */\n  @Selector([CellSummaryState])\n  static aggregates(state: CellSummaryStateModel): Aggregate {\n    return state.aggregate;\n  }\n\n  /** get the summaries data from the state */\n  @Selector([CellSummaryState])\n  static summaries(state: CellSummaryStateModel): CellSummary {\n    return state.summaries;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CellSummaryState.html":{"url":"injectables/CellSummaryState.html","title":"injectable - CellSummaryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  CellSummaryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling cell summary data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                computeAggregate\n                            \n                            \n                                interpolateColor\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        computeAggregate\n                        \n                    \n                \n            \n            \n                \ncomputeAggregate(ctx: StateContext, action: ComputeAggregate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ComputeAggregate)\n                \n            \n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:20\n                \n            \n\n\n            \n                \n                    computes aggregate data and stores in the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    action\n                                    \n                                                ComputeAggregate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        interpolateColor\n                        \n                    \n                \n            \n            \n                \ninterpolateColor(points: GradientPoint[], percentage: number)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/cell-summary/cell-summary.state.ts:114\n                \n            \n\n\n            \n                \n                    Calculates the interpolated color value at the given percentage between two points in a color gradient.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    points\n                                    \n                                                GradientPoint[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    percentage\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { ComputeAggregate } from './cell-summary.actions';\nimport { Aggregate, AggregateRow, CellSummary, CellSummaryStateModel, GradientPoint } from './cell-summary.model';\n\n/** State handling cell summary data */\n@State({\n  name: 'cellsummary',\n  defaults: {\n    summaries: {},\n    aggregate: {},\n  },\n})\n@Injectable()\nexport class CellSummaryState {\n  /**\n   * computes aggregate data and stores in the current state\n   */\n  @Action(ComputeAggregate)\n  computeAggregate(ctx: StateContext, action: ComputeAggregate): void {\n    const summaries = action.summaries;\n    const aggregateData: Aggregate = {};\n\n    for (const key in summaries) {\n      const label = summaries[key].label;\n      const entries = summaries[key].entries;\n\n      const counts = this.getCellCountMap(entries);\n\n      const [rows, columns] = this.getRowsAndColumns(entries, counts);\n\n      aggregateData[key] = {\n        label: label,\n        columns: columns,\n        rows: rows,\n      };\n    }\n\n    ctx.patchState({\n      aggregate: aggregateData,\n    });\n  }\n\n  /** Gets a count of the number of occurrences of each unique cellId in an array of entries,\n   * and returns an object mapping each cellId to its corresponding count. */\n  private getCellCountMap(entries: CellSummary[string]['entries']): { [key: string]: number } {\n    return entries.reduce>((res, { cell: { id }, count }) => {\n      res[id] = res[id] ? res[id] + count : count;\n      return res;\n    }, {});\n  }\n\n  /** Returns an array of rows and columns based on an array of entries */\n  private getRowsAndColumns(\n    entries: CellSummary[string]['entries'],\n    counts: { [key: string]: number }\n  ): [rows: AggregateRow[], columns: string[]] {\n    const columns: string[] = [];\n    const columnIndices: Record = {};\n    const rows: Record = {};\n\n    for (const entry of entries) {\n      const {\n        cell: { id: rowId, label: rowLabel },\n        biomarker: { id: columnId, label: columnLabel },\n      } = entry;\n\n      if (!(columnId in columnIndices)) {\n        columnIndices[columnId] = columns.length + 2;\n        columns.push(columnLabel);\n      }\n      const columnIndex = columnIndices[columnId];\n\n      if (!(rowId in rows)) {\n        rows[rowId] = [rowLabel, counts[rowId]];\n      }\n      const row = rows[rowId];\n\n      if (row.length  point.percentage >= percentage);\n    const lowPoint = points[index - 1];\n    const highPoint = points[index];\n    const diff = highPoint.percentage - lowPoint.percentage;\n    const finalPercentage = (percentage - lowPoint.percentage) / diff;\n\n    const rgb1 = this.hexToRgb(lowPoint.color);\n    const rgb2 = this.hexToRgb(highPoint.color);\n\n    const r = Math.round(rgb1[0] + (rgb2[0] - rgb1[0]) * finalPercentage);\n    const g = Math.round(rgb1[1] + (rgb2[1] - rgb1[1]) * finalPercentage);\n    const b = Math.round(rgb1[2] + (rgb2[2] - rgb1[2]) * finalPercentage);\n\n    return this.rgbToHex([r, g, b]);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/CellSummaryStateModel.html":{"url":"interfaces/CellSummaryStateModel.html","title":"interface - CellSummaryStateModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  CellSummaryStateModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                The CellSummaryStateModel interface describes the overall shape of the state for this feature.\nIt has two properties, summaries and aggregate, both of which are of their corresponding types.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            aggregate\n                                        \n                                \n                                \n                                        \n                                            summaries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        aggregate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        aggregate:         Aggregate\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Aggregate\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry contains a label and a table of aggregated data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summaries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summaries:         CellSummary\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         CellSummary\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    An object where each entry is an object containing information about a single cell and its corresponding biomarker.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ClearEntries.html":{"url":"classes/ClearEntries.html","title":"class - ClearEntries","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ClearEntries\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear all entries from download state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ComputeAggregate.html":{"url":"classes/ComputeAggregate.html","title":"class - ComputeAggregate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ComputeAggregate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Compute aggregate of the given data and store to state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(summaries: z.infer<>)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        summaries\n                                                  \n                                                        \n                                                                    z.infer<>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe cell summary data to compute aggregate for.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactState.html":{"url":"injectables/ContactState.html","title":"injectable - ContactState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.state.ts\n        \n\n\n            \n                Description\n            \n            \n                A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact'\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(_ctx: StateContext, undefined: SendMessage)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SendMessage)\n                \n            \n\n            \n                \n                    Defined in src/lib/contact/contact.state.ts:16\n                \n            \n\n\n            \n                \n                    An action method for sending a message. It uses SendMessage action class to send messages.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _ctx\n                                    \n                                            StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SendMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { ContactService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Observable } from 'rxjs';\nimport { SendMessage } from './contact.actions';\n\n/** A state, and injectable class ContactState for managing the contact information and sending messages using the ContactService. State name: 'contact' */\n@State({ name: 'contact' })\n@Injectable()\nexport class ContactState {\n  /** A variable to inject the ContactService */\n  private readonly contact = inject(ContactService);\n\n  /** An action method for sending a message. It uses SendMessage action class to send messages. */\n  @Action(SendMessage)\n  sendMessage(_ctx: StateContext, { message }: SendMessage): Observable {\n    return this.contact.sendMessage(message);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Download.html":{"url":"classes/Download.html","title":"class - Download","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Download\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Download file Action\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormatId)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of download.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormatId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/DownloadSelectors.html":{"url":"classes/DownloadSelectors.html","title":"class - DownloadSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  DownloadSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Available format selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                formats\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        formats\n                        \n                    \n                \n            \n            \n                \n                    \n                    formats(state: DownloadModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors available format for download selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                DownloadModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormat[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { DownloadFormat, DownloadModel } from './download.model';\n\n/**\n * Available format selectors\n */\nexport class DownloadSelectors {\n  /**\n   * Selectors available format for download selectors\n   * @param state\n   * @returns\n   */\n  @Selector()\n  static formats(state: DownloadModel): DownloadFormat[] {\n    const { formats, entries } = state;\n    const hasData = (format: DownloadFormat | undefined): format is DownloadFormat =>\n      !!(format && format.id in entries);\n    return Object.values(formats).filter(hasData);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DownloadState.html":{"url":"injectables/DownloadState.html","title":"injectable - DownloadState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DownloadState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.state.ts\n        \n\n\n            \n                Description\n            \n            \n                Download State Model used to convert\nfile from SVG file content to different\nformat and download to user.\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addEntry\n                            \n                            \n                                clearEntries\n                            \n                            \n                                download\n                            \n                            \n                                ngxsOnInit\n                            \n                            \n                                registerFormat\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addEntry\n                        \n                    \n                \n            \n            \n                \naddEntry(ctx: DownloadContext, undefined: AddEntry)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddEntry)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:58\n                \n            \n\n\n            \n                \n                    Add entry into download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                AddEntry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        clearEntries\n                        \n                    \n                \n            \n            \n                \nclearEntries(ctx: DownloadContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(ClearEntries)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:71\n                \n            \n\n\n            \n                \n                    Clear entires from download state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        download\n                        \n                    \n                \n            \n            \n                \ndownload(ctx: DownloadContext, undefined: Download)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Download)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:85\n                \n            \n\n\n            \n                \n                    Actions download file in specified format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Download\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ngxsOnInit\n                        \n                    \n                \n            \n            \n                \nngxsOnInit(ctx: DownloadContext)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/download/download.state.ts:34\n                \n            \n\n\n            \n                \n                    Ngxs on init and registry default format\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerFormat\n                        \n                    \n                \n            \n            \n                \nregisterFormat(ctx: DownloadContext, undefined: RegisterFormat)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(RegisterFormat)\n                \n            \n\n            \n                \n                    Defined in src/lib/download/download.state.ts:44\n                \n            \n\n\n            \n                \n                    Actions register format in Download State\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                DownloadContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                RegisterFormat\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, NgxsOnInit, State } from '@ngxs/store';\nimport produce from 'immer';\nimport { Observable, tap } from 'rxjs';\n\nimport { PNG_FORMAT, SVG_FORMAT } from './builtin-formats';\nimport { AddEntry, ClearEntries, Download, RegisterFormat } from './download.action';\nimport { DownloadContext, DownloadFormatId, DownloadModel } from './download.model';\n\n/**\n * Download State Model used to convert\n * file from SVG file content to different\n * format and download to user.\n */\n@State({\n  name: 'download',\n  defaults: {\n    formats: {},\n    entries: {},\n  },\n})\n@Injectable()\nexport class DownloadState implements NgxsOnInit {\n  /**\n   * Http object inject for download state\n   */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Ngxs on init and registry default format\n   * @param ctx\n   */\n  ngxsOnInit(ctx: DownloadContext): void {\n    ctx.dispatch([new RegisterFormat(SVG_FORMAT), new RegisterFormat(PNG_FORMAT)]);\n  }\n\n  /**\n   * Actions register format in Download State\n   * @param ctx\n   * @param { format }\n   */\n  @Action(RegisterFormat)\n  registerFormat(ctx: DownloadContext, { format }: RegisterFormat): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.formats[format.id] = format;\n      })\n    );\n  }\n\n  /**\n   * Add entry into download state\n   * @param ctx\n   * @param { id, entry }\n   */\n  @Action(AddEntry)\n  addEntry(ctx: DownloadContext, { id, entry }: AddEntry): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries[id] = entry;\n      })\n    );\n  }\n\n  /**\n   * Clear entires from download state\n   * @param ctx\n   */\n  @Action(ClearEntries)\n  clearEntries(ctx: DownloadContext): void {\n    ctx.setState(\n      produce((draft) => {\n        draft.entries = {};\n      })\n    );\n  }\n\n  /**\n   * Actions download file in specified format\n   * @param ctx\n   * @param action\n   */\n  @Action(Download)\n  download(ctx: DownloadContext, { format }: Download): Observable | void {\n    const { entries } = ctx.getState();\n    const entry = entries[format];\n    switch (entry?.type) {\n      case 'url': {\n        const filename = this.guessFilename(ctx, format, entry.url);\n        return this.downloadRemoteData(entry.url).pipe(tap((data) => this.downloadData(data, filename)));\n      }\n\n      case 'data': {\n        const filename = this.guessFilename(ctx, format, '');\n        this.downloadData(new Blob([entry.data]), filename);\n        break;\n      }\n\n      default:\n        throw new Error('Cannot download file without data');\n    }\n  }\n\n  /**\n   * Guess filename\n   * @param ctx\n   * @param id\n   * @param url\n   * @returns filename\n   */\n  private guessFilename(ctx: DownloadContext, id: DownloadFormatId, url: string): string {\n    const { formats } = ctx.getState();\n    const { extension = '' } = formats[id] ?? {};\n    const fakeBase = 'https://base.com';\n    const path = new URL(url, fakeBase).pathname;\n    const segments = path.split('/').filter((seg) => seg !== '');\n    const name = segments.length > 0 ? segments[segments.length - 1] : 'download';\n    const guess = name.includes('.') ? name : `${name}${extension}`;\n\n    return guess;\n  }\n\n  /**\n   * Download converted formatted file to browser\n   * @param blob\n   * @param fileName\n   */\n  private downloadData(blob: Blob, filename: string) {\n    const url = window.URL.createObjectURL(blob);\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n    anchor.download = filename;\n    anchor.href = url;\n    anchor.click();\n    anchor.remove();\n    window.URL.revokeObjectURL(url);\n  }\n\n  /**\n   * Downloads and save -  method is used to direct fetch file\n   * if available on url without conversion\n   * @param fileUrl\n   * @param fileName\n   */\n  private downloadRemoteData(url: string): Observable {\n    return this.http.get(url, { responseType: 'blob' });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GradientPoint.html":{"url":"interfaces/GradientPoint.html","title":"interface - GradientPoint","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GradientPoint\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.model.ts\n        \n\n\n            \n                Description\n            \n            \n                An interface of gradient colors along with their percentages for the gradient bar.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            color\n                                        \n                                \n                                \n                                        \n                                            percentage\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Gradient color at a specific percentage\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        percentage\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        percentage:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Percentage point along the gradient bar\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { z } from 'zod';\n\n/** Type representing a single cell value */\nexport type Cell = z.infer;\n/** Type representing CELL_SUMMARY_SCHEMA which has labels and entries */\nexport type CellSummary = z.infer;\n/** Type representing an aggregate summary of cell values in a group */\nexport type Aggregate = z.infer;\n/** Type representing a row in an aggregate summary */\nexport type AggregateRow = Aggregate[string]['rows'][number];\n/** Type representing a single entry in a row with cell, biomarker, count and percentage */\nexport type AggregateRowEntry = AggregateRow[2];\n\n/**\n * The CellSummaryStateModel interface describes the overall shape of the state for this feature.\n * It has two properties, summaries and aggregate, both of which are of their corresponding types.\n */\nexport interface CellSummaryStateModel {\n  /** An object where each entry is an object containing information about a single cell and its corresponding biomarker. */\n  summaries: CellSummary;\n  /** An object where each entry contains a label and a table of aggregated data */\n  aggregate: Aggregate;\n}\n\n/**\n * The CELL_SCHEMA has an object that contains an id and a label for the cell,\n * another object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n */\nexport const CELL_SCHEMA = z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n});\n\n/**\n * The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\n * where each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n */\nexport const CELL_SUMMARY_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n);\n\n/**\n * The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\n * an array of columns that are strings, and an array of rows that are AggregateRow objects.\n */\nexport const CELL_SUMMARY_AGGREGATE_SCHEMA = z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n);\n\n/** An interface of gradient colors along with their percentages for the gradient bar. */\nexport interface GradientPoint {\n  /** Gradient color at a specific percentage */\n  color: string;\n  /** Percentage point along the gradient bar */\n  percentage: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HraStateModule.html":{"url":"modules/HraStateModule.html","title":"module - HraStateModule","body":"\n                   \n\n\n\n\n    Modules\n    HraStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/state.module.ts\n        \n\n\n\n        \n            Description\n        \n        \n            Provides all states\n\n        \n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule, NGXS_PLUGINS } from '@ngxs/store';\nimport { CellSummaryState } from './cell-summary';\nimport { ContactState } from './contact';\nimport { DownloadState } from './download';\nimport { MedicalIllustrationState } from './medical-illustration';\nimport { ScreenModeState } from './screen-mode';\nimport { SourceListState } from './source-list';\nimport { StateAnalyticsPluginService } from './state-analytics-plugin';\nimport { TissueLibraryState } from './tissue-library';\n\n/** Provides all states */\n@NgModule({\n  imports: [\n    NgxsModule.forFeature([\n      CellSummaryState,\n      ContactState,\n      DownloadState,\n      MedicalIllustrationState,\n      ScreenModeState,\n      SourceListState,\n      TissueLibraryState,\n    ]),\n  ],\n  providers: [\n    {\n      provide: NGXS_PLUGINS,\n      useExisting: StateAnalyticsPluginService,\n      multi: true,\n    },\n  ],\n})\nexport class HraStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Load.html":{"url":"classes/Load.html","title":"class - Load","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Load\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                action of loading tissue data into the TissueLibrary state\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** action of loading tissue data into the TissueLibrary state */\nexport class Load extends Action('[TissueLibrary] Load Tissue Data') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadReferenceOrgans.html":{"url":"classes/LoadReferenceOrgans.html","title":"class - LoadReferenceOrgans","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadReferenceOrgans\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Loads reference organ data\n\n            \n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/MedicalIllustrationModel.html":{"url":"interfaces/MedicalIllustrationModel.html","title":"interface - MedicalIllustrationModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  MedicalIllustrationModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Interface for medical illustration model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            mapping\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            node\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            referenceOrgans\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            url\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        mapping\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mapping:         MapEntry[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Mapping info\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:         MapEntry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         MapEntry\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Current selected node\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        referenceOrgans\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        referenceOrgans:     ReferenceOrgan[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     ReferenceOrgan[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    reference organs\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        url\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        url:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Illustration URL\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ReferenceOrgan } from '@hra-ui/services';\nimport { z } from 'zod';\n\n/** Map Entry typings */\nconst mapEntry = z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n});\n\nexport type MapEntry = z.infer;\n\n/** Interface for medical illustration model */\nexport interface MedicalIllustrationModel {\n  /** Illustration URL */\n  url?: string;\n  /** Current selected node */\n  node?: MapEntry;\n  /** Mapping info */\n  mapping?: MapEntry[];\n  /** reference organs */\n  referenceOrgans?: ReferenceOrgan[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MedicalIllustrationSelectors.html":{"url":"classes/MedicalIllustrationSelectors.html","title":"class - MedicalIllustrationSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MedicalIllustrationSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for medical illustration\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                mapping\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        mapping\n                        \n                    \n                \n            \n            \n                \n                    \n                    mapping(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:22\n                \n            \n\n\n            \n                \n                    Returns current mapping file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         MapEntry[]\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: MedicalIllustrationModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['MedicalIllustrationState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Returns illustration url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                MedicalIllustrationModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\n\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\nimport { MedicalIllustrationState } from './medical-illustration.state';\n\n/**\n * Selectors for medical illustration\n */\nexport class MedicalIllustrationSelectors {\n  /**\n   * Returns illustration url\n   */\n  @Selector([MedicalIllustrationState])\n  static url(state: MedicalIllustrationModel): string | undefined {\n    return state.url;\n  }\n\n  /**\n   * Returns current mapping file\n   */\n  @Selector([MedicalIllustrationState])\n  static mapping(state: MedicalIllustrationModel): MapEntry[] {\n    return state.mapping ?? [];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MedicalIllustrationState.html":{"url":"injectables/MedicalIllustrationState.html","title":"injectable - MedicalIllustrationState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MedicalIllustrationState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling medical illustrations\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                loadReferenceOrgans\n                            \n                            \n                                setActiveNode\n                            \n                            \n                                setMapping\n                            \n                            \n                                setUri\n                            \n                            \n                                setUriFromIRI\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        loadReferenceOrgans\n                        \n                    \n                \n            \n            \n                \nloadReferenceOrgans(undefined: MedicalIllustrationContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadReferenceOrgans)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:75\n                \n            \n\n\n            \n                \n                    Loads reference organs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setActiveNode\n                        \n                    \n                \n            \n            \n                \nsetActiveNode(undefined: MedicalIllustrationContext, undefined: SetActiveNode)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetActiveNode)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:56\n                \n            \n\n\n            \n                \n                    Sets active node\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetActiveNode\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setMapping\n                        \n                    \n                \n            \n            \n                \nsetMapping(undefined: MedicalIllustrationContext, undefined: SetMapping)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetMapping, {cancelUncompleted: true})\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:64\n                \n            \n\n\n            \n                \n                    Parses and sets mapping info\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetMapping\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUri\n                        \n                    \n                \n            \n            \n                \nsetUri(undefined: MedicalIllustrationContext, undefined: SetUri)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUri)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:33\n                \n            \n\n\n            \n                \n                    Sets illustration URI\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUri\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setUriFromIRI\n                        \n                    \n                \n            \n            \n                \nsetUriFromIRI(undefined: MedicalIllustrationContext, undefined: SetUriFromIRI)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(SetUriFromIRI)\n                \n            \n\n            \n                \n                    Defined in src/lib/medical-illustration/medical-illustration.state.ts:43\n                \n            \n\n\n            \n                \n                    Sets uri by finding it from reference organs\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                MedicalIllustrationContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                SetUriFromIRI\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { TissueFtuService } from '@hra-ui/services';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { parse } from 'papaparse';\nimport { Observable, tap } from 'rxjs';\nimport { LoadReferenceOrgans, SetActiveNode, SetMapping, SetUri, SetUriFromIRI } from './medical-illustration.actions';\nimport { MapEntry, MedicalIllustrationModel } from './medical-illustration.model';\n\nexport type MedicalIllustrationContext = StateContext;\n\n/**\n * State handling medical illustrations\n */\n@State({\n  name: 'medicalIllustration',\n  defaults: {},\n})\n@Injectable()\nexport class MedicalIllustrationState {\n  /**\n   * Http client\n   */\n  private readonly http = inject(HttpClient);\n\n  /** Ftu service */\n  private readonly ftuService = inject(TissueFtuService);\n\n  /**\n   * Sets illustration URI\n   */\n  @Action(SetUri)\n  setUri({ patchState }: MedicalIllustrationContext, { url }: SetUri): void {\n    patchState({ url: url, node: undefined });\n  }\n\n  /**\n   * Sets uri by finding it from reference organs\n   * @param param0 state context\n   * @param param1 Action object with iri\n   */\n  @Action(SetUriFromIRI)\n  setUriFromIRI({ patchState, getState }: MedicalIllustrationContext, { iri }: SetUriFromIRI): void {\n    const referenceOrgans = getState().referenceOrgans;\n    const ref = referenceOrgans?.find((ref) => ref.representation_of === iri);\n    if (ref === undefined) {\n      throw new Error('Reference organ with match iri not found');\n    }\n    patchState({ url: ref.object.file });\n  }\n\n  /**\n   * Sets active node\n   */\n  @Action(SetActiveNode)\n  setActiveNode({ patchState }: MedicalIllustrationContext, { node }: SetActiveNode): void {\n    patchState({ node });\n  }\n\n  /**\n   * Parses and sets mapping info\n   */\n  @Action(SetMapping, { cancelUncompleted: true })\n  setMapping({ patchState }: MedicalIllustrationContext, { url }: SetMapping): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      tap((result) => {\n        const parsedResult = parse(result, { header: true }).data;\n        patchState({ mapping: parsedResult });\n      })\n    );\n  }\n\n  /** Loads reference organs */\n  @Action(LoadReferenceOrgans)\n  loadReferenceOrgans({ patchState }: MedicalIllustrationContext): Observable {\n    return this.ftuService.getReferenceOrgans().pipe(tap((referenceOrgans) => patchState({ referenceOrgans })));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RegisterFormat.html":{"url":"classes/RegisterFormat.html","title":"class - RegisterFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RegisterFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/download/download.action.ts\n        \n\n\n            \n                Description\n            \n            \n                Register format into state\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(format: DownloadFormat)\n                    \n                \n                        \n                            \n                                Defined in src/lib/download/download.action.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of register format.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        format\n                                                  \n                                                        \n                                                                        DownloadFormat\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { DownloadEntry, DownloadFormat, DownloadFormatId } from './download.model';\n\n/**Action Group for Download Action */\nconst Action = ActionGroup('Download');\n\n/**\n * Register format into state\n */\nexport class RegisterFormat extends Action('Register Format') {\n  /**\n   * Creates an instance of register format.\n   * @param format\n   */\n  constructor(readonly format: DownloadFormat) {\n    super();\n  }\n}\n\n/**\n * Add entry into download state\n */\nexport class AddEntry extends Action('Add') {\n  /** Constructor for Addd Entry */\n  constructor(readonly id: DownloadFormatId, readonly entry: DownloadEntry) {\n    super();\n  }\n}\n\n/**\n * Clear all entries from download state\n */\nexport class ClearEntries extends Action('Clear') {}\n\n/**\n * Download file Action\n */\nexport class Download extends Action('Download') {\n  /**\n   * Creates an instance of download.\n   * @param selectedFormat\n   */\n  constructor(readonly format: DownloadFormatId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ScreenModeModel.html":{"url":"interfaces/ScreenModeModel.html","title":"interface - ScreenModeModel","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ScreenModeModel\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.model.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode state model\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            isFullScreen\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        isFullScreen\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isFullScreen:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Whether in fullscreen\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export interface ScreenModeModel {\n  /** Whether in fullscreen */\n  isFullScreen: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScreenModeSelectors.html":{"url":"classes/ScreenModeSelectors.html","title":"class - ScreenModeSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScreenModeSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Screen mode selectors\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                isFullScreen\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        isFullScreen\n                        \n                    \n                \n            \n            \n                \n                    \n                    isFullScreen(state: ScreenModeModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector()\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Selectors screen mode selectors\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ScreenModeModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true if full screen\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/**\n * Screen mode selectors\n */\nexport class ScreenModeSelectors {\n  /**\n   * Selectors screen mode selectors\n   * @param state\n   * @returns true if full screen\n   */\n  @Selector()\n  static isFullScreen(state: ScreenModeModel): boolean {\n    return state.isFullScreen;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ScreenModeState.html":{"url":"injectables/ScreenModeState.html","title":"injectable - ScreenModeState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ScreenModeState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State storing the screen mode\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/screen-mode/screen-mode.state.ts:22\n                \n            \n\n\n            \n                \n                    Updates the screen mode\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                StateContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport produce from 'immer';\nimport { Set } from './screen-mode.actions';\nimport { ScreenModeModel } from './screen-mode.model';\n\n/** State storing the screen mode */\n@State({\n  name: 'screenmode',\n  defaults: {\n    isFullScreen: false,\n  },\n})\n@Injectable()\nexport class ScreenModeState {\n  /**\n   * Updates the screen mode\n   * @param ctx State context\n   * @param action Action with new mode\n   */\n  @Action(Set)\n  set({ setState }: StateContext, { isFullScreen }: Set): void {\n    setState(\n      produce((draft: ScreenModeModel) => {\n        draft.isFullScreen = isFullScreen;\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SendMessage.html":{"url":"classes/SendMessage.html","title":"class - SendMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SendMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                A class which sends individual messages submitted by user.\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(message: ContactMessage)\n                    \n                \n                        \n                            \n                                Defined in src/lib/contact/contact.actions.ts:5\n                            \n                        \n\n                \n                    \n                            A constructor which initializes the message of type ContactMessage interface.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        message\n                                                  \n                                                        \n                                                                    ContactMessage\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\nimport { ContactMessage } from '@hra-ui/services';\n\n/** A class which sends individual messages submitted by user. */\nexport class SendMessage extends Action('[Contact] Send Message') {\n  /** A constructor which initializes the message of type ContactMessage interface. */\n  constructor(readonly message: ContactMessage) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/screen-mode/screen-mode.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Update the screen mode\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(isFullScreen: boolean)\n                    \n                \n                        \n                            \n                                Defined in src/lib/screen-mode/screen-mode.actions.ts:4\n                            \n                        \n\n                \n                    \n                            Creates an instance of Set\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        isFullScreen\n                                                  \n                                                        \n                                                                        boolean\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Whether the mode is fullscreen\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Action } from '@hra-ui/cdk/state';\n\n/** Update the screen mode */\nexport class Set extends Action('[Screenmode] Set Screenmode') {\n  /**\n   * Creates an instance of Set\n   * @param isFullScreen Whether the mode is fullscreen\n   */\n  constructor(readonly isFullScreen: boolean) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                An action that removes all current sources and adds new ones, effectively resetting the state\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Public\n                                sourceList\n                            \n                            \n                                    Static\n                                    Readonly\n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(sourceList: Source[])\n                    \n                \n                        \n                            \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                            \n                        \n\n                \n                    \n                            Initializes the payload for the action\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        sourceList\n                                                  \n                                                        \n                                                                        Source[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                array of source objects to be set as the new state\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        sourceList\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Source[]\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:22\n                        \n                    \n\n            \n                \n                    array of source objects to be set as the new state\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : '[SourceList] Set'\n                    \n                \n                    \n                        \n                                Defined in src/lib/source-list/source-list.actions.ts:17\n                        \n                    \n\n            \n                \n                    Action Type\n\n                \n            \n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Source } from './source-list.model';\n\n/** action of adding a list of sources to the SourceList state */\nexport class Add {\n  /** Action Type  */\n  static readonly type = '[SourceList] Add';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of Source objects to be added to the state\n   */\n  constructor(readonly sourceList: Source[]) {}\n}\n\n/** An action that removes all current sources and adds new ones, effectively resetting the state */\nexport class Set {\n  /** Action Type  */\n  static readonly type = '[SourceList] Set';\n  /**\n   * Initializes the payload for the action\n   * @param sourceList array of source objects to be set as the new state\n   */\n  constructor(public sourceList: Source[]) {}\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetActiveNode.html":{"url":"classes/SetActiveNode.html","title":"class - SetActiveNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetActiveNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current active node\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(node?: MapEntry)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:36\n                            \n                        \n\n                \n                    \n                            Creates an instance of set active node.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        node\n                                                  \n                                                        \n                                                                        MapEntry\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetData.html":{"url":"classes/SetData.html","title":"class - SetData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/cell-summary/cell-summary.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Set data to store\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: object)\n                    \n                \n                        \n                            \n                                Defined in src/lib/cell-summary/cell-summary.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Defines the SetData action, which sets data to the store.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                        object\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \nThe data to set to the store.\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { z } from 'zod';\nimport { CELL_SUMMARY_SCHEMA } from './cell-summary.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Set data to store */\nexport class SetData extends Action('SetData') {\n  /**\n   * Defines the SetData action, which sets data to the store.\n   * @param data - The data to set to the store.\n   */\n  constructor(readonly data: object) {\n    super();\n  }\n}\n\n/** Compute aggregate of the given data and store to state */\nexport class ComputeAggregate extends Action('ComputeAggregate') {\n  /**\n   * Defines the ComputeAggregate action, which computes aggregate data for the given summaries.\n   * @param summaries - The cell summary data to compute aggregate for.\n   */\n  constructor(readonly summaries: z.infer) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetMapping.html":{"url":"classes/SetMapping.html","title":"class - SetMapping","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetMapping\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the mapping file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:49\n                            \n                        \n\n                \n                    \n                            Creates an instance of set mapping.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUri.html":{"url":"classes/SetUri.html","title":"class - SetUri","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUri\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url?: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:10\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SetUriFromIRI.html":{"url":"classes/SetUriFromIRI.html","title":"class - SetUriFromIRI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SetUriFromIRI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/medical-illustration/medical-illustration.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Action for setting the current illustration URI from IRI\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(iri: string)\n                    \n                \n                        \n                            \n                                Defined in src/lib/medical-illustration/medical-illustration.actions.ts:23\n                            \n                        \n\n                \n                    \n                            Creates an instance of set uri from iri.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        iri\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { MapEntry } from './medical-illustration.model';\n\n/** Action base */\nconst Action = ActionGroup('Medical Illustration');\n\n/**\n * Action for setting the current illustration URI\n */\nexport class SetUri extends Action('Set URI') {\n  /**\n   * Creates an instance of set uri.\n   * @param [url]\n   */\n  constructor(readonly url?: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current illustration URI from IRI\n */\nexport class SetUriFromIRI extends Action('Set URI From IRI') {\n  /**\n   * Creates an instance of set uri from iri.\n   * @param [url]\n   */\n  constructor(readonly iri: string) {\n    super();\n  }\n}\n\n/**\n * Action for setting the current active node\n */\nexport class SetActiveNode extends Action('Set Active Node') {\n  /**\n   * Creates an instance of set active node.\n   * @param [node]\n   */\n  constructor(readonly node?: MapEntry) {\n    super();\n  }\n}\n\n/**\n * Action for setting the mapping file\n */\nexport class SetMapping extends Action('Set Mapping') {\n  /**\n   * Creates an instance of set mapping.\n   * @param url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Loads reference organ data */\nexport class LoadReferenceOrgans extends Action('Load Reference Organs') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Source.html":{"url":"interfaces/Source.html","title":"interface - Source","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Source\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.model.ts\n        \n\n\n            \n                Description\n            \n            \n                structure of a source object\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            link\n                                        \n                                \n                                \n                                        \n                                            title\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Link property of the source object\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        title\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        title:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Title property of the source object\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { StateContext } from '@ngxs/store';\n\n/** structure of a source object */\nexport interface Source {\n  /** Title property of the source object  */\n  title: string;\n  /** Link property of the source object */\n  link: string;\n}\n\n/** Type alias for the array of source objects */\nexport type SourceListModel = Source[];\n\n/** Helper alias for action handler's ctx argument */\nexport type SourceListContext = StateContext;\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SourceListSelectors.html":{"url":"classes/SourceListSelectors.html","title":"class - SourceListSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SourceListSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retrieving data from the SourceListState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                getSourceList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getSourceList\n                        \n                    \n                \n            \n            \n                \n                    \n                    getSourceList(state: SourceListModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['SourceListState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.selectors.ts:13\n                \n            \n\n\n            \n                \n                    Gets the array of data sources from the SourceList object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                SourceListModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The current state of the SourceListState\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Source[]\n\n                    \n                    \n                        array of source objects\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { Source, SourceListModel } from './source-list.model';\nimport { SourceListState } from './source-list.state';\n\n/** Selector class for retrieving data from the SourceListState */\nexport class SourceListSelectors {\n  /**\n   * Gets the array of data sources from the SourceList object.\n   * @param state The current state of the SourceListState\n   * @returns array of source objects\n   */\n  @Selector([SourceListState])\n  static getSourceList(state: SourceListModel): Source[] {\n    return state;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/SourceListState.html":{"url":"injectables/SourceListState.html","title":"injectable - SourceListState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  SourceListState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/source-list/source-list.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling source list data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                add\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        add\n                        \n                    \n                \n            \n            \n                \nadd(undefined: SourceListContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:20\n                \n            \n\n\n            \n                \n                    adds a list of sources to the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(undefined: SourceListContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in src/lib/source-list/source-list.state.ts:34\n                \n            \n\n\n            \n                \n                    Removes all current sources and adds new ones, effectively resetting the state.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SourceListContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { produce } from 'immer';\nimport { Add, Set } from './source-list.actions';\nimport { SourceListContext, SourceListModel } from './source-list.model';\n\n/** State handling source list data */\n@State({\n  name: 'sourceList',\n  defaults: [],\n})\n@Injectable()\nexport class SourceListState {\n  /**\n   * adds a list of sources to the current state\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be added to the state\n   */\n  @Action(Add)\n  add({ setState }: SourceListContext, { sourceList }: Add) {\n    setState(\n      produce((draft) => {\n        draft.push(...sourceList);\n      })\n    );\n  }\n\n  /**\n   * Removes all current sources and adds new ones, effectively resetting the state.\n   * @param ctx The state context instance\n   * @param sourceList The payload which is an array of source objects to be set as the new state\n   */\n  @Action(Set)\n  set({ setState }: SourceListContext, { sourceList }: Set) {\n    setState(sourceList);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StateAnalyticsPluginService.html":{"url":"injectables/StateAnalyticsPluginService.html","title":"injectable - StateAnalyticsPluginService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StateAnalyticsPluginService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Google Analytics Plugin Injectable\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                handle\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        handle\n                        \n                    \n                \n            \n            \n                \nhandle(state, action, next: NgxsNextPluginFn)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/state-analytics-plugin/state-analytics-plugin.service.ts:51\n                \n            \n\n\n            \n                \n                    Handles logger plugin\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent state of the store with type unknown.\n\n\n                                    \n                                \n                                \n                                    action\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nCurrent action being dispatched with type unknown type.\n\n\n                                    \n                                \n                                \n                                    next\n                                    \n                                            NgxsNextPluginFn\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nnext plugin to handle the action\n\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \nnext plugin with the current state and action.\n\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable, InjectionToken, Provider } from '@angular/core';\nimport { getActionTypeFromInstance, NgxsNextPluginFn, NgxsPlugin, NGXS_PLUGINS } from '@ngxs/store';\nimport { GoogleAnalyticsService } from 'ngx-google-analytics';\nimport { DEFAULT_LOGGABLE_ACTIONS } from './default-loggable-actions';\n\n/** Primitive types */\nconst PRIMITIVE_TYPES = ['bigint', 'boolean', 'number', 'string'];\n\n/**\n * Determines whether primitive is\n * @param value is string - used to check the input value from serialize funtion\n * @returns type of value - boolean/number/string/null/bigint/undefined\n */\nfunction isPrimitive(value: unknown): value is bigint | boolean | number | string | null | undefined {\n  return value == null || PRIMITIVE_TYPES.includes(typeof value);\n}\n\n/**\n * Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n */\nexport const LOGGABLE_ACTIONS = new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n});\n\n/**\n * Google Analytics Plugin Injectable\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class StateAnalyticsPluginService implements NgxsPlugin {\n  /**\n   * Injects the service for state analytics plugin.\n   */\n  private readonly ga = inject(GoogleAnalyticsService);\n\n  /**\n   * Plugin service for logging state analytics\n   * Setting loggable action types from LOGGABLE_ACTIONS dependency.\n   */\n  private readonly loggableTypes = new Set(inject(LOGGABLE_ACTIONS).map(getActionTypeFromInstance));\n\n  /**\n   * Handles logger plugin\n   * @param state -  Current state of the store with type unknown.\n   * @param action - Current action being dispatched with type unknown type.\n   * @param next - next plugin to handle the action\n   * @returns - next plugin with the current state and action.\n   */\n  handle(state: unknown, action: unknown, next: NgxsNextPluginFn) {\n    this.logAction(action);\n    return next(state, action);\n  }\n\n  /**\n   * Logs action trigerred to google analytics event\n   * @param action - Current action being dispatched with type unknown type.\n   * @returns void\n   */\n  private logAction(action: unknown): void {\n    const type = getActionTypeFromInstance(action);\n    if (type && this.loggableTypes.has(type)) {\n      const payload = JSON.stringify(action, this.serialize);\n      this.ga.event(type, 'action_log', payload);\n    }\n  }\n\n  /**\n   * Serializes action data\n   * @param key - key with type unknown that needs to be serialized\n   * @param value - value with type unknown that needs to be serialized\n   * @returns serialized value\n   */\n  private serialize(this: void, key: unknown, value: unknown): unknown {\n    if (key === '' && typeof value === 'object') {\n      return { ...value, type: undefined };\n    } else if (isPrimitive(value) || (Array.isArray(value) && value.every(isPrimitive))) {\n      return value;\n    }\n\n    return undefined;\n  }\n}\n\n/**\n * State Login Provider\n */\nexport const STATE_LOGGER_PROVIDER: Provider = {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n};\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TissueLibrarySelectors.html":{"url":"classes/TissueLibrarySelectors.html","title":"class - TissueLibrarySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TissueLibrarySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selector class for retreiving data from the TissueLibraryState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                tissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        tissues\n                        \n                    \n                \n            \n            \n                \n                    \n                    tissues(state: TissueLibraryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['TissueLibraryState'])\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.selectors.ts:14\n                \n            \n\n\n            \n                \n                    Gets the tissue data from the TissueLibrary object.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TissueLibraryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        the current state of the TissueLibraryState.\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Record\n\n                    \n                    \n                        node data of the type of TisseData.\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Iri, TissueItem } from '@hra-ui/services';\nimport { Selector } from '@ngxs/store';\nimport { TissueLibraryModel } from './tissue-library.model';\nimport { TissueLibraryState } from './tissue-library.state';\n\n/** Selector class for retreiving data from the TissueLibraryState */\nexport class TissueLibrarySelectors {\n  /**\n   * Gets the tissue data from the TissueLibrary object.\n   * @param state the current state of the TissueLibraryState.\n   * @returns node data of the type of TisseData.\n   */\n  @Selector([TissueLibraryState])\n  static tissues(state: TissueLibraryModel): Record {\n    return state.nodes as Record;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryState.html":{"url":"injectables/TissueLibraryState.html","title":"injectable - TissueLibraryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State handling tissue data\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                setActive\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        setActive\n                        \n                    \n                \n            \n            \n                \nsetActive(ctx: TissueLibraryContext)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Load)\n                \n            \n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.state.ts:22\n                \n            \n\n\n            \n                \n                    Loads the tissue data into the current state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                TissueLibraryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The state context instance\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable<>\n\n                    \n                    \n                        data The tissue data to be added to the state\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { inject, Injectable } from '@angular/core';\nimport { TissueLibraryService } from '@hra-ui/services';\nimport { Action, State } from '@ngxs/store';\nimport { Observable, tap } from 'rxjs';\nimport { Load } from './tissue-library.actions';\nimport { TissueLibraryContext, TissueLibraryModel } from './tissue-library.model';\n\n/** State handling tissue data*/\n@State({\n  name: 'tissueLibrary',\n})\n@Injectable()\nexport class TissueLibraryState {\n  /** injects the TissueLibraryService into a private readonly property */\n  private readonly dataService = inject(TissueLibraryService);\n  /**\n   * Loads the tissue data into the current state\n   * @param ctx The state context instance\n   * @returns data The tissue data to be added to the state\n   */\n  @Action(Load)\n  setActive(ctx: TissueLibraryContext): Observable {\n    return this.dataService.getTissues().pipe(tap((data) => ctx.setState(data)));\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            createDownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            isPrimitive   (src/.../state-analytics-plugin.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createDownloadFormatId\n                        \n                    \n                \n            \n            \n                \ncreateDownloadFormatId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates download format id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DownloadFormatId\n\n                    \n                    \n                        download format id\n\n                    \n                \n            \n        \n    \n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isPrimitive\n                        \n                    \n                \n            \n            \n                \nisPrimitive(value)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether primitive is\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        is string - used to check the input value from serialize funtion\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :      | boolean | number | string | null | undefined\n\n                    \n                    \n                        type of value - boolean/number/string/null/bigint/undefined\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nstate\nThis library was generated with Nx.\nRunning unit tests\nRun nx test state to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        HraStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    8 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    22 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Aggregate   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRow   (src/.../cell-summary.model.ts)\n                        \n                        \n                            AggregateRowEntry   (src/.../cell-summary.model.ts)\n                        \n                        \n                            Cell   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CellSummary   (src/.../cell-summary.model.ts)\n                        \n                        \n                            DownloadContext   (src/.../download.model.ts)\n                        \n                        \n                            DownloadEntry   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormat   (src/.../download.model.ts)\n                        \n                        \n                            DownloadFormatId   (src/.../download.model.ts)\n                        \n                        \n                            DownloadModel   (src/.../download.model.ts)\n                        \n                        \n                            MapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            MedicalIllustrationContext   (src/.../medical-illustration.state.ts)\n                        \n                        \n                            SourceListContext   (src/.../source-list.model.ts)\n                        \n                        \n                            SourceListModel   (src/.../source-list.model.ts)\n                        \n                        \n                            TissueLibraryContext   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TissueLibraryModel   (src/.../tissue-library.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n    \n        \n            \n                \n                    \n                    Aggregate\n                \n            \n            \n                \n                    Type representing an aggregate summary of cell values in a group\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRow\n                \n            \n            \n                \n                    Type representing a row in an aggregate summary\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    AggregateRowEntry\n                \n            \n            \n                \n                    Type representing a single entry in a row with cell, biomarker, count and percentage\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cell\n                \n            \n            \n                \n                    Type representing a single cell value\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummary\n                \n            \n            \n                \n                    Type representing CELL_SUMMARY_SCHEMA which has labels and entries\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/download/download.model.ts\n    \n    \n        \n            \n                \n                    \n                    DownloadContext\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadContext,\nwhich is a state context for the DownloadModel type\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadEntry\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadEntry,\nwhich is inferred from the type of the DOWNLOAD_ENTRY constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormat\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormat,\nwhich is inferred from the type of the DOWNLOAD_FORMAT constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadFormatId\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadFormatId,\nwhich is inferred from the type of the DOWNLOAD_FORMAT_ID constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DownloadModel\n                \n            \n            \n                \n                    Define a TypeScript type called DownloadModel,\nwhich is inferred from the type of the DOWNLOAD_MODEL constant\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n    \n        \n            \n                \n                    \n                    MapEntry\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/medical-illustration/medical-illustration.state.ts\n    \n    \n        \n            \n                \n                    \n                    MedicalIllustrationContext\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    src/lib/source-list/source-list.model.ts\n    \n    \n        \n            \n                \n                    \n                    SourceListContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SourceListModel\n                \n            \n            \n                \n                    Type alias for the array of source objects\n\n                \n            \n            \n                \n                            Source[]\n\n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.model.ts\n    \n    \n        \n            \n                \n                    \n                    TissueLibraryContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibraryModel\n                \n            \n            \n                \n                    Type alias for the tissue data\n\n                \n            \n            \n                \n                        TissueData\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            About   (src/.../link-ids.ts)\n                        \n                        \n                            Action   (src/.../cell-summary.actions.ts)\n                        \n                        \n                            Action   (src/.../download.action.ts)\n                        \n                        \n                            Action   (src/.../medical-illustration.actions.ts)\n                        \n                        \n                            AppTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            CELL_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_AGGREGATE_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            CELL_SUMMARY_SCHEMA   (src/.../cell-summary.model.ts)\n                        \n                        \n                            ContactAcknowledgement   (src/.../resource-ids.ts)\n                        \n                        \n                            DEFAULT_LOGGABLE_ACTIONS   (src/.../default-loggable-actions.ts)\n                        \n                        \n                            DOWNLOAD_ENTRY   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_FORMAT_ID   (src/.../download.model.ts)\n                        \n                        \n                            DOWNLOAD_MODEL   (src/.../download.model.ts)\n                        \n                        \n                            Embed   (src/.../link-ids.ts)\n                        \n                        \n                            ExploreFTU   (src/.../link-ids.ts)\n                        \n                        \n                            Gradient   (src/.../resource-types.ts)\n                        \n                        \n                            GradientLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            GradientLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            Illustration   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPage   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageDepthDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDepthTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageDescription   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroImg   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageIntroMoreText   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPagePartners   (src/.../resource-ids.ts)\n                        \n                        \n                            LandingPageReadMore   (src/.../link-ids.ts)\n                        \n                        \n                            LandingPageTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            LOGGABLE_ACTIONS   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            mapEntry   (src/.../medical-illustration.model.ts)\n                        \n                        \n                            Metrics   (src/.../resource-ids.ts)\n                        \n                        \n                            Metrics   (src/.../resource-types.ts)\n                        \n                        \n                            MetricsLogo   (src/.../resource-ids.ts)\n                        \n                        \n                            MetricsTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Png   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            PNG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                        \n                            Portal   (src/.../link-ids.ts)\n                        \n                        \n                            PRIMITIVE_TYPES   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            ProductLogoUrl   (src/.../resource-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../link-ids.ts)\n                        \n                        \n                            ProductTitle   (src/.../resource-ids.ts)\n                        \n                        \n                            Size   (src/.../resource-types.ts)\n                        \n                        \n                            SizeLegend   (src/.../resource-ids.ts)\n                        \n                        \n                            SizeLegendInfo   (src/.../resource-ids.ts)\n                        \n                        \n                            STATE_LOGGER_PROVIDER   (src/.../state-analytics-plugin.service.ts)\n                        \n                        \n                            Svg   (src/.../builtin-formats-ids.ts)\n                        \n                        \n                            SVG_FORMAT   (src/.../builtin-formats.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/link-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        About\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('About')\n                    \n                \n\n            \n                \n                    About Link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Embed\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Embed')\n                    \n                \n\n            \n                \n                    LinkId for Embed\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ExploreFTU\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ExploreFTU')\n                    \n                \n\n            \n                \n                    LinkId for Explore FTU\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Illustration\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Illustration')\n                    \n                \n\n            \n                \n                    LinkId for Illustration metadata\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPage\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPage')\n                    \n                \n\n            \n                \n                    Landing page id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageReadMore\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('LandingPageReadMore')\n                    \n                \n\n            \n                \n                    LinkId for read more in landing page content\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Portal\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('Portal')\n                    \n                \n\n            \n                \n                    LinkId for HRA Portal\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title link id\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.action.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Download')\n                    \n                \n\n            \n                \n                    Action Group for Download Action\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Medical Illustration')\n                    \n                \n\n            \n                \n                    Action base\n\n                \n            \n\n        \n    \n\n    src/lib/resource-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        AppTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('AppTitle')\n                    \n                \n\n            \n                \n                    App title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ContactAcknowledgement\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ContactAcknowledgement')\n                    \n                \n\n            \n                \n                    Message to display after submitting contact form\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegend')\n                    \n                \n\n            \n                \n                    Gradient legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        GradientLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('GradientLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Gradient legend\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthDescription')\n                    \n                \n\n            \n                \n                    Lanading Page Depth Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthImg')\n                    \n                \n\n            \n                \n                    Landing Page Depth Img id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthMoreText')\n                    \n                \n\n            \n                \n                    Landing Page Depth More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDepthTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageDepthTitle')\n                    \n                \n\n            \n                \n                    Landing Page Depth Title\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageDescription\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroDescription')\n                    \n                \n\n            \n                \n                    Landing Page Description id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroImg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroImg')\n                    \n                \n\n            \n                \n                    Landing Page Intro Image id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageIntroMoreText\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroMoreText')\n                    \n                \n\n            \n                \n                    Landing Page More Text id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPagePartners\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroPartners')\n                    \n                \n\n            \n                \n                    Landing Page Partners id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LandingPageTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('LandingPageIntroTitle')\n                    \n                \n\n            \n                \n                    Landing Page Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('Metrics')\n                    \n                \n\n            \n                \n                    metrics id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsLogo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsLogo')\n                    \n                \n\n            \n                \n                    Metrics Logo id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MetricsTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('MetricsTitle')\n                    \n                \n\n            \n                \n                    Metrics Title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductLogoUrl\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductLogoUrl')\n                    \n                \n\n            \n                \n                    Product logo url id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ProductTitle\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('ProductTitle')\n                    \n                \n\n            \n                \n                    Product title id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegend\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegend')\n                    \n                \n\n            \n                \n                    Size legend id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SizeLegendInfo\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createResourceId('SizeLegendInfo')\n                    \n                \n\n            \n                \n                    Info to show on the tooltip for Size legend\n\n                \n            \n\n        \n    \n\n    src/lib/cell-summary/cell-summary.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CELL_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  biomarker: z.object({\n    id: z.string(),\n    label: z.string(),\n  }),\n  count: z.number(),\n  percentage: z.number(),\n})\n                    \n                \n\n            \n                \n                    The CELL_SCHEMA has an object that contains an id and a label for the cell,\nanother object that contains an id and a label for the biomarker, and a count and a percentage that are both numbers.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_AGGREGATE_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    columns: z.string().array(),\n    rows: z\n      .tuple([z.string(), z.number().optional()])\n      .rest(\n        z\n          .object({\n            color: z.string(),\n            size: z.number(),\n            data: CELL_SCHEMA,\n          })\n          .optional()\n      )\n      .array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_AGGREGATE_SCHEMA is a record of Aggregate objects, where each Aggregate object contains a label,\nan array of columns that are strings, and an array of rows that are AggregateRow objects.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z.object({\n    label: z.string(),\n    entries: CELL_SCHEMA.array(),\n  })\n)\n                    \n                \n\n            \n                \n                    The CELL_SUMMARY_SCHEMA constant is a record of CellSummary objects,\nwhere each CellSummary object contains a label and an array of CELL_SCHEMA objects.\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/default-loggable-actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DEFAULT_LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  ContactActions.SendMessage,\n  DownloadActions.Download,\n  LinkRegistryActions.Navigate,\n]\n                    \n                \n\n            \n                \n                    Default loggable actions\n\n                \n            \n\n        \n    \n\n    src/lib/download/download.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [\n  z.object({ type: z.literal('url'), url: z.string() }),\n  z.object({ type: z.literal('data'), data: z.string() }),\n])\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_ENTRY,\nwhich is a discriminated union of two objects with different properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    id: DOWNLOAD_FORMAT_ID,\n    label: z.string(),\n    extension: z.string(),\n  })\n  .partial({ extension: true })\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT,\nwhich is an object with id, label, and extension properties\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_FORMAT_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `DownloadFormatId:'${id}'`)\n  .brand('DownloadFormatId')\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_FORMAT_ID,\nwhich is a string that is transformed into a branded string\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DOWNLOAD_MODEL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  formats: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_FORMAT),\n  entries: z.record(DOWNLOAD_FORMAT_ID, DOWNLOAD_ENTRY),\n})\n                    \n                \n\n            \n                \n                    Define a Zod schema for DOWNLOAD_MODEL,\nwhich is an object with formats and entries properties\n\n                \n            \n\n        \n    \n\n    src/lib/resource-types.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Gradient\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('gradient', payload())\n                    \n                \n\n            \n                \n                    Gradient legend resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Metrics\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType(\n  'metrics',\n  payload()\n)\n                    \n                \n\n            \n                \n                    Metrics resource\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Size\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createCustomType('size', payload())\n                    \n                \n\n            \n                \n                    Size legend resource\n\n                \n            \n\n        \n    \n\n    src/lib/state-analytics-plugin/state-analytics-plugin.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        LOGGABLE_ACTIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken('Loggable actions', {\n  providedIn: 'root',\n  factory: () => DEFAULT_LOGGABLE_ACTIONS,\n})\n                    \n                \n\n            \n                \n                    Injectable token LOGGABLE_ACTIONS provides list of actions that can be logged\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PRIMITIVE_TYPES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : ['bigint', 'boolean', 'number', 'string']\n                    \n                \n\n            \n                \n                    Primitive types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        STATE_LOGGER_PROVIDER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Provider\n\n                    \n                \n                \n                    \n                        Default value : {\n  provide: NGXS_PLUGINS,\n  useExisting: StateAnalyticsPluginService,\n  multi: true,\n}\n                    \n                \n\n            \n                \n                    State Login Provider\n\n                \n            \n\n        \n    \n\n    src/lib/medical-illustration/medical-illustration.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        mapEntry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  organ_label: z.string(),\n  organ_id: z.string(),\n  anatomical_structure_of: z.string(),\n  source_spatial_entity: z.string(),\n  node_name: z.string(),\n  label: z.string(),\n  OntologyID: z.string(),\n  representation_of: z.string(),\n  'svg file of single 2DFTU': z.string(),\n  exist_asctb: z.string(),\n  type: z.string(),\n  'REF/1': z.string(),\n  'REF/1/DOI': z.string(),\n  'REF/1/NOTES': z.string(),\n  'Inset #': z.string(),\n})\n                    \n                \n\n            \n                \n                    Map Entry typings\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats-ids.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Png\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('png')\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Svg\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createDownloadFormatId('svg')\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT CREATE ID\n\n                \n            \n\n        \n    \n\n    src/lib/download/builtin-formats.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PNG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Png,\n  label: 'Download Png',\n  extension: '.png',\n}\n                    \n                \n\n            \n                \n                    PNG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SVG_FORMAT\n                        \n                    \n                \n            \n                \n                    \n                        Type :         DownloadFormat\n\n                    \n                \n                \n                    \n                        Default value : {\n  id: Svg,\n  label: 'Download Svg',\n  extension: '.svg',\n}\n                    \n                \n\n            \n                \n                    SVG DEFAULT FORMAT\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
