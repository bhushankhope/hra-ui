var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.433,1,2.943]],["body/interfaces/ActionConstructor.html",[0,2.084,1,5.048,2,2.356,3,0.272,4,0.272,5,0.272,6,3.879,7,0.309,8,1.208,9,1.255,10,1.392,11,0.813,12,2.407,13,0.428,14,1.104,15,0.026,16,0.272,17,3.879,18,2.16,19,0.419,20,1.251,21,3.28,22,0.877,23,3.073,24,1.392,25,3.28,26,5.061,27,5.633,28,3.28,29,0.556,30,1.392,31,2.084,32,3.879,33,1.59,34,3.879,35,1.992,36,0.284,37,3.879,38,3.879,39,3.879,40,1.992,41,0.019,42,0.019]],["title/classes/Add.html",[36,0.195,43,1.093]],["body/classes/Add.html",[3,0.228,4,0.228,5,0.409,7,0.358,8,0.633,9,0.814,10,0.893,13,0.198,14,0.755,15,0.026,16,0.361,19,0.409,20,0.94,22,0.505,24,0.893,29,0.679,36,0.327,41,0.017,42,0.017,43,2.072,44,0.633,45,1.848,46,1.848,47,1.247,48,1.633,49,2.215,50,1.659,51,2.286,52,1.666,53,2.576,54,1.552,55,2.454,56,0.357,57,3.244,58,2.119,59,0.392,60,0.357,61,0.357,62,1.263,63,1.324,64,2.305,65,1.666,66,1.019,67,1.019,68,1.019,69,0.466,70,1.806,71,1.831,72,1.831,73,1.612,74,3.096,75,1.336,76,1.019,77,1.336,78,1.728,79,1.247,80,2.324,81,1.019,82,1.848,83,0.835,84,2.119,85,1.019,86,1.336,87,1.336,88,1.604,89,2.447,90,1.336,91,1.336,92,1.97,93,1.97,94,2.135,95,1.666,96,1.97,97,1.97]],["title/classes/Add-1.html",[36,0.164,43,0.92,98,1.503]],["body/classes/Add-1.html",[3,0.228,4,0.228,5,0.434,7,0.358,8,0.634,9,0.815,10,0.894,13,0.198,14,0.866,15,0.026,16,0.316,19,0.41,20,0.941,22,0.506,24,0.894,29,0.68,36,0.327,41,0.017,42,0.017,43,2.101,44,0.634,47,1.249,48,1.634,50,1.66,51,2.288,52,1.669,54,1.552,56,0.357,58,2.121,59,0.392,60,0.357,61,0.357,62,1.264,63,1.156,66,1.021,67,1.021,68,1.021,69,0.467,71,1.832,72,1.832,73,1.613,75,1.338,76,1.021,77,1.338,78,1.509,79,1.249,80,2.325,81,1.021,82,1.85,83,1.325,84,2.484,85,1.021,86,1.85,87,1.85,88,1.66,99,1.85,100,1.85,101,2.535,102,2.995,103,2.853,104,3.25,105,1.809,106,3.442,107,1.436,108,2.456,109,1.669,110,1.669]],["title/classes/AddFromYaml.html",[36,0.195,81,1.093]],["body/classes/AddFromYaml.html",[3,0.229,4,0.229,5,0.424,7,0.359,8,0.636,9,0.817,10,0.897,13,0.199,14,0.936,15,0.026,16,0.362,19,0.41,20,0.944,22,0.507,24,0.897,29,0.68,36,0.328,41,0.017,42,0.017,43,2.056,44,0.636,45,1.854,46,1.854,47,1.253,48,1.324,49,2.118,50,1.661,51,2.291,53,2.28,54,1.328,55,1.991,56,0.358,58,1.854,59,0.394,60,0.358,61,0.358,62,1.223,63,1.159,64,2.312,65,1.674,66,1.024,67,1.024,68,1.024,69,0.468,70,1.815,71,1.835,72,1.835,73,1.617,74,3.178,75,1.343,76,1.024,77,1.343,78,1.868,79,1.253,80,2.415,81,1.415,82,2.291,83,1.159,84,2.124,85,1.024,86,1.343,87,1.343,88,1.607,89,2.454,90,1.343,91,1.343,92,1.98,93,1.98,94,2.142,95,1.674,96,1.98,97,1.98,111,2.757,112,3.26]],["title/classes/AddFromYaml-1.html",[36,0.164,81,0.92,98,1.503]],["body/classes/AddFromYaml-1.html",[3,0.229,4,0.229,5,0.435,7,0.359,8,0.636,9,0.817,10,0.897,13,0.199,14,0.982,15,0.026,16,0.316,19,0.41,20,0.944,22,0.507,24,0.897,29,0.68,36,0.328,41,0.017,42,0.017,43,2.089,44,0.636,47,1.253,48,1.324,50,1.661,51,2.291,54,1.328,56,0.358,58,1.854,59,0.394,60,0.358,61,0.358,62,1.223,63,0.839,66,1.024,67,1.024,68,1.024,69,0.468,71,1.835,72,1.835,73,1.617,75,1.343,76,1.024,77,1.343,78,1.512,79,1.253,80,2.415,81,1.415,82,2.291,83,1.503,84,2.486,85,1.024,86,1.854,87,1.854,88,1.661,99,1.854,100,1.854,101,2.423,102,2.649,103,2.312,105,1.815,106,3.564,107,1.991,108,2.459,109,1.674,110,1.674,111,2.757,113,3.26]],["title/classes/AddMany.html",[36,0.195,76,1.093]],["body/classes/AddMany.html",[3,0.229,4,0.229,5,0.41,7,0.359,8,0.637,9,0.818,10,0.899,13,0.199,14,0.759,15,0.027,16,0.363,19,0.41,20,0.945,22,0.702,24,0.899,29,0.681,36,0.328,41,0.017,42,0.017,43,2.057,44,0.637,45,1.856,46,1.856,47,1.255,48,1.326,49,2.119,50,1.662,51,2.293,53,2.282,54,1.329,55,1.993,56,0.359,58,2.126,59,0.394,60,0.359,61,0.359,62,1.224,63,1.16,64,2.315,65,1.677,66,1.026,67,1.026,68,1.026,69,0.469,70,1.818,71,1.836,72,1.836,73,1.999,74,3.288,75,1.856,76,1.417,77,1.856,78,1.87,79,1.984,80,2.327,81,1.026,82,1.856,83,0.84,84,2.126,85,1.026,86,1.345,87,1.345,88,1.607,89,2.456,90,1.345,91,1.345,92,1.983,93,1.983,94,2.144,95,1.677,96,1.983,97,1.983,114,2.761,115,3.266]],["title/classes/AddMany-1.html",[36,0.164,76,0.92,98,1.503]],["body/classes/AddMany-1.html",[3,0.23,4,0.23,5,0.435,7,0.36,8,0.638,9,0.819,10,0.9,13,0.2,14,0.869,15,0.026,16,0.317,19,0.411,20,0.946,22,0.703,24,0.9,29,0.681,36,0.328,41,0.017,42,0.017,43,2.09,44,0.638,47,1.257,48,1.327,50,1.663,51,2.294,54,1.33,56,0.36,58,2.128,59,0.395,60,0.36,61,0.36,62,1.225,63,0.842,66,1.028,67,1.028,68,1.028,69,0.47,71,1.837,72,1.837,73,2.001,75,1.859,76,1.418,77,1.859,78,1.735,79,1.986,80,2.328,81,1.028,82,1.859,83,1.33,84,2.489,85,1.028,86,1.859,87,1.859,88,1.663,99,1.859,100,1.859,101,2.425,102,2.654,103,2.318,105,1.821,106,3.61,107,1.446,108,2.463,109,1.68,110,1.68,114,2.766,116,3.271]],["title/classes/BaseHrefSelectors.html",[36,0.195,117,2.589]],["body/classes/BaseHrefSelectors.html",[3,0.309,4,0.309,5,0.309,7,0.437,8,1.165,11,0.921,13,0.268,14,1.082,15,0.026,16,0.385,19,0.309,29,0.483,30,1.72,33,1.381,36,0.247,40,3.067,41,0.02,42,0.02,44,0.858,56,0.483,59,0.531,60,0.483,61,0.483,117,4.077,118,3.66,119,3.66,120,4.395,121,3.66,122,3.989,123,1.84,124,3.66,125,5.48,126,1.81,127,4.395,128,4.395,129,3.653,130,1.746,131,1.81,132,1.689,133,4.395,134,4.395]],["title/injectables/BaseHrefState.html",[122,2.324,135,1.655]],["body/injectables/BaseHrefState.html",[3,0.287,4,0.287,5,0.287,7,0.417,8,1.228,9,0.741,11,0.856,13,0.25,15,0.026,16,0.406,19,0.287,29,0.575,30,1.124,36,0.229,41,0.019,42,0.019,56,0.449,59,0.493,60,0.575,61,0.449,118,3.496,119,3.496,122,3.496,123,1.758,124,4.301,126,1.683,129,3.505,130,1.486,132,1.57,135,2.49,136,2.482,137,4.087,138,2.652,139,4.426,140,5.234,141,5.234,142,5.149,143,1.57,144,2.186,145,4.426,146,4.087,147,3.894,148,3.179,149,2.688,150,1.57,151,1.57,152,4.087,153,2.482,154,4.087,155,4.087]],["title/modules/CdkStateModule.html",[156,2.943,157,2.589]],["body/modules/CdkStateModule.html",[3,0.34,4,0.34,5,0.34,8,0.943,15,0.026,16,0.471,18,3.234,19,0.34,36,0.271,41,0.022,42,0.022,49,1.623,101,1.858,122,3.229,129,2.691,132,1.858,151,1.858,157,4.321,158,3.596,159,4.834,160,5.809,161,4.834,162,3.88,163,3.88,164,3.88,165,2.299,166,4.834,167,4.834]],["title/classes/Clear.html",[36,0.195,168,2.113]],["body/classes/Clear.html",[3,0.249,4,0.249,5,0.249,7,0.38,8,0.693,9,1.167,10,1.655,13,0.393,14,1.042,15,0.026,16,0.335,19,0.379,20,1.13,24,0.977,29,0.681,35,2.452,36,0.366,41,0.018,42,0.018,44,0.693,50,1.587,52,1.824,56,0.391,59,0.429,60,0.391,61,0.391,62,1.326,63,1.594,66,1.116,67,1.116,69,0.51,71,1.694,72,1.694,130,1.388,144,2.07,165,2.947,168,3.762,169,2.373,170,2.658,171,3.653,172,3.726,173,3.552,174,3.552,175,2.549,176,2.157,177,2.373,178,3.189,179,2.373,180,3.524,181,3.501,182,2.643]],["title/classes/Delete.html",[36,0.195,181,2.113]],["body/classes/Delete.html",[3,0.245,4,0.245,5,0.245,7,0.376,8,0.681,9,1.178,10,1.645,13,0.397,14,1.093,15,0.026,16,0.331,19,0.375,20,1.12,24,0.96,29,0.678,35,1.792,36,0.368,41,0.017,42,0.017,44,0.681,50,1.575,52,1.792,56,0.384,59,0.421,60,0.384,61,0.384,62,1.32,63,1.622,66,1.097,67,1.097,69,0.501,71,1.679,72,1.679,130,1.375,144,2.055,165,2.997,168,3.245,169,2.331,170,1.943,171,3.631,172,3.688,173,2.596,175,2.53,176,2.119,177,2.331,178,3.569,179,2.331,180,3.655,181,3.891,182,3.509,183,3.49]],["title/components/DestroyHostComponent.html",[184,2.589,185,2.943]],["body/components/DestroyHostComponent.html",[3,0.231,4,0.231,5,0.231,7,0.361,11,1.17,12,2.154,13,0.277,15,0.026,16,0.231,19,0.231,20,1.086,21,4.721,22,0.705,23,2.75,29,0.361,30,1.246,33,1.033,36,0.184,40,2.661,41,0.017,42,0.017,56,0.498,59,0.397,60,0.614,61,0.361,123,1.521,130,0.846,131,2.411,150,1.263,151,1.263,184,4.503,185,5.118,186,4.529,187,5.181,188,5.583,189,4.529,190,3.461,191,5.181,192,3.287,193,3.025,194,4.529,195,4.952,196,4.529,197,3.83,198,4.529,199,3.369,200,5.181,201,2.445,202,2.885,203,5.118,204,3.025,205,2.002,206,3.854,207,5.181,208,3.854,209,4.529,210,4.153,211,3.287,212,3.369,213,3.369,214,4.503,215,4.414,216,5.583,217,3.83,218,4.529,219,3.854,220,3.025,221,5.856,222,4.529,223,1.688,224,3.369,225,3.287,226,3.025,227,2.196,228,1.688,229,2.445,230,3.287,231,3.287,232,3.287,233,3.287,234,2.78,235,4.529,236,1.83,237,5.583,238,3.287,239,2.196,240,2.196,241,3.287,242,2.445,243,2.78,244,3.287]],["title/interfaces/DestructorScope.html",[0,1.433,245,2.589]],["body/interfaces/DestructorScope.html",[0,1.512,2,2.229,3,0.258,4,0.258,5,0.258,7,0.389,11,0.769,13,0.298,15,0.026,16,0.258,19,0.385,22,0.571,23,2.229,29,0.603,30,1.343,31,2.669,33,1.153,36,0.206,41,0.018,42,0.018,48,1.079,50,1.01,56,0.404,59,0.443,60,0.404,61,0.404,69,0.527,123,1.639,130,1.256,143,1.411,150,2.245,175,2.689,190,3.259,205,1.623,245,4.346,246,4.127,247,3.104,248,5.481,249,3.259,250,4.127,251,4.636,252,4.127,253,3.671,254,4.127,255,4.127,256,4.127,257,4.127,258,2.044,259,3.104,260,2.452,261,4.346,262,5.288,263,5.143,264,2.731,265,3.104,266,2.731,267,3.104,268,3.104,269,2.731,270,4.127,271,4.127,272,3.104,273,3.104,274,4.636,275,4.127,276,2.731,277,2.452,278,3.104,279,2.452,280,2.731,281,3.104,282,3.104,283,3.104,284,3.104,285,3.104,286,3.104]],["title/interfaces/HoverContext.html",[0,1.433,287,2.589]],["body/interfaces/HoverContext.html",[0,1.171,2,1.727,3,0.2,4,0.2,5,0.2,7,0.227,11,0.596,12,1.945,13,0.174,15,0.027,16,0.336,19,0.287,20,1.003,22,0.864,31,1.972,36,0.16,41,0.015,42,0.015,69,0.688,83,1.428,131,1.171,144,1.469,149,2.459,150,1.84,151,1.093,193,1.9,204,1.9,205,1.257,206,3.042,208,2.116,210,3.042,212,3.042,213,3.042,214,2.116,215,3.199,220,1.9,224,2.116,226,3.199,227,1.9,228,1.46,229,3.042,236,3.089,240,1.9,287,3.563,288,2.405,289,4.05,290,4.428,291,4.428,292,3.458,293,4.691,294,2.491,295,3.458,296,3.458,297,4.691,298,5.033,299,2.405,300,3.458,301,2.405,302,2.116,303,3.563,304,3.458,305,2.405,306,2.405,307,3.458,308,3.458,309,2.405,310,2.405,311,3.458,312,2.405,313,2.405,314,4.05,315,3.458,316,5.245,317,4.05,318,2.405,319,2.405,320,2.405,321,2.491,322,3.458,323,2.405,324,3.458,325,2.405,326,3.458,327,2.405,328,4.428,329,2.405,330,2.405,331,2.405,332,2.405,333,2.405,334,4.428,335,4.428,336,4.428,337,4.428,338,4.428,339,4.428,340,4.428,341,4.428,342,2.405,343,2.405,344,2.116,345,2.405,346,2.405,347,3.563,348,3.458,349,3.042,350,2.405,351,2.405,352,2.405,353,4.05,354,3.458,355,2.116,356,2.405,357,2.405,358,2.405,359,3.458,360,2.405,361,2.405,362,2.405,363,2.405,364,2.405]],["title/directives/HoverDirective.html",[236,1.938,240,2.324]],["body/directives/HoverDirective.html",[0,0.889,3,0.152,4,0.152,5,0.152,7,0.172,11,0.453,12,1.584,13,0.302,15,0.026,16,0.286,19,0.234,20,1.035,22,0.897,30,1.257,31,2.239,36,0.121,41,0.012,42,0.012,56,0.647,59,0.402,60,0.366,61,0.502,69,0.584,83,1.399,123,1.119,126,1.372,130,0.556,131,1.372,144,1.196,149,2.347,150,2.089,151,0.83,193,2.225,201,1.606,204,2.225,205,1.472,206,3.673,208,1.606,210,2.478,212,1.606,213,1.606,214,1.606,215,3.052,220,1.442,223,1.109,224,1.606,226,3.052,227,1.442,228,1.109,229,1.606,236,2.905,239,1.442,240,2.225,287,2.478,288,1.826,289,2.817,290,4.412,291,4.521,292,1.826,293,2.817,294,2.349,295,1.826,296,1.826,297,4.871,298,5.263,299,1.826,300,3.438,301,1.826,302,1.606,303,3.024,304,4.175,305,2.817,306,3.864,307,4.412,308,4.412,309,1.826,310,1.826,311,2.817,312,1.826,313,1.826,314,3.438,315,2.817,316,5.438,317,4.175,318,1.826,319,1.826,320,1.826,321,2.174,322,3.864,323,2.817,324,4.175,325,2.817,326,3.864,327,2.817,328,4.412,329,2.817,330,2.817,331,2.817,332,2.817,333,2.817,334,4.748,335,4.748,336,4.748,337,4.748,338,4.748,339,4.748,340,4.748,341,4.748,342,2.817,343,1.826,344,1.606,345,1.826,346,1.826,347,4.044,348,4.412,349,3.881,350,3.438,351,2.817,352,3.864,353,3.438,354,2.817,355,3.024,356,3.438,357,2.817,358,3.864,359,2.817,360,1.826,361,1.826,362,1.826,363,1.826,364,1.826,365,2.817,366,3.331,367,2.817,368,3.331,369,3.331,370,3.331,371,3.331,372,3.331,373,3.331,374,3.331,375,2.16,376,2.16,377,2.16,378,2.16]],["title/directives/LinkDirective.html",[236,1.938,242,2.589]],["body/directives/LinkDirective.html",[3,0.128,4,0.128,5,0.128,7,0.29,8,0.355,9,0.754,11,0.381,12,1.383,13,0.374,14,1.049,15,0.027,16,0.319,18,1.012,19,0.128,20,0.871,22,0.453,29,0.457,30,1.143,33,1.758,36,0.102,41,0.011,42,0.011,48,0.534,49,2.036,53,1.837,54,1.17,55,1.837,56,0.659,59,0.502,60,0.32,61,0.582,64,2.49,65,0.933,69,0.731,74,1.493,88,1,89,1.383,90,1.198,94,1.977,95,2.134,101,0.698,123,0.977,126,1.711,129,3.116,130,0.936,131,1.497,138,0.748,143,1.597,144,1.492,150,1.118,151,0.698,170,2.314,175,0.803,180,1.012,199,2.163,201,1.352,202,2.024,203,3.514,204,1.942,205,1.837,215,4.197,217,2.459,219,1.352,223,2.134,226,1.214,227,1.214,228,0.933,236,2.531,239,1.214,242,2.163,243,3.514,260,2.776,302,1.352,303,3.607,321,2.719,347,2.163,349,4.163,365,3.075,367,2.459,379,1.817,380,2.459,381,3.636,382,3.936,383,3.936,384,2.908,385,4.474,386,3.075,387,3.075,388,4.1,389,3.636,390,2.908,391,2.908,392,2.908,393,2.908,394,4.546,395,1.817,396,3.075,397,1.817,398,2.459,399,4.1,400,1.817,401,2.459,402,3.514,403,4.849,404,1.817,405,2.76,406,1.817,407,3.636,408,1.817,409,2.908,410,2.908,411,2.908,412,2.908,413,2.908,414,2.908,415,4.849,416,2.908,417,1.537,418,2.908,419,3.636,420,3.075,421,2.908,422,3.636,423,2.908,424,2.908,425,3.636,426,2.908,427,2.908,428,2.908,429,1.817,430,4.156,431,2.908,432,1.537,433,1.817,434,1.817,435,1.352,436,1.214,437,1.817,438,1.537,439,1.817,440,1.352,441,1.817,442,1.817,443,1.817,444,1.817,445,1.817,446,1.817,447,1.817,448,1.817,449,1.817,450,1.817,451,1.817,452,1.817,453,4.156,454,1.817,455,1.817,456,1.537,457,3.636,458,1.817,459,1.817,460,1.817,461,2.459,462,1.817,463,2.908,464,2.163,465,1.817,466,1.817,467,1.817,468,2.908,469,1.817,470,2.908,471,2.908,472,2.908,473,2.908,474,2.908,475,1.817,476,2.459,477,1.817,478,1.817,479,2.459,480,3.636,481,1.817,482,1.817,483,1.817,484,1.817,485,1.817,486,1.352,487,1.817,488,1.817,489,1.817,490,1.214,491,1.817,492,1.942,493,1.817,494,1.817,495,1.817,496,1.817,497,1.817,498,2.908,499,1.817,500,2.908,501,2.908,502,1.817,503,1.817,504,2.908,505,1.817,506,1.537,507,2.908,508,1.817,509,1.817,510,1.817,511,1.817,512,1.817,513,1.817]],["title/classes/LinkRegistrySelectors.html",[36,0.195,435,2.589]],["body/classes/LinkRegistrySelectors.html",[3,0.256,4,0.256,5,0.256,7,0.387,11,0.765,13,0.4,15,0.026,16,0.409,18,3.044,19,0.256,29,0.641,30,1.504,31,2.002,33,1.528,36,0.205,40,2.993,41,0.018,42,0.018,44,0.712,45,2.002,46,2.002,49,2.223,53,2.149,54,1.666,55,1.614,56,0.401,59,0.441,60,0.401,61,0.535,62,1.308,68,1.147,69,0.698,121,3.247,123,1.633,126,1.503,131,1.503,132,1.403,138,2.624,143,2.24,162,2.438,202,2.032,266,2.716,294,1.736,321,1.736,405,3.54,435,3.617,436,2.438,464,3.617,486,2.716,514,2.716,515,4.862,516,4.516,517,3.651,518,3.651,519,4.111,520,4.067,521,4.067,522,2.716,523,3.087,524,3.651,525,3.651,526,2.716,527,3.651,528,3.087,529,3.651,530,4.862,531,2.716]],["title/injectables/LinkRegistryState.html",[135,1.655,162,2.324]],["body/injectables/LinkRegistryState.html",[3,0.139,4,0.139,5,0.306,7,0.401,9,1.042,11,0.415,13,0.333,14,0.648,15,0.026,16,0.403,19,0.219,20,0.807,22,0.679,29,0.664,30,1.449,31,0.816,33,0.623,35,1.018,36,0.111,41,0.012,42,0.012,43,1.92,45,2.074,46,2.074,48,0.916,49,1.929,53,1.377,54,1.507,55,0.876,56,0.521,59,0.573,60,0.554,61,0.6,62,1.176,64,1.977,65,1.018,68,0.623,69,0.626,73,1.119,74,1.6,76,1.655,78,1.966,80,1.892,81,1.371,83,1.123,85,1.371,88,1.305,89,2.831,90,1.797,91,2.169,94,2.595,107,0.876,109,1.6,123,1.046,126,1.953,132,0.762,135,1.482,136,1.204,138,2.517,143,1.935,148,3.488,149,2.949,150,2.024,151,0.762,153,1.204,162,2.081,178,2.081,202,1.735,205,0.876,223,1.018,228,1.018,258,1.104,279,2.081,294,0.943,321,2.256,380,1.676,382,1.475,383,1.475,402,1.676,405,1.204,436,1.324,438,1.676,440,1.475,456,2.635,461,1.676,476,1.676,490,1.324,492,2.081,516,1.475,520,1.475,521,2.318,522,1.475,526,1.475,531,1.475,532,1.475,533,2.635,534,2.635,535,3.116,536,2.635,537,2.635,538,2.635,539,4.364,540,2.635,541,5.274,542,2.635,543,1.983,544,2.635,545,2.635,546,1.983,547,2.635,548,4.011,549,2.635,550,1.983,551,2.635,552,1.676,553,2.635,554,2.635,555,1.892,556,2.635,557,2.635,558,2.635,559,1.983,560,3.256,561,3.529,562,2.635,563,3.116,564,3.116,565,1.983,566,4.744,567,1.676,568,1.676,569,3.116,570,4.364,571,1.676,572,1.676,573,1.676,574,2.635,575,2.635,576,1.676,577,1.676,578,2.635,579,1.676,580,1.676,581,1.676,582,3.116,583,3.116,584,1.983,585,1.983,586,1.983,587,2.635,588,1.676,589,1.676,590,1.983,591,1.676,592,1.676,593,1.676,594,1.676,595,1.204,596,1.676,597,1.676,598,1.676,599,1.676,600,1.983,601,3.116,602,1.983,603,3.116,604,1.983,605,1.475,606,1.983,607,1.983,608,3.116,609,1.676,610,1.983,611,1.983,612,1.983,613,1.983,614,1.983,615,1.983,616,1.983,617,1.983,618,1.983,619,1.983]],["title/classes/LoadFromYaml.html",[36,0.195,85,1.093]],["body/classes/LoadFromYaml.html",[3,0.227,4,0.227,5,0.442,7,0.357,8,0.632,9,0.813,10,0.891,13,0.198,14,0.933,15,0.026,16,0.361,19,0.409,20,0.939,22,0.504,24,0.891,29,0.679,36,0.327,41,0.017,42,0.017,43,2.054,44,0.632,45,1.846,46,1.846,47,1.245,48,1.318,49,2.114,50,1.658,51,2.117,53,2.273,54,1.323,55,1.982,56,0.356,58,1.846,59,0.391,60,0.356,61,0.356,62,1.221,63,1.154,64,2.302,65,1.663,66,1.018,67,1.018,68,1.018,69,0.465,70,1.803,71,1.83,72,1.83,73,1.61,74,3.233,75,1.334,76,1.018,77,1.334,78,1.726,79,1.245,80,2.4,81,1.018,82,1.846,83,0.834,84,2.481,85,1.409,86,1.846,87,1.846,88,1.7,89,2.445,90,1.334,91,1.334,92,1.967,93,1.967,94,2.132,95,1.663,96,1.967,97,1.967,620,2.739,621,3.239]],["title/classes/LoadFromYaml-1.html",[36,0.164,85,0.92,98,1.503]],["body/classes/LoadFromYaml-1.html",[3,0.228,4,0.228,5,0.455,7,0.358,8,0.633,9,0.814,10,0.893,13,0.198,14,0.981,15,0.026,16,0.315,19,0.409,20,0.94,22,0.505,24,0.893,29,0.679,36,0.327,41,0.017,42,0.017,43,2.087,44,0.633,47,1.247,48,1.32,50,1.659,51,2.119,54,1.324,56,0.357,58,1.848,59,0.392,60,0.357,61,0.357,62,1.221,63,0.835,66,1.019,67,1.019,68,1.019,69,0.466,71,1.831,72,1.831,73,1.612,75,1.336,76,1.019,77,1.336,78,1.507,79,1.247,80,2.4,81,1.019,82,1.848,83,1.324,84,2.633,85,1.41,86,2.119,87,2.119,88,1.733,99,1.848,100,1.848,101,2.421,102,2.642,103,2.305,105,1.806,106,3.56,107,1.434,108,2.454,109,1.666,110,1.666,620,2.743,622,3.244]],["title/classes/LoadMarkdown.html",[36,0.195,110,1.787]],["body/classes/LoadMarkdown.html",[3,0.225,4,0.225,5,0.453,7,0.354,8,0.625,9,0.807,10,0.881,13,0.196,14,0.976,15,0.026,16,0.312,19,0.407,20,0.932,22,0.498,24,0.881,29,0.677,36,0.325,41,0.016,42,0.016,43,2.083,44,0.625,47,1.231,48,1.308,50,1.652,51,2.104,52,1.644,54,1.315,56,0.352,58,1.831,59,0.387,60,0.352,61,0.352,62,1.29,63,0.824,66,1.006,67,1.006,68,1.006,69,0.46,71,1.823,72,1.823,73,1.597,75,1.319,76,1.006,77,1.319,78,1.494,79,1.231,80,2.318,81,1.006,82,1.831,83,1.421,84,2.626,85,1.006,86,2.104,87,2.104,88,1.754,99,1.831,100,1.831,101,2.507,102,2.979,103,2.284,105,1.783,106,3.429,107,1.416,108,2.776,109,2.284,110,2.284,623,2.708]],["title/classes/Navigate.html",[36,0.195,89,1.655]],["body/classes/Navigate.html",[3,0.226,4,0.226,5,0.408,7,0.356,8,0.629,9,0.81,10,0.887,13,0.197,14,0.752,15,0.026,16,0.36,19,0.408,20,0.936,22,0.502,24,0.887,29,0.678,36,0.326,41,0.017,42,0.017,43,2.006,44,0.629,45,1.84,46,1.84,47,1.239,48,1.314,49,2.193,50,1.655,51,2.111,52,1.655,53,2.57,54,1.32,55,1.975,56,0.354,58,1.84,59,0.389,60,0.354,61,0.354,62,1.293,63,1.32,64,2.843,65,1.655,66,1.013,67,1.013,68,1.013,69,0.463,70,1.795,71,1.827,72,1.827,73,1.604,74,3.089,75,1.327,76,1.013,77,1.327,78,1.722,79,1.239,80,2.321,81,1.013,82,1.84,83,0.83,84,2.111,85,1.013,86,1.327,87,1.327,88,1.697,89,2.862,90,1.84,91,1.84,92,2.713,93,2.713,94,2.634,95,2.294,96,2.713,97,2.713,623,2.726]],["title/classes/ResourceRegistrySelectors.html",[36,0.195,624,2.943]],["body/classes/ResourceRegistrySelectors.html",[3,0.144,4,0.144,5,0.144,7,0.383,8,0.399,11,0.428,13,0.392,14,0.537,15,0.026,16,0.312,19,0.338,29,0.586,30,1.693,31,2.624,33,1.885,36,0.115,40,3.331,41,0.012,42,0.012,44,0.399,49,1.318,54,1.583,56,0.586,59,0.643,60,0.586,61,0.586,62,1.344,68,0.642,69,0.564,83,1.565,88,1.466,99,2.27,100,2.27,101,1.509,102,2.471,103,1.639,108,2.355,117,1.52,121,2.132,123,1.072,124,2.964,126,2.194,129,1.138,130,0.526,131,0.842,132,0.785,138,2.684,143,1.509,163,1.365,223,1.639,294,1.518,405,4.023,464,4.391,490,1.365,492,2.132,506,1.728,514,1.52,519,4.313,523,1.728,528,1.728,531,1.52,595,3.585,624,2.699,625,2.699,626,3.191,627,3.191,628,5.513,629,3.191,630,4.523,631,4.437,632,2.044,633,3.32,634,3.191,635,2.044,636,4.791,637,3.191,638,2.044,639,3.32,640,3.191,641,2.044,642,5.072,643,3.191,644,3.926,645,2.044,646,3.926,647,3.191,648,2.044,649,3.191,650,2.044,651,1.52,652,3.32,653,3.32,654,1.728,655,1.728,656,1.728,657,3.926,658,3.191,659,4.437,660,4.437,661,2.044,662,2.044,663,2.699,664,2.044,665,3.191,666,2.044,667,3.926,668,3.926,669,2.044,670,3.926,671,2.044]],["title/injectables/ResourceRegistryState.html",[135,1.655,163,2.324]],["body/injectables/ResourceRegistryState.html",[3,0.162,4,0.162,5,0.376,7,0.426,9,1.119,11,0.482,13,0.327,14,0.712,15,0.026,16,0.391,19,0.162,20,0.482,22,0.735,25,2.958,29,0.669,30,1.53,33,1.099,36,0.129,41,0.013,42,0.013,43,1.981,48,1.029,54,1.51,56,0.559,59,0.614,60,0.588,61,0.611,62,1.065,68,0.723,69,0.502,73,1.256,76,1.747,78,2.043,80,1.997,81,1.485,83,1.216,85,1.485,88,1.398,91,2.203,99,2.203,100,2.203,101,1.626,106,1.948,107,1.018,108,2.089,109,2.426,110,2.748,123,1.175,126,2.093,132,0.885,135,1.664,136,1.398,138,2.596,143,1.953,148,3.634,149,3.073,150,2.056,151,0.885,153,1.398,163,2.337,228,1.182,258,1.282,279,3.156,291,2.602,321,1.095,532,1.713,533,2.958,534,2.958,536,2.958,537,2.958,538,2.958,540,2.958,542,2.958,544,2.958,545,2.958,547,2.958,548,4.297,549,2.958,551,2.958,552,1.947,553,2.958,554,2.958,555,2.124,556,2.958,557,2.958,558,2.958,560,3.577,561,4.366,562,3.996,567,1.947,568,1.947,571,1.947,572,1.947,573,1.947,578,2.958,579,1.947,580,1.947,581,1.947,587,2.958,588,1.947,589,1.947,591,1.947,592,1.947,593,1.947,594,2.958,595,2.124,596,1.947,597,1.947,598,1.947,625,1.947,630,1.713,651,1.713,663,1.947,672,3.498,673,5.422,674,2.303,675,2.303,676,2.303,677,3.498,678,3.498,679,2.303,680,2.303,681,1.947,682,2.303,683,2.303,684,2.303,685,2.303,686,2.303,687,2.303,688,2.303]],["title/classes/ScopedDestructorSubject.html",[36,0.195,280,2.589]],["body/classes/ScopedDestructorSubject.html",[0,1.492,3,0.255,4,0.255,5,0.255,7,0.386,10,0.997,13,0.333,15,0.026,16,0.255,19,0.383,22,0.753,23,2.938,29,0.599,30,0.997,31,2.566,33,1.139,36,0.203,41,0.018,42,0.018,44,0.707,48,1.423,50,1.331,56,0.398,59,0.438,60,0.398,61,0.398,69,0.52,130,1.402,143,1.859,150,1.859,175,2.569,190,3.232,205,1.602,245,4.505,246,4.091,247,3.064,248,5.379,249,2.42,250,3.064,251,3.064,252,3.064,254,3.064,255,3.064,256,3.064,257,4.606,258,2.018,259,3.064,260,2.42,261,4.635,262,5.59,263,5.121,264,2.696,265,3.064,266,2.696,267,3.064,268,3.064,269,2.696,270,4.091,271,4.091,272,3.064,273,3.064,274,5.269,275,4.915,276,3.599,277,3.232,278,4.091,279,3.232,280,3.599,281,4.091,282,4.091,283,3.064,284,3.064,285,3.064,286,3.064,689,3.624]],["title/interfaces/SelectOptions.html",[0,1.433,690,2.943]],["body/interfaces/SelectOptions.html",[0,1.417,2,2.09,3,0.242,4,0.373,5,0.242,7,0.274,11,0.721,12,2.223,13,0.324,15,0.026,16,0.418,19,0.373,22,0.536,23,2.09,29,0.583,30,1.286,31,2.185,33,1.667,41,0.017,42,0.017,61,0.583,69,0.762,95,3.224,130,0.886,131,1.924,132,1.322,138,2.185,149,1.767,151,1.322,153,2.838,195,2.91,202,1.916,205,2.516,220,3.544,228,1.767,249,2.299,258,2.602,260,3.121,277,3.121,294,1.637,344,2.56,399,4.487,522,2.56,555,2.09,561,4.234,690,4.813,691,2.91,692,4.813,693,4.673,694,6.138,695,4.673,696,4.673,697,4.487,698,5.306,699,3.441,700,4.487,701,4.673,702,3.441,703,4.673,704,3.441,705,2.91,706,2.91,707,3.952,708,3.441,709,3.441,710,3.441,711,2.56,712,3.441,713,2.91,714,3.441,715,3.441,716,4.673,717,3.441,718,4.673,719,3.441,720,5.692,721,3.441,722,2.56,723,3.441,724,3.441,725,3.441,726,3.441,727,3.441,728,3.441,729,3.441,730,3.441,731,3.441,732,3.441,733,3.441,734,3.441,735,3.441,736,3.441,737,3.441,738,3.441,739,3.441]],["title/classes/Set.html",[36,0.195,144,1.25]],["body/classes/Set.html",[3,0.319,4,0.319,5,0.319,7,0.445,8,1.267,9,1.014,10,1.248,13,0.277,14,1.019,15,0.026,16,0.319,19,0.319,22,0.87,24,1.248,29,0.499,36,0.254,41,0.021,42,0.021,44,0.885,50,1.538,56,0.499,59,0.548,60,0.499,61,0.499,66,1.425,67,1.425,69,0.651,71,1.425,72,1.425,118,3.733,119,3.733,124,4.046,129,3.681,144,2.007,147,4.703,179,3.733,740,3.835,741,4.536,742,4.536,743,3.835]],["title/classes/Set-1.html",[36,0.164,98,1.503,144,1.051]],["body/classes/Set-1.html",[3,0.241,4,0.241,5,0.241,7,0.372,8,0.67,9,1.174,10,1.636,13,0.4,14,1.12,15,0.026,16,0.328,19,0.372,20,1.111,24,0.945,29,0.674,35,1.764,36,0.367,41,0.017,42,0.017,44,0.67,50,1.565,52,1.764,56,0.378,59,0.415,60,0.378,61,0.378,62,1.315,63,1.615,66,1.079,67,1.079,69,0.493,71,1.666,72,1.666,130,1.579,144,2.293,165,2.985,168,3.219,169,2.295,170,1.913,171,3.725,172,3.678,173,2.556,175,2.514,176,2.086,177,2.295,178,3.541,179,3.118,180,3.678,181,3.454,182,2.556,744,3.435]],["title/classes/SnapshotObserver.html",[36,0.195,745,2.943]],["body/classes/SnapshotObserver.html",[3,0.249,4,0.249,5,0.249,7,0.43,11,0.744,13,0.217,15,0.026,16,0.249,19,0.249,22,0.743,29,0.525,30,1.587,33,1.116,36,0.199,41,0.018,42,0.018,44,0.693,56,0.593,59,0.576,60,0.525,61,0.525,69,0.51,123,1.603,130,1.77,143,1.835,150,2.216,175,1.57,199,3.552,258,1.978,269,3.552,277,3.851,294,3.011,321,2.271,486,3.552,555,3.958,605,4.011,711,3.552,722,3.552,745,4.037,746,4.876,747,3.004,748,4.774,749,4.774,750,6.33,751,4.774,752,4.774,753,5.393,754,5.393,755,4.774,756,3.552,757,5.766,758,5.393,759,3.552,760,4.774,761,4.774,762,3.552,763,3.004,764,4.56,765,3.552,766,3.552,767,3.552,768,3.552,769,5.393,770,5.393]],["title/classes/StorageSelectors.html",[36,0.195,771,2.943]],["body/classes/StorageSelectors.html",[3,0.259,4,0.259,5,0.259,7,0.294,11,0.773,14,0.925,15,0.026,16,0.386,19,0.259,30,1.786,33,1.539,36,0.308,40,3.216,41,0.018,42,0.018,44,0.72,56,0.538,60,0.406,62,1.36,121,3.272,123,1.645,126,2.017,130,1.261,131,2.017,132,1.418,143,2.456,164,2.465,165,3.087,171,3.556,172,3.558,176,2.242,180,2.727,713,3.121,722,2.746,771,4.142,772,3.691,773,4.898,774,2.974,775,6.264,776,4.898,777,3.691,778,4.142,779,4.142,780,5.488,781,4.898,782,3.691,783,5.855,784,4.898,785,4.898,786,3.691,787,4.898,788,3.691,789,3.691,790,3.691,791,3.691,792,3.691,793,4.898,794,3.691,795,3.691,796,3.691,797,3.691]],["title/injectables/StorageState.html",[135,1.655,164,2.324]],["body/injectables/StorageState.html",[3,0.181,4,0.181,5,0.181,7,0.398,9,0.468,11,0.54,13,0.353,15,0.026,16,0.392,19,0.181,22,0.401,28,2.18,29,0.665,30,1.467,33,1.196,35,2.739,36,0.254,40,2.324,41,0.014,42,0.014,56,0.55,59,0.604,60,0.586,61,0.55,62,1.413,63,0.98,98,1.324,123,1.279,126,1.864,130,1.287,132,0.991,135,1.811,136,1.565,138,2.059,139,3.219,143,1.74,144,2.269,145,3.219,147,2.832,148,3.506,150,2.219,151,0.991,153,1.565,164,3.339,165,3.126,168,3.39,170,2.783,171,2.312,172,3.476,175,2.467,176,2.312,180,2.783,181,3.39,219,2.832,223,1.324,321,1.226,420,2.18,490,1.722,492,2.543,599,3.828,605,1.918,697,2.18,774,2.312,778,4.51,779,4.51,780,4.51,798,2.578,799,3.807,800,3.807,801,5.588,802,3.807,803,2.578,804,3.807,805,3.807,806,3.807,807,2.578,808,3.807,809,3.807,810,3.807,811,3.807,812,2.578,813,3.807,814,4.227,815,3.219,816,3.219,817,3.807,818,2.578,819,2.578,820,2.578,821,2.18,822,2.578,823,3.807,824,3.807,825,2.578,826,2.578,827,2.578,828,2.578,829,4.527,830,4.527,831,2.578,832,4.527,833,2.578,834,2.578,835,2.578,836,3.807,837,2.578,838,2.578,839,2.578,840,2.578,841,2.578,842,2.578,843,2.578]],["title/dependencies.html",[844,2.475,845,3.105]],["body/dependencies.html",[15,0.026,41,0.022,42,0.022,132,1.989,151,1.989,202,3.368,440,3.849,845,4.499,846,5.175,847,5.175,848,5.175,849,5.175,850,6.049,851,5.175,852,5.175]],["title/miscellaneous/enumerations.html",[853,1.629,854,3.53]],["body/miscellaneous/enumerations.html",[11,0.982,13,0.286,15,0.025,41,0.021,42,0.021,45,1.929,46,1.929,49,1.573,63,1.206,88,1.569,90,2.347,91,2.347,99,1.929,100,1.929,107,2.071,108,2.52,130,1.736,165,2.229,170,2.609,172,3.421,436,3.808,595,3.462,774,3.462,815,5.196,816,5.196,853,2.609,854,3.962,855,3.485,856,4.756,857,4.821,858,3.485,859,3.962,860,3.485,861,3.485,862,3.962,863,4.686]],["title/index.html",[11,0.613,864,2.927,865,2.927]],["body/index.html",[15,0.023,41,0.023,42,0.023,264,3.942,276,3.942,866,6.133,867,5.299,868,5.299,869,6.133,870,5.299,871,6.133,872,6.133,873,5.299]],["title/modules.html",[158,3.503]],["body/modules.html",[15,0.023,41,0.023,42,0.023,157,4.039,158,4.039,874,5.43,875,5.43,876,5.43]],["title/overview.html",[877,3.982]],["body/overview.html",[2,3.134,15,0.022,41,0.022,42,0.022,44,1.007,98,3.101,136,3.134,156,5.107,184,3.839,234,4.364,239,3.447,355,3.839,845,3.839,877,4.364,878,5.161,879,5.161,880,5.161,881,5.161,882,6.039,883,5.161,884,5.161,885,6.039,886,5.161]],["title/properties.html",[12,1.986,844,2.475]],["body/properties.html",[12,2.59,15,0.024,41,0.023,42,0.023,887,5.445,888,5.445]],["title/miscellaneous/typealiases.html",[853,1.629,889,4.174]],["body/miscellaneous/typealiases.html",[9,0.809,11,0.673,13,0.41,14,0.541,15,0.022,18,1.789,31,2.711,35,1.65,41,0.017,42,0.017,45,1.836,46,1.836,49,1.95,53,1.97,54,1.642,55,1.97,63,1.147,83,1.147,90,1.323,91,1.323,99,1.836,100,1.836,101,2.232,102,2.289,103,2.289,107,1.42,131,1.323,138,2.108,142,4.328,148,1.951,149,2.289,165,1.528,193,2.146,249,2.146,294,2.12,405,3.527,417,3.769,432,2.717,479,2.717,514,4.32,516,3.316,520,3.316,521,2.39,526,2.39,532,3.316,541,3.769,574,3.769,575,3.769,577,3.769,630,3.316,633,3.769,636,3.769,639,3.769,642,3.769,652,4.328,653,4.675,654,2.717,655,2.717,656,2.717,673,3.769,691,2.717,692,2.717,700,2.717,706,2.717,707,3.769,774,2.707,801,3.769,814,2.717,821,3.769,853,1.789,855,4.585,856,5.058,858,4.965,859,3.769,860,3.316,861,2.39,862,2.717,890,3.213,891,3.769,892,4.458,893,4.458,894,4.458,895,4.458,896,4.458,897,4.458,898,5.119,899,4.458,900,3.213,901,3.213,902,3.213,903,4.328,904,3.213,905,3.213,906,6.284,907,3.213,908,3.213,909,3.213,910,4.458,911,3.213,912,3.213,913,3.213,914,3.213,915,3.213,916,3.213,917,4.458,918,3.213,919,3.213,920,2.717,921,3.213]],["title/miscellaneous/variables.html",[853,1.629,922,3.53]],["body/miscellaneous/variables.html",[8,0.991,9,1.165,11,0.558,13,0.395,14,0.854,15,0.026,18,2.17,22,0.607,24,1.397,41,0.014,42,0.014,45,1.605,46,1.605,47,1.951,49,1.705,54,1.306,62,0.558,63,0.685,70,1.481,78,1.309,79,1.772,83,1.003,88,1.269,90,1.096,91,1.605,94,1.854,99,1.605,100,1.605,101,1.772,105,1.481,108,1.723,118,1.777,119,1.777,130,1.742,138,1.096,144,0.955,169,1.777,175,2.388,177,1.777,190,1.777,197,2.25,205,2.038,223,3.475,261,1.979,382,2.899,383,2.899,385,2.25,386,2.25,387,2.25,388,2.25,396,3.295,398,2.25,401,2.25,555,1.616,576,3.295,595,2.366,609,2.25,651,2.899,681,3.295,705,2.25,711,1.979,740,3.295,743,2.25,746,2.25,747,3.295,763,2.25,764,3.295,774,2.8,853,1.481,855,4.019,856,4.938,857,2.25,858,4.776,860,4.019,861,1.979,891,2.25,903,4.569,920,2.25,922,2.25,923,2.661,924,2.661,925,3.897,926,2.661,927,3.897,928,3.897,929,3.897,930,4.611,931,4.611,932,3.897,933,3.897,934,2.661,935,3.897,936,4.611,937,4.611,938,4.611,939,2.661,940,4.611,941,3.897,942,4.611,943,4.611,944,2.661,945,3.897,946,2.661,947,2.661,948,5.076,949,2.661,950,5.645,951,2.661,952,2.661,953,2.661,954,2.661,955,2.661,956,3.897,957,3.897,958,2.661,959,2.661,960,5.645,961,2.661,962,3.897,963,2.661,964,2.661,965,2.661,966,3.897,967,2.661,968,2.661,969,2.661,970,2.661,971,2.661,972,2.661,973,2.661,974,2.661,975,2.661,976,2.661,977,2.661,978,2.661,979,4.611,980,2.661,981,2.661,982,2.661,983,2.661,984,2.661,985,2.661,986,2.661]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":219,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["0.0.1",{"_index":888,"title":{},"body":{"properties.html":{}}}],["1",{"_index":98,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/Set-1.html":{}},"body":{"injectables/StorageState.html":{},"overview.html":{}}}],["15.1.0",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":884,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":886,"title":{},"body":{"overview.html":{}}}],["3.7.6",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":885,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":346,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["accessors",{"_index":370,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('clear",{"_index":173,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('delete",{"_index":182,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{}}}],["action('load",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":92,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action('set",{"_index":179,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":545,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":549,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":542,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(clear",{"_index":802,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(delete",{"_index":806,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(loadfromyaml",{"_index":558,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":678,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":564,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(set",{"_index":145,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{}}}],["actiongroup",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiongroup('basehref",{"_index":743,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('linkregistry",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":105,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('storage",{"_index":177,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actions/actions",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["actiontyperegistry",{"_index":925,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activatedroute",{"_index":407,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":244,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":686,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":562,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":81,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":598,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":734,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["addmany",{"_index":76,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":540,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":591,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":536,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":544,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml",{"_index":537,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":547,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["affects",{"_index":412,"title":{},"body":{"directives/LinkDirective.html":{}}}],["afterviewinit",{"_index":200,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["alias",{"_index":917,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":890,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":796,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["along",{"_index":325,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["altkey",{"_index":473,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":452,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":583,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["angular/cdk/overlay",{"_index":299,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":301,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":568,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":151,"title":{},"body":{"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["angular/router",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["anyentry",{"_index":626,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentry(state",{"_index":629,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentryquery",{"_index":633,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["anytext",{"_index":627,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":634,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["application",{"_index":305,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["applying",{"_index":915,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["area'].includes(this.tagname",{"_index":454,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":708,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":919,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":417,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":920,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":275,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":539,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":350,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":317,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attaches",{"_index":281,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":194,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":391,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":392,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":393,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":415,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attributes",{"_index":480,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatically",{"_index":728,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["available",{"_index":875,"title":{},"body":{"modules.html":{}}}],["await",{"_index":601,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":425,"title":{},"body":{"directives/LinkDirective.html":{}}}],["basehref",{"_index":124,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{}}}],["basehref(value",{"_index":125,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["basehref.endswith",{"_index":154,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["basehrefselectors",{"_index":117,"title":{"classes/BaseHrefSelectors.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["basehrefselectors.basehref",{"_index":669,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["basehrefstate",{"_index":122,"title":{"injectables/BaseHrefState.html":{}},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{}}}],["bind",{"_index":488,"title":{},"body":{"directives/LinkDirective.html":{}}}],["boolean",{"_index":399,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bootstrap",{"_index":879,"title":{},"body":{"overview.html":{}}}],["bottom",{"_index":337,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":479,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["brand('linkid",{"_index":986,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":964,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":603,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browse",{"_index":876,"title":{},"body":{"modules.html":{}}}],["building",{"_index":96,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["builtin",{"_index":860,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builtin_entry",{"_index":928,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtin_type_values",{"_index":929,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtinresourcetype",{"_index":651,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["builtinresourcetype.markdown",{"_index":663,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["builtinresourcetype.text",{"_index":665,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtinresourcetype.url",{"_index":671,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtintypes",{"_index":891,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":470,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cached",{"_index":970,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":256,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["called",{"_index":731,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["case",{"_index":492,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["cb",{"_index":255,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":866,"title":{},"body":{"index.html":{}}}],["cdkstatemodule",{"_index":157,"title":{"modules/CdkStateModule.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["cdr",{"_index":718,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":721,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":697,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["changedetectorref",{"_index":699,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["changes",{"_index":363,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["child",{"_index":218,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"overview.html":{}}}],["cleanup",{"_index":248,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["clear",{"_index":168,"title":{"classes/Clear.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["clear(ctx",{"_index":800,"title":{},"body":{"injectables/StorageState.html":{}}}],["clears",{"_index":804,"title":{},"body":{"injectables/StorageState.html":{}}}],["click",{"_index":394,"title":{},"body":{"directives/LinkDirective.html":{}}}],["collects",{"_index":459,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":609,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":794,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["complete",{"_index":723,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["completes",{"_index":279,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["component",{"_index":184,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"overview.html":{}}}],["component's",{"_index":442,"title":{},"body":{"directives/LinkDirective.html":{}}}],["component/directive/pipe",{"_index":198,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":238,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentref",{"_index":221,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["components",{"_index":186,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["configuration",{"_index":693,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["connectionpositionpair",{"_index":297,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(basehref",{"_index":741,"title":{},"body":{"classes/Set.html":{}}}],["constructor(entries",{"_index":114,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{}}}],["constructor(readonly",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["constructor(scope",{"_index":282,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(url",{"_index":620,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":111,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":214,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":230,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":696,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["content",{"_index":291,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":310,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":149,"title":{},"body":{"injectables/BaseHrefState.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":836,"title":{},"body":{"injectables/StorageState.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{}}}],["create(container",{"_index":209,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["created",{"_index":322,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["createexternalurl",{"_index":438,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["createexternalurl(entry.url",{"_index":616,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["createexternalurl(link.url",{"_index":495,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl",{"_index":439,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createinternalurl(injector",{"_index":493,"title":{},"body":{"directives/LinkDirective.html":{}}}],["createlinkid('@@__empty__",{"_index":971,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["creating",{"_index":908,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ctrlkey",{"_index":471,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":148,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.getstate()[id",{"_index":600,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":588,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.setstate",{"_index":841,"title":{},"body":{"injectables/StorageState.html":{}}}],["ctx.setstate(basehref",{"_index":155,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["current",{"_index":464,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["custom",{"_index":903,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["custom:${t",{"_index":904,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom_entry",{"_index":930,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_entry_type",{"_index":931,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_type_prefix",{"_index":932,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customresourceentry",{"_index":892,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["customresourcetype",{"_index":893,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["data",{"_index":83,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data(data",{"_index":319,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dataquery",{"_index":636,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":362,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["deals",{"_index":455,"title":{},"body":{"directives/LinkDirective.html":{}}}],["declarations",{"_index":878,"title":{},"body":{"overview.html":{}}}],["decorators",{"_index":126,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["default",{"_index":223,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":153,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["defaultvalue",{"_index":657,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["defined",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["delete",{"_index":181,"title":{"classes/Delete.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{}}}],["delete(ctx",{"_index":805,"title":{},"body":{"injectables/StorageState.html":{}}}],["deletes",{"_index":808,"title":{},"body":{"injectables/StorageState.html":{}}}],["dependencies",{"_index":845,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["destroy",{"_index":195,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":935,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":191,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":246,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["destroy/on",{"_index":705,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["destroyhostcomponent",{"_index":185,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":261,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":933,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":245,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["detach",{"_index":356,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":698,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["determines",{"_index":259,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["different",{"_index":487,"title":{},"body":{"directives/LinkDirective.html":{}}}],["directive",{"_index":236,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["directives",{"_index":239,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"overview.html":{}}}],["disable",{"_index":713,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{}}}],["disconnects",{"_index":231,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["dispatch",{"_index":431,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":451,"title":{},"body":{"directives/LinkDirective.html":{}}}],["display",{"_index":206,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":308,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["docheck",{"_index":381,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dom",{"_index":188,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["draft[id",{"_index":843,"title":{},"body":{"injectables/StorageState.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/StorageState.html":{}}}],["el",{"_index":208,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["element",{"_index":215,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["elementref",{"_index":227,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emits",{"_index":277,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["emitted",{"_index":711,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":724,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["empty",{"_index":398,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":396,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":335,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":358,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["entry",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry(state",{"_index":637,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.extras",{"_index":613,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":664,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":619,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":618,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":666,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.[field",{"_index":661,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":531,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entryquery",{"_index":639,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":863,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":854,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":765,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":758,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":555,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":606,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(`no",{"_index":827,"title":{},"body":{"injectables/StorageState.html":{}}}],["error(err",{"_index":755,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":754,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":760,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":767,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["eslint",{"_index":789,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["eslint/ban",{"_index":792,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["event",{"_index":349,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["execute",{"_index":873,"title":{},"body":{"index.html":{}}}],["existing",{"_index":402,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["explicitly",{"_index":712,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["exports",{"_index":881,"title":{},"body":{"overview.html":{}}}],["extends",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["external",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":936,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":574,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extractbuiltinentrytype",{"_index":894,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extracts",{"_index":905,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":94,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":267,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["field",{"_index":628,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["field(state",{"_index":640,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["fieldquery",{"_index":642,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["filename",{"_index":548,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["first",{"_index":217,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["flexibleconnectedto(this.el",{"_index":332,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["format",{"_index":954,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":527,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["fragment",{"_index":385,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":249,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":868,"title":{},"body":{"index.html":{}}}],["get(url",{"_index":593,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":528,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["getentry(state",{"_index":660,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield",{"_index":646,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield(id",{"_index":668,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getlinkattributes(link",{"_index":489,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":486,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getstorage",{"_index":799,"title":{},"body":{"injectables/StorageState.html":{}}}],["getstorage(id",{"_index":811,"title":{},"body":{"injectables/StorageState.html":{}}}],["getting",{"_index":864,"title":{"index.html":{}},"body":{}}],["given",{"_index":780,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["global",{"_index":672,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["globally",{"_index":535,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["graph",{"_index":874,"title":{},"body":{"modules.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["handle",{"_index":347,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["handler's",{"_index":918,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":909,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":757,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["helper",{"_index":916,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["holding",{"_index":139,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/StorageState.html":{}}}],["host",{"_index":203,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["host.component.ts",{"_index":192,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:14",{"_index":225,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:22",{"_index":211,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":429,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":426,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":427,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":428,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":390,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":302,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":423,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":357,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":351,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":367,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":290,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":287,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":240,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":202,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["hrahover",{"_index":306,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":241,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":366,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":243,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":129,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/Set.html":{}}}],["href.actions",{"_index":152,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.actions.ts",{"_index":740,"title":{},"body":{"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["href.actions.ts:7",{"_index":742,"title":{},"body":{"classes/Set.html":{}}}],["href.selectors.ts",{"_index":120,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.selectors.ts:12",{"_index":128,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.state",{"_index":133,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["href.state.ts",{"_index":137,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href.state.ts:20",{"_index":146,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["href/base",{"_index":119,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["html",{"_index":235,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["http",{"_index":578,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":567,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["id",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["id,key",{"_index":781,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["identifier",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":795,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["immediately",{"_index":278,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["immer",{"_index":820,"title":{},"body":{"injectables/StorageState.html":{}}}],["implements",{"_index":199,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":293,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["imports",{"_index":166,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["improved",{"_index":554,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["increasechangecount(ctx",{"_index":840,"title":{},"body":{"injectables/StorageState.html":{}}}],["increases",{"_index":835,"title":{},"body":{"injectables/StorageState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":763,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["inject",{"_index":228,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["inject(changedetectorref",{"_index":719,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(elementref).nativeelement",{"_index":224,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(httpclient",{"_index":581,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(injector",{"_index":443,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(ngzone",{"_index":586,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":331,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(overlay).create",{"_index":329,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":584,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":737,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(viewcontainerref",{"_index":343,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject>(elementref).nativeelement.tagname.tolowercase",{"_index":447,"title":{},"body":{"directives/LinkDirective.html":{}}}],["injectable",{"_index":135,"title":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{}},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{}}}],["injectables",{"_index":136,"title":{},"body":{"injectables/BaseHrefState.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"overview.html":{}}}],["injectdestroy",{"_index":704,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injection",{"_index":730,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injector",{"_index":430,"title":{},"body":{"directives/LinkDirective.html":{}}}],["injectors/.../on",{"_index":934,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":897,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../select.ts",{"_index":900,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":939,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/on",{"_index":190,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":913,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":691,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":746,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":582,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["input",{"_index":303,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":309,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":318,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":441,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":365,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":216,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":212,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{},"overview.html":{}}}],["internal",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":937,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":575,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["invalid",{"_index":953,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isanchorelement",{"_index":453,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isbuiltintype(val",{"_index":952,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdestructorscopelike(obj",{"_index":268,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isobject",{"_index":270,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isresourceurl",{"_index":457,"title":{},"body":{"directives/LinkDirective.html":{}}}],["items",{"_index":784,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["js",{"_index":571,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["k",{"_index":506,"title":{},"body":{"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["keeping",{"_index":533,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":180,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key,value",{"_index":778,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key:string",{"_index":829,"title":{},"body":{"injectables/StorageState.html":{}}}],["latest",{"_index":750,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["legend",{"_index":234,"title":{},"body":{"components/DestroyHostComponent.html":{},"overview.html":{}}}],["length",{"_index":775,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["library",{"_index":867,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":196,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["lifetime",{"_index":727,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["line",{"_index":790,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":458,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.commands",{"_index":494,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":462,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":475,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link/url",{"_index":465,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link?.type",{"_index":491,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":576,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":590,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":242,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":985,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":577,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":434,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":541,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":516,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":520,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":435,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":162,"title":{"injectables/LinkRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":74,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":436,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":476,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":461,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["list",{"_index":810,"title":{},"body":{"injectables/StorageState.html":{}}}],["load",{"_index":560,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":589,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":109,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":85,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":580,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":110,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":677,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":87,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":538,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":557,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["local",{"_index":816,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["localstorage",{"_index":825,"title":{},"body":{"injectables/StorageState.html":{}}}],["manage",{"_index":813,"title":{},"body":{"injectables/StorageState.html":{}}}],["many",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":572,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":687,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":685,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maps",{"_index":901,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mark",{"_index":695,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markdown",{"_index":108,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(getfield",{"_index":643,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["markdown_entry",{"_index":938,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markfn",{"_index":720,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck(options",{"_index":716,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marking",{"_index":714,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marks",{"_index":709,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["merged",{"_index":502,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergeextras(opt1",{"_index":503,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey",{"_index":505,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('fragment",{"_index":511,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('preservefragment",{"_index":512,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparams",{"_index":509,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('queryparamshandling",{"_index":510,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mergekey('relativeto",{"_index":513,"title":{},"body":{"directives/LinkDirective.html":{}}}],["merges",{"_index":496,"title":{},"body":{"directives/LinkDirective.html":{}}}],["messages",{"_index":556,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":201,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":474,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":178,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{}}}],["methods",{"_index":123,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["miscellaneous",{"_index":853,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":910,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":156,"title":{"modules/CdkStateModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":158,"title":{"modules.html":{}},"body":{"modules/CdkStateModule.html":{},"modules.html":{}}}],["monotypeoperatorfunction",{"_index":701,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["mounted",{"_index":445,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouse",{"_index":348,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":422,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":368,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":369,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multiple",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["nagivate",{"_index":409,"title":{},"body":{"directives/LinkDirective.html":{}}}],["name",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["navigate",{"_index":89,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":563,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":615,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":610,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigation",{"_index":97,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["never",{"_index":662,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":222,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["next",{"_index":722,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["next(value",{"_index":761,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":753,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngafterviewinit",{"_index":232,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ngdocheck",{"_index":466,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngmodule",{"_index":160,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxs/store",{"_index":132,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["ngxsmodule",{"_index":161,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngxsmodule.forfeature([basehrefstate",{"_index":167,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["ngzone",{"_index":569,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":766,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":764,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":607,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["none",{"_index":207,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifyonchange",{"_index":694,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":272,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["nullable",{"_index":978,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":783,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["nx",{"_index":869,"title":{},"body":{"index.html":{}}}],["obj",{"_index":263,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obj.ondestroy",{"_index":273,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obje",{"_index":838,"title":{},"body":{"injectables/StorageState.html":{}}}],["object",{"_index":175,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["object.values(rawbuiltinresourcetype",{"_index":947,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objects",{"_index":814,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":561,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["observable's",{"_index":726,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["observables",{"_index":197,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":748,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":747,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":759,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":762,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":756,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["onclick",{"_index":384,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":421,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":251,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":252,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["onsameurlnavigation",{"_index":980,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":837,"title":{},"body":{"injectables/StorageState.html":{}}}],["operator",{"_index":715,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["opt1",{"_index":500,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2",{"_index":501,"title":{},"body":{"directives/LinkDirective.html":{}}}],["opt2[key",{"_index":507,"title":{},"body":{"directives/LinkDirective.html":{}}}],["optional",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["optionally",{"_index":526,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":95,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"interfaces/SelectOptions.html":{}}}],["options?.notifyonchange",{"_index":717,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["originx",{"_index":334,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":336,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":266,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{}}}],["out",{"_index":355,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"overview.html":{}}}],["over",{"_index":324,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":298,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":328,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":354,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":359,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.hasattached",{"_index":353,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":338,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":339,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["override",{"_index":499,"title":{},"body":{"directives/LinkDirective.html":{}}}],["overview",{"_index":877,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":844,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":779,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["param1",{"_index":599,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/StorageState.html":{}}}],["parameters",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["params",{"_index":403,"title":{},"body":{"directives/LinkDirective.html":{}}}],["parse",{"_index":551,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":79,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":725,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["passed",{"_index":289,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["passthrough",{"_index":949,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":907,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["peer",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":420,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["pipe",{"_index":684,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["pipe(map((data",{"_index":596,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":739,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pointed",{"_index":809,"title":{},"body":{"injectables/StorageState.html":{}}}],["portal",{"_index":316,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":326,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":330,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["prefix",{"_index":958,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":401,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":386,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":321,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["produce",{"_index":819,"title":{},"body":{"injectables/StorageState.html":{}}}],["produce((draft",{"_index":842,"title":{},"body":{"injectables/StorageState.html":{}}}],["promise",{"_index":566,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{},"properties.html":{}}}],["property",{"_index":345,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["provided",{"_index":213,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["providers",{"_index":880,"title":{},"body":{"overview.html":{}}}],["queries",{"_index":519,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":405,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":515,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["querying",{"_index":448,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":449,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":387,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":388,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["raw",{"_index":107,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rawbuiltinresourcetype",{"_index":857,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set-1.html":{}}}],["record",{"_index":921,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["reference",{"_index":226,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["refine((val",{"_index":951,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":254,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registered",{"_index":250,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":573,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":116,"title":{},"body":{"classes/AddMany-1.html":{}}}],["registry.actions.ts:21",{"_index":115,"title":{},"body":{"classes/AddMany.html":{}}}],["registry.actions.ts:31",{"_index":113,"title":{},"body":{"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:32",{"_index":112,"title":{},"body":{"classes/AddFromYaml.html":{}}}],["registry.actions.ts:42",{"_index":622,"title":{},"body":{"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:43",{"_index":621,"title":{},"body":{"classes/LoadFromYaml.html":{}}}],["registry.actions.ts:53",{"_index":623,"title":{},"body":{"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["registry.actions.ts:8",{"_index":104,"title":{},"body":{"classes/Add-1.html":{}}}],["registry.actions.ts:9",{"_index":57,"title":{},"body":{"classes/Add.html":{}}}],["registry.model",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":856,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":514,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:103",{"_index":648,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:113",{"_index":650,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:16",{"_index":518,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:38",{"_index":638,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:48",{"_index":632,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:58",{"_index":641,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:71",{"_index":635,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:93",{"_index":645,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":523,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":532,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":675,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":674,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:47",{"_index":546,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":676,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:57",{"_index":543,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":680,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:68",{"_index":550,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":679,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:81",{"_index":559,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:94",{"_index":565,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":927,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rel",{"_index":382,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relative",{"_index":410,"title":{},"body":{"directives/LinkDirective.html":{}}}],["relativeto",{"_index":389,"title":{},"body":{"directives/LinkDirective.html":{}}}],["relurl",{"_index":670,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["remaining",{"_index":914,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remote",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["replaceurl",{"_index":983,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":257,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["reset",{"_index":883,"title":{},"body":{"overview.html":{}}}],["resource",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"modules/CdkStateModule.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_entry",{"_index":940,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_id",{"_index":941,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":681,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":682,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":103,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceentrypayload",{"_index":895,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":963,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":625,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":673,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":630,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":624,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.anyentry",{"_index":655,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.entry",{"_index":654,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.field",{"_index":656,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrystate",{"_index":163,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":106,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":652,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":594,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["restargs",{"_index":896,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["result",{"_index":504,"title":{},"body":{"directives/LinkDirective.html":{}}}],["result[key",{"_index":508,"title":{},"body":{"directives/LinkDirective.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":773,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["returned",{"_index":653,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["route",{"_index":411,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":570,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["routing",{"_index":380,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":276,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["running",{"_index":870,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":258,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["schema",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":262,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scope.ondestroy",{"_index":284,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":280,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["second",{"_index":498,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":265,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["select",{"_index":692,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":736,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["select(selector",{"_index":738,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":735,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selection",{"_index":732,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selectoptions",{"_index":690,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{}}}],["selector",{"_index":131,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['basehrefstate",{"_index":127,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector(['linkregistrystate",{"_index":517,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":631,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector(['storagestate",{"_index":776,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selector(['undefined",{"_index":644,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([basehrefstate",{"_index":134,"title":{},"body":{"classes/BaseHrefSelectors.html":{}}}],["selector([linkregistrystate",{"_index":524,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistryselectors.field",{"_index":667,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":659,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([storagestate",{"_index":787,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selectors",{"_index":121,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{}}}],["selectquery",{"_index":899,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot",{"_index":432,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":450,"title":{},"body":{"directives/LinkDirective.html":{}}}],["service",{"_index":579,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["session",{"_index":815,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstorage",{"_index":826,"title":{},"body":{"injectables/StorageState.html":{}}}],["set",{"_index":144,"title":{"classes/Set.html":{},"classes/Set-1.html":{}},"body":{"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["set(ctx",{"_index":817,"title":{},"body":{"injectables/StorageState.html":{}}}],["setbasehref",{"_index":140,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setbasehref(ctx",{"_index":141,"title":{},"body":{"injectables/BaseHrefState.html":{}}}],["setcontent(content",{"_index":377,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":378,"title":{},"body":{"directives/HoverDirective.html":{}}}],["sets",{"_index":147,"title":{},"body":{"injectables/BaseHrefState.html":{},"classes/Set.html":{},"injectables/StorageState.html":{}}}],["setter",{"_index":307,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":327,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":472,"title":{},"body":{"directives/LinkDirective.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["skiplocationchange",{"_index":982,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":751,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts",{"_index":898,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":745,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":288,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":371,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":372,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:38",{"_index":375,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:58",{"_index":376,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:62",{"_index":374,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:71",{"_index":373,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":379,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:14",{"_index":397,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:17",{"_index":404,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:20",{"_index":406,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:23",{"_index":395,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:26",{"_index":400,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:29",{"_index":408,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":413,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":414,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":416,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:80",{"_index":418,"title":{},"body":{"directives/LinkDirective.html":{}}}],["standalone",{"_index":204,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":341,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":865,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":352,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":138,"title":{},"body":{"injectables/BaseHrefState.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../action",{"_index":926,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../base",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../link",{"_index":855,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":858,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../storage.actions.ts",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../storage.model.ts",{"_index":859,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/actions/action",{"_index":944,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["state/src/base",{"_index":118,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/state.module.ts",{"_index":159,"title":{},"body":{"modules/CdkStateModule.html":{}}}],["state/src/storage/storage.actions.ts",{"_index":169,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"miscellaneous/variables.html":{}}}],["state/src/storage/storage.actions.ts:10",{"_index":744,"title":{},"body":{"classes/Set-1.html":{}}}],["state/src/storage/storage.actions.ts:24",{"_index":183,"title":{},"body":{"classes/Delete.html":{}}}],["state/src/storage/storage.actions.ts:37",{"_index":174,"title":{},"body":{"classes/Clear.html":{}}}],["state/src/storage/storage.model.ts",{"_index":862,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/storage/storage.selectors.ts",{"_index":772,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:13",{"_index":777,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:23",{"_index":782,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.state.ts",{"_index":798,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:25",{"_index":812,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:43",{"_index":818,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:53",{"_index":807,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:63",{"_index":803,"title":{},"body":{"injectables/StorageState.html":{}}}],["state[id",{"_index":529,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["statecontext",{"_index":142,"title":{},"body":{"injectables/BaseHrefState.html":{},"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":707,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":700,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/BaseHrefSelectors.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage",{"_index":165,"title":{},"body":{"modules/CdkStateModule.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["storage.actions",{"_index":822,"title":{},"body":{"injectables/StorageState.html":{}}}],["storage.model",{"_index":176,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage.state",{"_index":786,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagecontext",{"_index":801,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageid",{"_index":172,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["storageid.local",{"_index":823,"title":{},"body":{"injectables/StorageState.html":{}}}],["storageid.session",{"_index":824,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagemodel",{"_index":821,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageselectors",{"_index":771,"title":{"classes/StorageSelectors.html":{}},"body":{"classes/StorageSelectors.html":{}}}],["storagestate",{"_index":164,"title":{"injectables/StorageState.html":{}},"body":{"modules/CdkStateModule.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).clear",{"_index":834,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).getitem(key",{"_index":788,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).length",{"_index":797,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).removeitem(key",{"_index":833,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).setitem(key",{"_index":831,"title":{},"body":{"injectables/StorageState.html":{}}}],["store",{"_index":344,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["stored",{"_index":171,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storing",{"_index":749,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["stream",{"_index":752,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":861,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":706,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["styles",{"_index":187,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["subject",{"_index":274,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":247,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:27",{"_index":689,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":253,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["such",{"_index":828,"title":{},"body":{"injectables/StorageState.html":{}}}],["super",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"classes/Set-1.html":{}}}],["super(1",{"_index":283,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["supplied",{"_index":785,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["switch",{"_index":490,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["t",{"_index":294,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["t[k",{"_index":658,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["tag",{"_index":444,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tagname",{"_index":446,"title":{},"body":{"directives/LinkDirective.html":{}}}],["takeuntil",{"_index":702,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["tap",{"_index":703,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":383,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":229,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":300,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":312,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":304,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":292,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":264,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["tests",{"_index":872,"title":{},"body":{"index.html":{}}}],["text",{"_index":595,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(getfield",{"_index":647,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["text_entry",{"_index":942,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this._data",{"_index":314,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":587,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":688,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":597,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.complete",{"_index":286,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.el.remove",{"_index":233,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["this.errorvalue",{"_index":769,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.extras",{"_index":478,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.getentry(state",{"_index":525,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.getlinkattributes(link",{"_index":485,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":482,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":592,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":683,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.increasechangecount(ctx",{"_index":832,"title":{},"body":{"injectables/StorageState.html":{}}}],["this.link",{"_index":468,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.mergeextras(link?.type",{"_index":460,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":477,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":604,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":602,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":285,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.portal",{"_index":311,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":320,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.querylink(this.linkid",{"_index":467,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.rel",{"_index":483,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router?.navigate(entry.commands",{"_index":612,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.target",{"_index":484,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":315,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink(link",{"_index":469,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":770,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":313,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":611,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":605,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["throws",{"_index":768,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":729,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["token",{"_index":733,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["top",{"_index":340,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["track",{"_index":534,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":962,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform>(createcustomtype",{"_index":955,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":957,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":189,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["triggers",{"_index":419,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":205,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":424,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ts",{"_index":793,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["tslib",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["two",{"_index":497,"title":{},"body":{"directives/LinkDirective.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":889,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":902,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typematches",{"_index":530,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["typeof",{"_index":271,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":774,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":791,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["typings",{"_index":911,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ui/cdk/injectors",{"_index":433,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":437,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":440,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"dependencies.html":{}}}],["ui/utils/types",{"_index":522,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["undefined",{"_index":143,"title":{},"body":{"injectables/BaseHrefState.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["union",{"_index":946,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unionmember",{"_index":521,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":912,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unit",{"_index":871,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":269,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["unparsed",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":93,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":361,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":364,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updated",{"_index":839,"title":{},"body":{"injectables/StorageState.html":{}}}],["updatelink(link",{"_index":481,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":463,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updation",{"_index":360,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(getfield",{"_index":649,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":553,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["url_entry",{"_index":943,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urlcreationoptions",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["urls",{"_index":456,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["use",{"_index":296,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":193,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":295,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["userhovers",{"_index":323,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["using",{"_index":608,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["validator",{"_index":956,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":130,"title":{},"body":{"classes/BaseHrefSelectors.html":{},"injectables/BaseHrefState.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set-1.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value:string",{"_index":830,"title":{},"body":{"injectables/StorageState.html":{}}}],["values",{"_index":170,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/Set-1.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":237,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":922,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":887,"title":{},"body":{"properties.html":{}}}],["view",{"_index":220,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["viewcontainerref",{"_index":210,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["void",{"_index":150,"title":{},"body":{"injectables/BaseHrefState.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["weakmap",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":710,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["whether",{"_index":260,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["window",{"_index":614,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(url",{"_index":617,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["withpositions",{"_index":333,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":342,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["yaml",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":552,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":950,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":975,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":979,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":945,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":977,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":906,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":981,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":972,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":974,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.markdown",{"_index":959,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.text",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.url",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":948,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":984,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(resource_id",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":976,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":960,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":973,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.union([builtin_entry",{"_index":961,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":585,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["zoom",{"_index":882,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:9\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:32\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:21\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Add Many')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BaseHrefSelectors.html":{"url":"classes/BaseHrefSelectors.html","title":"class - BaseHrefSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BaseHrefSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for BaseHrefState\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                baseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        baseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    baseHref(value: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['BaseHrefState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.selectors.ts:12\n                        \n                    \n\n\n            \n                \n                        Returns base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    href value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                href value\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { BaseHrefState } from './base-href.state';\n\n/** Selectors for BaseHrefState */\nexport class BaseHrefSelectors {\n  /**\n   * Returns base href value\n   * @param value href value\n   * @returns href value\n   */\n  @Selector([BaseHrefState])\n  static baseHref(value: string): string {\n    return value;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/BaseHrefState.html":{"url":"injectables/BaseHrefState.html","title":"injectable - BaseHrefState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  BaseHrefState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding the base href\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                setBaseHref\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        setBaseHref\n                        \n                    \n                \n            \n            \n                \n                        \n                    setBaseHref(ctx: StateContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/base-href/base-href.state.ts:20\n                        \n                    \n\n\n            \n                \n                        Sets base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                        StateContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    state context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Action, State, StateContext } from '@ngxs/store';\nimport { Set } from './base-href.actions';\n\n/**\n * State holding the base href\n */\n@State({\n  name: 'baseHref',\n  defaults: '',\n})\n@Injectable()\nexport class BaseHrefState {\n  /**\n   * Sets base href value\n   * @param ctx state context\n   * @param { baseHref } href value\n   */\n  @Action(Set)\n  setBaseHref(ctx: StateContext, { baseHref }: Set) {\n    if (baseHref !== '' && !baseHref.endsWith('/')) {\n      baseHref = baseHref + '/';\n    }\n    ctx.setState(baseHref);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CdkStateModule.html":{"url":"modules/CdkStateModule.html","title":"module - CdkStateModule","body":"\n                   \n\n\n\n\n    Modules\n    CdkStateModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            state/src/state.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { NgxsModule } from '@ngxs/store';\nimport { BaseHrefState } from './base-href';\nimport { LinkRegistryState } from './link-registry';\nimport { ResourceRegistryState } from './resource-registry';\nimport { StorageState } from './storage';\n\n@NgModule({\n  imports: [NgxsModule.forFeature([BaseHrefState, LinkRegistryState, ResourceRegistryState, StorageState])],\n})\nexport class CdkStateModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clear.html":{"url":"classes/Clear.html","title":"class - Clear","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clear\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear the values stored in the specified StorageId\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Clear')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:37\n                            \n                        \n\n                \n                    \n                            constructor class for clear action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Delete.html":{"url":"classes/Delete.html","title":"class - Delete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Delete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                 Class Delete Action for delete method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Delete')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:24\n                            \n                        \n\n                \n                    \n                            constructor class for Delete action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n    \n        Implements\n    \n    \n                AfterViewInit\n    \n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n            \n                Standalone\n                true\n            \n\n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                el\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                        \n                    create(container: ViewContainerRef)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:22\n                        \n                    \n\n\n            \n                \n                        Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                container\n                                            \n                                                        ViewContainerRef\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    View in which to create the element\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ComponentRef\n\n                        \n                            \n                                The ComponentRef of the newly inserted element\n\n                            \n                \n            \n        \n    \n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        el\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Element\n\n                    \n                \n                \n                    \n                        Default value : inject(ElementRef).nativeElement\n                    \n                \n                    \n                        \n                                Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:14\n                        \n                    \n\n            \n                \n                    Reference to own dom element\n\n                \n            \n\n        \n    \n\n\n\n\n\n    \n        import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent implements AfterViewInit {\n  /** Reference to own dom element */\n  readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    return container.createComponent(DestroyHostComponent, { index: 0 });\n  }\n\n  /** Disconnects the component from the dom tree */\n  ngAfterViewInit(): void {\n    this.el.remove();\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                        \n                    \n\n\n            \n                \n                        Register a cleanup function\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                cb\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Cleanup callback function\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                overlayRef\n                            \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                endHover\n                            \n                            \n                                    \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        endHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    endHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:71\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse out event to detach the portal\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        startHover\n                        \n                    \n                \n            \n            \n                \n                        \n                    startHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n                    \n                        \n                            Defined in src/lib/hover/hover.directive.ts:62\n                        \n                    \n\n\n            \n                \n                        Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:38\n                        \n                    \n\n            \n                \n                    Reference to the overlay that is created when the userhovers over the element along with its position setting\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:58\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                        DoCheck\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                    \n                        Standalone\n                        true\n                    \n\n\n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Optional\n                                href\n                            \n                            \n                                    \n                                    Optional\n                                rel\n                            \n                            \n                                    \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                fragment\n                            \n                            \n                                hraLink\n                            \n                            \n                                preserveFragment\n                            \n                            \n                                queryParams\n                            \n                            \n                                queryParamsHandling\n                            \n                            \n                                relativeTo\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        fragment\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:23\n                            \n                        \n                \n                    \n                        Url fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:14\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        preserveFragment\n                    \n                \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:26\n                            \n                        \n                \n                    \n                        Whether to preserve the existing fragment\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParams\n                    \n                \n                \n                    \n                        Type :     Params\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:17\n                            \n                        \n                \n                    \n                        Query string parameters\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        queryParamsHandling\n                    \n                \n                \n                    \n                        Type :     QueryParamsHandling\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:20\n                            \n                        \n                \n                    \n                        How to handle existing query params\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        relativeTo\n                    \n                \n                \n                    \n                        Type :     ActivatedRoute\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:29\n                            \n                        \n                \n                    \n                        Nagivate relative to a route. Only affects internal links.\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:80\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        onClick\n                        \n                    \n                \n            \n            \n                \n                        \n                    onClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n                    \n                        \n                            Defined in src/lib/link/link.directive.ts:80\n                        \n                    \n\n\n            \n                \n                        Triggers when a click action is performed on the element\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                event\n                                            \n                                                        MouseEvent\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    type of event\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                true/false based on entry and element\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:32\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { Directive, DoCheck, ElementRef, HostBinding, HostListener, inject, Injector, Input } from '@angular/core';\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from '@hra-ui/cdk/state';\nimport { createExternalUrl, createInternalUrl } from '@hra-ui/utils';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements DoCheck {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n\n  /** Query string parameters */\n  @Input() queryParams?: Params;\n\n  /** How to handle existing query params */\n  @Input() queryParamsHandling?: QueryParamsHandling;\n\n  /** Url fragment */\n  @Input() fragment?: string;\n\n  /** Whether to preserve the existing fragment */\n  @Input() preserveFragment?: boolean;\n\n  /** Nagivate relative to a route. Only affects internal links. */\n  @Input() relativeTo?: ActivatedRoute;\n\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Reference to this component's injector */\n  private readonly injector = inject(Injector);\n  /** Element tag on which this directive is mounted */\n  private readonly tagName = inject>(ElementRef).nativeElement.tagName.toLowerCase();\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /** Whether the host element is an anchor */\n  private get isAnchorElement(): boolean {\n    return ['a', 'area'].includes(this.tagName);\n  }\n\n  /** Whether the host element deals with resource urls */\n  private get isResourceUrl(): boolean {\n    return ['base', 'link'].includes(this.tagName);\n  }\n\n  /** Collects query params and fragment options into a single object */\n  private get extras(): UrlCreationOptions {\n    const { link } = this;\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\n  }\n\n  /** Updates the current link/url based on the inputs */\n  ngDoCheck(): void {\n    const link = this.queryLink(this.linkId);\n    if (this.link !== link) {\n      this.updateLink(link);\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId, this.extras);\n    return !isAnchorElement;\n  }\n\n  /** Updates the link entry and bound attributes */\n  private updateLink(link?: LinkEntry): void {\n    this.link = link;\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\n  }\n\n  /**\n   * Gets the new values for different attributes bound to the host element\n   * @param link Current link entry\n   * @returns New attributes values to bind on the host element\n   */\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\n    const { injector, extras, isResourceUrl } = this;\n    switch (link?.type) {\n      case LinkType.Internal:\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\n\n      case LinkType.External:\n        return { ...link, href: createExternalUrl(link.url, extras) };\n\n      default:\n        return {};\n    }\n  }\n\n  /**\n   * Merges two UrlCreationOptions.\n   * Undefined values in the second set does not override values from the first set.\n   * @param opt1 First set of options\n   * @param opt2 Second set of options\n   * @returns Merged options\n   */\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\n    const result = { ...opt1 };\n    const mergeKey = (key: K) => {\n      if (opt2[key] !== undefined) {\n        result[key] = opt2[key];\n      }\n    };\n\n    mergeKey('queryParams');\n    mergeKey('queryParamsHandling');\n    mergeKey('fragment');\n    mergeKey('preserveFragment');\n    mergeKey('relativeTo');\n    return result;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                        \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.selectors.ts:16\n                        \n                    \n\n\n            \n                \n                        Queries for a link entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            LinkRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         LinkRegistryQuery\n\n                        \n                            \n                                link query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadYaml\n                            \n                            \n                                    \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:57\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:47\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:68\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:81\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                        \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n                    \n                        \n                            Defined in state/src/link-registry/link-registry.state.ts:94\n                        \n                    \n\n\n            \n                \n                        Navigate to Internal or External urls from id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            LinkRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Navigate\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router, UrlCreationOptions } from '@angular/router';\nimport { createExternalUrl } from '@hra-ui/utils';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T,\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router, { optional: true });\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry, extras);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry, extras);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise {\n    await this.zone.run(() => this.router?.navigate(entry.commands, { ...entry.extras, ...extras }));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\n    const url = createExternalUrl(entry.url, extras);\n    window.open(url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:43\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load from Yaml')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Load Markdown')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Navigate')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, extras: UrlCreationOptions)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                                \n                                                        extras\n                                                  \n                                                        \n                                                                    UrlCreationOptions\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Options when building the navigation url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { UrlCreationOptions } from '@angular/router';\nimport { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   * @param extras Options when building the navigation url\n   */\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                anyEntry\n                            \n                            \n                                    \n                                    Static\n                                anyText\n                            \n                            \n                                    \n                                    Static\n                                entry\n                            \n                            \n                                    \n                                    Static\n                                field\n                            \n                            \n                                    \n                                    Static\n                                markdown\n                            \n                            \n                                    \n                                    Static\n                                text\n                            \n                            \n                                    \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyEntry\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyEntry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:48\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         AnyEntryQuery\n\n                        \n                            \n                                Any entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                        \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:71\n                        \n                    \n\n\n            \n                \n                        Query for any text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        entry\n                        \n                    \n                \n            \n            \n                \n                        \n                    entry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:38\n                        \n                    \n\n\n            \n                \n                        Queries an entry by id and type\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         EntryQuery\n\n                        \n                            \n                                Entry query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        field\n                        \n                    \n                \n            \n            \n                \n                        \n                    field(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:58\n                        \n                    \n\n\n            \n                \n                        Queries a field of an entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                state\n                                            \n                                                            ResourceRegistryModel\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    Current state\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         FieldQuery\n\n                        \n                            \n                                A field query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    markdown(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:93\n                        \n                    \n\n\n            \n                \n                        Query for markdown data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Markdown data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                        \n                    text(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:103\n                        \n                    \n\n\n            \n                \n                        Query for text data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Text data query function\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                        \n                    url(getField: FieldQuery, baseHref: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined', 'undefined'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.selectors.ts:113\n                        \n                    \n\n\n            \n                \n                        Query for an url\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                getField\n                                            \n                                                            FieldQuery\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                baseHref\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    ''\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         DataQuery\n\n                        \n                            \n                                Url query function\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceType,\n  getEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\nimport { BaseHrefSelectors } from '../base-href';\n\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\nexport type EntryQuery = (id: ResourceId, type: ResourceType) => T | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\nexport type FieldQuery = (\n  id: ResourceId,\n  type: ResourceType,\n  field: K,\n  defaultValue?: T[K],\n) => T[K];\n\n/** Query function for resource data */\nexport type DataQuery = (id: ResourceId) => T;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries an entry by id and type\n   * @param state Current state\n   * @returns Entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static entry(state: ResourceRegistryModel): EntryQuery {\n    return (id, type) => getEntry(state, id, type);\n  }\n\n  /**\n   * Queries an entry by id\n   * @param state Current state\n   * @returns Any entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\n    return (id) => getEntry(state, id);\n  }\n\n  /**\n   * Queries a field of an entry\n   * @param state Current state\n   * @returns A field query function\n   */\n  @Selector([ResourceRegistryState])\n  static field(state: ResourceRegistryModel): FieldQuery {\n    return (id, type, field, defaultValue?) => {\n      const entry = getEntry(state, id, type);\n      return entry?.[field] ?? (defaultValue as never);\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): DataQuery {\n    return (id) => {\n      const entry = getEntry(state, id);\n      switch (entry?.type) {\n        case BuiltinResourceType.Markdown:\n          return entry.markdown;\n\n        case BuiltinResourceType.Text:\n          return entry.text;\n\n        default:\n          return '';\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static markdown(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Markdown, 'markdown', '');\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static text(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Text, 'text', '');\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistrySelectors.field, BaseHrefSelectors.baseHref])\n  static url(getField: FieldQuery, baseHref = ''): DataQuery {\n    return (id) => {\n      const relUrl = getField(id, BuiltinResourceType.Url, 'url', '');\n      return relUrl !== '' ? baseHref + relUrl : '';\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                addMany\n                            \n                            \n                                    \n                                addOne\n                            \n                            \n                                    \n                                addYaml\n                            \n                            \n                                    \n                                loadMarkdown\n                            \n                            \n                                    \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addMany\n                        \n                    \n                \n            \n            \n                \n                        \n                    addMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:40\n                        \n                    \n\n\n            \n                \n                        Add multiple entries\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddMany\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addOne\n                        \n                    \n                \n            \n            \n                \n                        \n                    addOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:30\n                        \n                    \n\n\n            \n                \n                        Add a single entry\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            Add\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        addYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    addYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:51\n                        \n                    \n\n\n            \n                \n                        Parse and add entries from yaml\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            AddFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                        \n                                                filename\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Optional url/filename from which the data was loaded (for improved error messages)\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:77\n                        \n                    \n\n\n            \n                \n                        Adds a markdown entry with content loaded from an external file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadMarkdown\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entry has been added\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \n                        \n                    loadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n                    \n                        \n                            Defined in state/src/resource-registry/resource-registry.state.ts:64\n                        \n                    \n\n\n            \n                \n                        Load and add entries from an external yaml file\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            ResourceRegistryContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    State context\n\n                                            \n                                        \n                                        \n                                            \n                                                            LoadFromYaml\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable that completes when the entries has been added\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  BuiltinResourceType,\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                        ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/base-href/base-href.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Sets the base href\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(baseHref: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/base-href/base-href.actions.ts:7\n                            \n                        \n\n                \n                    \n                            Sets the base href\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        baseHref\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New href\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\n\n/** Base action factory */\nconst Action = ActionGroup('BaseHref');\n\n/** Sets the base href */\nexport class Set extends Action('Set') {\n  /**\n   * Sets the base href\n   * @param baseHref New href\n   */\n  constructor(readonly baseHref: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set-1.html":{"url":"classes/Set-1.html","title":"class - Set-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Class Set Action for set method\n\n            \n\n            \n                Extends\n            \n            \n                            Action('Set')\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:10\n                            \n                        \n\n                \n                    \n                            constructor class for Set action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - value to be stored with the key\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                        \n                    \n\n\n            \n                \n                        Handles error emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                err\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The error value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                        \n                    \n\n\n            \n                \n                        Gets the latest value or throw on errors\n\n\n                        \n                            Returns :     T\n\n                        \n                            \n                                The latest value\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n                    \n                        \n                            Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                        \n                    \n\n\n            \n                \n                        Handles value emits\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        T\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The new value\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StorageSelectors.html":{"url":"classes/StorageSelectors.html","title":"class - StorageSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StorageSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Storage selectors - class for retrieving storage types\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Static\n                                get\n                            \n                            \n                                    \n                                    Static\n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                        \n                    get()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:13\n                        \n                    \n\n\n            \n                \n                        returns the value stored in the key,value pair in the storageId given\n\n\n                        \n                            Returns :     string | undefined\n\n                        \n                            \n                                (id,key) of the given storage id else undefined\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Static\n                        length\n                        \n                    \n                \n            \n            \n                \n                        \n                    length()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.selectors.ts:23\n                        \n                    \n\n\n            \n                \n                        returns the number of items in the given storage id stored\n\n\n                        \n                            Returns :     number | undefined\n\n                        \n                            \n                                length of the given StorageId supplied\n\n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { StorageId } from './storage.model';\nimport { StorageState } from './storage.state';\n/**\n * Storage selectors - class for retrieving storage types\n */\nexport class StorageSelectors {\n  /**\n   * returns the value stored in the key,value pair in the storageId given\n   * @returns (id,key) of the given storage id else undefined\n   */\n  @Selector([StorageState])\n  static get(): (id: StorageId, key: string) => string | undefined {\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\n  }\n  /**\n   * returns the number of items in the given storage id stored\n   * @returns length of the given StorageId supplied\n   */\n  @Selector([StorageState])\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Allow selector name\n  static length(): (id: StorageId) => number | undefined {\n    return (id) => StorageState.getStorage(id).length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageState.html":{"url":"injectables/StorageState.html","title":"injectable - StorageState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding Storage types\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                clear\n                            \n                            \n                                    \n                                delete\n                            \n                            \n                                    Static\n                                getStorage\n                            \n                            \n                                    \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        clear\n                        \n                    \n                \n            \n            \n                \n                        \n                    clear(ctx: StorageContext, undefined: Clear)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Clear)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:63\n                        \n                    \n\n\n            \n                \n                        clears the values of the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Clear\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        delete\n                        \n                    \n                \n            \n            \n                \n                        \n                    delete(ctx: StorageContext, undefined: Delete)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Delete)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:53\n                        \n                    \n\n\n            \n                \n                        deletes the value pointed by key in the list of values stored in the specified storage id\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Delete\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                        getStorage\n                        \n                    \n                \n            \n            \n                \n                        \n                    getStorage(id: StorageId)\n                \n            \n\n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:25\n                        \n                    \n\n\n            \n                \n                        StorageState class to manage storage objects\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            StorageId\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Storage\n\n                        \n                            \n                                \nStorage objects - session and local\n\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        set\n                        \n                    \n                \n            \n            \n                \n                        \n                    set(ctx: StorageContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n                    \n                        \n                            Defined in state/src/storage/storage.state.ts:43\n                        \n                    \n\n\n            \n                \n                        sets the key,value pair in the given storageId\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                ctx\n                                            \n                                                            StorageContext\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    \nStorageContext object\n\n\n                                            \n                                        \n                                        \n                                            \n                                                            Set\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { produce } from 'immer';\nimport { StorageContext } from './storage.model';\nimport { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { StorageId, StorageModel } from './storage.model';\nimport { Set, Delete, Clear } from './storage.actions';\n\n/**\n * State holding Storage types\n */\n@State({\n  name: 'storage',\n  defaults: {\n    [StorageId.Local]: 0,\n    [StorageId.Session]: 0,\n  },\n})\n@Injectable()\nexport class StorageState {\n  /**\n   * StorageState class to manage storage objects\n   * @param id-Storage Identifier\n   * @returns - Storage objects - session and local\n   */\n  static getStorage(id: StorageId): Storage {\n    switch (id) {\n      case StorageId.Local:\n        return localStorage;\n\n      case StorageId.Session:\n        return sessionStorage;\n\n      default:\n        throw new Error(`No such storage '${id}'`);\n    }\n  }\n  /**\n   * sets the key,value pair in the given storageId\n   * @param ctx - StorageContext object\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Set)\n  set(ctx: StorageContext, { id, key, value }: Set): void {\n    StorageState.getStorage(id).setItem(key, value);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * deletes the value pointed by key in the list of values stored in the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Delete)\n  delete(ctx: StorageContext, { id, key }: Delete): void {\n    StorageState.getStorage(id).removeItem(key);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * clears the values of the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Clear)\n  clear(ctx: StorageContext, { id }: Clear): void {\n    StorageState.getStorage(id).clear();\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * increases count after each operation is performed on the specified storage id\n   * @param ctx  - StorageContext obje\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\n   */\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\n    ctx.setState(\n      produce((draft) => {\n        draft[id] += 1;\n      }),\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            RawBuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            StorageId   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        RawBuiltinResourceType\n                    \n                \n                    \n                        \n                            Raw builtin type strings\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n    state/src/storage/storage.model.ts\n    \n        \n            \n                \n                    \n                        \n                        StorageId\n                    \n                \n                    \n                        \n                            StorageId - enum with values as Local, Session - identifier for storage types\n\n                        \n                    \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Session\n                            \n                        \n                        \n                            \n                                Value : session\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        CdkStateModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyEntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            BuiltinTypes   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            EntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            ExtractBuiltinEntryType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            FieldQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceEntryPayload   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RestArgs   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            SelectQuery   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                        \n                            StorageContext   (state/.../storage.model.ts)\n                        \n                        \n                            StorageModel   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    AnyEntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.anyEntry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.entry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.field\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    BuiltinTypes\n                \n            \n            \n                \n                    Maps raw builtin type strings to ResourceType\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceEntry\n                \n            \n            \n                \n                    Typed custom resource entry\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceType\n                \n            \n            \n                \n                    Custom entry types\n\n                \n            \n            \n                \n                         `custom:${T}`\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExtractBuiltinEntryType\n                \n            \n            \n                \n                    Extracts the builtin entry with type T\n\n                \n            \n            \n                \n                        UnionMember | type | T>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Any resource entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntryPayload\n                \n            \n            \n                \n                    Payload type used when creating custom types\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Resource identifier\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceType\n                \n            \n            \n                \n                    Resource type string with entry typings\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    RestArgs\n                \n            \n            \n                \n                    Get remaining arguments after applying bound arguments\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectQuery\n                \n            \n            \n                \n                    Function type returned by selectQuerySnapshot\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n    state/src/storage/storage.model.ts\n    \n    \n        \n            \n                \n                    \n                    StorageContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StorageModel\n                \n            \n            \n                \n                    Type alias for the array of Storage objects\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../base-href.actions.ts)\n                        \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../storage.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            BUILTIN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BUILTIN_TYPE_VALUES   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY_TYPE   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_TYPE_PREFIX   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            MARKDOWN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            RESOURCE_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_ID   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            TEXT_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            URL_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/base-href/base-href.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('BaseHref')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/storage/storage.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Storage')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BUILTIN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])\n                    \n                \n\n            \n                \n                    Union of all builtin entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BUILTIN_TYPE_VALUES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(RawBuiltinResourceType)\n                    \n                \n\n            \n                \n                    Builtin type strings as an array\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BuiltinResourceType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : RawBuiltinResourceType as BuiltinTypes\n                    \n                \n\n            \n                \n                    Builtin resource types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()\n                    \n                \n\n            \n                \n                    Custom entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform>(createCustomType)\n                    \n                \n\n            \n                \n                    Custom entry type validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_TYPE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'custom:'\n                    \n                \n\n            \n                \n                    Prefix of all custom types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MARKDOWN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})\n                    \n                \n\n            \n                \n                    Markdown data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])\n                    \n                \n\n            \n                \n                    Builtin or custom entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')\n                    \n                \n\n            \n                \n                    Resource identifier validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(RESOURCE_ID, RESOURCE_ENTRY)\n                    \n                \n\n            \n                \n                    State schema\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEXT_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})\n                    \n                \n\n            \n                \n                    Text data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URL_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})\n                    \n                \n\n            \n                \n                    External url\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
