var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.326,1,2.836]],["body/interfaces/ActionConstructor.html",[0,1.937,1,4.877,2,2.252,3,0.308,4,0.308,5,0.308,6,3.788,7,0.308,8,1.515,9,1.236,10,1.338,11,0.819,12,2.454,13,0.41,14,1.173,15,0.029,16,0.308,17,3.788,18,2.252,19,0.472,20,1.159,21,3.184,22,0.85,23,2.674,24,1.338,25,3.184,26,4.928,27,5.478,28,3.184,29,0.572,30,1.44,31,1.937,32,3.788,33,1.55,34,3.788,35,1.886,36,0.263,37,3.788,38,3.788,39,3.788,40,2.055,41,0.021,42,0.021]],["title/classes/Add.html",[36,0.18,43,0.986]],["body/classes/Add.html",[3,0.267,4,0.267,5,0.467,7,0.364,8,0.826,9,0.824,10,0.89,13,0.198,14,0.824,15,0.029,16,0.364,19,0.467,20,0.655,22,0.509,24,0.89,29,0.687,36,0.306,41,0.019,42,0.019,43,1.88,44,0.655,45,1.758,46,1.758,47,1.195,48,1.6,49,2.178,50,1.632,51,2.431,52,1.382,53,2.322,54,0.381,55,2.755,56,2.002,57,0.422,58,0.381,59,0.381,60,1.09,61,1.19,62,1.031,63,1.288,64,0.958,65,0.381,66,1.778,67,1.556,68,2.002,69,1.803,70,1.803,71,1.515,72,3.21,73,1.288,74,0.958,75,1.288,76,1.603,77,1.195,78,2.141,79,0.958,80,1.758,81,0.766,82,2.002,83,0.958,84,1.288,85,1.288,86,1.379,87,2.338,88,1.288,89,1.288,90,1.949,91,1.949]],["title/classes/Add-1.html",[36,0.152,43,0.829,92,1.539]],["body/classes/Add-1.html",[3,0.26,4,0.26,5,0.49,7,0.358,8,0.804,9,0.81,10,0.867,13,0.192,14,0.926,15,0.029,16,0.358,19,0.462,20,0.878,22,0.495,24,0.867,29,0.698,36,0.303,41,0.019,42,0.019,43,1.897,44,0.638,47,1.164,48,1.583,50,1.59,52,1.371,54,0.371,55,2.684,56,1.975,57,0.411,58,0.371,59,0.371,60,1.081,61,1.027,62,1.004,63,1.254,64,0.933,65,0.371,67,1.541,68,1.975,69,1.786,70,1.786,71,1.488,73,1.254,74,0.933,75,1.254,76,1.382,77,1.164,78,2.13,79,0.933,80,1.727,81,1.174,82,2.306,83,0.933,84,1.727,85,1.727,86,1.479,93,1.727,94,1.727,95,2.717,96,2.828,97,2.696,98,1.732,99,3.263,100,1.354,101,2.297,102,1.59,103,1.59]],["title/classes/AddFromYaml.html",[36,0.18,79,0.986]],["body/classes/AddFromYaml.html",[3,0.269,4,0.269,5,0.483,7,0.366,8,0.831,9,0.828,10,0.896,13,0.199,14,1.011,15,0.029,16,0.366,19,0.468,20,0.659,22,0.512,24,0.896,29,0.688,36,0.307,41,0.019,42,0.019,43,1.868,44,0.659,45,1.766,46,1.766,47,1.203,48,1.314,49,2.09,51,2.169,52,1.194,53,1.907,54,0.383,56,1.766,57,0.424,58,0.383,59,0.383,60,1.058,61,1.05,62,1.038,63,1.296,64,0.964,65,0.383,66,1.79,67,1.559,68,2.009,69,1.807,70,1.807,71,1.522,72,3.291,73,1.296,74,0.964,75,1.296,76,1.727,77,1.203,78,2.208,79,1.314,80,2.158,81,1.05,82,2.009,83,0.964,84,1.296,85,1.296,86,1.383,87,2.346,88,1.296,89,1.296,90,1.962,91,1.962,104,2.774,105,2.774]],["title/classes/AddFromYaml-1.html",[36,0.152,79,0.829,92,1.539]],["body/classes/AddFromYaml-1.html",[3,0.261,4,0.261,5,0.49,7,0.359,8,0.808,9,0.812,10,0.871,13,0.193,14,1.048,15,0.029,16,0.359,19,0.463,20,0.881,22,0.498,24,0.871,29,0.699,36,0.304,41,0.019,42,0.019,43,1.887,44,0.641,47,1.17,48,1.289,52,1.177,54,0.373,56,1.733,57,0.413,58,0.373,59,0.373,60,1.048,61,0.749,62,1.009,63,1.261,64,0.938,65,0.373,67,1.544,68,1.98,69,1.789,70,1.789,71,1.493,73,1.261,74,0.938,75,1.261,76,1.387,77,1.17,78,2.199,79,1.289,80,2.132,81,1.329,82,2.31,83,0.938,84,1.733,85,1.733,86,1.481,93,1.733,94,1.733,95,2.602,96,2.509,97,2.196,98,1.741,99,3.377,100,1.871,101,2.302,102,1.597,103,1.597,104,2.697,105,2.697]],["title/classes/AddMany.html",[36,0.18,74,0.986]],["body/classes/AddMany.html",[3,0.269,4,0.269,5,0.468,7,0.366,8,0.833,9,0.829,10,0.897,13,0.199,14,0.829,15,0.029,16,0.366,19,0.468,20,0.66,22,0.698,24,0.897,29,0.689,36,0.307,41,0.019,42,0.019,43,1.868,44,0.66,45,1.768,46,1.768,47,1.205,48,1.315,49,2.091,51,2.171,52,1.195,53,1.909,54,0.384,56,2.011,57,0.425,58,0.384,59,0.384,60,1.059,61,1.051,62,1.04,63,1.299,64,0.966,65,0.384,66,1.793,67,1.56,68,2.011,69,1.808,70,1.808,71,1.86,72,3.398,73,1.768,74,1.315,75,1.299,76,1.728,77,1.866,78,2.144,79,0.966,80,1.768,81,0.772,82,2.011,83,0.966,84,1.299,85,1.299,86,1.384,87,2.348,88,1.299,89,1.299,90,1.965,91,1.965,106,2.778,107,2.778]],["title/classes/AddMany-1.html",[36,0.152,74,0.829,92,1.539]],["body/classes/AddMany-1.html",[3,0.262,4,0.262,5,0.491,7,0.36,8,0.811,9,0.814,10,0.874,13,0.194,14,0.93,15,0.029,16,0.36,19,0.464,20,0.883,22,0.686,24,0.874,29,0.7,36,0.304,41,0.019,42,0.019,43,1.888,44,0.643,47,1.173,48,1.292,52,1.179,54,0.374,56,1.984,57,0.414,58,0.374,59,0.374,60,1.049,61,0.752,62,1.012,63,1.265,64,0.941,65,0.374,67,1.546,68,1.984,69,1.791,70,1.791,71,1.84,73,1.737,74,1.292,75,1.265,76,1.588,77,1.84,78,2.133,79,0.941,80,1.737,81,1.179,82,2.312,83,0.941,84,1.737,85,1.737,86,1.482,93,1.737,94,1.737,95,2.604,96,2.513,97,2.201,98,1.746,99,3.419,100,1.365,101,2.305,102,1.603,103,1.603,106,2.706,107,2.706]],["title/classes/Clear.html",[36,0.18,108,2.006]],["body/classes/Clear.html",[3,0.283,4,0.283,5,0.283,7,0.379,8,0.877,9,1.151,10,1.588,13,0.377,14,1.109,15,0.029,16,0.379,19,0.428,20,1.05,24,0.945,29,0.699,35,2.32,36,0.338,41,0.02,42,0.02,44,0.695,50,1.733,54,0.404,57,0.448,58,0.404,59,0.404,60,1.133,61,1.407,62,1.095,65,0.404,67,1.426,69,1.653,70,1.653,108,3.581,109,2.287,110,2.771,111,3.479,112,3.525,113,3.48,114,2.575,115,2.998,116,1.476,117,2.287,118,2.069,119,2.287,120,2.575,121,3.063,122,2.56,123,3.657,124,1.653,125,3.337,126,2.56,127,2.56]],["title/classes/Delete.html",[36,0.18,125,2.006]],["body/classes/Delete.html",[3,0.278,4,0.278,5,0.278,7,0.375,8,0.862,9,1.162,10,1.579,13,0.38,14,1.162,15,0.029,16,0.375,19,0.424,20,1.041,24,0.928,29,0.696,35,1.703,36,0.341,41,0.02,42,0.02,44,0.683,50,1.703,54,0.397,57,0.44,58,0.397,59,0.397,60,1.128,61,1.43,62,1.076,65,0.397,67,1.414,69,1.638,70,1.638,108,3.097,109,2.248,110,2.034,111,3.459,112,3.489,114,2.557,115,3.049,116,1.45,117,2.248,118,2.034,119,2.248,120,2.557,121,3.423,122,2.516,123,3.791,124,1.638,125,3.702,126,2.516,127,2.516,128,3.42]],["title/components/DestroyHostComponent.html",[129,2.482,130,2.836]],["body/components/DestroyHostComponent.html",[3,0.279,4,0.279,5,0.279,7,0.376,11,1.207,13,0.207,15,0.029,16,0.279,19,0.279,21,4.691,22,0.716,23,2.505,29,0.398,30,1.349,33,1.079,36,0.183,40,2.831,41,0.02,42,0.02,54,0.398,57,0.441,58,0.648,59,0.398,65,0.536,116,2.213,129,4.284,130,5.042,131,4.617,132,5.217,133,3.432,134,2.885,135,3.034,136,4.617,137,3.432,138,3.034,139,4.617,140,4.895,141,4.617,142,3.881,143,4.617,144,2.524,145,2.47,146,5.997,147,3.838,148,5.217,149,1.683,150,4.617,151,4.105,152,3.432,153,3.396,154,3.396,155,4.412,156,4.149,157,5.58,158,4.617,159,4.617,160,3.838,161,3.034,162,5.823,163,4.617,164,1.456,165,2.255,166,1.575,167,2.524,168,4.617,169,3.432,170,2.255,171,2.255,172,3.432,173,3.432,174,3.432,175,4.617,176,1.862,177,5.58,178,3.432,179,2.255,180,2.255,181,3.432,182,2.524,183,2.885,184,3.432]],["title/interfaces/DestructorScope.html",[0,1.326,185,2.482]],["body/interfaces/DestructorScope.html",[0,1.41,2,2.133,3,0.292,4,0.292,5,0.292,7,0.387,11,0.776,13,0.287,15,0.029,16,0.292,19,0.434,22,0.557,23,1.947,29,0.62,30,1.39,31,2.473,33,1.128,36,0.192,41,0.02,42,0.02,48,1.048,54,0.417,57,0.461,58,0.417,59,0.417,65,0.417,67,0.974,114,2.712,124,1.496,135,3.126,149,1.734,166,1.646,171,2.358,185,4.179,186,3.998,187,3.016,188,5.29,189,3.126,190,3.998,191,4.485,192,3.998,193,2.41,194,3.588,195,3.998,196,3.998,197,3.998,198,3.998,199,1.947,200,3.016,201,2.639,202,4.179,203,5.106,204,4.969,205,2.639,206,3.016,207,2.639,208,3.016,209,3.016,210,2.639,211,3.998,212,3.998,213,3.016,214,4.485,215,3.998,216,2.639,217,2.358,218,1.41,219,3.016,220,2.358,221,2.639,222,3.016,223,3.016,224,3.016,225,3.016,226,3.016,227,3.016]],["title/interfaces/HoverContext.html",[0,1.326,228,2.482]],["body/interfaces/HoverContext.html",[0,1.096,2,1.659,3,0.227,4,0.227,5,0.227,7,0.227,11,0.603,12,1.991,13,0.168,15,0.029,16,0.381,19,0.326,20,0.934,22,0.838,31,1.836,36,0.149,41,0.017,42,0.017,65,0.543,81,1.262,120,1.835,138,1.834,145,1.183,147,2.941,151,2.941,153,2.941,154,2.941,155,2.053,156,3.071,161,1.834,164,1.183,165,1.834,166,1.28,167,2.941,170,1.834,176,2.931,180,1.834,193,1.982,228,3.438,229,2.346,230,2.327,231,3.928,232,4.29,233,4.259,234,3.361,235,4.541,236,2.342,237,3.361,238,3.361,239,4.541,240,4.866,241,2.346,242,3.361,243,2.346,244,2.053,245,2.053,246,1.514,247,3.438,248,3.361,249,2.346,250,2.346,251,3.361,252,3.361,253,2.346,254,2.346,255,3.361,256,2.346,257,2.346,258,3.928,259,3.361,260,5.068,261,3.928,262,2.346,263,2.346,264,2.346,265,3.928,266,2.342,267,2.053,268,3.361,269,2.346,270,3.361,271,2.346,272,3.361,273,2.346,274,4.29,275,2.346,276,2.346,277,2.346,278,2.346,279,2.346,280,4.29,281,4.29,282,4.29,283,4.29,284,4.29,285,4.29,286,4.29,287,4.29,288,2.346,289,2.346,290,2.053,291,2.346,292,2.346,293,3.928,294,3.361,295,2.941,296,2.346,297,2.346,298,2.346,299,3.928,300,3.361,301,2.346,302,2.346,303,2.346,304,2.346,305,3.361,306,2.346,307,2.346,308,2.346,309,2.053,310,2.346]],["title/directives/HoverDirective.html",[176,1.83,180,2.217]],["body/directives/HoverDirective.html",[0,0.837,3,0.173,4,0.173,5,0.173,7,0.173,11,0.461,12,1.629,13,0.291,15,0.029,16,0.324,19,0.266,20,0.964,22,0.871,30,1.306,31,2.083,36,0.114,41,0.014,42,0.014,54,0.665,57,0.421,58,0.38,59,0.519,65,0.463,81,1.238,120,1.501,124,0.67,138,2.15,144,1.567,145,1.388,147,3.548,149,1.193,151,2.407,153,1.567,154,1.567,155,1.567,156,2.938,161,1.4,164,0.903,165,1.4,166,0.977,167,1.567,170,1.4,176,2.762,179,1.4,180,2.15,193,2.249,228,2.407,229,1.79,230,2.225,231,2.75,232,4.28,233,4.35,234,1.79,235,2.75,236,2.213,237,1.79,238,1.79,239,4.717,240,5.088,241,1.79,242,3.349,243,1.79,244,1.567,245,1.567,246,1.156,247,2.93,248,4.054,249,2.75,250,3.757,251,4.28,252,4.28,253,1.79,254,1.79,255,2.75,256,1.79,257,1.79,258,3.349,259,2.75,260,5.254,261,4.054,262,1.79,263,1.79,264,1.79,265,3.757,266,2.051,267,1.567,268,3.757,269,2.75,270,4.054,271,2.75,272,3.757,273,2.75,274,4.28,275,2.75,276,2.75,277,2.75,278,2.75,279,2.75,280,4.599,281,4.599,282,4.599,283,4.599,284,4.599,285,4.599,286,4.599,287,4.599,288,2.75,289,1.79,290,1.567,291,1.79,292,1.79,293,4.457,294,4.28,295,3.745,296,3.349,297,2.75,298,3.757,299,3.349,300,2.75,301,3.349,302,3.349,303,2.75,304,3.757,305,2.75,306,1.79,307,1.79,308,1.79,309,1.567,310,1.79,311,2.75,312,3.272,313,2.75,314,3.272,315,3.272,316,3.272,317,3.272,318,3.272,319,3.272,320,3.272,321,1.501,322,1.156,323,2.13,324,2.13,325,2.13,326,2.13]],["title/directives/LinkDirective.html",[176,1.83,182,2.482]],["body/directives/LinkDirective.html",[3,0.168,4,0.168,5,0.168,7,0.318,8,0.52,9,0.81,11,0.447,12,1.591,13,0.349,14,1.096,15,0.029,16,0.409,18,1.228,19,0.168,20,1.135,23,1.12,29,0.454,30,1.142,33,1.496,36,0.11,41,0.014,42,0.014,49,1.987,51,2.133,52,1.027,53,1.355,54,0.646,57,0.411,58,0.371,59,0.646,65,0.584,86,1.365,87,1.466,88,0.811,116,1.355,117,1.357,124,1.229,134,1.736,144,1.519,145,1.657,149,1.165,156,4.087,160,1.519,164,0.876,165,1.357,166,2.182,170,1.357,171,1.357,176,2.386,179,1.357,182,2.35,183,3.697,193,1.355,218,1.728,230,1.028,244,1.519,245,1.519,246,1.12,247,1.519,266,2.729,267,1.519,295,4.179,309,3.235,311,3.284,313,2.686,321,2.018,322,2.12,327,2.065,328,2.686,329,2.686,330,3.907,331,5.028,332,3.699,333,3.699,334,3.195,335,3.195,336,3.195,337,3.195,338,3.195,339,4.755,340,3.697,341,2.065,342,2.686,343,3.195,344,3.195,345,5.028,346,3.195,347,1.736,348,3.195,349,4.397,350,3.284,351,3.195,352,3.907,353,3.195,354,2.686,355,3.195,356,3.195,357,3.195,358,3.195,359,3.195,360,3.907,361,1.736,362,2.065,363,2.065,364,3.195,365,3.195,366,2.065,367,2.065,368,2.065,369,3.697,370,1.736,371,3.195,372,1.736,373,2.065,374,2.35,375,2.065,376,1.519,377,1.357,378,2.065,379,3.195,380,2.065,381,1.736,382,1.736,383,2.065,384,4.397,385,2.065,386,2.065,387,2.065,388,2.065,389,2.065,390,3.195,391,2.065,392,2.065,393,0.876,394,2.065,395,2.065,396,2.065,397,3.195,398,2.065,399,2.065,400,2.065,401,4.397,402,2.065,403,2.065,404,3.195,405,2.065,406,2.065,407,2.065,408,2.065,409,2.065,410,2.065,411,2.065,412,3.195,413,3.195,414,3.195,415,3.195,416,3.195,417,3.195,418,2.686,419,2.065,420,2.065,421,2.065,422,2.065,423,2.065,424,3.907,425,3.195,426,3.195,427,2.065,428,2.065,429,2.065,430,2.065,431,2.065,432,2.065,433,2.065,434,2.065,435,2.065,436,2.065,437,2.065,438,2.065,439,2.065]],["title/classes/LinkRegistrySelectors.html",[36,0.18,376,2.482]],["body/classes/LinkRegistrySelectors.html",[3,0.291,4,0.291,5,0.291,7,0.386,11,0.772,13,0.383,15,0.029,16,0.462,18,3.164,19,0.291,29,0.658,30,1.555,31,1.862,33,1.49,36,0.191,40,3.075,41,0.02,42,0.02,44,0.713,45,1.862,46,1.862,49,2.175,51,2.01,52,1.468,53,1.513,54,0.414,57,0.459,58,0.414,59,0.55,60,1.117,64,1.043,65,0.55,116,1.513,145,1.513,149,1.728,207,2.625,218,2.227,236,1.637,266,1.637,321,1.637,376,3.486,377,2.345,393,2.625,440,2.625,441,3.486,442,3.726,443,4.739,444,4.34,445,3.568,446,3.568,447,3.984,448,3.984,449,3.914,450,3.914,451,2.625,452,1.637,453,2.625,454,3,455,3.568,456,3.568,457,3,458,2.625,459,3.568,460,3,461,3.568,462,4.739,463,2.625]],["title/injectables/LinkRegistryState.html",[453,2.482,464,1.83]],["body/injectables/LinkRegistryState.html",[3,0.163,4,0.163,5,0.352,7,0.404,9,1.038,11,0.433,13,0.323,14,0.706,15,0.029,16,0.449,19,0.254,20,0.766,22,0.671,29,0.686,30,1.516,31,0.788,33,0.63,35,0.998,36,0.107,41,0.013,42,0.013,43,1.747,45,1.952,46,1.952,48,0.912,49,1.907,51,1.324,52,1.34,53,0.85,54,0.545,57,0.603,58,0.577,59,0.602,60,1.015,64,0.586,65,0.445,71,1.057,72,1.693,74,1.516,76,1.805,78,1.756,79,1.265,81,1.011,83,1.265,86,1.09,87,2.675,88,1.7,89,2.038,100,0.85,102,1.554,116,0.85,121,2.052,149,1.138,164,0.85,193,2.2,199,1.087,218,1.952,220,2.052,230,2.805,236,0.92,246,1.087,266,2.152,321,2.152,322,1.087,328,1.685,332,1.474,333,1.474,369,3.638,370,1.685,374,2.296,377,1.317,381,2.624,382,1.685,393,2.535,418,1.685,442,1.317,444,1.474,449,1.474,450,2.296,451,1.474,452,0.92,453,2.296,458,1.474,463,1.474,464,1.693,465,1.317,466,1.474,467,2.624,468,2.624,469,3.121,470,2.624,471,2.624,472,2.624,473,4.327,474,2.624,475,5.122,476,2.624,477,2.004,478,3.703,479,2.624,480,2.624,481,2.004,482,2.624,483,3.942,484,2.624,485,2.004,486,2.624,487,1.685,488,2.624,489,2.624,490,1.856,491,2.624,492,2.624,493,2.624,494,2.004,495,3.223,496,3.45,497,2.624,498,3.121,499,3.121,500,2.004,501,3.121,502,4.69,503,1.685,504,1.685,505,3.121,506,1.685,507,1.685,508,1.685,509,2.624,510,1.685,511,1.685,512,1.317,513,2.624,514,1.685,515,1.685,516,1.685,517,3.121,518,2.004,519,2.004,520,2.624,521,1.685,522,1.685,523,2.004,524,1.685,525,1.685,526,1.685,527,1.685,528,1.192,529,1.685,530,1.685,531,1.685,532,1.685,533,2.004,534,1.474,535,2.296,536,2.004,537,3.121,538,2.004,539,3.121,540,2.004,541,1.474,542,2.004,543,2.004,544,2.004,545,3.121,546,1.685,547,1.685,548,2.004,549,2.004,550,2.004,551,2.004,552,2.004,553,2.004,554,2.004,555,2.004,556,2.004]],["title/classes/LoadFromYaml.html",[36,0.18,83,0.986]],["body/classes/LoadFromYaml.html",[3,0.267,4,0.267,5,0.502,7,0.364,8,0.826,9,0.824,10,0.89,13,0.198,14,1.009,15,0.029,16,0.364,19,0.467,20,0.655,22,0.509,24,0.89,29,0.687,36,0.306,41,0.019,42,0.019,43,1.866,44,0.655,45,1.758,46,1.758,47,1.195,48,1.308,49,2.087,51,2.161,52,1.19,53,1.898,54,0.381,56,1.758,57,0.422,58,0.381,59,0.381,60,1.056,61,1.045,62,1.031,63,1.288,64,0.958,65,0.381,66,1.778,67,1.556,68,2.002,69,1.803,70,1.803,71,1.515,72,3.345,73,1.288,74,0.958,75,1.288,76,1.603,77,1.195,78,2.193,79,0.958,80,1.758,81,0.766,82,2.325,83,1.308,84,1.288,85,1.758,86,1.491,87,2.338,88,1.288,89,1.288,90,1.949,91,1.949,557,2.755,558,2.755]],["title/classes/LoadFromYaml-1.html",[36,0.152,83,0.829,92,1.539]],["body/classes/LoadFromYaml-1.html",[3,0.26,4,0.26,5,0.512,7,0.358,8,0.804,9,0.81,10,0.867,13,0.192,14,1.046,15,0.029,16,0.358,19,0.462,20,0.878,22,0.495,24,0.867,29,0.698,36,0.303,41,0.019,42,0.019,43,1.886,44,0.638,47,1.164,48,1.284,52,1.174,54,0.371,56,1.727,57,0.411,58,0.371,59,0.371,60,1.046,61,0.746,62,1.004,63,1.254,64,0.933,65,0.371,67,1.541,68,1.975,69,1.786,70,1.786,71,1.488,73,1.254,74,0.933,75,1.254,76,1.382,77,1.164,78,2.184,79,0.933,80,1.727,81,1.174,82,2.443,83,1.284,84,1.727,85,1.975,86,1.543,93,1.727,94,1.727,95,2.598,96,2.503,97,2.188,98,1.732,99,3.373,100,1.354,101,2.297,102,1.59,103,1.59,557,2.684,558,2.684]],["title/classes/LoadMarkdown.html",[36,0.18,103,1.68]],["body/classes/LoadMarkdown.html",[3,0.257,4,0.257,5,0.511,7,0.355,8,0.794,9,0.803,10,0.855,13,0.19,14,1.041,15,0.029,16,0.355,19,0.46,20,0.87,22,0.489,24,0.855,29,0.696,36,0.302,41,0.018,42,0.018,43,1.882,44,0.63,47,1.149,48,1.273,50,1.569,52,1.166,54,0.366,56,1.712,57,0.405,58,0.366,59,0.366,60,1.104,61,0.736,62,0.991,63,1.238,64,0.921,65,0.366,67,1.534,68,1.962,69,1.778,70,1.778,71,1.475,73,1.238,74,0.921,75,1.238,76,1.37,77,1.149,78,2.124,79,0.921,80,1.712,81,1.258,82,2.436,83,0.921,84,1.712,85,1.962,86,1.562,93,1.712,94,1.712,95,2.689,96,2.815,97,2.169,98,1.71,99,3.251,100,1.337,101,2.542,102,2.169,103,2.169,559,3.152]],["title/classes/Navigate.html",[36,0.18,87,1.548]],["body/classes/Navigate.html",[3,0.269,4,0.269,5,0.468,7,0.366,8,0.831,9,0.828,10,0.896,13,0.199,14,0.828,15,0.029,16,0.366,19,0.468,20,0.659,22,0.512,24,0.896,29,0.688,36,0.307,41,0.019,42,0.019,43,1.83,44,0.659,45,1.766,46,1.766,47,1.203,48,1.314,49,2.164,50,1.643,51,2.437,52,1.194,53,1.907,54,0.383,56,1.766,57,0.424,58,0.383,59,0.383,60,1.118,61,1.194,62,1.038,63,1.296,64,0.964,65,0.383,66,1.79,67,1.559,68,2.009,69,1.807,70,1.807,71,1.522,72,3.216,73,1.296,74,0.964,75,1.296,76,1.608,77,1.203,78,2.144,79,0.964,80,1.766,81,0.771,82,2.009,83,0.964,84,1.296,85,1.296,86,1.447,87,2.72,88,1.766,89,1.766,90,1.962,91,2.673,560,3.299]],["title/classes/ResourceRegistrySelectors.html",[36,0.18,561,2.836]],["body/classes/ResourceRegistrySelectors.html",[3,0.169,4,0.169,5,0.169,7,0.388,11,0.448,13,0.377,15,0.029,16,0.319,19,0.388,29,0.61,30,1.759,31,2.445,33,1.821,36,0.111,40,3.434,41,0.014,42,0.014,44,0.414,49,1.326,52,1.406,54,0.61,57,0.675,58,0.61,59,0.61,60,1.153,64,0.606,65,0.372,81,1.39,86,1.323,93,2.131,94,2.131,95,1.662,96,2.372,97,1.596,101,2.227,145,0.88,149,1.168,218,1.259,236,1.471,321,2.41,322,1.125,393,2.697,440,1.526,441,2.358,442,4.243,447,4.234,448,4.866,452,0.952,454,1.743,460,1.743,463,1.526,528,3.442,534,1.526,535,2.358,561,2.694,562,2.694,563,3.205,564,3.205,565,5.424,566,3.205,567,4.379,568,4.407,569,2.074,570,3.293,571,3.205,572,2.074,573,4.68,574,3.205,575,2.074,576,3.293,577,3.205,578,2.074,579,4.94,580,3.205,581,3.917,582,2.074,583,3.917,584,3.205,585,2.074,586,3.205,587,2.074,588,1.526,589,3.293,590,1.526,591,3.293,592,1.743,593,1.743,594,1.743,595,2.074,596,3.917,597,3.205,598,4.407,599,4.407,600,2.074,601,2.074,602,2.694,603,2.074,604,3.205,605,2.074,606,3.917,607,3.917,608,2.074]],["title/injectables/ResourceRegistryState.html",[464,1.83,590,2.482]],["body/injectables/ResourceRegistryState.html",[3,0.184,4,0.184,5,0.425,7,0.425,9,1.104,11,0.49,13,0.314,14,0.762,15,0.029,16,0.441,19,0.184,20,0.452,22,0.716,25,2.882,29,0.687,30,1.583,33,1.078,36,0.121,41,0.015,42,0.015,43,1.79,48,1.002,52,1.334,54,0.576,57,0.637,58,0.606,59,0.629,60,0.913,64,0.662,65,0.398,71,1.161,74,1.583,76,1.86,78,1.834,79,1.348,81,1.078,83,1.348,86,1.249,89,2.049,93,2.049,94,2.049,95,1.755,99,1.86,100,0.96,101,1.957,102,2.297,103,2.596,149,1.25,164,0.96,193,2.212,199,1.229,218,1.947,220,3.032,230,2.898,233,2.522,246,1.229,266,1.039,321,2.274,393,2.599,452,1.039,464,1.86,465,1.488,466,1.666,467,2.882,468,2.882,470,2.882,471,2.882,472,2.882,474,2.882,476,2.882,478,3.826,479,2.882,480,2.882,482,2.882,483,4.166,484,2.882,486,2.882,487,1.904,488,2.882,489,2.882,490,2.039,491,2.882,492,2.882,493,2.882,495,3.477,496,4.201,497,3.878,503,1.904,504,1.904,506,1.904,507,1.904,508,1.904,512,1.488,513,2.882,514,1.904,515,1.904,516,1.904,520,2.882,521,1.904,522,1.904,524,1.904,525,1.904,526,1.904,527,2.882,528,2.039,529,1.904,530,1.904,531,1.904,562,1.904,567,1.666,588,1.666,590,2.522,602,1.904,609,3.428,610,5.236,611,2.264,612,2.264,613,2.264,614,3.428,615,3.428,616,2.264,617,2.264,618,1.904,619,2.264,620,2.264,621,2.264,622,2.264,623,2.264,624,2.264,625,2.264]],["title/classes/ScopedDestructorSubject.html",[36,0.18,221,2.482]],["body/classes/ScopedDestructorSubject.html",[0,1.392,3,0.288,4,0.288,5,0.288,7,0.384,10,0.962,13,0.32,15,0.029,16,0.288,19,0.432,22,0.732,23,2.559,29,0.616,30,1.035,31,2.378,33,1.114,36,0.189,41,0.02,42,0.02,44,0.708,48,1.378,54,0.411,57,0.456,58,0.411,59,0.411,65,0.411,67,1.28,114,2.594,124,1.667,135,3.1,166,1.626,171,2.328,185,4.33,186,3.964,187,2.978,188,5.193,189,2.328,190,2.978,191,2.978,192,2.978,193,2,195,2.978,196,2.978,197,2.978,198,4.457,199,1.922,200,2.978,201,2.606,202,4.453,203,5.394,204,4.948,205,2.606,206,2.978,207,2.606,208,2.978,209,2.978,210,2.606,211,3.964,212,3.964,213,2.978,214,5.088,215,4.751,216,3.469,217,3.1,218,1.853,219,3.964,220,3.1,221,3.469,222,3.964,223,3.964,224,2.978,225,2.978,226,2.978,227,2.978,626,3.543]],["title/interfaces/SelectOptions.html",[0,1.326,627,2.836]],["body/interfaces/SelectOptions.html",[0,1.323,2,2.002,3,0.274,4,0.421,5,0.274,7,0.274,11,0.728,12,2.269,13,0.311,15,0.029,16,0.471,19,0.421,22,0.522,23,1.827,29,0.6,30,1.332,31,2.03,33,1.625,41,0.019,42,0.019,59,0.6,65,0.6,116,1.428,124,1.059,140,2.83,145,1.933,161,3.396,164,1.428,166,2.541,189,2.213,199,2.473,201,3.353,217,2.996,230,1.676,236,1.545,246,1.827,290,2.477,354,4.344,393,2.192,451,2.477,452,1.545,490,2.002,496,4.073,512,2.996,627,4.655,628,2.83,629,4.655,630,4.558,631,6.099,632,5.964,633,4.558,634,4.558,635,4.344,636,5.167,637,3.367,638,4.344,639,4.558,640,3.367,641,4.558,642,3.367,643,2.83,644,2.83,645,3.832,646,3.367,647,3.367,648,3.367,649,2.477,650,3.367,651,2.83,652,3.367,653,3.367,654,4.558,655,3.367,656,4.558,657,3.367,658,5.537,659,3.367,660,2.477,661,3.367,662,3.367,663,3.367,664,3.367,665,3.367,666,3.367,667,3.367,668,3.367,669,3.367,670,3.367,671,3.367,672,3.367,673,3.367,674,3.367,675,3.367,676,3.367,677,3.367]],["title/classes/Set.html",[36,0.18,120,1.548]],["body/classes/Set.html",[3,0.274,4,0.274,5,0.274,7,0.371,8,0.848,9,1.158,10,1.57,13,0.383,14,1.191,15,0.029,16,0.371,19,0.421,20,1.032,24,0.914,29,0.693,35,1.676,36,0.34,41,0.019,42,0.019,44,0.673,50,1.676,54,0.391,57,0.433,58,0.391,59,0.391,60,1.123,61,1.424,62,1.059,65,0.391,67,1.403,69,1.625,70,1.625,108,3.073,109,2.213,110,2.002,111,3.547,112,3.48,114,2.541,115,3.036,116,1.428,117,2.213,118,2.002,119,2.213,120,2.846,121,3.396,122,2.477,123,3.814,124,1.876,125,3.293,126,2.477,127,2.477,678,3.367]],["title/classes/SnapshotObserver.html",[36,0.18,679,2.836]],["body/classes/SnapshotObserver.html",[3,0.283,4,0.283,5,0.283,7,0.427,11,0.751,13,0.209,15,0.029,16,0.283,19,0.283,22,0.722,29,0.541,30,1.639,33,1.093,36,0.186,41,0.02,42,0.02,44,0.694,54,0.61,57,0.599,58,0.541,59,0.541,65,0.403,114,1.594,124,2.098,149,1.697,193,2.379,199,1.885,210,3.424,217,3.686,218,1.829,236,2.821,266,2.136,329,3.913,457,3.913,490,3.763,541,3.862,649,3.424,660,3.424,679,3.913,680,4.714,681,2.92,682,4.655,683,4.655,684,6.147,685,4.655,686,4.655,687,5.25,688,5.25,689,4.655,690,3.474,691,5.608,692,5.25,693,3.474,694,4.655,695,4.655,696,3.474,697,2.92,698,4.413,699,3.474,700,3.474,701,3.474,702,3.474,703,5.25,704,5.25]],["title/classes/StorageSelectors.html",[36,0.18,705,2.836]],["body/classes/StorageSelectors.html",[3,0.294,4,0.294,5,0.294,7,0.294,11,0.78,14,0.985,15,0.029,16,0.436,19,0.294,30,1.841,33,1.501,36,0.286,40,3.301,41,0.02,42,0.02,44,0.721,54,0.554,58,0.419,60,1.161,111,3.385,112,3.367,115,3.137,118,2.145,123,2.838,124,1.501,145,2.025,149,1.74,218,2.438,321,2.19,441,3.511,452,1.655,651,3.033,660,2.654,705,4.012,706,3.607,707,4.773,708,2.838,709,6.084,710,4.773,711,3.607,712,4.012,713,4.012,714,5.296,715,4.773,716,3.607,717,5.693,718,4.773,719,4.773,720,2.654,721,3.607,722,4.773,723,3.607,724,3.607,725,3.607,726,3.607,727,3.607,728,4.773,729,3.607,730,3.607,731,3.607,732,3.607]],["title/injectables/StorageState.html",[464,1.83,720,2.482]],["body/injectables/StorageState.html",[3,0.204,4,0.204,5,0.204,7,0.395,9,0.462,11,0.543,13,0.338,15,0.029,16,0.441,19,0.204,22,0.389,28,2.11,29,0.682,30,1.513,33,1.164,35,2.578,36,0.259,40,2.386,41,0.016,42,0.016,54,0.564,57,0.624,58,0.601,59,0.564,60,1.204,61,0.865,92,1.362,108,3.222,110,2.887,111,2.201,112,3.285,114,2.486,115,3.19,118,2.201,120,2.812,123,2.887,124,1.527,125,3.222,149,1.349,160,2.723,164,1.064,193,2.377,218,1.728,266,1.151,321,2.018,322,1.362,350,2.11,393,2.196,452,1.151,464,2.008,465,1.649,478,3.683,512,1.649,532,3.697,534,1.846,535,2.723,541,1.846,635,2.11,708,2.201,712,4.352,713,4.352,714,4.352,720,3.572,733,2.509,734,3.702,735,3.702,736,3.702,737,5.386,738,3.702,739,2.509,740,3.702,741,3.702,742,3.702,743,2.509,744,3.702,745,3.702,746,3.702,747,3.702,748,2.509,749,3.702,750,4.081,751,3.112,752,3.112,753,3.702,754,3.702,755,2.509,756,3.702,757,2.509,758,2.509,759,2.11,760,2.509,761,3.702,762,3.702,763,2.509,764,2.509,765,2.509,766,2.509,767,2.509,768,4.398,769,4.398,770,2.509,771,4.398,772,2.509,773,2.509,774,2.509,775,3.702,776,2.509,777,2.509,778,2.509,779,2.509,780,2.509,781,2.509,782,2.509]],["title/dependencies.html",[783,2.385,784,3.402]],["body/dependencies.html",[15,0.029,41,0.025,42,0.025,116,2.489,164,2.131,361,4.223,452,2.305,784,4.932,785,5.024,786,5.024,787,5.024,788,5.867,789,5.024,790,5.024,791,5.024]],["title/miscellaneous/enumerations.html",[792,1.539,793,3.402]],["body/miscellaneous/enumerations.html",[11,0.986,13,0.275,15,0.028,41,0.024,42,0.024,45,1.791,46,1.791,49,1.543,61,1.065,86,1.395,88,2.176,89,2.176,93,1.791,94,1.791,100,1.934,101,2.349,110,2.711,112,3.236,115,2.27,124,2.057,377,3.64,528,3.293,708,3.293,751,5.014,752,5.014,792,2.473,793,3.832,794,3.354,795,4.564,796,4.655,797,3.354,798,3.832,799,3.354,800,3.354,801,3.832,802,4.559]],["title/index.html",[11,0.614,803,2.837,804,2.837]],["body/index.html",[15,0.025,41,0.025,42,0.025,205,3.782,216,3.782,805,5.947,806,5.142,807,5.142,808,5.947,809,5.142,810,5.947,811,5.947,812,5.142]],["title/modules.html",[813,3.837]],["body/modules.html",[15,0.026,41,0.026,42,0.026,813,4.474]],["title/overview.html",[814,3.837]],["body/overview.html",[2,3.082,15,0.025,41,0.025,42,0.025,44,1.035,92,2.812,129,3.812,179,3.406,465,3.406,814,4.356,815,5.182,816,5.182,817,5.182,818,5.182]],["title/properties.html",[12,2.015,783,2.385]],["body/properties.html",[12,2.629,15,0.027,41,0.026,42,0.026,819,5.279,820,5.279]],["title/miscellaneous/typealiases.html",[792,1.539,821,4.047]],["body/miscellaneous/typealiases.html",[9,0.802,11,0.68,13,0.393,14,0.58,15,0.024,18,1.871,31,2.511,35,1.567,41,0.018,42,0.018,45,1.71,46,1.71,49,1.913,51,1.846,52,1.448,53,1.846,61,1.016,81,1.016,88,1.236,89,1.236,93,1.71,94,1.71,95,2.396,96,2.167,97,2.167,100,1.335,115,1.567,138,2.068,145,1.335,189,2.068,230,2.167,236,1.997,347,3.658,372,2.645,374,3.201,393,2.116,440,4.156,442,3.713,444,3.201,449,3.201,450,2.315,458,2.315,466,3.201,475,3.658,478,2.068,509,3.658,511,3.658,567,3.201,570,3.658,573,3.658,576,3.658,579,3.658,589,4.193,591,4.524,592,2.645,593,2.645,594,2.645,610,3.658,628,2.645,629,2.645,638,2.645,644,2.645,645,3.658,708,2.588,737,3.658,750,2.645,759,3.658,792,1.707,794,4.407,795,4.853,797,4.765,798,3.658,799,3.201,800,2.315,801,2.645,822,3.147,823,3.658,824,4.352,825,4.352,826,4.352,827,4.352,828,4.352,829,4.352,830,4.988,831,4.352,832,3.147,833,3.147,834,3.147,835,4.193,836,3.147,837,3.147,838,6.105,839,3.147,840,3.147,841,3.147,842,4.988,843,4.352,844,3.147,845,3.147,846,3.147,847,3.147,848,3.147,849,3.147,850,3.147,851,4.352,852,3.147,853,3.147,854,2.645,855,3.147]],["title/miscellaneous/variables.html",[792,1.539,856,3.402]],["body/miscellaneous/variables.html",[8,1.146,9,1.115,11,0.576,13,0.38,14,0.92,15,0.029,18,2.298,22,0.6,24,1.235,41,0.016,42,0.016,45,1.519,46,1.519,47,1.82,49,1.69,52,1.166,60,0.49,61,0.622,66,1.444,76,1.216,77,1.659,81,0.903,86,1.146,88,1.046,89,1.519,93,1.519,94,1.519,95,1.93,98,1.444,101,1.639,109,1.75,114,2.433,119,1.75,120,1.221,124,2.063,135,1.75,142,2.238,166,2.088,202,1.958,322,3.559,332,2.843,333,2.843,340,3.249,342,2.238,393,1.129,490,1.583,510,3.249,528,2.298,546,2.238,547,3.249,588,2.843,618,3.249,643,2.238,649,1.958,680,2.238,681,3.249,697,2.238,698,3.249,708,2.706,792,1.444,794,3.901,795,4.753,796,2.238,797,4.604,799,3.901,800,1.958,823,2.238,835,4.458,854,2.238,856,2.238,857,2.662,858,3.865,859,2.662,860,3.865,861,3.865,862,3.865,863,4.551,864,4.551,865,3.865,866,3.865,867,2.662,868,3.865,869,4.551,870,4.551,871,4.551,872,2.662,873,4.551,874,3.865,875,4.551,876,4.551,877,2.662,878,3.865,879,2.662,880,2.662,881,4.993,882,2.662,883,5.532,884,2.662,885,2.662,886,2.662,887,2.662,888,2.662,889,3.865,890,3.865,891,2.662,892,2.662,893,5.532,894,2.662,895,3.865,896,2.662,897,2.662,898,2.662,899,3.865,900,2.662,901,2.662,902,2.662,903,2.662,904,2.662,905,2.662,906,2.662,907,2.662,908,2.662,909,2.662,910,2.662,911,2.662,912,2.662,913,2.662,914,2.662,915,2.662,916,2.662,917,4.551,918,2.662,919,2.662,920,2.662,921,2.662,922,2.662,923,2.662,924,2.662]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":160,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["0.0.1",{"_index":820,"title":{},"body":{"properties.html":{}}}],["1",{"_index":92,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"injectables/StorageState.html":{},"overview.html":{}}}],["15.1.0",{"_index":788,"title":{},"body":{"dependencies.html":{}}}],["18",{"_index":817,"title":{},"body":{"overview.html":{}}}],["2",{"_index":815,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":786,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":816,"title":{},"body":{"overview.html":{}}}],["3.7.6",{"_index":789,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":818,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":292,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["accessors",{"_index":316,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('clear",{"_index":127,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{}}}],["action('delete",{"_index":126,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{}}}],["action('load",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action('set",{"_index":122,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":480,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":484,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":476,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(clear",{"_index":738,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(delete",{"_index":742,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(loadfromyaml",{"_index":493,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":615,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":499,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(set",{"_index":754,"title":{},"body":{"injectables/StorageState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{}}}],["actiongroup",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{}}}],["actiongroup('linkregistry",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":98,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('storage",{"_index":119,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["actions/actions",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["actiontyperegistry",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activate",{"_index":383,"title":{},"body":{"directives/LinkDirective.html":{}}}],["activatedroute",{"_index":368,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":184,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":623,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":497,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":79,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":531,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":672,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["addmany",{"_index":74,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":474,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":524,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":470,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":479,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml",{"_index":471,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":482,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["alias",{"_index":851,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["aliases",{"_index":822,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["allow",{"_index":731,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["along",{"_index":271,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["altkey",{"_index":415,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":400,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":381,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["angular/cdk/overlay",{"_index":241,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":243,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":361,"title":{},"body":{"directives/LinkDirective.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":504,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":164,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":366,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular/router",{"_index":370,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["anyentry",{"_index":563,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentry(state",{"_index":566,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anyentryquery",{"_index":570,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["anytext",{"_index":564,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":571,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["application",{"_index":249,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["applying",{"_index":848,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["area'].includes(this.tagname",{"_index":402,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":646,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":853,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":347,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["array",{"_index":854,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["associated",{"_index":215,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":473,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":296,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":261,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attaches",{"_index":222,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":139,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":336,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":337,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":338,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":345,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatically",{"_index":666,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["await",{"_index":537,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":356,"title":{},"body":{"directives/LinkDirective.html":{}}}],["boolean",{"_index":354,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bottom",{"_index":283,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":849,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["brand('linkid",{"_index":924,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":897,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":539,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browser",{"_index":367,"title":{},"body":{"directives/LinkDirective.html":{}}}],["builtin",{"_index":799,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["builtin_entry",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtin_type_values",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["builtinresourcetype",{"_index":588,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["builtinresourcetype.markdown",{"_index":602,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["builtinresourcetype.text",{"_index":604,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtinresourcetype.url",{"_index":608,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["builtintypes",{"_index":823,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["button",{"_index":412,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cached",{"_index":903,"title":{},"body":{"miscellaneous/variables.html":{}}}],["callback",{"_index":197,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["called",{"_index":669,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["case",{"_index":535,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["cb",{"_index":196,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":805,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":656,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":659,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":635,"title":{},"body":{"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["changedetectorref",{"_index":637,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["changes",{"_index":309,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["changes['linkid'].currentvalue",{"_index":410,"title":{},"body":{"directives/LinkDirective.html":{}}}],["child",{"_index":159,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"overview.html":{}}}],["cleanup",{"_index":188,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["clear",{"_index":108,"title":{"classes/Clear.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"injectables/StorageState.html":{}}}],["clear(ctx",{"_index":736,"title":{},"body":{"injectables/StorageState.html":{}}}],["clears",{"_index":740,"title":{},"body":{"injectables/StorageState.html":{}}}],["click",{"_index":339,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":546,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":729,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["complete",{"_index":661,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["completes",{"_index":220,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["component",{"_index":129,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"overview.html":{}}}],["component/directive/pipe",{"_index":143,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":178,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentref",{"_index":162,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["components",{"_index":131,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["configuration",{"_index":630,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["connectionpositionpair",{"_index":239,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{}}}],["constructor(entries",{"_index":106,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{}}}],["constructor(readonly",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{}}}],["constructor(scope",{"_index":223,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(url",{"_index":557,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":104,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":155,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":169,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":634,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["contains",{"_index":408,"title":{},"body":{"directives/LinkDirective.html":{}}}],["content",{"_index":233,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":254,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":230,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["count",{"_index":775,"title":{},"body":{"injectables/StorageState.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{}}}],["create(container",{"_index":150,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["created",{"_index":268,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["createlinkid('@@__empty__",{"_index":904,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["creating",{"_index":840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ctrlkey",{"_index":413,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":478,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["ctx.getstate()[id",{"_index":533,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":521,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.setstate",{"_index":780,"title":{},"body":{"injectables/StorageState.html":{}}}],["current",{"_index":448,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["custom",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["custom:${t",{"_index":836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["custom_entry",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_entry_type",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["custom_type_prefix",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["customresourceentry",{"_index":824,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["customresourcetype",{"_index":825,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["data",{"_index":81,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data(data",{"_index":263,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dataquery",{"_index":573,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["date",{"_index":308,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["decorators",{"_index":321,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["default",{"_index":322,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":512,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{}}}],["defaultvalue",{"_index":596,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["defined",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["delete",{"_index":125,"title":{"classes/Delete.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"injectables/StorageState.html":{}}}],["delete(ctx",{"_index":741,"title":{},"body":{"injectables/StorageState.html":{}}}],["deletes",{"_index":744,"title":{},"body":{"injectables/StorageState.html":{}}}],["dependencies",{"_index":784,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["destroy",{"_index":140,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":136,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":186,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["destroy/on",{"_index":643,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["destroyhostcomponent",{"_index":130,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":202,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":185,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["detach",{"_index":302,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":636,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["determines",{"_index":200,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["directive",{"_index":176,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["directives",{"_index":179,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"overview.html":{}}}],["disable",{"_index":651,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{}}}],["dispatch",{"_index":371,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":396,"title":{},"body":{"directives/LinkDirective.html":{}}}],["display",{"_index":147,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":252,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dom",{"_index":133,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["domsanitizer",{"_index":365,"title":{},"body":{"directives/LinkDirective.html":{}}}],["draft[id",{"_index":782,"title":{},"body":{"injectables/StorageState.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/StorageState.html":{}}}],["el",{"_index":170,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["el?.remove",{"_index":173,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["element",{"_index":156,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["elementref",{"_index":244,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emits",{"_index":217,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["emitted",{"_index":649,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":662,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["empty",{"_index":342,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":340,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":281,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":304,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":76,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["entry",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry(state",{"_index":574,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.extras",{"_index":551,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":603,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":556,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":555,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":605,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.[field",{"_index":600,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":463,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entryquery",{"_index":576,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["enum",{"_index":802,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["enumerations",{"_index":793,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":699,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":692,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":490,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":542,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(`no",{"_index":766,"title":{},"body":{"injectables/StorageState.html":{}}}],["error(err",{"_index":689,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":688,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":694,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":701,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["eslint",{"_index":724,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["eslint/ban",{"_index":727,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["event",{"_index":295,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["execute",{"_index":812,"title":{},"body":{"index.html":{}}}],["existing",{"_index":544,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["explicitly",{"_index":650,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{}}}],["external",{"_index":89,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":509,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extractbuiltinentrytype",{"_index":826,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extracts",{"_index":837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["extras",{"_index":547,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["false",{"_index":208,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["field",{"_index":565,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["field(state",{"_index":577,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["fieldquery",{"_index":579,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["filename",{"_index":483,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["first",{"_index":158,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["flexibleconnectedto(this.el",{"_index":278,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["format",{"_index":887,"title":{},"body":{"miscellaneous/variables.html":{}}}],["found",{"_index":459,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["fragment",{"_index":911,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":189,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":807,"title":{},"body":{"index.html":{}}}],["get(url",{"_index":526,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":460,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["getentry(state",{"_index":599,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield",{"_index":583,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["getfield(id",{"_index":607,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["gethref(link",{"_index":433,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":457,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getstorage",{"_index":735,"title":{},"body":{"injectables/StorageState.html":{}}}],["getstorage(id",{"_index":747,"title":{},"body":{"injectables/StorageState.html":{}}}],["getting",{"_index":803,"title":{"index.html":{}},"body":{}}],["given",{"_index":714,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["global",{"_index":609,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["globally",{"_index":469,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["handle",{"_index":293,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["handler's",{"_index":852,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handlers",{"_index":841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":691,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["helper",{"_index":850,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["holding",{"_index":734,"title":{},"body":{"injectables/StorageState.html":{}}}],["host",{"_index":146,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts",{"_index":137,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:19",{"_index":152,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":362,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":357,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":358,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":359,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":335,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":245,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":353,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":303,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":297,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":313,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":232,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":228,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":180,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":116,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"dependencies.html":{}}}],["hrahover",{"_index":250,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":181,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":312,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":183,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":331,"title":{},"body":{"directives/LinkDirective.html":{}}}],["html",{"_index":175,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["htmlelement",{"_index":380,"title":{},"body":{"directives/LinkDirective.html":{}}}],["http",{"_index":513,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":503,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["id,key",{"_index":715,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["identifier",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ignore",{"_index":730,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["immediately",{"_index":219,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["immer",{"_index":758,"title":{},"body":{"injectables/StorageState.html":{}}}],["implements",{"_index":329,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":235,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["improved",{"_index":489,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["increasechangecount(ctx",{"_index":779,"title":{},"body":{"injectables/StorageState.html":{}}}],["increases",{"_index":774,"title":{},"body":{"injectables/StorageState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":697,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["inject",{"_index":246,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["inject(activatedroute",{"_index":385,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(changedetectorref",{"_index":657,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(domsanitizer",{"_index":391,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(elementref).nativeelement",{"_index":267,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inject(httpclient",{"_index":516,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(locationstrategy",{"_index":388,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(ngzone",{"_index":519,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":277,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(overlay).create",{"_index":275,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":382,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":675,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(viewcontainerref",{"_index":289,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["injectable",{"_index":464,"title":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{}},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{}}}],["injectables",{"_index":465,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"injectables/StorageState.html":{},"overview.html":{}}}],["injectdestroy",{"_index":642,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injection",{"_index":668,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["injectors/.../on",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../select.ts",{"_index":832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/on",{"_index":135,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":846,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":628,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":680,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":517,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["input",{"_index":247,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":253,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":262,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":378,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":311,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":157,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":153,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{},"overview.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":374,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["invalid",{"_index":886,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isanchorelement",{"_index":401,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isbuiltintype(val",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["isdestructorscopelike(obj",{"_index":209,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["isobject",{"_index":211,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["items",{"_index":718,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["js",{"_index":506,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["k",{"_index":595,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["keeping",{"_index":467,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":123,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key,value",{"_index":712,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["key:string",{"_index":768,"title":{},"body":{"injectables/StorageState.html":{}}}],["know",{"_index":399,"title":{},"body":{"directives/LinkDirective.html":{}}}],["latest",{"_index":684,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["legend",{"_index":174,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["length",{"_index":709,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["library",{"_index":806,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":141,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["lifetime",{"_index":665,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["line",{"_index":725,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":405,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":436,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.rel",{"_index":428,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.target",{"_index":429,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":417,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.url",{"_index":427,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":510,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":523,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":182,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":923,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":511,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":375,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":475,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":444,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":449,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":376,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":453,"title":{"injectables/LinkRegistryState.html":{}},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":377,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":418,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":536,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["list",{"_index":746,"title":{},"body":{"injectables/StorageState.html":{}}}],["load",{"_index":495,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":522,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":83,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":515,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":103,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":614,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":85,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":472,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":492,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["local",{"_index":752,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["localstorage",{"_index":764,"title":{},"body":{"injectables/StorageState.html":{}}}],["location",{"_index":386,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy",{"_index":360,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy.prepareexternalurl(router.serializeurl(urltree",{"_index":438,"title":{},"body":{"directives/LinkDirective.html":{}}}],["manage",{"_index":749,"title":{},"body":{"injectables/StorageState.html":{}}}],["managing",{"_index":763,"title":{},"body":{"injectables/StorageState.html":{}}}],["many",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":507,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":624,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":622,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maps",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["mark",{"_index":633,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markdown",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(getfield",{"_index":580,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["markdown_entry",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["markfn",{"_index":658,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck(options",{"_index":654,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marking",{"_index":652,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["marks",{"_index":647,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":491,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":144,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":416,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":121,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set.html":{}}}],["methods",{"_index":149,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["miscellaneous",{"_index":792,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":843,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["modules",{"_index":813,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotypeoperatorfunction",{"_index":639,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["mouse",{"_index":294,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":352,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":314,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":315,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multiple",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["native",{"_index":379,"title":{},"body":{"directives/LinkDirective.html":{}}}],["navigate",{"_index":87,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":498,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":553,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":548,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["never",{"_index":601,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":163,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["next",{"_index":660,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{}}}],["next(value",{"_index":695,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":687,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngonchanges(changes",{"_index":409,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngxs/store",{"_index":452,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{}}}],["ngzone",{"_index":505,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":700,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":698,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":543,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["none",{"_index":148,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifyonchange",{"_index":632,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":171,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{}}}],["nullable",{"_index":915,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":717,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["nx",{"_index":808,"title":{},"body":{"index.html":{}}}],["obj",{"_index":204,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obj.ondestroy",{"_index":213,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["obje",{"_index":777,"title":{},"body":{"injectables/StorageState.html":{}}}],["object",{"_index":114,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["object.values(rawbuiltinresourcetype",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["objects",{"_index":750,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["observable",{"_index":496,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["observable's",{"_index":664,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["observables",{"_index":142,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":682,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":681,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":693,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":696,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":690,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["onchanges",{"_index":330,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick",{"_index":334,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":351,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":191,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":192,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["onsameurlnavigation",{"_index":918,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operation",{"_index":776,"title":{},"body":{"injectables/StorageState.html":{}}}],["operator",{"_index":653,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["optionally",{"_index":458,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":631,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["options?.notifyonchange",{"_index":655,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["originx",{"_index":280,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":282,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":207,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{}}}],["out",{"_index":301,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["over",{"_index":270,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":240,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":274,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":300,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":305,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.hasattached",{"_index":299,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":284,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":285,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overview",{"_index":814,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":783,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pair",{"_index":713,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["param1",{"_index":532,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/StorageState.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["parse",{"_index":486,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":663,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["passed",{"_index":231,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["passthrough",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["payload",{"_index":839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["peer",{"_index":787,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":350,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/StorageState.html":{}}}],["pipe",{"_index":621,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["pipe(map((data",{"_index":529,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":677,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pointed",{"_index":745,"title":{},"body":{"injectables/StorageState.html":{}}}],["portal",{"_index":260,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":272,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":276,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["prefix",{"_index":891,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preserve",{"_index":914,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":916,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":266,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["produce",{"_index":757,"title":{},"body":{"injectables/StorageState.html":{}}}],["produce((draft",{"_index":781,"title":{},"body":{"injectables/StorageState.html":{}}}],["promise",{"_index":502,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{},"properties.html":{}}}],["property",{"_index":291,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["provided",{"_index":154,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["queries",{"_index":447,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":442,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":443,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["querying",{"_index":392,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":394,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":909,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":912,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["rawbuiltinresourcetype",{"_index":796,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{}}}],["record",{"_index":855,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ref",{"_index":168,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ref.location.nativeelement",{"_index":172,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["reference",{"_index":265,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["refine((val",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["register",{"_index":195,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["registered",{"_index":190,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":508,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":107,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["registry.actions.ts:31",{"_index":105,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:42",{"_index":558,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:52",{"_index":560,"title":{},"body":{"classes/Navigate.html":{}}}],["registry.actions.ts:53",{"_index":559,"title":{},"body":{"classes/LoadMarkdown.html":{}}}],["registry.actions.ts:8",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{}}}],["registry.model",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":795,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":440,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:102",{"_index":585,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:112",{"_index":587,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:16",{"_index":446,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:37",{"_index":575,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:47",{"_index":569,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:57",{"_index":578,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:70",{"_index":572,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:92",{"_index":582,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":454,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":466,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":612,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":611,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:46",{"_index":481,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":613,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:56",{"_index":477,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":617,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:67",{"_index":485,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":616,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:80",{"_index":494,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:93",{"_index":500,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":94,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["rel",{"_index":332,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relativeto",{"_index":437,"title":{},"body":{"directives/LinkDirective.html":{}}}],["remaining",{"_index":847,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["remote",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["replaceurl",{"_index":921,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":198,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["resource",{"_index":95,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_entry",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_id",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":618,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":619,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":97,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceentrypayload",{"_index":827,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":96,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":896,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":562,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":610,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":567,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":561,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.anyentry",{"_index":593,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.entry",{"_index":592,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors.field",{"_index":594,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrystate",{"_index":590,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":589,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["responsetype",{"_index":527,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["restargs",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieving",{"_index":707,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["returned",{"_index":591,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["route",{"_index":384,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":369,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["router.createurltree(link.commands",{"_index":435,"title":{},"body":{"directives/LinkDirective.html":{}}}],["routing",{"_index":328,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":216,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["running",{"_index":809,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":199,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["sanitize",{"_index":389,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitized",{"_index":432,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer",{"_index":390,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer.sanitize(urlsecuritycontext",{"_index":439,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizes",{"_index":431,"title":{},"body":{"directives/LinkDirective.html":{}}}],["schema",{"_index":899,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":203,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scope.ondestroy",{"_index":225,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":221,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["security",{"_index":403,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext",{"_index":363,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.resource_url",{"_index":406,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.url",{"_index":407,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":206,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["select",{"_index":629,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":674,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["select(selector",{"_index":676,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":673,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selection",{"_index":670,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selectoptions",{"_index":627,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{}}}],["selector",{"_index":145,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['linkregistrystate",{"_index":445,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":568,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector(['storagestate",{"_index":710,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selector(['undefined",{"_index":581,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([linkregistrystate",{"_index":455,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistryselectors.field",{"_index":606,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":598,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([storagestate",{"_index":722,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["selectors",{"_index":441,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{}}}],["selectquery",{"_index":831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot",{"_index":372,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":395,"title":{},"body":{"directives/LinkDirective.html":{}}}],["service",{"_index":514,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["session",{"_index":751,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["sessionstorage",{"_index":765,"title":{},"body":{"injectables/StorageState.html":{}}}],["set",{"_index":120,"title":{"classes/Set.html":{}},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/Set.html":{},"injectables/StorageState.html":{},"miscellaneous/variables.html":{}}}],["set(ctx",{"_index":753,"title":{},"body":{"injectables/StorageState.html":{}}}],["setcontent(content",{"_index":325,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":326,"title":{},"body":{"directives/HoverDirective.html":{}}}],["sets",{"_index":756,"title":{},"body":{"injectables/StorageState.html":{}}}],["setter",{"_index":251,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":273,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":414,"title":{},"body":{"directives/LinkDirective.html":{}}}],["simplechanges",{"_index":364,"title":{},"body":{"directives/LinkDirective.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["skiplocationchange",{"_index":920,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":685,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts",{"_index":830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":679,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"injectables/LinkRegistryState.html":{},"classes/Set.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":229,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":317,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":318,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:38",{"_index":323,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:58",{"_index":324,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:62",{"_index":320,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:71",{"_index":319,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":327,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":341,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":343,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":344,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:38",{"_index":346,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:82",{"_index":348,"title":{},"body":{"directives/LinkDirective.html":{}}}],["standalone",{"_index":165,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":287,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":804,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":298,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":393,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../action",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../link",{"_index":794,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":797,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../storage.actions.ts",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/.../storage.model.ts",{"_index":798,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/actions/action",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":93,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/storage/storage.actions.ts",{"_index":109,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"miscellaneous/variables.html":{}}}],["state/src/storage/storage.actions.ts:10",{"_index":678,"title":{},"body":{"classes/Set.html":{}}}],["state/src/storage/storage.actions.ts:24",{"_index":128,"title":{},"body":{"classes/Delete.html":{}}}],["state/src/storage/storage.actions.ts:37",{"_index":113,"title":{},"body":{"classes/Clear.html":{}}}],["state/src/storage/storage.model.ts",{"_index":801,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["state/src/storage/storage.selectors.ts",{"_index":706,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:13",{"_index":711,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.selectors.ts:23",{"_index":716,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["state/src/storage/storage.state.ts",{"_index":733,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:27",{"_index":748,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:45",{"_index":755,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:55",{"_index":743,"title":{},"body":{"injectables/StorageState.html":{}}}],["state/src/storage/storage.state.ts:65",{"_index":739,"title":{},"body":{"injectables/StorageState.html":{}}}],["state[id",{"_index":461,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["statecontext",{"_index":842,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":645,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":638,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage",{"_index":115,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["storage.actions",{"_index":760,"title":{},"body":{"injectables/StorageState.html":{}}}],["storage.model",{"_index":118,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storage.state",{"_index":721,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagecontext",{"_index":737,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageid",{"_index":112,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["storageid.local",{"_index":761,"title":{},"body":{"injectables/StorageState.html":{}}}],["storageid.session",{"_index":762,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagemodel",{"_index":759,"title":{},"body":{"injectables/StorageState.html":{},"miscellaneous/typealiases.html":{}}}],["storageselectors",{"_index":705,"title":{"classes/StorageSelectors.html":{}},"body":{"classes/StorageSelectors.html":{}}}],["storagestate",{"_index":720,"title":{"injectables/StorageState.html":{}},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).clear",{"_index":773,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).getitem(key",{"_index":723,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).length",{"_index":732,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["storagestate.getstorage(id).removeitem(key",{"_index":772,"title":{},"body":{"injectables/StorageState.html":{}}}],["storagestate.getstorage(id).setitem(key",{"_index":770,"title":{},"body":{"injectables/StorageState.html":{}}}],["store",{"_index":290,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["stored",{"_index":111,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["storing",{"_index":683,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["strategy",{"_index":387,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stream",{"_index":686,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/Set.html":{},"classes/StorageSelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["strings",{"_index":800,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":644,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["styles",{"_index":132,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["subject",{"_index":214,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":187,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:27",{"_index":626,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":194,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["such",{"_index":767,"title":{},"body":{"injectables/StorageState.html":{}}}],["super",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/Set.html":{}}}],["super(1",{"_index":224,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["supplied",{"_index":719,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["switch",{"_index":534,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/StorageState.html":{}}}],["t",{"_index":236,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["t[k",{"_index":597,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["tagname",{"_index":397,"title":{},"body":{"directives/LinkDirective.html":{}}}],["takeuntil",{"_index":640,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["tap",{"_index":641,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":333,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":167,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":242,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":256,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":248,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":234,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":205,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["tests",{"_index":811,"title":{},"body":{"index.html":{}}}],["text",{"_index":528,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(getfield",{"_index":584,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["text_entry",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this._data",{"_index":258,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":520,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":625,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":530,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.complete",{"_index":227,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.el.tagname.tolowercase",{"_index":398,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.errorvalue",{"_index":703,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.getentry(state",{"_index":456,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.gethref(link",{"_index":430,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":424,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":525,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":620,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.increasechangecount(ctx",{"_index":771,"title":{},"body":{"injectables/StorageState.html":{}}}],["this.link",{"_index":422,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":419,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":540,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":538,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":226,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.portal",{"_index":255,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":264,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.querylink(this.linkid",{"_index":423,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.rel",{"_index":426,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router.navigate(entry.commands",{"_index":550,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.target",{"_index":425,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":259,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink",{"_index":411,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":704,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":257,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":549,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":541,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["throws",{"_index":702,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":667,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["token",{"_index":671,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["top",{"_index":286,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["track",{"_index":468,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":895,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transform>(createcustomtype",{"_index":888,"title":{},"body":{"miscellaneous/variables.html":{}}}],["transformation",{"_index":890,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":134,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["triggers",{"_index":349,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":166,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":355,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ts",{"_index":728,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["tslib",{"_index":785,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/Clear.html":{},"classes/Delete.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":821,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typed",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["typematches",{"_index":462,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["typeof",{"_index":212,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":708,"title":{},"body":{"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typescript",{"_index":726,"title":{},"body":{"classes/StorageSelectors.html":{}}}],["typings",{"_index":844,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ui/cdk/injectors",{"_index":373,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":117,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"directives/LinkDirective.html":{},"classes/Set.html":{}}}],["ui/theming",{"_index":790,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":791,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":451,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["undefined",{"_index":218,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{}}}],["union",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["unionmember",{"_index":450,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["unique",{"_index":845,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unit",{"_index":810,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":210,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["unparsed",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":307,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":310,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updated",{"_index":778,"title":{},"body":{"injectables/StorageState.html":{}}}],["updatelink",{"_index":421,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":420,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updation",{"_index":306,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(getfield",{"_index":586,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":488,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["url_entry",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["urls",{"_index":501,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["urlsecuritycontext",{"_index":404,"title":{},"body":{"directives/LinkDirective.html":{}}}],["urltree",{"_index":434,"title":{},"body":{"directives/LinkDirective.html":{}}}],["use",{"_index":238,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":138,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/typealiases.html":{}}}],["user",{"_index":237,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["userhovers",{"_index":269,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["using",{"_index":545,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["validator",{"_index":889,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":124,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/Set.html":{},"classes/SnapshotObserver.html":{},"classes/StorageSelectors.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value:string",{"_index":769,"title":{},"body":{"injectables/StorageState.html":{}}}],["values",{"_index":110,"title":{},"body":{"classes/Clear.html":{},"classes/Delete.html":{},"classes/Set.html":{},"injectables/StorageState.html":{},"miscellaneous/enumerations.html":{}}}],["var",{"_index":177,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":856,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":819,"title":{},"body":{"properties.html":{}}}],["view",{"_index":161,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{}}}],["viewcontainerref",{"_index":151,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["void",{"_index":193,"title":{},"body":{"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"injectables/StorageState.html":{}}}],["weakmap",{"_index":902,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":648,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["whether",{"_index":201,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["window",{"_index":552,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(entry.url",{"_index":554,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["withpositions",{"_index":279,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":288,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["yaml",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":487,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":908,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":917,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":913,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":919,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":905,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":907,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.markdown",{"_index":892,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.text",{"_index":900,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(rawbuiltinresourcetype.url",{"_index":901,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":922,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(resource_id",{"_index":898,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":910,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":893,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":906,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.union([builtin_entry",{"_index":894,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":518,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Clear.html":{"url":"classes/Clear.html","title":"class - Clear","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Clear\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Clear the values stored in the specified StorageId\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:37\n                            \n                        \n\n                \n                    \n                            constructor class for clear action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Delete.html":{"url":"classes/Delete.html","title":"class - Delete","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Delete\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                 Class Delete Action for delete method\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:24\n                            \n                        \n\n                \n                    \n                            constructor class for Delete action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(container: ViewContainerRef)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:19\n                \n            \n\n\n            \n                \n                    Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View in which to create the element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ComponentRef\n\n                    \n                    \n                        The ComponentRef of the newly inserted element\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, ComponentRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent {\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    const ref = container.createComponent(DestroyHostComponent, { index: 0 });\n    const el: Element | null = ref.location.nativeElement;\n\n    el?.remove();\n    return ref;\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                \n            \n\n\n            \n                \n                    Register a cleanup function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                overlayRef\n                            \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                endHover\n                            \n                            \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        endHover\n                        \n                    \n                \n            \n            \n                \nendHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startHover\n                        \n                    \n                \n            \n            \n                \nstartHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:38\n                        \n                    \n\n            \n                \n                    Reference to the overlay that is created when the userhovers over the element along with its position setting\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:58\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                rel\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraLink\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:32\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onClick\n                        \n                    \n                \n            \n            \n                \nonClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true/false based on entry and element\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { LocationStrategy } from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  inject,\n  Input,\n  OnChanges,\n  SecurityContext,\n  SimpleChanges,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport {\n  EMPTY_LINK,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkRegistryActions,\n  LinkRegistrySelectors,\n  LinkType,\n} from '@hra-ui/cdk/state';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements OnChanges {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Native Element */\n  private readonly el: HTMLElement = inject(ElementRef).nativeElement;\n  /** Angular router */\n  private readonly router = inject(Router);\n  /** Activate route */\n  private readonly route = inject(ActivatedRoute, { optional: true });\n  /** Location strategy */\n  private readonly locationStrategy = inject(LocationStrategy);\n  /** DomSanitizer to sanitize the url */\n  private readonly sanitizer = inject(DomSanitizer);\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n  /** tagName from Native Element */\n  private readonly tagName = this.el.tagName.toLowerCase();\n  /** to know if the element is an anchor element */\n  private readonly isAnchorElement = ['a', 'area'].includes(this.tagName);\n  /** url security context */\n  private readonly urlSecurityContext = ['base', 'link'].includes(this.tagName)\n    ? SecurityContext.RESOURCE_URL\n    : SecurityContext.URL;\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /**\n   * triggers when linkId changes\n   * @param changes contains changes of inputs\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['linkId'].currentValue !== EMPTY_LINK) {\n      this.updateLink();\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External) {\n        return true;\n      }\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId);\n    return !isAnchorElement;\n  }\n\n  /**\n   * Updates link when linkId changes\n   */\n  private updateLink(): void {\n    const link = (this.link = this.queryLink(this.linkId));\n    this.href = undefined;\n    this.target = undefined;\n    this.rel = undefined;\n    if (link) {\n      if (link.type === LinkType.External) {\n        this.href = link.url;\n        this.rel = link.rel;\n        this.target = link.target;\n      } else {\n        this.href = this.getHref(link) ?? undefined;\n      }\n    }\n  }\n\n  /**\n   * Creates a url tree and sanitizes the url\n   * @param link Internal link entry\n   * @returns A sanitized url string\n   */\n  private getHref(link: InternalLinkEntry): string | null {\n    const { router, route, locationStrategy, sanitizer, urlSecurityContext } = this;\n    const urlTree = router.createUrlTree(link.commands, {\n      ...link.extras,\n      relativeTo: route,\n    });\n    const url = locationStrategy.prepareExternalUrl(router.serializeUrl(urlTree));\n    return sanitizer.sanitize(urlSecurityContext, url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.selectors.ts:16\n                \n            \n\n\n            \n                \n                    Queries for a link entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                LinkRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkRegistryQuery\n\n                    \n                    \n                        link query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadYaml\n                            \n                            \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:56\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:46\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:67\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:80\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                    \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:93\n                \n            \n\n\n            \n                \n                    Navigate to Internal or External urls from id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Navigate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router);\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry): Promise {\n    await this.zone.run(() => this.router.navigate(entry.commands, entry.extras));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry): void {\n    window.open(entry.url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:52\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anyEntry\n                            \n                            \n                                    Static\n                                anyText\n                            \n                            \n                                    Static\n                                entry\n                            \n                            \n                                    Static\n                                field\n                            \n                            \n                                    Static\n                                markdown\n                            \n                            \n                                    Static\n                                text\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyEntry\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyEntry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:47\n                \n            \n\n\n            \n                \n                    Queries an entry by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         AnyEntryQuery\n\n                    \n                    \n                        Any entry query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:70\n                \n            \n\n\n            \n                \n                    Query for any text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        entry\n                        \n                    \n                \n            \n            \n                \n                    \n                    entry(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:37\n                \n            \n\n\n            \n                \n                    Queries an entry by id and type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EntryQuery\n\n                    \n                    \n                        Entry query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        field\n                        \n                    \n                \n            \n            \n                \n                    \n                    field(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:57\n                \n            \n\n\n            \n                \n                    Queries a field of an entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         FieldQuery\n\n                    \n                    \n                        A field query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    markdown(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:92\n                \n            \n\n\n            \n                \n                    Query for markdown data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getField\n                                    \n                                                FieldQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DataQuery\n\n                    \n                    \n                        Markdown data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                    \n                    text(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:102\n                \n            \n\n\n            \n                \n                    Query for text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getField\n                                    \n                                                FieldQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(getField: FieldQuery)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['undefined'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:112\n                \n            \n\n\n            \n                \n                    Query for an url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    getField\n                                    \n                                                FieldQuery\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DataQuery\n\n                    \n                    \n                        Url query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceType,\n  getEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\nexport type EntryQuery = (id: ResourceId, type: ResourceType) => T | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\n\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\nexport type FieldQuery = (\n  id: ResourceId,\n  type: ResourceType,\n  field: K,\n  defaultValue?: T[K]\n) => T[K];\n\n/** Query function for resource data */\nexport type DataQuery = (id: ResourceId) => T;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries an entry by id and type\n   * @param state Current state\n   * @returns Entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static entry(state: ResourceRegistryModel): EntryQuery {\n    return (id, type) => getEntry(state, id, type);\n  }\n\n  /**\n   * Queries an entry by id\n   * @param state Current state\n   * @returns Any entry query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\n    return (id) => getEntry(state, id);\n  }\n\n  /**\n   * Queries a field of an entry\n   * @param state Current state\n   * @returns A field query function\n   */\n  @Selector([ResourceRegistryState])\n  static field(state: ResourceRegistryModel): FieldQuery {\n    return (id, type, field, defaultValue?) => {\n      const entry = getEntry(state, id, type);\n      return entry?.[field] ?? (defaultValue as never);\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): DataQuery {\n    return (id) => {\n      const entry = getEntry(state, id);\n      switch (entry?.type) {\n        case BuiltinResourceType.Markdown:\n          return entry.markdown ?? '';\n\n        case BuiltinResourceType.Text:\n          return entry.text ?? '';\n\n        default:\n          return '';\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static markdown(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Markdown, 'markdown', '');\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static text(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Text, 'text', '');\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistrySelectors.field])\n  static url(getField: FieldQuery): DataQuery {\n    return (id) => getField(id, BuiltinResourceType.Url, 'url', '');\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadMarkdown\n                            \n                            \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:40\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:30\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:51\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \nloadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:77\n                \n            \n\n\n            \n                \n                    Adds a markdown entry with content loaded from an external file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadMarkdown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entry has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:64\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  BuiltinResourceType,\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Set.html":{"url":"classes/Set.html","title":"class - Set","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Set\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Class Set Action for set method\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: StorageId, key: string, value: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/storage/storage.actions.ts:10\n                            \n                        \n\n                \n                    \n                            constructor class for Set action object\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        StorageId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: StorageId - Storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        key\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - Key to be stored in the storage identifier\n\n\n                                                        \n                                                \n                                                \n                                                        value\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                \ntype: string - value to be stored with the key\n\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '@hra-ui/cdk/state';\nimport { StorageId } from './storage.model';\n\n/** Base action factory */\nconst Action = ActionGroup('Storage');\n\n/**\n * Class Set Action for set method\n */\nexport class Set extends Action('Set') {\n  /**\n   * constructor class for Set action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   * @param value - type: string - value to be stored with the key\n   */\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\n    super();\n  }\n}\n/**\n *  Class Delete Action for delete method\n */\nexport class Delete extends Action('Delete') {\n  /**\n   * constructor class for Delete action object\n   * @param id - type: StorageId - Storage identifier\n   * @param key - type: string - Key to be stored in the storage identifier\n   */\n  constructor(readonly id: StorageId, readonly key: string) {\n    super();\n  }\n}\n/**\n * Clear the values stored in the specified StorageId\n */\nexport class Clear extends Action('Clear') {\n  /**\n   * constructor class for clear action object\n   * @param id - type: StorageId - Storage identifier\n   */\n  constructor(readonly id: StorageId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/StorageSelectors.html":{"url":"classes/StorageSelectors.html","title":"class - StorageSelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  StorageSelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Storage selectors - class for retrieving storage types\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                get\n                            \n                            \n                                    Static\n                                length\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        get\n                        \n                    \n                \n            \n            \n                \n                    \n                    get()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n            \n                \n                    Defined in state/src/storage/storage.selectors.ts:13\n                \n            \n\n\n            \n                \n                    returns the value stored in the key,value pair in the storageId given\n\n\n                    \n                    \n                    \n                        Returns :     string | undefined\n\n                    \n                    \n                        (id,key) of the given storage id else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        length\n                        \n                    \n                \n            \n            \n                \n                    \n                    length()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['StorageState'])\n                \n            \n\n            \n                \n                    Defined in state/src/storage/storage.selectors.ts:23\n                \n            \n\n\n            \n                \n                    returns the number of items in the given storage id stored\n\n\n                    \n                    \n                    \n                        Returns :     number | undefined\n\n                    \n                    \n                        length of the given StorageId supplied\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Selector } from '@ngxs/store';\nimport { StorageId } from './storage.model';\nimport { StorageState } from './storage.state';\n/**\n * Storage selectors - class for retrieving storage types\n */\nexport class StorageSelectors {\n  /**\n   * returns the value stored in the key,value pair in the storageId given\n   * @returns (id,key) of the given storage id else undefined\n   */\n  @Selector([StorageState])\n  static get(): (id: StorageId, key: string) => string | undefined {\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\n  }\n  /**\n   * returns the number of items in the given storage id stored\n   * @returns length of the given StorageId supplied\n   */\n  @Selector([StorageState])\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n  // @ts-ignore Allow selector name\n  static length(): (id: StorageId) => number | undefined {\n    return (id) => StorageState.getStorage(id).length;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/StorageState.html":{"url":"injectables/StorageState.html","title":"injectable - StorageState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  StorageState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/storage/storage.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State holding Storage types\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                clear\n                            \n                            \n                                delete\n                            \n                            \n                                    Static\n                                getStorage\n                            \n                            \n                                set\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        clear\n                        \n                    \n                \n            \n            \n                \nclear(ctx: StorageContext, undefined: Clear)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Clear)\n                \n            \n\n            \n                \n                    Defined in state/src/storage/storage.state.ts:65\n                \n            \n\n\n            \n                \n                    clears the values of the specified storage id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StorageContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nStorageContext object\n\n\n                                    \n                                \n                                \n                                    \n                                                Clear\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(ctx: StorageContext, undefined: Delete)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Delete)\n                \n            \n\n            \n                \n                    Defined in state/src/storage/storage.state.ts:55\n                \n            \n\n\n            \n                \n                    deletes the value pointed by key in the list of values stored in the specified storage id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StorageContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nStorageContext object\n\n\n                                    \n                                \n                                \n                                    \n                                                Delete\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        getStorage\n                        \n                    \n                \n            \n            \n                \n                    \n                    getStorage(id: StorageId)\n                \n            \n\n\n            \n                \n                    Defined in state/src/storage/storage.state.ts:27\n                \n            \n\n\n            \n                \n                    StorageState class to manage storage objects\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                StorageId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Storage\n\n                    \n                    \n                        \nStorage objects - session and local\n\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        set\n                        \n                    \n                \n            \n            \n                \nset(ctx: StorageContext, undefined: Set)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Set)\n                \n            \n\n            \n                \n                    Defined in state/src/storage/storage.state.ts:45\n                \n            \n\n\n            \n                \n                    sets the key,value pair in the given storageId\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                StorageContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        \nStorageContext object\n\n\n                                    \n                                \n                                \n                                    \n                                                Set\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { produce } from 'immer';\nimport { StorageContext } from './storage.model';\nimport { Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { StorageId, StorageModel } from './storage.model';\nimport { Set, Delete, Clear } from './storage.actions';\n/**\n * State holding Storage types\n */\n@State({\n  name: 'storage',\n  defaults: {\n    [StorageId.Local]: 0,\n    [StorageId.Session]: 0,\n  },\n})\n@Injectable()\n/**\n *  class for managing storage state\n */\nexport class StorageState {\n  /**\n   * StorageState class to manage storage objects\n   * @param id-Storage Identifier\n   * @returns - Storage objects - session and local\n   */\n  static getStorage(id: StorageId): Storage {\n    switch (id) {\n      case StorageId.Local:\n        return localStorage;\n\n      case StorageId.Session:\n        return sessionStorage;\n\n      default:\n        throw new Error(`No such storage '${id}'`);\n    }\n  }\n  /**\n   * sets the key,value pair in the given storageId\n   * @param ctx - StorageContext object\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Set)\n  set(ctx: StorageContext, { id, key, value }: Set): void {\n    StorageState.getStorage(id).setItem(key, value);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * deletes the value pointed by key in the list of values stored in the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Delete)\n  delete(ctx: StorageContext, { id, key }: Delete): void {\n    StorageState.getStorage(id).removeItem(key);\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * clears the values of the specified storage id\n   * @param ctx - StorageContext object\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\n   */\n  @Action(Clear)\n  clear(ctx: StorageContext, { id }: Clear): void {\n    StorageState.getStorage(id).clear();\n    this.increaseChangeCount(ctx, id);\n  }\n  /**\n   * increases count after each operation is performed on the specified storage id\n   * @param ctx  - StorageContext obje\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\n   */\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\n    ctx.setState(\n      produce((draft) => {\n        draft[id] += 1;\n      })\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            RawBuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            StorageId   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        RawBuiltinResourceType\n                    \n                \n                    \n                        \n                            Raw builtin type strings\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n    state/src/storage/storage.model.ts\n    \n        \n            \n                \n                    \n                        \n                        StorageId\n                    \n                \n                    \n                        \n                            StorageId - enum with values as Local, Session - identifier for storage types\n\n                        \n                    \n                        \n                            \n                                 Local\n                            \n                        \n                        \n                            \n                                Value : local\n                            \n                        \n                        \n                            \n                                 Session\n                            \n                        \n                        \n                            \n                                Value : session\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    3 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    18 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            AnyEntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            BuiltinTypes   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            EntryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            ExtractBuiltinEntryType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            FieldQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceEntryPayload   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RestArgs   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            SelectQuery   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                        \n                            StorageContext   (state/.../storage.model.ts)\n                        \n                        \n                            StorageModel   (state/.../storage.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    AnyEntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.anyEntry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    EntryQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.entry\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    FieldQuery\n                \n            \n            \n                \n                    Query function returned by ResourceRegistrySelectors.field\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    BuiltinTypes\n                \n            \n            \n                \n                    Maps raw builtin type strings to ResourceType\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceEntry\n                \n            \n            \n                \n                    Typed custom resource entry\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceType\n                \n            \n            \n                \n                    Custom entry types\n\n                \n            \n            \n                \n                         `custom:${T}`\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ExtractBuiltinEntryType\n                \n            \n            \n                \n                    Extracts the builtin entry with type T\n\n                \n            \n            \n                \n                        UnionMember | type | T>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Any resource entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntryPayload\n                \n            \n            \n                \n                    Payload type used when creating custom types\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Resource identifier\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceType\n                \n            \n            \n                \n                    Resource type string with entry typings\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    RestArgs\n                \n            \n            \n                \n                    Get remaining arguments after applying bound arguments\n\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SelectQuery\n                \n            \n            \n                \n                    Function type returned by selectQuerySnapshot\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n    state/src/storage/storage.model.ts\n    \n    \n        \n            \n                \n                    \n                    StorageContext\n                \n            \n            \n                \n                    Helper alias for action handler's ctx argument\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    StorageModel\n                \n            \n            \n                \n                    Type alias for the array of Storage objects\n\n                \n            \n            \n                \n                            Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../storage.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            BUILTIN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BUILTIN_TYPE_VALUES   (state/.../resource-registry.model.ts)\n                        \n                        \n                            BuiltinResourceType   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_ENTRY_TYPE   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CUSTOM_TYPE_PREFIX   (state/.../resource-registry.model.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            MARKDOWN_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            RESOURCE_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_ID   (state/.../resource-registry.model.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            TEXT_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                        \n                            URL_ENTRY   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/storage/storage.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('Storage')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BUILTIN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.discriminatedUnion('type', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])\n                    \n                \n\n            \n                \n                    Union of all builtin entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BUILTIN_TYPE_VALUES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(RawBuiltinResourceType)\n                    \n                \n\n            \n                \n                    Builtin type strings as an array\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        BuiltinResourceType\n                        \n                    \n                \n            \n                \n                    \n                        Default value : RawBuiltinResourceType as BuiltinTypes\n                    \n                \n\n            \n                \n                    Builtin resource types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()\n                    \n                \n\n            \n                \n                    Custom entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_ENTRY_TYPE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .refine((val) => !isBuiltinType(val), 'Invalid builtin resource format')\n  .transform>(createCustomType)\n                    \n                \n\n            \n                \n                    Custom entry type validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CUSTOM_TYPE_PREFIX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'custom:'\n                    \n                \n\n            \n                \n                    Prefix of all custom types\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MARKDOWN_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Markdown),\n  markdown: z.string(),\n})\n                    \n                \n\n            \n                \n                    Markdown data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])\n                    \n                \n\n            \n                \n                    Builtin or custom entries\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .string()\n  .transform((id) => `ResourceId:'${id}'`)\n  .brand('ResourceId')\n                    \n                \n\n            \n                \n                    Resource identifier validator with transformation\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(RESOURCE_ID, RESOURCE_ENTRY)\n                    \n                \n\n            \n                \n                    State schema\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TEXT_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Text),\n  text: z.string(),\n})\n                    \n                \n\n            \n                \n                    Text data\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URL_ENTRY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  type: z.literal(RawBuiltinResourceType.Url),\n  url: z.string(),\n})\n                    \n                \n\n            \n                \n                    External url\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
