var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/DestructorScope.html",[0,0.937,1,0.937]],["body/interfaces/DestructorScope.html",[0,0.587,1,1.31,2,1.474,3,0.724,4,0.724,5,0.724,6,0.896,7,0.722,8,0.587,9,0.896,10,1.367,11,2.315,12,1.367,13,1.367,14,0.601,15,1.717,16,1.34,17,1.367,18,0.084,19,1.615,20,0.724,21,1.474,22,1.367,23,1.855,24,1.367,25,1.658,26,1.616,27,1.367,28,0.724,29,0.587,30,0.587,31,0.896,32,1.367,33,1.31,34,1.216,35,1.105,36,1.056,37,0.896,38,0.587,39,0.896,40,1.105,41,0.896,42,0.587,43,1.941,44,1.367,45,0.724,46,1.615,47,1.855,48,0.896,49,1.367,50,0.724,51,0.896,52,0.473,53,0.587,54,0.722,55,0.724,56,0.896,57,0.896,58,1.157,59,0.896,60,0.896,61,0.896,62,0.896,63,0.896,64,0.896,65,0.724,66,1.658,67,0.473,68,0.896,69,0.724,70,0.896,71,1.105,72,0.896,73,0.896,74,0.896,75,0.896,76,0.724,77,0.724,78,0.896,79,0.896,80,0.896,81,0.896,82,0.896,83,0.724,84,1.615,85,0.896,86,0.896,87,0.896,88,0.724,89,0.896,90,0.587,91,1.087,92,0.724,93,0.724,94,1.34,95,1.34,96,1.381,97,1.5,98,1.34,99,1.34,100,1.216,101,0.724,102,1.367,103,0.724,104,0.724,105,1.826,106,0.896,107,0.896,108,1.105,109,1.105,110,0.724,111,0.724,112,0.724,113,1.34,114,0.724,115,1.105,116,0.896,117,0.896,118,0.896,119,0.896,120,0.896,121,0.896,122,0.896,123,0.041,124,0.041]],["title/components/OnDestroyHostComponent.html",[36,0.755,76,1.155]],["body/components/OnDestroyHostComponent.html",[0,0.56,1,1.187,3,0.691,4,0.691,5,0.691,6,0.865,7,0.697,8,0.56,9,0.56,10,0.855,11,2.068,12,0.855,13,0.855,14,0.521,16,0.691,17,0.855,18,0.084,19,1.302,20,0.691,22,0.855,23,1.319,24,0.855,25,1.319,26,1.579,27,0.855,29,0.865,31,0.56,32,0.855,33,1.187,34,1.056,35,1.066,36,1.176,37,0.855,38,0.56,39,0.855,40,1.066,41,0.855,42,0.56,43,1.919,44,1.319,45,0.691,46,1.582,47,1.811,48,0.865,49,1.319,50,0.691,51,0.855,52,0.451,53,0.56,54,0.697,55,0.691,56,0.855,57,0.855,58,1.176,59,0.855,60,0.855,61,0.855,62,0.855,63,0.855,64,0.855,65,1.066,66,2.225,67,0.851,68,1.61,69,1.302,70,0.855,71,1.066,72,0.855,73,1.61,74,1.61,75,1.61,76,1.464,77,1.066,78,1.319,79,1.319,80,1.319,81,1.61,82,1.811,83,1.302,84,1.582,85,0.855,86,0.855,87,0.855,88,0.691,89,0.855,90,0.56,91,1.056,92,0.691,93,0.691,94,1.302,95,1.302,96,1.355,97,1.464,98,1.302,99,1.302,100,1.187,101,0.691,102,1.319,103,0.691,104,0.691,105,1.799,106,0.855,107,0.855,108,1.066,109,1.066,110,0.691,111,0.691,112,0.691,113,1.302,114,0.691,115,1.066,116,0.855,117,0.855,118,0.855,119,0.855,120,0.855,121,0.855,122,0.855,123,0.039,124,0.039,125,1.319,126,1.407,127,1.407,128,1.407,129,1.407,130,2.171,131,1.074,132,2.98,133,1.407,134,0.855,135,1.407]],["title/classes/ScopedDestroySubject.html",[54,0.755,55,1.155]],["body/classes/ScopedDestroySubject.html",[0,0.583,1,1.377,3,0.719,4,0.719,5,0.719,6,0.891,7,0.718,8,0.583,9,0.891,10,0.889,11,2.31,12,0.889,13,0.889,14,0.535,16,0.719,17,0.889,18,0.084,19,1.495,20,0.719,22,0.889,23,1.36,24,0.889,25,1.651,26,1.646,27,0.889,28,0.719,29,0.583,30,0.583,31,0.891,32,0.889,33,1.306,34,1.082,35,1.099,36,1.052,37,0.889,38,0.583,39,0.889,40,1.099,41,0.889,42,0.583,43,1.938,44,1.651,45,0.719,46,1.611,47,2.254,48,1.212,49,1.849,50,1.099,51,1.36,52,0.718,53,0.891,54,0.718,55,1.099,56,1.36,57,1.36,58,1.22,59,1.36,60,1.36,61,0.889,62,0.889,63,0.889,64,0.889,65,0.719,66,1.651,67,0.47,68,0.889,69,0.719,70,0.889,71,1.099,72,0.889,73,0.889,74,0.889,75,0.889,76,0.719,77,0.719,78,0.889,79,0.889,80,0.889,81,0.889,82,0.889,83,1.099,84,1.611,85,0.889,86,0.889,87,0.889,88,0.719,89,0.889,90,0.583,91,1.082,92,0.719,93,0.719,94,1.335,95,1.335,96,1.377,97,1.495,98,1.335,99,1.335,100,1.212,101,0.719,102,1.36,103,0.719,104,0.719,105,1.822,106,0.889,107,0.889,108,1.099,109,1.099,110,0.719,111,0.719,112,0.719,113,1.335,114,0.719,115,1.099,116,0.889,117,0.889,118,0.889,119,0.889,120,0.889,121,0.889,122,0.889,123,0.041,124,0.041,136,0.889,137,1.464]],["title/classes/SnapshotObserver.html",[54,0.755,138,1.796]],["body/classes/SnapshotObserver.html",[3,0.612,4,0.612,5,0.612,7,0.4,9,1.111,14,0.245,15,1.508,18,0.084,19,1.589,20,1.494,28,1.205,29,0.977,30,1.211,31,1.111,33,1.289,34,1.442,35,1.494,38,0.496,42,0.496,45,0.612,46,1.494,48,0.787,52,1.365,53,1.111,54,0.4,58,1.162,65,0.612,67,1.088,69,0.97,71,1.205,77,0.97,83,0.612,84,1.589,88,1.205,96,0.977,100,0.787,123,0.036,124,0.036,125,1.2,134,1.2,136,0.757,138,2.13,139,1.966,140,1.966,141,0.757,142,3.235,143,1.975,144,2.764,145,2.322,146,1.975,147,1.975,148,3.62,149,1.975,150,1.246,151,2.79,152,1.246,153,2.79,154,2.13,155,1.975,156,1.975,157,2.13,158,2.79,159,1.246,160,3.235,161,1.508,162,2.47,163,1.975,164,1.246,165,2.452,166,1.246,167,1.975,168,2.452,169,1.975,170,2.764,171,1.975,172,1.246,173,1.508,174,2.13,175,0.952,176,0.952,177,1.508,178,1.246,179,1.872,180,0.952,181,1.246,182,0.952,183,2.452,184,1.975,185,1.246,186,1.246,187,1.975,188,1.246,189,1.246,190,1.246,191,1.975,192,1.975,193,2.452,194,1.246,195,1.246,196,0.757,197,0.757,198,0.952,199,2.452,200,1.49,201,1.975,202,1.508,203,1.508,204,1.508,205,1.508,206,1.508,207,1.508,208,1.508,209,1.508,210,1.508,211,1.508,212,1.246,213,1.246,214,1.246,215,1.246,216,1.246,217,1.246,218,1.246,219,1.508,220,1.508,221,1.872,222,0.952,223,0.952,224,1.246]],["title/dependencies.html",[225,1.524,226,2.146]],["body/dependencies.html",[18,0.082,42,1.297,123,0.07,124,0.07,175,2.485,180,2.95,226,2.95,227,3.255,228,3.255,229,3.255,230,3.255,231,3.863,232,3.255,233,3.255,234,3.255]],["title/miscellaneous/functions.html",[235,0.641,236,2.146]],["body/miscellaneous/functions.html",[1,1.276,6,0.645,7,0.52,8,1.365,9,1.365,14,0.319,18,0.076,26,1.483,28,1.683,29,1.365,30,1.365,31,1.365,33,1.276,34,1.524,36,0.52,38,0.645,40,1.42,43,2.096,48,0.962,50,1.187,52,1.028,53,0.962,58,1.028,67,1.153,90,0.645,91,0.962,94,1.42,95,1.42,96,0.645,97,1.574,98,1.42,99,1.42,100,1.276,101,0.796,103,0.796,104,0.796,105,0.796,108,1.42,109,1.187,110,0.796,111,0.796,112,0.796,113,0.796,114,0.796,115,0.796,123,0.044,124,0.044,125,1.756,131,1.237,134,1.756,139,0.984,140,0.984,141,1.756,144,1.845,145,2.206,154,1.845,157,1.845,161,1.237,162,1.845,170,1.237,174,1.845,176,1.237,177,2.206,179,1.237,182,1.237,196,1.468,197,1.468,200,1.946,202,1.845,203,1.845,204,2.206,205,1.845,206,1.845,207,1.845,208,1.845,209,1.845,210,1.237,211,1.237,219,2.206,220,1.845,221,2.206,222,1.237,223,1.237,235,0.52,236,1.845,237,2.416,238,2.446,239,2.416,240,2.416,241,1.845,242,2.416,243,2.89,244,1.62,245,1.62,246,1.62,247,1.62,248,1.62,249,1.62,250,1.62,251,1.62,252,1.62,253,1.62,254,1.62,255,2.416,256,1.62,257,1.62,258,1.62,259,2.416,260,1.62,261,1.62,262,2.416,263,1.62,264,2.416,265,1.62,266,1.62,267,1.62,268,1.62,269,2.416,270,1.62,271,1.62,272,1.62,273,1.62,274,1.62,275,1.62,276,1.62,277,1.62,278,1.62,279,1.62,280,1.62,281,1.62,282,1.62,283,1.62,284,1.62,285,2.416,286,1.62,287,1.62,288,1.62]],["title/index.html",[14,0.393,289,1.996,290,1.996]],["body/index.html",[18,0.072,123,0.072,124,0.072,291,3.943,292,3.37,293,3.37,294,3.943,295,3.37,296,3.943,297,3.943,298,3.37,299,3.37,300,3.37]],["title/modules.html",[301,2.402]],["body/modules.html",[18,0.074,123,0.074,124,0.074,301,2.71]],["title/overview.html",[302,2.402]],["body/overview.html",[0,1.38,18,0.073,36,1.112,123,0.073,124,0.073,136,2.105,302,2.645,303,4.007,304,3.464]],["title/properties.html",[225,1.524,305,2.146]],["body/properties.html",[18,0.077,123,0.073,124,0.073,305,2.677,306,3.506,307,3.506]],["title/miscellaneous/typealiases.html",[235,0.641,308,2.811]],["body/miscellaneous/typealiases.html",[14,0.653,18,0.075,30,1.556,67,1.065,123,0.071,124,0.071,139,2.016,140,2.016,141,2.374,173,2.533,196,2.016,197,2.016,198,2.533,200,2.374,235,1.065,241,2.533,309,3.318]],["title/miscellaneous/variables.html",[235,0.641,310,2.146]],["body/miscellaneous/variables.html",[6,1.312,7,1.057,8,1.549,14,0.765,16,1.618,18,0.075,26,1.312,52,1.057,58,1.057,90,1.312,91,1.312,92,1.911,93,1.618,123,0.071,124,0.071,235,1.057,238,2.514,310,2.514,311,3.293]]],"invertedIndex":[["",{"_index":18,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":116,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["0.0.1",{"_index":307,"title":{},"body":{"properties.html":{}}}],["1",{"_index":303,"title":{},"body":{"overview.html":{}}}],["1165545544",{"_index":286,"title":{},"body":{"miscellaneous/functions.html":{}}}],["1199063426",{"_index":287,"title":{},"body":{"miscellaneous/functions.html":{}}}],["15.1.0",{"_index":231,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":304,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":228,"title":{},"body":{"dependencies.html":{}}}],["3.7.6",{"_index":232,"title":{},"body":{"dependencies.html":{}}}],["actual_component",{"_index":135,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["aliases",{"_index":309,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular/common",{"_index":230,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":42,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["anyfunction",{"_index":178,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["args",{"_index":201,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["argument",{"_index":198,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":220,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["associated",{"_index":98,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["automatically",{"_index":48,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["available",{"_index":209,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["based",{"_index":281,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":256,"title":{},"body":{"miscellaneous/functions.html":{}}}],["block",{"_index":75,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["build",{"_index":250,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":23,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["callbacks",{"_index":12,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["called",{"_index":205,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["care",{"_index":276,"title":{},"body":{"miscellaneous/functions.html":{}}}],["caveats",{"_index":253,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cb",{"_index":32,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["cdk",{"_index":291,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":153,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["change",{"_index":154,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["changedetectorref",{"_index":151,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["class",{"_index":54,"title":{"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["classes",{"_index":136,"title":{},"body":{"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"overview.html":{}}}],["cleanup",{"_index":11,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["comment",{"_index":282,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complete",{"_index":53,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["completes",{"_index":242,"title":{},"body":{"miscellaneous/functions.html":{}}}],["completion",{"_index":161,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["complex",{"_index":251,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":36,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["component/directive/etc",{"_index":288,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component_template",{"_index":133,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["components",{"_index":125,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":84,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":83,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["constructor(cdr",{"_index":150,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(private",{"_index":188,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(scope",{"_index":60,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["container",{"_index":109,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["containing",{"_index":267,"title":{},"body":{"miscellaneous/functions.html":{}}}],["control",{"_index":247,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlling",{"_index":278,"title":{},"body":{"miscellaneous/functions.html":{}}}],["create",{"_index":57,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["created",{"_index":103,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":77,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["data",{"_index":210,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["data$.subscribe(observer",{"_index":217,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["default",{"_index":311,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":20,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["dependencies",{"_index":226,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":9,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":69,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["destroy.ts",{"_index":8,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroy.ts:10",{"_index":21,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["destroy.ts:17",{"_index":137,"title":{},"body":{"classes/ScopedDestroySubject.html":{}}}],["destroy.ts:39",{"_index":128,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["destroy/on",{"_index":7,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":269,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destruction",{"_index":27,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["destructorscope",{"_index":1,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["detection",{"_index":208,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["detector",{"_index":155,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["directive",{"_index":131,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["directives",{"_index":134,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["display",{"_index":74,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["dom",{"_index":81,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["don't",{"_index":270,"title":{},"body":{"miscellaneous/functions.html":{}}}],["during",{"_index":25,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["each",{"_index":203,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":280,"title":{},"body":{"miscellaneous/functions.html":{}}}],["el",{"_index":85,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["el?.remove",{"_index":89,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["element",{"_index":82,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["elementref",{"_index":37,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["emit",{"_index":50,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["emits",{"_index":162,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":158,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["empty",{"_index":65,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["err",{"_index":165,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":148,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error(err",{"_index":163,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":169,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":186,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["execute",{"_index":300,"title":{},"body":{"index.html":{}}}],["existing",{"_index":97,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["explicitly",{"_index":268,"title":{},"body":{"miscellaneous/functions.html":{}}}],["export",{"_index":199,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["extends",{"_index":56,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["failure",{"_index":279,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":185,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["find",{"_index":95,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject",{"_index":237,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject(component.hostview",{"_index":122,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(inject(ngmoduleref",{"_index":120,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(scope",{"_index":104,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubject",{"_index":239,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubject(scope",{"_index":101,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubjectinview",{"_index":240,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubjectinview(ref",{"_index":115,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":99,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["ftu",{"_index":68,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["function",{"_index":33,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["functions",{"_index":236,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":293,"title":{},"body":{"index.html":{}}}],["get()(...args",{"_index":224,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["gets",{"_index":167,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["getting",{"_index":289,"title":{"index.html":{}},"body":{}}],["guarantees",{"_index":254,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handles",{"_index":160,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["haserror",{"_index":184,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["hook",{"_index":260,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":66,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["hra",{"_index":180,"title":{},"body":{"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["html",{"_index":130,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["htmlelement",{"_index":87,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["https://github.com/angular/angular/issues/10185",{"_index":283,"title":{},"body":{"miscellaneous/functions.html":{}}}],["https://github.com/angular/angular/issues/10185#issuecomment",{"_index":285,"title":{},"body":{"miscellaneous/functions.html":{}}}],["immediately",{"_index":79,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["implements",{"_index":147,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["import",{"_index":35,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["important",{"_index":272,"title":{},"body":{"miscellaneous/functions.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["inject",{"_index":38,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["inject(changedetectorref",{"_index":213,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(elementref).nativeelement",{"_index":86,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["inject(store",{"_index":212,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(viewcontainerref",{"_index":119,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["injected",{"_index":245,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injection",{"_index":252,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectondestroy",{"_index":177,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["injectors/.../on",{"_index":238,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":241,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/on",{"_index":6,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select",{"_index":139,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injects",{"_index":202,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["instance",{"_index":78,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["intentionally",{"_index":195,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["interface",{"_index":0,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["latest",{"_index":144,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":129,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["length",{"_index":117,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["level",{"_index":263,"title":{},"body":{"miscellaneous/functions.html":{}}}],["library",{"_index":292,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":259,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lifetime",{"_index":248,"title":{},"body":{"miscellaneous/functions.html":{}}}],["link",{"_index":59,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["maintain",{"_index":277,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manipulate",{"_index":274,"title":{},"body":{"miscellaneous/functions.html":{}}}],["marks",{"_index":206,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":124,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":127,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["methods",{"_index":15,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/SnapshotObserver.html":{}}}],["miscellaneous",{"_index":235,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["module",{"_index":262,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":301,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mostly",{"_index":284,"title":{},"body":{"miscellaneous/functions.html":{}}}],["name",{"_index":29,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["never",{"_index":265,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":58,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":149,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["next(value",{"_index":171,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngmoduleref",{"_index":39,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ngondestroy",{"_index":258,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxs/store",{"_index":175,"title":{},"body":{"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["notify",{"_index":156,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["null",{"_index":88,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["nx",{"_index":294,"title":{},"body":{"index.html":{}}}],["object",{"_index":10,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["observable",{"_index":43,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["observables",{"_index":90,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":142,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.get.bind(observer",{"_index":218,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ondestroy",{"_index":16,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["ondestroy(cb",{"_index":17,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ondestroyhostcomponent",{"_index":76,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["operations",{"_index":273,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":31,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["overview",{"_index":302,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":111,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["owning",{"_index":91,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":225,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":46,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["parameters",{"_index":28,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["peer",{"_index":229,"title":{},"body":{"dependencies.html":{}}}],["perform",{"_index":24,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["pipe",{"_index":243,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pipes",{"_index":207,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["private",{"_index":183,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["properties",{"_index":305,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["query",{"_index":221,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["readonly",{"_index":189,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ref",{"_index":113,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["ref.createcomponent(ondestroyhostcomponent",{"_index":121,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ref.length",{"_index":118,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["register",{"_index":22,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registered",{"_index":13,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registers",{"_index":49,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["regular",{"_index":257,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rely",{"_index":271,"title":{},"body":{"miscellaneous/functions.html":{}}}],["removes",{"_index":80,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["replaysubject",{"_index":44,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["result",{"_index":105,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":123,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":96,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["returned",{"_index":255,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":34,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":261,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":298,"title":{},"body":{"index.html":{}}}],["running",{"_index":295,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":45,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["same",{"_index":219,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["scope",{"_index":26,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["scope.ondestroy",{"_index":62,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject",{"_index":55,"title":{"classes/ScopedDestroySubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject(scope).asobservable",{"_index":106,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects",{"_index":92,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["scopedsubjects.get(scope",{"_index":102,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects.set(scope",{"_index":107,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["search",{"_index":114,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["searching",{"_index":110,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["selector",{"_index":67,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot",{"_index":197,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(selector",{"_index":223,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["selectsnapshot",{"_index":196,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectsnapshot(selector",{"_index":211,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["selectsnapshotselector",{"_index":200,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["service",{"_index":244,"title":{},"body":{"miscellaneous/functions.html":{}}}],["services",{"_index":264,"title":{},"body":{"miscellaneous/functions.html":{}}}],["signatureof",{"_index":179,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["single",{"_index":51,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["snapshot",{"_index":145,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["snapshot.ts",{"_index":141,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshot.ts:16",{"_index":152,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:29",{"_index":166,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:41",{"_index":172,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:50",{"_index":164,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:59",{"_index":159,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot/select",{"_index":140,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":138,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["snapshotobserver(cdr",{"_index":216,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["standalone",{"_index":70,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["started",{"_index":290,"title":{"index.html":{}},"body":{}}],["statetoken",{"_index":173,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken).pipe(takeuntil(destroy",{"_index":215,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["store",{"_index":174,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["store.select(selector",{"_index":214,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["storing",{"_index":143,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["stream",{"_index":146,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["styles",{"_index":73,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["subject",{"_index":47,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["super(1",{"_index":61,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["t",{"_index":170,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["take",{"_index":275,"title":{},"body":{"miscellaneous/functions.html":{}}}],["takeuntil",{"_index":176,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":222,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["template",{"_index":72,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["test",{"_index":299,"title":{},"body":{"index.html":{}}}],["tests",{"_index":297,"title":{},"body":{"index.html":{}}}],["this.cdr?.markforcheck",{"_index":194,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.complete",{"_index":64,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.errorvalue",{"_index":192,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.haserror",{"_index":191,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.next",{"_index":63,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.value",{"_index":193,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["throw",{"_index":168,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["throws",{"_index":190,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["time",{"_index":204,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["tree",{"_index":126,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["tries",{"_index":94,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":71,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["tslib",{"_index":227,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":30,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":308,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["ui/theming",{"_index":233,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":234,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":181,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["undefined",{"_index":100,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":296,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":187,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["unless",{"_index":266,"title":{},"body":{"miscellaneous/functions.html":{}}}],["used",{"_index":246,"title":{},"body":{"miscellaneous/functions.html":{}}}],["using",{"_index":249,"title":{},"body":{"miscellaneous/functions.html":{}}}],["value",{"_index":52,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":132,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["variables",{"_index":310,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":306,"title":{},"body":{"properties.html":{}}}],["view",{"_index":108,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewcontainerref",{"_index":40,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewref",{"_index":41,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["views",{"_index":112,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":19,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["weakmap",{"_index":93,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["whenever",{"_index":157,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["whether",{"_index":182,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup callbacks can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/on-destroy.ts:10\n                \n            \n\n\n            \n                \n                    Register a callback to perform cleanup during scope destruction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'ftu-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OnDestroyHostComponent.html":{"url":"components/OnDestroyHostComponent.html","title":"component - OnDestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OnDestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/on-destroy.ts\n\n\n\n    \n        Description\n    \n    \n        Empty host component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ftu-on-destroy-host\n            \n\n\n            \n                styles\n                :host { display: block; }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:39\n                            \n                        \n\n                \n                    \n                            Creates a new component instance that immediately removes its own DOM element\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'ftu-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n    \n            :host { display: block; }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'OnDestroyHostComponent', 'selector': 'ftu-on-destroy-host'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OnDestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestroySubject.html":{"url":"classes/ScopedDestroySubject.html","title":"class - ScopedDestroySubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestroySubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Subject that automatically registers a cleanup function on a scope\nDuring cleanup the subject will emit a single void value and then complete\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:17\n                            \n                        \n\n                \n                    \n                            Create a new subject that automatically registers cleanup\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Scope which to link the new subject\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'ftu-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select-snapshot/select-snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        Observer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complete\n                            \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cdr: ChangeDetectorRef | null)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:16\n                            \n                        \n\n                \n                    \n                            Creates a new SnapshotObserver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Change detector to notify whenever a new value is emitted\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        complete\n                        \n                    \n                \n            \n            \n                \ncomplete()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:59\n                \n            \n\n\n            \n                \n                    Handles completion emits\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:50\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:29\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:41\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { StateToken, Store } from '@ngxs/store';\nimport { Observer, takeUntil } from 'rxjs';\n\nimport { injectOnDestroy } from '../on-destroy/on-destroy';\n\nimport type { Any, AnyFunction, SignatureOf } from '@hra-ui/utils/types';\n\n/** Observer storing the latest value from a snapshot stream */\nclass SnapshotObserver implements Observer {\n  /** Whether an error has been emitted */\n  private hasError = false;\n  /** The latest value */\n  private value?: T = undefined;\n  /** The error value if `hasError === true` */\n  private errorValue?: unknown;\n\n  /**\n   * Creates a new SnapshotObserver\n   * @param cdr Change detector to notify whenever a new value is emitted\n   */\n  constructor(private readonly cdr: ChangeDetectorRef | null) {}\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.hasError) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n    this.cdr?.markForCheck();\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.hasError = true;\n    this.value = undefined;\n    this.errorValue = err;\n  }\n\n  /**\n   * Handles completion emits\n   */\n  complete(): void {\n    // Intentionally empty\n  }\n}\n\n/** Type of `selectSnapshot` and `selectQuerySnapshot` selector argument */\nexport type SelectSnapshotSelector = ((...args: Any[]) => T) | StateToken;\n\n/**\n * Injects a function that returns the latest snapshot value each time it is called\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store data selector\n * @returns A snapshot function\n */\nexport function selectSnapshot(selector: SelectSnapshotSelector): () => T {\n  const store = inject(Store);\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  const destroy$ = injectOnDestroy();\n  const data$ = store.select(selector as StateToken).pipe(takeUntil(destroy$));\n  const observer = new SnapshotObserver(cdr);\n\n  data$.subscribe(observer);\n  return observer.get.bind(observer);\n}\n\n/**\n * Injects a function that can be called with the same arguments as the query selector\n * and returns the latest value each time\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store query selector\n * @returns A snapshot function taking the same arguments as the query selector\n */\nexport function selectQuerySnapshot(selector: SelectSnapshotSelector): SignatureOf {\n  const get = selectSnapshot(selector);\n  return ((...args) => get()(...args)) as SignatureOf;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            findOrCreateScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubjectInView   (injectors/.../on-destroy.ts)\n                        \n                        \n                            injectOnDestroy   (injectors/.../on-destroy.ts)\n                        \n                        \n                            selectQuerySnapshot   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            selectSnapshot   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findOrCreateScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindOrCreateScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable for the scope\nIf not found a new observable is created and associated with the scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The existing or new observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find and return an existing observable associated with a scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        The observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubjectInView\n                        \n                    \n                \n            \n            \n                \nfindScopedSubjectInView(ref: ViewContainerRef)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable associated with a view container by searching all owned views\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ref\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View container to search\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        An observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        injectOnDestroy\n                        \n                    \n                \n            \n            \n                \ninjectOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                    Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe takeUntil pipe, and to build other complex injection functions.\nCaveats:\n\nThere are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook\nFor root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don't rely on it for important operations\nComponents, directives, pipe, and services that manipulate the ViewContainerRef MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable\n\nBased on comment on https://github.com/angular/angular/issues/10185\nMostly https://github.com/angular/angular/issues/10185#issuecomment-1165545544 and\nhttps://github.com/angular/angular/issues/10185#issuecomment-1199063426\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that emits and completes when the component/directive/etc. is destroyed\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectQuerySnapshot\n                        \n                    \n                \n            \n            \n                \nselectQuerySnapshot(selector: SelectSnapshotSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store query selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     SignatureOf\n\n                    \n                    \n                        A snapshot function taking the same arguments as the query selector\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSnapshot\n                        \n                    \n                \n            \n            \n                \nselectSnapshot(selector: SelectSnapshotSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store data selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        A snapshot function\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            SelectSnapshotSelector   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    SelectSnapshotSelector\n                \n            \n            \n                \n                    Type of selectSnapshot and selectQuerySnapshot selector argument\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            scopedSubjects   (injectors/.../on-destroy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scopedSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    OnDestroy observables index by their owning scope\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
