var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.218,1,2.387]],["body/interfaces/ActionConstructor.html",[0,1.77,1,4.073,2,1.935,3,0.404,4,0.404,5,0.404,6,3.073,7,0.355,8,1.547,9,1.329,10,1.381,11,0.755,12,2.29,13,0.465,14,1.262,15,0.033,16,0.404,17,3.073,18,1.935,19,0.616,20,1.258,21,2.672,22,0.657,23,2.29,24,1.381,25,2.672,26,3.987,27,4.426,28,3.073,29,0.662,30,1.381,31,1.629,32,3.073,33,1.629,34,3.681,35,2.134,36,0.175,37,3.073,38,3.073,39,3.681,40,2.373,41,0.024,42,0.024]],["title/classes/Add.html",[36,0.121,43,0.875]],["body/classes/Add.html",[3,0.351,4,0.351,5,0.609,7,0.419,8,0.85,9,0.892,10,0.923,13,0.227,14,0.892,15,0.033,16,0.477,19,0.609,20,0.716,22,0.396,24,0.923,29,0.793,36,0.203,41,0.021,42,0.021,43,1.654,44,0.781,45,1.482,46,1.482,47,1.089,48,1.411,49,1.952,50,2.058,51,2.055,52,1.174,53,2.136,54,0.443,55,2.666,56,1.83,57,0.443,58,0.443,59,0.396,60,1.283,61,1.552,62,1.089,63,1.183,64,0.85,65,0.396,66,1.678,67,1.742,68,1.83,69,2.055,70,2.055,71,1.365,72,3.008,73,1.089,74,0.85,75,1.183,76,1.552,77,1.089,78,1.919,79,0.85,80,1.61,81,0.655,82,1.83,83,0.85,84,1.183,85,1.183,86,1.189,87,2.168,88,1.183,89,1.183,90,1.851,91,1.851]],["title/classes/Add-1.html",[36,0.102,43,0.738,92,1.608]],["body/classes/Add-1.html",[3,0.342,4,0.342,5,0.639,7,0.411,8,0.828,9,0.876,10,0.9,13,0.221,14,1,15,0.033,16,0.469,19,0.604,20,0.957,22,0.386,24,0.9,29,0.806,36,0.202,41,0.021,42,0.021,43,1.668,44,0.761,47,1.061,48,1.396,50,2.006,52,1.165,54,0.431,55,2.598,56,1.806,57,0.431,58,0.431,59,0.386,60,1.273,61,1.341,62,1.061,63,1.153,64,0.828,65,0.386,67,1.726,68,1.806,69,2.037,70,2.037,71,1.341,73,1.061,74,0.828,75,1.153,76,1.341,77,1.061,78,1.909,79,0.828,80,1.582,81,1,82,2.104,83,0.828,84,1.582,85,1.582,86,1.273,93,1.456,94,1.456,95,2.111,96,2.412,97,2.514,98,1.636,99,3.057,100,1.492,101,2.113,102,1.492,103,1.492]],["title/classes/AddFromYaml.html",[36,0.121,79,0.875]],["body/classes/AddFromYaml.html",[3,0.353,4,0.353,5,0.63,7,0.421,8,0.855,9,0.896,10,0.929,13,0.228,14,1.091,15,0.033,16,0.479,19,0.611,20,0.721,22,0.398,24,0.929,29,0.795,36,0.204,41,0.022,42,0.022,43,1.643,44,0.786,45,1.489,46,1.489,47,1.096,48,1.161,49,1.874,51,1.836,52,1.017,53,1.759,54,0.446,56,1.617,57,0.446,58,0.446,59,0.398,60,1.247,61,1.371,62,1.096,63,1.191,64,0.855,65,0.398,66,1.69,67,1.746,68,1.836,69,2.06,70,2.06,71,1.371,72,3.083,73,1.096,74,0.855,75,1.191,76,1.67,77,1.096,78,1.978,79,1.161,80,1.97,81,0.896,82,1.836,83,0.855,84,1.191,85,1.191,86,1.192,87,2.175,88,1.191,89,1.191,90,1.863,91,1.863,104,2.683,105,2.683]],["title/classes/AddFromYaml-1.html",[36,0.102,79,0.738,92,1.608]],["body/classes/AddFromYaml-1.html",[3,0.343,4,0.343,5,0.64,7,0.413,8,0.832,9,0.879,10,0.904,13,0.222,14,1.13,15,0.033,16,0.471,19,0.605,20,0.961,22,0.387,24,0.904,29,0.807,36,0.202,41,0.021,42,0.021,43,1.659,44,0.764,47,1.066,48,1.14,52,1.003,54,0.433,56,1.587,57,0.433,58,0.433,59,0.387,60,1.235,61,0.982,62,1.066,63,1.158,64,0.832,65,0.387,67,1.729,68,1.81,69,2.04,70,2.04,71,1.345,73,1.066,74,0.832,75,1.158,76,1.345,77,1.066,78,1.97,79,1.14,80,1.947,81,1.13,82,2.107,83,0.832,84,1.587,85,1.587,86,1.275,93,1.461,94,1.461,95,2.022,96,2.144,97,2.053,98,1.644,99,3.162,100,2.053,101,2.118,102,1.499,103,1.499,104,2.61,105,2.61]],["title/classes/AddMany.html",[36,0.121,74,0.875]],["body/classes/AddMany.html",[3,0.354,4,0.354,5,0.611,7,0.421,8,0.857,9,0.897,10,0.931,13,0.228,14,0.897,15,0.033,16,0.48,19,0.611,20,0.722,22,0.541,24,0.931,29,0.795,36,0.204,41,0.022,42,0.022,43,1.643,44,0.787,45,1.49,46,1.49,47,1.098,48,1.163,49,1.875,51,1.838,52,1.018,53,1.761,54,0.446,56,1.838,57,0.446,58,0.446,59,0.399,60,1.247,61,1.373,62,1.098,63,1.193,64,0.857,65,0.399,66,1.692,67,1.747,68,1.838,69,2.061,70,2.061,71,1.671,72,3.181,73,1.49,74,1.163,75,1.193,76,1.671,77,1.692,78,1.922,79,0.857,80,1.619,81,0.661,82,1.838,83,0.857,84,1.193,85,1.193,86,1.193,87,2.177,88,1.193,89,1.193,90,1.866,91,1.866,106,2.688,107,2.688]],["title/classes/AddMany-1.html",[36,0.102,74,0.738,92,1.608]],["body/classes/AddMany-1.html",[3,0.345,4,0.345,5,0.64,7,0.414,8,0.835,9,0.881,10,0.907,13,0.223,14,1.004,15,0.033,16,0.472,19,0.605,20,0.963,22,0.532,24,0.907,29,0.808,36,0.202,41,0.021,42,0.021,43,1.66,44,0.767,47,1.07,48,1.142,52,1.004,54,0.435,56,1.813,57,0.435,58,0.435,59,0.389,60,1.236,61,0.985,62,1.07,63,1.162,64,0.835,65,0.389,67,1.731,68,1.813,69,2.042,70,2.042,71,1.653,73,1.464,74,1.142,75,1.162,76,1.537,77,1.669,78,1.912,79,0.835,80,1.591,81,1.004,82,2.109,83,0.835,84,1.591,85,1.591,86,1.276,93,1.464,94,1.464,95,2.024,96,2.148,97,2.058,98,1.649,99,3.201,100,1.504,101,2.12,102,1.504,103,1.504,106,2.618,107,2.618]],["title/components/DestroyHostComponent.html",[108,2.12,109,2.745]],["body/components/DestroyHostComponent.html",[3,0.367,4,0.367,5,0.367,7,0.432,11,1.109,13,0.237,15,0.033,16,0.367,19,0.367,21,3.921,22,0.555,23,2.148,29,0.463,30,1.296,33,1.139,36,0.122,40,3.259,41,0.022,42,0.022,54,0.463,57,0.463,58,0.749,59,0.414,65,0.555,108,3.631,109,4.841,110,3.74,111,5.055,112,3.341,113,2.789,114,2.597,115,4.481,116,3.341,117,2.888,118,4.481,119,4.703,120,3.74,121,3.252,122,4.481,123,2.425,124,2.269,125,2.423,126,5.799,127,3.67,128,5.055,129,1.805,130,4.481,131,3.482,132,3.341,133,3.252,134,2.888,135,4.21,136,3.931,137,5.402,138,3.74,139,4.481,140,4.22,141,2.597,142,5.634,143,4.481,144,1.466,145,2.154,146,1.346,147,2.425,148,4.481,149,3.341,150,2.154,151,1.937,152,3.341,153,3.341,154,3.341,155,4.481,156,1.601,157,5.402,158,3.341,159,1.937,160,2.154,161,3.341,162,2.425,163,2.789,164,3.341]],["title/interfaces/DestructorScope.html",[0,1.218,165,2.12]],["body/interfaces/DestructorScope.html",[0,1.293,2,1.835,3,0.383,4,0.383,5,0.383,7,0.444,11,0.716,13,0.327,15,0.033,16,0.383,19,0.568,22,0.432,23,1.673,29,0.716,30,1.334,31,2.073,33,1.19,36,0.128,41,0.023,42,0.023,48,0.929,54,0.484,57,0.484,58,0.484,59,0.432,65,0.432,67,1.096,114,2.674,129,1.858,146,1.406,151,2.023,165,3.543,166,3.349,167,2.534,168,3.313,169,4.413,170,2.425,171,3.851,172,4.313,173,3.851,174,2.214,175,3.49,176,3.851,177,3.851,178,3.349,179,3.851,180,1.673,181,2.534,182,2.25,183,3.543,184,4.263,185,4.149,186,1.858,187,2.25,188,2.534,189,2.023,190,2.534,191,2.534,192,2.534,193,3.851,194,3.851,195,2.914,196,4.313,197,3.851,198,2.534,199,2.023,200,1.532,201,2.914,202,2.023,203,2.534,204,2.914,205,2.914,206,2.914,207,2.914,208,2.914,209,2.914]],["title/interfaces/HoverContext.html",[0,1.218,210,2.387]],["body/interfaces/HoverContext.html",[0,1.01,2,1.432,3,0.299,4,0.299,5,0.299,7,0.263,11,0.559,12,1.865,13,0.193,15,0.033,16,0.498,19,0.427,20,1.018,22,0.649,31,1.548,36,0.1,41,0.019,42,0.019,65,0.562,81,1.074,117,1.757,124,1.098,127,2.824,131,2.508,133,2.824,134,2.508,135,1.978,136,2.925,141,1.58,144,1.196,145,1.757,146,1.098,147,2.824,150,1.757,156,2.509,160,1.757,174,1.828,210,3.294,211,2.275,212,1.991,213,3.294,214,4.132,215,4.067,216,3.248,217,4.37,218,2.172,219,2.824,220,3.248,221,4.37,222,4.677,223,2.275,224,3.248,225,2.275,226,1.978,227,1.978,228,1.306,229,3.294,230,3.248,231,2.275,232,2.275,233,3.248,234,3.248,235,2.275,236,2.824,237,2.275,238,3.248,239,2.275,240,2.275,241,3.788,242,3.248,243,4.868,244,3.294,245,2.275,246,2.275,247,2.275,248,3.788,249,2.172,250,1.978,251,3.248,252,2.275,253,3.248,254,2.275,255,3.248,256,2.275,257,4.132,258,2.275,259,2.275,260,2.275,261,2.275,262,2.275,263,4.132,264,4.132,265,4.132,266,4.132,267,4.132,268,4.132,269,4.132,270,4.132,271,2.275,272,2.275,273,1.757,274,2.275,275,2.275,276,3.788,277,3.248,278,2.824,279,2.275,280,2.275,281,2.275,282,3.788,283,3.248,284,2.275,285,2.275,286,2.275,287,2.275,288,3.248,289,2.275,290,2.275,291,2.275,292,1.978,293,2.275]],["title/directives/HoverDirective.html",[156,1.576,160,2.12]],["body/directives/HoverDirective.html",[0,0.773,3,0.229,4,0.229,5,0.229,7,0.201,11,0.428,12,1.531,13,0.332,15,0.033,16,0.426,19,0.351,20,1.05,22,0.674,30,1.257,31,1.753,36,0.077,41,0.016,42,0.016,54,0.769,57,0.443,58,0.443,59,0.538,65,0.481,81,1.055,117,2.058,123,1.515,124,1.286,127,3.4,129,1.286,131,2.058,133,1.515,134,1.345,135,1.515,136,2.801,141,1.21,144,0.916,145,1.345,146,0.841,147,1.515,150,1.345,156,2.368,159,1.21,160,2.058,174,2.071,186,0.841,210,2.318,211,1.742,212,1.907,213,2.318,214,4.124,215,4.154,216,1.742,217,2.666,218,2.056,219,1.515,220,1.742,221,4.538,222,4.888,223,1.742,224,3.238,225,1.742,226,1.515,227,1.515,228,1,229,2.816,230,3.91,231,2.666,232,3.628,233,4.124,234,4.124,235,1.742,236,2.318,237,1.742,238,2.666,239,1.742,240,1.742,241,3.238,242,2.666,243,5.044,244,3.4,245,1.742,246,1.742,247,1.742,248,3.628,249,1.907,250,1.515,251,3.628,252,2.666,253,3.91,254,2.666,255,3.628,256,2.666,257,4.124,258,2.666,259,2.666,260,2.666,261,2.666,262,2.666,263,4.427,264,4.427,265,4.427,266,4.427,267,4.427,268,4.427,269,4.427,270,4.427,271,2.666,272,1.742,273,1.345,274,1.742,275,1.742,276,4.292,277,4.124,278,3.586,279,3.238,280,2.666,281,3.628,282,3.238,283,2.666,284,3.238,285,3.238,286,2.666,287,3.628,288,2.666,289,1.742,290,1.742,291,1.742,292,1.515,293,1.742,294,2.666,295,3.194,296,2.666,297,3.194,298,3.194,299,3.194,300,3.194,301,3.194,302,3.194,303,3.194,304,1.679,305,1.21,306,2.087,307,2.087,308,2.087,309,2.087]],["title/directives/LinkDirective.html",[156,1.576,162,2.387]],["body/directives/LinkDirective.html",[3,0.222,4,0.222,5,0.222,7,0.367,8,0.538,9,0.878,11,0.415,12,1.495,13,0.397,14,1.181,15,0.033,16,0.536,18,1.064,19,0.222,20,1.234,23,0.97,29,0.528,30,1.101,33,1.576,36,0.074,41,0.015,42,0.015,49,1.785,51,1.808,52,0.878,53,1.257,54,0.747,57,0.432,58,0.432,59,0.668,65,0.605,86,1.178,87,1.369,88,0.75,113,1.689,123,1.469,124,1.533,125,1.495,129,1.257,136,3.875,140,1.689,144,0.888,145,1.305,146,1.861,150,1.305,151,1.173,156,2.05,159,1.173,162,2.264,163,3.57,174,1.257,186,1.533,200,1.877,212,0.888,226,1.469,227,1.469,228,0.97,229,1.469,249,2.526,250,1.469,278,3.994,292,3.105,294,3.177,296,2.604,304,2.248,305,2.206,310,2.024,311,2.604,312,2.604,313,3.806,314,4.881,315,3.543,316,3.543,317,3.119,318,3.119,319,3.119,320,3.119,321,3.119,322,4.62,323,3.57,324,2.024,325,2.604,326,3.119,327,3.119,328,4.881,329,3.119,330,1.689,331,3.119,332,4.277,333,3.806,334,3.119,335,3.806,336,3.119,337,2.604,338,3.119,339,2.604,340,3.119,341,3.119,342,3.119,343,3.806,344,1.689,345,2.024,346,2.024,347,3.119,348,3.119,349,2.024,350,2.024,351,2.024,352,3.57,353,1.689,354,2.604,355,1.689,356,2.024,357,2.264,358,2.024,359,1.469,360,1.305,361,2.024,362,2.024,363,3.119,364,2.024,365,1.689,366,1.689,367,2.024,368,4.277,369,2.024,370,2.024,371,2.024,372,2.024,373,2.024,374,3.119,375,2.024,376,2.024,377,0.888,378,2.024,379,2.024,380,2.024,381,3.119,382,2.024,383,2.024,384,2.024,385,4.277,386,2.024,387,2.024,388,3.119,389,2.024,390,2.024,391,2.024,392,2.024,393,2.024,394,2.024,395,2.024,396,3.119,397,3.119,398,3.119,399,3.119,400,3.119,401,3.119,402,2.604,403,2.024,404,2.024,405,2.024,406,2.024,407,2.024,408,3.806,409,3.119,410,3.119,411,2.024,412,2.024,413,2.024,414,2.024,415,2.024,416,2.024,417,2.024,418,2.024,419,2.024,420,2.024,421,2.024,422,2.024,423,2.024]],["title/classes/LinkRegistrySelectors.html",[36,0.121,359,2.387]],["body/classes/LinkRegistrySelectors.html",[3,0.381,4,0.381,5,0.381,7,0.443,11,0.712,13,0.436,15,0.033,16,0.603,18,2.709,19,0.381,29,0.76,30,1.49,31,1.568,33,1.568,36,0.127,40,3.536,41,0.023,42,0.023,44,0.849,45,1.568,46,1.568,49,1.949,51,1.703,52,1.246,53,1.399,54,0.481,57,0.481,58,0.481,59,0.57,60,1.315,64,0.924,65,0.57,124,1.399,125,1.664,129,1.852,189,2.012,200,2.407,218,1.524,249,1.524,304,1.825,359,3.337,360,2.238,377,2.625,424,2.52,425,3.837,426,3.18,427,3.837,428,4.142,429,3.472,430,3.472,431,3.837,432,3.337,433,3.741,434,3.741,435,2.238,436,1.825,437,2.52,438,2.898,439,3.472,440,3.472,441,2.52,442,2.238,443,2.898,444,2.898,445,2.898,446,3.837,447,2.52]],["title/injectables/LinkRegistryState.html",[437,2.387,448,2.12]],["body/injectables/LinkRegistryState.html",[3,0.216,4,0.216,5,0.462,7,0.465,9,1.12,11,0.403,13,0.369,14,0.767,15,0.033,16,0.587,19,0.335,20,0.838,22,0.522,29,0.793,30,1.455,31,0.67,33,0.67,35,1.139,36,0.072,41,0.015,42,0.015,43,1.539,45,1.645,46,1.645,48,0.811,49,1.714,51,1.129,52,1.14,53,0.792,54,0.632,57,0.632,58,0.668,59,0.623,60,1.197,64,0.523,65,0.463,71,0.958,72,1.603,74,1.339,76,1.745,78,1.58,79,1.12,81,0.864,83,1.12,86,0.944,87,2.476,88,1.56,89,1.864,100,0.942,102,1.461,125,0.942,129,1.228,144,0.862,174,2.027,180,0.942,200,2.116,202,1.767,212,2.395,218,0.862,228,0.942,249,2,304,2.395,305,1.139,311,1.64,315,1.426,316,1.426,352,3.514,353,1.64,357,2.213,360,1.267,365,2.545,366,1.64,377,2.538,402,1.64,426,1.139,428,1.426,433,1.426,434,2.213,435,1.267,436,1.033,437,2.213,442,1.267,447,1.426,448,1.965,449,1.426,450,1.426,451,2.545,452,2.545,453,3.049,454,2.545,455,2.545,456,2.545,457,4.21,458,2.545,459,4.92,460,2.545,461,1.965,462,4.555,463,2.545,464,2.545,465,1.965,466,2.545,467,3.804,468,2.545,469,1.965,470,2.545,471,1.426,472,2.545,473,2.545,474,1.767,475,2.545,476,2.545,477,2.545,478,1.965,479,3.118,480,2.938,481,2.545,482,3.049,483,3.049,484,1.965,485,3.049,486,4.557,487,1.64,488,1.64,489,3.049,490,1.64,491,1.64,492,1.64,493,2.545,494,1.64,495,1.64,496,1.426,497,2.545,498,1.426,499,1.64,500,1.64,501,2.545,502,1.965,503,1.965,504,2.545,505,1.64,506,1.64,507,1.965,508,1.64,509,1.64,510,1.64,511,1.64,512,1.139,513,1.64,514,1.64,515,1.64,516,1.965,517,1.965,518,1.64,519,2.545,520,1.965,521,3.049,522,1.965,523,3.049,524,1.965,525,1.64,526,1.965,527,1.64,528,1.965,529,3.049,530,2.545,531,1.64,532,1.64,533,1.965,534,1.965,535,1.965,536,1.965,537,1.965,538,1.965,539,1.965,540,1.965,541,1.965]],["title/classes/LoadFromYaml.html",[36,0.121,83,0.875]],["body/classes/LoadFromYaml.html",[3,0.351,4,0.351,5,0.655,7,0.419,8,0.85,9,0.892,10,0.923,13,0.227,14,1.088,15,0.033,16,0.477,19,0.609,20,0.716,22,0.396,24,0.923,29,0.793,36,0.203,41,0.021,42,0.021,43,1.641,44,0.781,45,1.482,46,1.482,47,1.089,48,1.156,49,1.871,51,1.83,52,1.014,53,1.751,54,0.443,56,1.61,57,0.443,58,0.443,59,0.396,60,1.244,61,1.365,62,1.089,63,1.183,64,0.85,65,0.396,66,1.678,67,1.742,68,1.83,69,2.055,70,2.055,71,1.365,72,3.132,73,1.089,74,0.85,75,1.183,76,1.552,77,1.089,78,1.965,79,0.85,80,1.61,81,0.655,82,2.12,83,1.156,84,1.183,85,1.61,86,1.283,87,2.168,88,1.183,89,1.183,90,1.851,91,1.851,542,2.666,543,2.666]],["title/classes/LoadFromYaml-1.html",[36,0.102,83,0.738,92,1.608]],["body/classes/LoadFromYaml-1.html",[3,0.342,4,0.342,5,0.668,7,0.411,8,0.828,9,0.876,10,0.9,13,0.221,14,1.128,15,0.033,16,0.469,19,0.604,20,0.957,22,0.386,24,0.9,29,0.806,36,0.202,41,0.021,42,0.021,43,1.658,44,0.761,47,1.061,48,1.136,52,1,54,0.431,56,1.582,57,0.431,58,0.431,59,0.386,60,1.233,61,0.977,62,1.061,63,1.153,64,0.828,65,0.386,67,1.726,68,1.806,69,2.037,70,2.037,71,1.341,73,1.061,74,0.828,75,1.153,76,1.341,77,1.061,78,1.957,79,0.828,80,1.582,81,1,82,2.226,83,1.136,84,1.582,85,1.806,86,1.328,93,1.456,94,1.456,95,2.02,96,2.139,97,2.047,98,1.636,99,3.158,100,1.492,101,2.113,102,1.492,103,1.492,542,2.598,543,2.598]],["title/classes/LoadMarkdown.html",[36,0.121,103,1.576]],["body/classes/LoadMarkdown.html",[3,0.337,4,0.337,5,0.666,7,0.408,8,0.817,9,0.869,10,0.888,13,0.218,14,1.123,15,0.033,16,0.465,19,0.601,20,0.949,22,0.381,24,0.888,29,0.803,36,0.201,41,0.021,42,0.021,43,1.655,44,0.751,47,1.048,48,1.126,50,1.981,52,0.994,54,0.426,56,1.568,57,0.426,58,0.426,59,0.381,60,1.3,61,0.965,62,1.048,63,1.138,64,0.817,65,0.381,67,1.719,68,1.794,69,2.027,70,2.027,71,1.329,73,1.048,74,0.817,75,1.138,76,1.329,77,1.048,78,1.905,79,0.817,80,1.568,81,1.071,82,2.22,83,0.817,84,1.568,85,1.794,86,1.344,93,1.444,94,1.444,95,2.089,96,2.401,97,2.029,98,1.615,99,3.046,100,1.473,101,2.335,102,2.029,103,2.029,544,3.073]],["title/classes/Navigate.html",[36,0.121,87,1.443]],["body/classes/Navigate.html",[3,0.353,4,0.353,5,0.611,7,0.421,8,0.855,9,0.896,10,0.929,13,0.228,14,0.896,15,0.033,16,0.479,19,0.611,20,0.721,22,0.398,24,0.929,29,0.795,36,0.204,41,0.022,42,0.022,43,1.61,44,0.786,45,1.489,46,1.489,47,1.096,48,1.161,49,1.939,50,2.072,51,2.06,52,1.017,53,1.759,54,0.446,56,1.617,57,0.446,58,0.446,59,0.398,60,1.315,61,1.557,62,1.096,63,1.191,64,0.855,65,0.398,66,1.69,67,1.746,68,1.836,69,2.06,70,2.06,71,1.371,72,3.014,73,1.096,74,0.855,75,1.191,76,1.557,77,1.096,78,1.921,79,0.855,80,1.617,81,0.66,82,1.836,83,0.855,84,1.191,85,1.191,86,1.247,87,2.516,88,1.617,89,1.617,90,1.863,91,2.53,545,3.214]],["title/classes/ResourceRegistrySelectors.html",[36,0.121,546,2.745]],["body/classes/ResourceRegistrySelectors.html",[3,0.247,4,0.247,5,0.247,7,0.49,11,0.462,13,0.431,14,0.695,15,0.033,16,0.496,18,1.184,19,0.447,29,0.753,30,1.662,31,1.985,33,1.894,35,1.306,36,0.083,40,3.892,41,0.017,42,0.017,44,0.551,52,1.161,54,0.672,57,0.672,58,0.672,59,0.63,60,1.354,64,0.599,65,0.504,81,1.208,86,1.141,93,1.735,94,1.735,95,1.93,96,1.983,97,1.08,101,2.05,124,0.908,125,1.08,129,1.363,189,1.306,200,2.316,218,1.784,249,0.989,304,2.546,305,1.306,377,2.743,424,1.635,425,2.825,426,3.611,427,2.825,431,2.825,432,4.107,434,3.281,435,1.452,436,1.184,438,1.881,441,1.635,442,2.182,443,1.881,444,1.881,445,1.881,446,2.825,447,2.457,512,3.28,518,1.881,519,2.825,546,2.825,547,2.825,548,3.385,549,3.385,550,4.412,551,4.845,552,2.253,553,4.637,554,3.385,555,2.253,556,2.253,557,3.393,558,3.385,559,2.253,560,3.385,561,2.253,562,1.635,563,1.635,564,4.845,565,4.845,566,1.881,567,2.253,568,2.253,569,2.253,570,2.253,571,2.253,572,2.253]],["title/injectables/ResourceRegistryState.html",[448,2.12,563,2.387]],["body/injectables/ResourceRegistryState.html",[3,0.244,4,0.244,5,0.556,7,0.487,9,1.19,11,0.455,13,0.359,14,0.826,15,0.033,16,0.577,19,0.244,20,0.497,22,0.556,25,2.427,29,0.793,30,1.518,33,1.14,36,0.081,41,0.017,42,0.017,43,1.576,48,0.89,52,1.135,54,0.667,57,0.667,58,0.701,59,0.65,60,1.079,64,0.59,65,0.414,71,1.05,74,1.397,76,1.798,78,1.649,79,1.193,81,0.92,83,1.193,86,1.079,89,1.874,93,1.725,94,1.725,95,1.373,99,1.758,100,1.063,101,1.806,102,2.149,103,2.424,129,1.347,144,0.973,174,2.038,180,1.063,200,2.111,202,2.599,212,2.473,215,2.427,228,1.063,249,0.973,304,2.529,377,2.6,436,1.165,448,2.156,449,1.609,450,1.609,451,2.791,452,2.791,454,2.791,455,2.791,456,2.791,458,2.791,460,2.791,462,4.704,463,2.791,464,2.791,466,2.791,467,4.016,468,2.791,470,2.791,471,1.609,472,2.791,473,2.791,474,1.938,475,2.791,476,2.791,477,2.791,479,3.361,480,3.565,481,3.742,487,1.851,488,1.851,490,1.851,491,1.851,492,1.851,496,1.609,497,2.791,498,1.609,499,1.851,500,1.851,504,2.791,505,1.851,506,1.851,508,1.851,509,1.851,510,1.851,511,2.791,512,1.938,513,1.851,514,1.851,515,1.851,547,1.851,550,1.609,562,1.609,563,2.427,566,1.851,573,3.344,574,5.027,575,2.217,576,2.217,577,2.217,578,3.344,579,3.344,580,2.217,581,2.217,582,1.851,583,2.217,584,2.217,585,1.851,586,2.217,587,2.217,588,2.217,589,2.217]],["title/classes/ScopedDestructorSubject.html",[36,0.121,203,2.387]],["body/classes/ScopedDestructorSubject.html",[0,1.277,3,0.379,4,0.379,5,0.379,7,0.441,10,0.997,13,0.364,15,0.033,16,0.379,19,0.564,22,0.567,23,2.193,29,0.712,30,0.997,31,1.996,33,1.176,36,0.126,41,0.023,42,0.023,44,0.843,48,1.217,54,0.478,57,0.478,58,0.478,59,0.427,65,0.427,67,1.437,114,2.652,146,1.389,151,1.998,165,3.669,166,3.321,167,2.502,168,3.171,169,4.334,170,1.812,171,2.878,172,2.878,173,2.878,174,1.843,176,2.878,177,2.878,178,2.502,179,4.287,180,1.652,181,2.502,182,2.222,183,3.772,184,4.499,185,4.132,186,2.069,187,2.222,188,2.502,189,1.998,190,2.502,191,2.502,192,2.502,193,3.819,194,3.819,195,2.878,196,4.885,197,4.566,198,3.321,199,2.652,200,2.008,201,3.819,202,2.652,203,3.321,204,3.819,205,3.819,206,2.878,207,2.878,208,2.878,209,2.878,590,3.447]],["title/interfaces/SelectOptions.html",[0,1.218,591,2.387]],["body/interfaces/SelectOptions.html",[0,1.215,2,1.724,3,0.36,4,0.55,5,0.36,7,0.316,11,0.673,12,2.121,13,0.355,15,0.033,16,0.615,19,0.55,22,0.406,23,1.572,29,0.694,30,1.279,31,1.708,33,1.708,41,0.022,42,0.022,59,0.62,65,0.62,119,2.737,124,1.782,125,1.572,141,2.903,144,1.439,146,2.16,170,1.724,180,2.121,182,2.852,186,1.321,199,2.565,212,1.439,218,1.439,228,1.572,273,2.114,337,4.18,377,2.198,435,2.114,436,1.724,474,1.901,480,3.456,496,3.212,591,3.892,592,2.38,593,3.892,594,4.425,595,4.922,596,5.768,597,4.425,598,3.694,599,4.18,600,4.18,601,3.279,602,4.18,603,3.694,604,2.737,605,4.425,606,2.737,607,2.38,608,2.737,609,3.212,610,3.279,611,2.737,612,2.737,613,2.114,614,2.737,615,2.737,616,2.737,617,2.737,618,3.694,619,3.279,620,4.425,621,3.279,622,5.361,623,3.279,624,2.737,625,2.737,626,2.737,627,2.737,628,2.737,629,2.737,630,2.737,631,2.737,632,2.737,633,2.737,634,2.737,635,2.737,636,2.38,637,2.737,638,2.737,639,3.279,640,3.279,641,3.279]],["title/classes/SnapshotObserver.html",[36,0.121,642,2.745]],["body/classes/SnapshotObserver.html",[3,0.371,4,0.371,5,0.371,7,0.49,11,0.694,13,0.24,15,0.033,16,0.371,19,0.371,22,0.56,29,0.626,30,1.57,33,1.153,36,0.124,41,0.022,42,0.022,44,0.827,54,0.705,57,0.626,58,0.626,59,0.56,65,0.419,129,1.82,168,1.96,174,2.187,180,1.621,186,2.594,192,3.279,199,3.147,200,1.982,218,2.608,249,1.982,312,3.77,441,3.279,474,3.544,525,4.246,613,2.912,624,3.77,642,3.77,643,4.531,644,2.823,645,4.517,646,4.517,647,4.96,648,3.77,649,4.517,650,5.086,651,5.086,652,4.517,653,3.382,654,5.428,655,5.086,656,3.382,657,4.517,658,4.517,659,3.382,660,2.823,661,4.246,662,3.382,663,3.382,664,3.382,665,3.382,666,5.086,667,5.086]],["title/dependencies.html",[668,2.315,669,3.289]],["body/dependencies.html",[15,0.032,41,0.028,42,0.028,125,2.715,144,2.13,344,4.052,436,2.551,669,4.728,670,4.854,671,4.854,672,4.854,673,5.664,674,4.854,675,4.854,676,4.854]],["title/miscellaneous/enumerations.html",[677,1.217,678,3.289]],["body/miscellaneous/enumerations.html",[11,0.947,15,0.031,41,0.027,42,0.027,45,1.573,46,1.573,49,1.449,86,1.233,88,2.036,89,2.036,93,1.573,94,1.573,95,1.573,101,2.214,186,2.502,360,3.543,512,3.186,562,3.99,636,3.348,677,2.024,678,3.85,679,2.973,680,3.919,681,2.973,682,4.588,683,4.613,684,4.613]],["title/miscellaneous/functions.html",[170,2.071,677,1.217]],["body/miscellaneous/functions.html",[1,1.922,6,1.372,7,0.542,8,0.704,9,1.271,10,1.358,11,0.337,13,0.44,14,1.154,15,0.031,17,2.21,21,1.922,22,0.641,23,2.341,24,1.102,25,1.193,26,2.775,27,2.775,28,4.573,30,1.774,31,1.958,32,1.372,35,0.953,36,0.06,37,1.372,38,1.372,41,0.013,42,0.013,45,0.561,46,0.561,49,0.516,51,0.609,54,0.228,57,0.803,58,0.803,59,0.723,60,0.594,61,1.044,62,0.903,73,0.561,81,0.337,93,0.561,94,0.561,95,0.903,96,0.721,108,1.06,110,2.775,114,1.535,117,2.143,120,2.21,121,1.193,124,1.892,131,1.06,134,1.06,138,2.775,141,1.535,146,0.662,151,0.953,156,0.788,159,1.927,165,1.707,166,1.193,167,1.922,168,2.588,169,1.193,170,1.747,174,1.067,178,1.922,180,0.788,181,1.193,182,1.707,183,2.457,184,2.767,185,1.193,186,2.172,187,1.06,188,1.193,189,0.953,190,1.193,191,1.193,199,2.422,202,1.535,212,1.459,213,2.413,218,1.834,219,1.922,228,0.788,244,1.193,273,2.878,330,4.321,339,1.372,354,4.5,355,2.21,377,1.459,426,2.209,432,1.922,471,1.922,480,3.733,498,1.193,501,2.21,527,1.372,530,1.372,585,2.775,591,2.767,592,1.193,593,2.413,595,3.488,598,1.372,599,2.775,600,2.775,603,1.372,604,1.372,606,2.775,607,1.193,609,3.241,611,2.775,612,2.775,613,1.06,614,2.21,615,1.372,616,1.372,617,1.372,618,1.372,625,2.21,626,1.372,627,1.372,628,1.372,629,2.21,630,2.775,631,1.372,632,3.181,633,3.92,634,1.372,635,1.372,636,1.193,637,1.372,638,1.372,647,2.21,648,2.775,677,0.721,679,1.06,680,2.457,681,1.06,685,2.648,686,2.648,687,2.21,688,2.775,689,2.648,690,4.885,691,2.648,692,2.648,693,4.465,694,2.648,695,3.324,696,3.181,697,3.488,698,3.324,699,2.648,700,3.324,701,2.648,702,1.644,703,2.648,704,2.21,705,2.648,706,2.648,707,3.324,708,2.648,709,1.372,710,1.644,711,1.644,712,2.775,713,1.644,714,1.644,715,1.644,716,5.686,717,1.644,718,4.179,719,1.644,720,4.465,721,1.644,722,2.648,723,2.648,724,2.648,725,2.648,726,4.179,727,4.696,728,1.644,729,1.644,730,1.644,731,1.644,732,3.324,733,4.885,734,1.644,735,1.644,736,1.644,737,2.648,738,1.644,739,1.644,740,1.644,741,1.644,742,1.644,743,1.644,744,3.324,745,1.644,746,1.644,747,1.644,748,1.644,749,2.648,750,1.644,751,1.644,752,1.644,753,1.644,754,1.644,755,2.648,756,1.644,757,1.644,758,1.644,759,1.644,760,1.644,761,3.324,762,2.648,763,1.644,764,3.324,765,1.644,766,1.644,767,1.644,768,1.644,769,1.644,770,1.644,771,2.648,772,1.644,773,1.644,774,1.644,775,1.644,776,1.644,777,2.648,778,1.644,779,2.648,780,1.644,781,1.644,782,2.648,783,1.644,784,1.644,785,1.644,786,1.644,787,1.644,788,1.644,789,1.644,790,1.644,791,1.644,792,1.644,793,1.644,794,1.644,795,1.644,796,1.644,797,1.644,798,1.644,799,2.648,800,1.644,801,1.644,802,1.644,803,1.644,804,1.644,805,2.648,806,2.648,807,1.644,808,1.644,809,1.644]],["title/index.html",[11,0.569,810,2.773,811,2.773]],["body/index.html",[15,0.028,41,0.028,42,0.028,187,3.2,198,3.604,812,5.739,813,4.965,814,4.965,815,5.739,816,4.965,817,5.739,818,5.739,819,4.965]],["title/modules.html",[820,3.7]],["body/modules.html",[15,0.029,41,0.029,42,0.029,820,4.286]],["title/overview.html",[821,3.7]],["body/overview.html",[2,2.63,15,0.028,41,0.028,42,0.028,44,1.223,92,2.9,108,3.225,159,2.9,449,3.632,821,4.176,822,5.765,823,5.003,824,5.003]],["title/properties.html",[12,1.888,668,2.315]],["body/properties.html",[12,2.442,15,0.03,41,0.029,42,0.029,825,5.094,826,5.094]],["title/miscellaneous/typealiases.html",[677,1.217,827,3.94]],["body/miscellaneous/typealiases.html",[2,1.953,9,0.763,11,0.763,13,0.442,15,0.026,18,1.953,31,2.037,35,2.786,41,0.024,42,0.024,45,1.639,46,1.639,49,1.832,51,1.781,52,1.197,53,1.936,61,1.509,81,0.986,88,1.377,89,1.377,93,1.639,94,1.639,95,1.921,96,2.109,97,2.304,124,1.497,170,1.953,212,2.109,357,3.489,377,2.338,424,3.867,426,3.088,428,3.489,433,3.489,442,3.098,450,3.489,459,4.012,493,4.012,495,4.012,550,3.489,553,4.012,557,4.012,574,4.012,592,2.698,593,2.698,602,3.102,608,3.102,609,3.489,677,1.631,679,3.919,680,4.1,681,3.851,704,3.102,712,4.012,828,3.716,829,6.161,830,4.806,831,4.806,832,3.716,833,3.716,834,3.716]],["title/miscellaneous/variables.html",[677,1.217,835,3.289]],["body/miscellaneous/variables.html",[8,1.155,9,1.201,11,0.654,13,0.438,14,0.891,15,0.032,18,2.594,22,0.538,24,1.255,41,0.021,42,0.021,45,1.48,46,1.48,47,1.807,49,1.664,52,0.891,60,0.715,66,1.676,77,1.683,86,0.973,88,1.181,89,1.181,93,1.48,94,1.48,95,1.087,98,1.676,101,1.284,114,1.848,121,2.314,146,1.988,168,3.214,183,2.055,186,2.461,236,2.314,305,3.541,315,3.151,316,3.151,323,3.624,325,2.661,474,1.848,494,3.624,512,1.848,531,2.661,532,3.624,582,3.624,607,2.314,613,2.055,643,2.661,644,3.624,660,2.661,661,3.624,677,1.399,679,3.574,680,3.773,681,2.798,682,2.661,687,2.661,688,3.624,696,2.661,697,3.624,709,2.661,835,2.661,836,4.341,837,4.341,838,4.936,839,4.936,840,3.188,841,3.188,842,3.188,843,3.188,844,5.72,845,3.188,846,5.853,847,3.188,848,3.188,849,3.188,850,3.188,851,3.188,852,3.188,853,3.188,854,3.188,855,3.188,856,3.188,857,3.188,858,4.936,859,3.188,860,3.188,861,3.188,862,3.188,863,4.341,864,4.341,865,3.188,866,3.188,867,3.188,868,4.341,869,3.188,870,3.188,871,3.188,872,4.936,873,3.188,874,3.188,875,3.188,876,3.188,877,3.188,878,3.188]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":140,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["0.0.1",{"_index":826,"title":{},"body":{"properties.html":{}}}],["1",{"_index":92,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"overview.html":{}}}],["1165545544",{"_index":800,"title":{},"body":{"miscellaneous/functions.html":{}}}],["1199063426",{"_index":801,"title":{},"body":{"miscellaneous/functions.html":{}}}],["14",{"_index":823,"title":{},"body":{"overview.html":{}}}],["15.1.0",{"_index":673,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":822,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":671,"title":{},"body":{"dependencies.html":{}}}],["3.7.6",{"_index":674,"title":{},"body":{"dependencies.html":{}}}],["4",{"_index":824,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":275,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["accessors",{"_index":299,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('load",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":464,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":468,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":460,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadfromyaml",{"_index":477,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":579,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":483,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionfactory",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actiongroup",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{}}}],["actiongroup('linkregistry",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":98,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actions",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actions/actions",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["actiontyperegistry",{"_index":836,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activate",{"_index":367,"title":{},"body":{"directives/LinkDirective.html":{}}}],["activatedroute",{"_index":351,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":164,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":587,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":481,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":79,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":515,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":636,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["addmany",{"_index":74,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":458,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":508,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":454,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":463,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["addyaml",{"_index":455,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":466,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["aliases",{"_index":828,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":254,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["altkey",{"_index":399,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":384,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":365,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["angular/cdk/overlay",{"_index":223,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":225,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":344,"title":{},"body":{"directives/LinkDirective.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":488,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":144,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":349,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular/router",{"_index":353,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["anytext",{"_index":548,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":549,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["application",{"_index":231,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["area'].includes(this.tagname",{"_index":386,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":610,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arguments",{"_index":330,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["array",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asserts",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype(type",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associated",{"_index":197,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":457,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":279,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":244,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["attaches",{"_index":204,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":118,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":319,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":320,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":321,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":328,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatic",{"_index":723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["automatically",{"_index":630,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["available",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["await",{"_index":521,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":339,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["before",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boolean",{"_index":337,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bottom",{"_index":266,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boundargs",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["brand('linkid",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":523,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browser",{"_index":350,"title":{},"body":{"directives/LinkDirective.html":{}}}],["build",{"_index":767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["built",{"_index":683,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["button",{"_index":396,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cache",{"_index":759,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cached",{"_index":842,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":178,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["called",{"_index":633,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["care",{"_index":789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":519,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["caveats",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cb",{"_index":177,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":812,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":620,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":623,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":599,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["changedetectorref",{"_index":601,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["changes",{"_index":292,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["changes['linkid'].currentvalue",{"_index":394,"title":{},"body":{"directives/LinkDirective.html":{}}}],["child",{"_index":139,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"overview.html":{}}}],["cleanup",{"_index":169,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["click",{"_index":322,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":531,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":625,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["completed",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["completes",{"_index":202,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["completion",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complex",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":108,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["component/directive/etc",{"_index":802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component/directive/pipe",{"_index":122,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":158,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentref",{"_index":142,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["components",{"_index":110,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":594,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["connectionpositionpair",{"_index":221,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["constructor(entries",{"_index":106,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(readonly",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(scope",{"_index":205,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(url",{"_index":542,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":104,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":135,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":149,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":598,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":392,"title":{},"body":{"directives/LinkDirective.html":{}}}],["content",{"_index":215,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":237,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":212,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["control",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlling",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["create(container",{"_index":130,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["createa",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createactionfactory",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createactionfactory(type",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["created",{"_index":251,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["createlinkid",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('@@__empty__",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid(id",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid(id",{"_index":754,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ctrlkey",{"_index":397,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":462,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.getstate()[id",{"_index":517,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":505,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["current",{"_index":432,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{}}}],["data",{"_index":81,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data(data",{"_index":246,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["date",{"_index":291,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["decorators",{"_index":304,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["default",{"_index":305,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":496,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["defined",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["dependencies",{"_index":669,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":119,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":115,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":166,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["destroy/on",{"_index":607,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destroyhostcomponent",{"_index":109,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":183,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":837,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":165,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["detach",{"_index":285,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":600,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["determines",{"_index":181,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["directive",{"_index":156,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["directives",{"_index":159,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["disable",{"_index":615,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["discriminated",{"_index":832,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["discriminatedunion('type",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":354,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["dispatch$(type",{"_index":728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":380,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(type",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchaction",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatches",{"_index":726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchimpl",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchimpl(actionfactory",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatching",{"_index":724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["display",{"_index":127,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":234,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dom",{"_index":112,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["domsanitizer",{"_index":348,"title":{},"body":{"directives/LinkDirective.html":{}}}],["don't",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["el",{"_index":150,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["el?.remove",{"_index":153,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["element",{"_index":136,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["elementref",{"_index":226,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emit",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["emits",{"_index":199,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":613,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":626,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["empty",{"_index":325,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":323,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":264,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":287,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":76,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["entry",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.extras",{"_index":536,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":567,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":541,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":540,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":569,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":447,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["enumerations",{"_index":678,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":662,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":655,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":474,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":526,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(err",{"_index":652,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":651,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":657,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":664,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["event",{"_index":278,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["excluding",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["execute",{"_index":819,"title":{},"body":{"index.html":{}}}],["existing",{"_index":528,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["explicitly",{"_index":614,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{}}}],["external",{"_index":89,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":838,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":493,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extras",{"_index":532,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["failure",{"_index":792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":190,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["filename",{"_index":467,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["finddestructorscope",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finds",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findstablekeyobject",{"_index":698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finished",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":138,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["firstdefinedvalue",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["firstdefinedvalue(genfn",{"_index":760,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flexibleconnectedto(this.el",{"_index":261,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["found",{"_index":443,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["fragment",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functions",{"_index":170,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":814,"title":{},"body":{"index.html":{}}}],["generator",{"_index":762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["genfn",{"_index":763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(url",{"_index":510,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":444,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["gethref(link",{"_index":417,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":441,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getting",{"_index":810,"title":{"index.html":{}},"body":{}}],["global",{"_index":573,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["globally",{"_index":453,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["guarantees",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handle",{"_index":276,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["handlers",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":654,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["hook",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":126,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts",{"_index":116,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:19",{"_index":132,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":345,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":340,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":341,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":342,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":318,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":227,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":336,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":286,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":280,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":296,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":214,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":210,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":160,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":125,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["hrahover",{"_index":232,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":161,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":295,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":163,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":314,"title":{},"body":{"directives/LinkDirective.html":{}}}],["html",{"_index":155,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["htmlelement",{"_index":364,"title":{},"body":{"directives/LinkDirective.html":{}}}],["http",{"_index":497,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":487,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["https://github.com/angular/angular/issues/10185",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["https://github.com/angular/angular/issues/10185#issuecomment",{"_index":799,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["identity",{"_index":700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["identity(value",{"_index":745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ids",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{}}}],["immediately",{"_index":201,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["implement",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["implements",{"_index":312,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":217,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["important",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["improved",{"_index":473,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":660,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["initial",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":228,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["inject(activatedroute",{"_index":369,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(changedetectorref",{"_index":621,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(domsanitizer",{"_index":375,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(elementref).nativeelement",{"_index":250,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inject(httpclient",{"_index":500,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(locationstrategy",{"_index":372,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(ngzone",{"_index":503,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":260,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(overlay).create",{"_index":258,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":366,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":639,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(viewcontainerref",{"_index":272,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["injectable",{"_index":448,"title":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["injectables",{"_index":449,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["injectdestroy",{"_index":606,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["injected",{"_index":765,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injection",{"_index":632,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["injectors/.../destructor",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../dispatch.ts",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../on",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../select.ts",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":840,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/dispatch/dispatch.ts",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/src/lib/on",{"_index":114,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":592,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":643,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":501,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["input",{"_index":229,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":235,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":245,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":362,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":294,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":137,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":133,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["instance",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instances",{"_index":725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/SelectOptions.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":839,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":357,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["isanchorelement",{"_index":385,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isdestructorscopelike",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdestructorscopelike(obj",{"_index":191,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["isobject",{"_index":193,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["js",{"_index":490,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["keeping",{"_index":451,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["know",{"_index":383,"title":{},"body":{"directives/LinkDirective.html":{}}}],["latest",{"_index":647,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":154,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["level",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["library",{"_index":813,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":120,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["lifetime",{"_index":629,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":389,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":420,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.rel",{"_index":412,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.target",{"_index":413,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":401,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.url",{"_index":411,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":494,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":507,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":162,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":495,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":358,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":459,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":428,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":433,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":359,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":437,"title":{"injectables/LinkRegistryState.html":{}},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":360,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":402,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":520,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["load",{"_index":479,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":506,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":83,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":499,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":103,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":578,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":85,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":456,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":476,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["location",{"_index":370,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy",{"_index":343,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy.prepareexternalurl(router.serializeurl(urltree",{"_index":422,"title":{},"body":{"directives/LinkDirective.html":{}}}],["maintain",{"_index":790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manipulate",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":491,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":588,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":586,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maps",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mark",{"_index":597,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markdown",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(state",{"_index":554,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["markfn",{"_index":622,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["markforcheck(options",{"_index":618,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["marking",{"_index":616,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["marks",{"_index":611,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":475,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":123,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":400,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":529,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["methods",{"_index":129,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["miscellaneous",{"_index":677,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":831,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":820,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotypeoperatorfunction",{"_index":603,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["mostly",{"_index":798,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mouse",{"_index":277,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":335,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":297,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":298,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multiple",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":363,"title":{},"body":{"directives/LinkDirective.html":{}}}],["navigate",{"_index":87,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":482,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":538,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":533,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["nearest",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{}}}],["never",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":143,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["next",{"_index":624,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["next(value",{"_index":658,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":650,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngonchanges(changes",{"_index":393,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngondestroy",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxs/store",{"_index":436,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["ngzone",{"_index":489,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":663,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":661,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":527,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["none",{"_index":128,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifyonchange",{"_index":596,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":151,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["nullable",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nx",{"_index":815,"title":{},"body":{"index.html":{}}}],["obj",{"_index":185,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["obj.ondestroy",{"_index":195,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["object",{"_index":168,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["obs",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["observable",{"_index":480,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["observable's",{"_index":628,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["observables",{"_index":121,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":645,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":644,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":656,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":659,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":653,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{}}}],["onchanges",{"_index":313,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick",{"_index":317,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":334,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":172,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":173,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["onsameurlnavigation",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operator",{"_index":617,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":442,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":595,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["options?.notifyonchange",{"_index":619,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["or(z.object",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originx",{"_index":263,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":265,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":189,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":284,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["output",{"_index":742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["over",{"_index":253,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":222,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":257,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":283,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":288,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.hasattached",{"_index":282,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":267,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":268,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overview",{"_index":821,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":668,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["param1",{"_index":516,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":470,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":627,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["passed",{"_index":213,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["passthrough",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":672,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":333,"title":{},"body":{"directives/LinkDirective.html":{}}}],["pipe",{"_index":585,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["pipe(map((data",{"_index":513,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":641,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pipeactioninstance",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pipeactioninstance(action",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pipes",{"_index":805,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portal",{"_index":243,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":255,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":259,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["preserve",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":249,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["promise",{"_index":486,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{},"properties.html":{}}}],["property",{"_index":274,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["provided",{"_index":134,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["queries",{"_index":431,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":426,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":427,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["querying",{"_index":376,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":378,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["raw",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["ref",{"_index":148,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ref.location.nativeelement",{"_index":152,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["reference",{"_index":248,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["register",{"_index":176,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registered",{"_index":171,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registers",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":492,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":107,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["registry.actions.ts:31",{"_index":105,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:42",{"_index":543,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:52",{"_index":545,"title":{},"body":{"classes/Navigate.html":{}}}],["registry.actions.ts:53",{"_index":544,"title":{},"body":{"classes/LoadMarkdown.html":{}}}],["registry.actions.ts:8",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{}}}],["registry.model",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":680,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":424,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:16",{"_index":430,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:23",{"_index":556,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:33",{"_index":552,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:55",{"_index":555,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:65",{"_index":559,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:75",{"_index":561,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":438,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":450,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":576,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":575,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:46",{"_index":465,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":577,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:56",{"_index":461,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":581,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:67",{"_index":469,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":580,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:80",{"_index":478,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:93",{"_index":484,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":94,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["regular",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rel",{"_index":315,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relativeto",{"_index":421,"title":{},"body":{"directives/LinkDirective.html":{}}}],["rely",{"_index":784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["remote",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["replaceurl",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":179,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["res",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resource",{"_index":95,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":582,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":583,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":97,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":96,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":547,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":574,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrydataquery",{"_index":553,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":550,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryquery",{"_index":557,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":546,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.getentry(state",{"_index":565,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistrystate",{"_index":563,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":562,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["resourcetype.markdown",{"_index":566,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype.markdown)?.markdown",{"_index":570,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text",{"_index":568,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text)?.text",{"_index":571,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.url)?.url",{"_index":572,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["responsetype",{"_index":511,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["result",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resulthandler",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["returned",{"_index":761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returning",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route",{"_index":368,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":352,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["router.createurltree(link.commands",{"_index":419,"title":{},"body":{"directives/LinkDirective.html":{}}}],["routing",{"_index":311,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":198,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["running",{"_index":816,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":180,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["same",{"_index":764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitize",{"_index":373,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitized",{"_index":416,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer",{"_index":374,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer.sanitize(urlsecuritycontext",{"_index":423,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizes",{"_index":415,"title":{},"body":{"directives/LinkDirective.html":{}}}],["schema",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":184,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["scope.ondestroy",{"_index":207,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":203,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["security",{"_index":387,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext",{"_index":346,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.resource_url",{"_index":390,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.url",{"_index":391,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":188,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["select",{"_index":593,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":638,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["select(selector",{"_index":640,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":637,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":634,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selectoptions",{"_index":591,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selector",{"_index":124,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['linkregistrystate",{"_index":429,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":551,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([linkregistrystate",{"_index":439,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":564,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selectors",{"_index":425,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["selectquerysnapshot",{"_index":355,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":379,"title":{},"body":{"directives/LinkDirective.html":{}}}],["selectquerysnapshot(selector",{"_index":804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selects",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot(selector",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service",{"_index":498,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":236,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/variables.html":{}}}],["setcontent(content",{"_index":308,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":309,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setter",{"_index":233,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":256,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":398,"title":{},"body":{"directives/LinkDirective.html":{}}}],["simplechanges",{"_index":347,"title":{},"body":{"directives/LinkDirective.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["skiplocationchange",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":648,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["snapshot.ts",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshotobserver",{"_index":642,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":211,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":300,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":301,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:38",{"_index":306,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:58",{"_index":307,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:62",{"_index":303,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:71",{"_index":302,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":310,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":324,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":326,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":327,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:38",{"_index":329,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:82",{"_index":331,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stable",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{}}}],["standalone",{"_index":145,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":270,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":811,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":281,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":377,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["state/.../action",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/.../actions.ts",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state/.../link",{"_index":679,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":681,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/action",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":93,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state[id",{"_index":445,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["statecontext",{"_index":830,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":609,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":602,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["store",{"_index":273,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["storing",{"_index":646,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["strategy",{"_index":371,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stream",{"_index":649,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":608,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["styles",{"_index":111,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["subject",{"_index":196,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":167,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["subject.ts:27",{"_index":590,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":175,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["super",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["super(1",{"_index":206,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["support",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch",{"_index":518,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["t",{"_index":218,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["tagname",{"_index":381,"title":{},"body":{"directives/LinkDirective.html":{}}}],["take",{"_index":788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["takeuntil",{"_index":604,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":605,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":316,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":147,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":224,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":239,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":230,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":216,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":187,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["tests",{"_index":818,"title":{},"body":{"index.html":{}}}],["text",{"_index":512,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(state",{"_index":558,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["this._data",{"_index":241,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":504,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":589,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":514,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.complete",{"_index":209,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.el.tagname.tolowercase",{"_index":382,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.errorvalue",{"_index":666,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.getentry(state",{"_index":440,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.gethref(link",{"_index":414,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":408,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":509,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":584,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.link",{"_index":406,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":403,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":524,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":522,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":208,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.portal",{"_index":238,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":247,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.querylink(this.linkid",{"_index":407,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.rel",{"_index":410,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router.navigate(entry.commands",{"_index":535,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.target",{"_index":409,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":242,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink",{"_index":395,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":667,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":240,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":534,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":525,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["throws",{"_index":665,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":631,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["token",{"_index":635,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["top",{"_index":269,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["track",{"_index":452,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":113,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["triggers",{"_index":332,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":146,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":338,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tslib",{"_index":670,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":827,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typematches",{"_index":446,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["typeof",{"_index":194,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":682,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/injectors",{"_index":356,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":361,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":435,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{}}}],["unchanged",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["undefined",{"_index":200,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["union",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unionmember",{"_index":434,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["unique",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":817,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":192,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["unless",{"_index":781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unparsed",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":290,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":293,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatelink",{"_index":405,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":404,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updation",{"_index":289,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":560,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":472,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["urls",{"_index":485,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["urlsecuritycontext",{"_index":388,"title":{},"body":{"directives/LinkDirective.html":{}}}],["urltree",{"_index":418,"title":{},"body":{"directives/LinkDirective.html":{}}}],["use",{"_index":220,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":117,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["user",{"_index":219,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["userhovers",{"_index":252,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["using",{"_index":530,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":186,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":157,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":835,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":825,"title":{},"body":{"properties.html":{}}}],["view",{"_index":141,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["viewcontainerref",{"_index":131,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":174,"title":{},"body":{"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["weakmap",{"_index":841,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":612,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["whether",{"_index":182,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":537,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(entry.url",{"_index":539,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["withpositions",{"_index":262,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":271,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["wrapper",{"_index":729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wraps",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yaml",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":471,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":829,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.markdown",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.text",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.url",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":502,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(container: ViewContainerRef)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:19\n                \n            \n\n\n            \n                \n                    Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View in which to create the element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ComponentRef\n\n                    \n                    \n                        The ComponentRef of the newly inserted element\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, ComponentRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent {\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    const ref = container.createComponent(DestroyHostComponent, { index: 0 });\n    const el: Element | null = ref.location.nativeElement;\n\n    el?.remove();\n    return ref;\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                \n            \n\n\n            \n                \n                    Register a cleanup function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                overlayRef\n                            \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                endHover\n                            \n                            \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        endHover\n                        \n                    \n                \n            \n            \n                \nendHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startHover\n                        \n                    \n                \n            \n            \n                \nstartHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:38\n                        \n                    \n\n            \n                \n                    Reference to the overlay that is created when the userhovers over the element along with its position setting\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:58\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                rel\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraLink\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:32\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onClick\n                        \n                    \n                \n            \n            \n                \nonClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true/false based on entry and element\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { LocationStrategy } from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  inject,\n  Input,\n  OnChanges,\n  SecurityContext,\n  SimpleChanges,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport {\n  EMPTY_LINK,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkRegistryActions,\n  LinkRegistrySelectors,\n  LinkType,\n} from '@hra-ui/cdk/state';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements OnChanges {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Native Element */\n  private readonly el: HTMLElement = inject(ElementRef).nativeElement;\n  /** Angular router */\n  private readonly router = inject(Router);\n  /** Activate route */\n  private readonly route = inject(ActivatedRoute, { optional: true });\n  /** Location strategy */\n  private readonly locationStrategy = inject(LocationStrategy);\n  /** DomSanitizer to sanitize the url */\n  private readonly sanitizer = inject(DomSanitizer);\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n  /** tagName from Native Element */\n  private readonly tagName = this.el.tagName.toLowerCase();\n  /** to know if the element is an anchor element */\n  private readonly isAnchorElement = ['a', 'area'].includes(this.tagName);\n  /** url security context */\n  private readonly urlSecurityContext = ['base', 'link'].includes(this.tagName)\n    ? SecurityContext.RESOURCE_URL\n    : SecurityContext.URL;\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /**\n   * triggers when linkId changes\n   * @param changes contains changes of inputs\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['linkId'].currentValue !== EMPTY_LINK) {\n      this.updateLink();\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External) {\n        return true;\n      }\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId);\n    return !isAnchorElement;\n  }\n\n  /**\n   * Updates link when linkId changes\n   */\n  private updateLink(): void {\n    const link = (this.link = this.queryLink(this.linkId));\n    this.href = undefined;\n    this.target = undefined;\n    this.rel = undefined;\n    if (link) {\n      if (link.type === LinkType.External) {\n        this.href = link.url;\n        this.rel = link.rel;\n        this.target = link.target;\n      } else {\n        this.href = this.getHref(link) ?? undefined;\n      }\n    }\n  }\n\n  /**\n   * Creates a url tree and sanitizes the url\n   * @param link Internal link entry\n   * @returns A sanitized url string\n   */\n  private getHref(link: InternalLinkEntry): string | null {\n    const { router, route, locationStrategy, sanitizer, urlSecurityContext } = this;\n    const urlTree = router.createUrlTree(link.commands, {\n      ...link.extras,\n      relativeTo: route,\n    });\n    const url = locationStrategy.prepareExternalUrl(router.serializeUrl(urlTree));\n    return sanitizer.sanitize(urlSecurityContext, url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.selectors.ts:16\n                \n            \n\n\n            \n                \n                    Queries for a link entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                LinkRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkRegistryQuery\n\n                    \n                    \n                        link query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadYaml\n                            \n                            \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:56\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:46\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:67\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:80\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                    \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:93\n                \n            \n\n\n            \n                \n                    Navigate to Internal or External urls from id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Navigate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router);\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry): Promise {\n    await this.zone.run(() => this.router.navigate(entry.commands, entry.extras));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry): void {\n    window.open(entry.url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:52\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anyText\n                            \n                            \n                                    Static\n                                markdown\n                            \n                            \n                                    Static\n                                query\n                            \n                            \n                                    Static\n                                text\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:33\n                \n            \n\n\n            \n                \n                    Query for any text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    markdown(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:55\n                \n            \n\n\n            \n                \n                    Query for markdown data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Markdown data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:23\n                \n            \n\n\n            \n                \n                    Queries for a resource entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryQuery\n\n                    \n                    \n                        Resource query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                    \n                    text(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:65\n                \n            \n\n\n            \n                \n                    Query for text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:75\n                \n            \n\n\n            \n                \n                    Query for an url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Url query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { ResourceEntry, ResourceId, ResourceRegistryModel, ResourceType } from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function for resource entry optionally with type specified */\nexport type ResourceRegistryQuery = (\n  id: ResourceId,\n  type?: T\n) => UnionMember | undefined;\n\n/** Query function for resource data */\nexport type ResourceRegistryDataQuery = (id: ResourceId) => T | undefined;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries for a resource entry\n   * @param state Current state\n   * @returns Resource query function\n   */\n  @Selector([ResourceRegistryState])\n  static query(state: ResourceRegistryModel): ResourceRegistryQuery {\n    return (id, type) => ResourceRegistrySelectors.getEntry(state, id, type);\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id);\n      switch (entry?.type) {\n        case ResourceType.Markdown:\n          return entry.markdown as string;\n\n        case ResourceType.Text:\n          return entry.text as string;\n\n        default:\n          return undefined;\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistryState])\n  static markdown(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Markdown)?.markdown;\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static text(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Text)?.text;\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistryState])\n  static url(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Url)?.url;\n  }\n\n  /**\n   * Gets a resource entry by id and optionally type\n   * @param state Resource registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: ResourceRegistryModel,\n    id: ResourceId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadMarkdown\n                            \n                            \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:40\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:30\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:51\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \nloadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:77\n                \n            \n\n\n            \n                \n                    Adds a markdown entry with content loaded from an external file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadMarkdown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entry has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:64\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  ResourceType,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: ResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ResourceType\n                    \n                \n                    \n                        \n                            Built in resource types with additional support\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../actions.ts)\n                        \n                        \n                            ActionGroup   (state/.../actions.ts)\n                        \n                        \n                            assertUniqueActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            createActionFactory   (injectors/.../dispatch.ts)\n                        \n                        \n                            createLinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            createResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            dispatch   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatch$   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchAction   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchAction$   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchImpl   (injectors/.../dispatch.ts)\n                        \n                        \n                            findDestructorScope   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findStableKeyObject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            firstDefinedValue   (injectors/.../on-destroy.ts)\n                        \n                        \n                            identity   (injectors/.../dispatch.ts)\n                        \n                        \n                            injectDestroy$   (injectors/.../on-destroy.ts)\n                        \n                        \n                            isDestructorScopeLike   (injectors/.../destructor-subject.ts)\n                        \n                        \n                            markForCheck   (injectors/.../select.ts)\n                        \n                        \n                            pipeActionInstance   (injectors/.../dispatch.ts)\n                        \n                        \n                            registerActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            select$   (injectors/.../select.ts)\n                        \n                        \n                            selectQuerySnapshot   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            selectSnapshot   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/actions/actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n            \n                \nAction(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new base action with a specified type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        A base action class\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ActionGroup\n                        \n                    \n                \n            \n            \n                \nActionGroup(group: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory that adds a common group string to each action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Common action type group\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        An action factory\n\n                    \n                \n            \n        \n    \n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assertUniqueActionType\n                        \n                    \n                \n            \n            \n                \nassertUniqueActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Asserts that an action type is unique\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerActionType\n                        \n                    \n                \n            \n            \n                \nregisterActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Registers an action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    injectors/src/lib/dispatch/dispatch.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createActionFactory\n                        \n                    \n                \n            \n            \n                \ncreateActionFactory(type, boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Initial bound arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A factory function creating a new action on each call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatch\n                        \n                    \n                \n            \n            \n                \ndispatch(type, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Bound arguments to the action constructor\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatch$\n                        \n                    \n                \n            \n            \n                \ndispatch$(type, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\nEach call to the wrapper returns an observable that emits the action instance once the\ndispatch action has completed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Bound arguments to the action constructor\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchAction\n                        \n                    \n                \n            \n            \n                \ndispatchAction()\n                \n            \n\n\n\n\n            \n                \n                    Creates a callback that can dispatch any action or array of actions.\nEach call returns passed actions unchanged\n\n\n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A function that dispatches actions on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchAction$\n                        \n                    \n                \n            \n            \n                \ndispatchAction$()\n                \n            \n\n\n\n\n            \n                \n                    Creates a callback that can dispatch any action or array of actions.\nEach call returns an observable that emits the passed actions when the dispatch has finished\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A function that dispatches actions on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchImpl\n                        \n                    \n                \n            \n            \n                \ndispatchImpl(actionFactory, resultHandler)\n                \n            \n\n\n\n\n            \n                \n                    Common dispatch functionality used to implement all dispatch functions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actionFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Creates an action or array of actions from the user provided arguments\n\n                                    \n                                \n                                \n                                    resultHandler\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Selects the output value from the action and the dispatch observable\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        A new dispatch function taking user arguments, dispatches actions, and returns a value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        identity\n                        \n                    \n                \n            \n            \n                \nidentity(value: T)\n                \n            \n\n\n\n\n            \n                \n                    Identity function returning the first argument passed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pipeActionInstance\n                        \n                    \n                \n            \n            \n                \npipeActionInstance(action: A, obs$: Observable)\n                \n            \n\n\n\n\n            \n                \n                    Maps all emits to an action value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                            A\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    obs$\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLinkId\n                        \n                    \n                \n            \n            \n                \ncreateLinkId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    function to createa unique link ids\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createResourceId\n                        \n                    \n                \n            \n            \n                \ncreateResourceId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new resource identifier\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique resource identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceId\n\n                    \n                    \n                        A new identifier\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findDestructorScope\n                        \n                    \n                \n            \n            \n                \nfindDestructorScope()\n                \n            \n\n\n\n\n            \n                \n                    Finds the nearest destructor scope object in the current injection context\n\n\n                    \n                    \n                    \n                        Returns :         DestructorScope\n\n                    \n                    \n                        The scope on which cleanup can be attached\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findStableKeyObject\n                        \n                    \n                \n            \n            \n                \nfindStableKeyObject()\n                \n            \n\n\n\n\n            \n                \n                    Finds a stable object in the current injection context to be\nused as a key in the destructor cache\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstDefinedValue\n                        \n                    \n                \n            \n            \n                \nfirstDefinedValue(genFn)\n                \n            \n\n\n\n\n            \n                \n                    Get the first defined value returned by a generator\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    genFn\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Generator function taking no arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The first non-null value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        injectDestroy$\n                        \n                    \n                \n            \n            \n                \ninjectDestroy$()\n                \n            \n\n\n\n\n            \n                \n                    Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe takeUntil pipe, and to build other complex injection functions.\nCaveats:\n\nThere are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook\nFor root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don't rely on it for important operations\nComponents, directives, pipe, and services that manipulate the ViewContainerRef MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable\n\nBased on comment on https://github.com/angular/angular/issues/10185\nMostly https://github.com/angular/angular/issues/10185#issuecomment-1165545544 and\nhttps://github.com/angular/angular/issues/10185#issuecomment-1199063426\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that emits and completes when the component/directive/etc. is destroyed\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/destructor-subject.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDestructorScopeLike\n                        \n                    \n                \n            \n            \n                \nisDestructorScopeLike(obj)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether an object is destructor scope like\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DestructorScope\n\n                    \n                    \n                        true if the object seems to be a destructor scope, otherwise false\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        markForCheck\n                        \n                    \n                \n            \n            \n                \nmarkForCheck(options?: SelectOptions)\n                \n            \n\n\n\n\n            \n                \n                    Marks a view for change detection whenever a new value is emitted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options to explicitly disable marking\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MonoTypeOperatorFunction\n\n                    \n                    \n                        A rxjs operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select$\n                        \n                    \n                \n            \n            \n                \nselect$(selector: StateSelector, options?: SelectOptions)\n                \n            \n\n\n\n\n            \n                \n                    Creates an observable emitting parts of the state. The observable's lifetime\nis automatically tied to the injection context where this is called.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State selection function or token\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                SelectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Additional select options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable of the selected state\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectQuerySnapshot\n                        \n                    \n                \n            \n            \n                \nselectQuerySnapshot(selector: StateSelector, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store query selector\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional bound query arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Res\n\n                    \n                    \n                        A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSnapshot\n                        \n                    \n                \n            \n            \n                \nselectSnapshot(selector: StateSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store data selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        A snapshot function\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    4 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryDataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Discriminated union of all resource interfaces\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Unique identifier for a resource\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryDataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryQuery\n                \n            \n            \n                \n                    Query function for resource entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `ResourceId:'${id}'`)\n    .brand('ResourceId'),\n  z\n    .discriminatedUnion('type', [\n      z.object({ type: z.literal(ResourceType.Markdown), markdown: z.string() }),\n      z.object({ type: z.literal(ResourceType.Text), text: z.string() }),\n      z.object({ type: z.literal(ResourceType.Url), url: z.string() }),\n    ])\n    .or(z.object({ type: z.string() }).passthrough())\n)\n                    \n                \n\n            \n                \n                    Resource registry schema validator\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
