var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,0.981,1,2.415]],["body/interfaces/ActionConstructor.html",[0,1.433,1,4.137,2,1.811,3,0.393,4,0.393,5,0.393,6,3.128,7,0.345,8,1.606,9,1.393,10,1.433,11,0.729,12,2.151,13,0.45,14,1.212,15,0.032,16,0.393,17,3.128,18,1.811,19,0.596,20,1.316,21,2.724,22,0.71,23,2.345,24,1.433,25,2.724,26,4.05,27,4.491,28,3.128,29,0.641,30,1.322,31,1.553,32,3.128,33,1.553,34,3.74,35,1.983,36,0.172,37,3.128,38,3.128,39,3.74,40,2.183,41,0.023,42,0.023]],["title/classes/Add.html",[36,0.117,43,0.905]],["body/classes/Add.html",[3,0.341,4,0.341,5,0.59,7,0.407,8,0.888,9,0.939,10,0.962,13,0.221,14,0.86,15,0.032,16,0.463,19,0.59,20,0.753,22,0.43,24,0.962,29,0.766,36,0.199,41,0.021,42,0.021,43,1.716,44,0.818,45,1.532,46,1.532,47,1.129,48,1.467,49,2.015,50,2.106,51,2.115,52,1.129,53,2.195,54,0.477,55,2.718,56,1.886,57,0.477,58,0.477,59,0.385,60,1.233,61,1.606,62,1.129,63,1.224,64,0.818,65,0.385,66,1.723,67,1.801,68,1.886,69,2.115,70,2.115,71,1.415,72,3.071,73,1.129,74,0.888,75,1.224,76,1.606,77,1.129,78,1.981,79,0.888,80,1.661,81,0.634,82,1.886,83,0.888,84,1.224,85,1.224,86,1.143,87,2.225,88,1.224,89,1.224,90,1.897,91,1.897]],["title/classes/Add-1.html",[36,0.099,43,0.763,92,1.631]],["body/classes/Add-1.html",[3,0.333,4,0.333,5,0.618,7,0.4,8,0.865,9,0.923,10,0.938,13,0.215,14,0.964,15,0.032,16,0.455,19,0.584,20,1.004,22,0.419,24,0.938,29,0.778,36,0.197,41,0.021,42,0.021,43,1.731,44,0.797,47,1.101,48,1.451,50,2.053,52,1.121,54,0.465,55,2.65,56,1.861,57,0.465,58,0.465,59,0.375,60,1.223,61,1.39,62,1.101,63,1.193,64,0.797,65,0.375,67,1.785,68,1.861,69,2.096,70,2.096,71,1.39,73,1.101,74,0.865,75,1.193,76,1.39,77,1.101,78,1.971,79,0.865,80,1.632,81,0.964,82,2.164,83,0.865,84,1.632,85,1.632,86,1.223,93,1.39,94,1.39,95,2.006,96,2.274,97,2.361,98,1.68,99,3.12,100,1.534,101,2.001,102,1.534,103,1.534]],["title/classes/AddFromYaml.html",[36,0.117,79,0.905]],["body/classes/AddFromYaml.html",[3,0.343,4,0.343,5,0.609,7,0.408,8,0.893,9,0.943,10,0.968,13,0.222,14,1.05,15,0.032,16,0.465,19,0.591,20,0.758,22,0.433,24,0.968,29,0.768,36,0.199,41,0.021,42,0.021,43,1.705,44,0.823,45,1.539,46,1.539,47,1.136,48,1.21,49,1.936,51,1.892,52,0.98,53,1.811,54,0.48,56,1.668,57,0.48,58,0.48,59,0.387,60,1.198,61,1.421,62,1.136,63,1.232,64,0.823,65,0.387,66,1.734,67,1.805,68,1.892,69,2.119,70,2.119,71,1.421,72,3.146,73,1.136,74,0.893,75,1.232,76,1.727,77,1.136,78,2.041,79,1.21,80,2.028,81,0.864,82,1.892,83,0.893,84,1.232,85,1.232,86,1.146,87,2.232,88,1.232,89,1.232,90,1.91,91,1.91,104,2.736,105,2.736]],["title/classes/AddFromYaml-1.html",[36,0.099,79,0.763,92,1.631]],["body/classes/AddFromYaml-1.html",[3,0.334,4,0.334,5,0.619,7,0.401,8,0.869,9,0.926,10,0.942,13,0.216,14,1.087,15,0.032,16,0.457,19,0.585,20,1.008,22,0.421,24,0.942,29,0.779,36,0.197,41,0.021,42,0.021,43,1.722,44,0.801,47,1.106,48,1.188,52,0.966,54,0.467,56,1.638,57,0.467,58,0.467,59,0.377,60,1.187,61,1.021,62,1.106,63,1.199,64,0.801,65,0.377,67,1.788,68,1.866,69,2.099,70,2.099,71,1.395,73,1.106,74,0.869,75,1.199,76,1.395,77,1.106,78,2.033,79,1.188,80,2.005,81,1.087,82,2.167,83,0.869,84,1.638,85,1.638,86,1.225,93,1.395,94,1.395,95,1.923,96,2.025,97,1.932,98,1.688,99,3.225,100,2.107,101,2.005,102,1.542,103,1.542,104,2.662,105,2.662]],["title/classes/AddMany.html",[36,0.117,74,0.905]],["body/classes/AddMany.html",[3,0.344,4,0.344,5,0.591,7,0.409,8,0.895,9,0.944,10,0.97,13,0.223,14,0.865,15,0.032,16,0.466,19,0.591,20,0.759,22,0.587,24,0.97,29,0.768,36,0.199,41,0.021,42,0.021,43,1.705,44,0.825,45,1.541,46,1.541,47,1.138,48,1.211,49,1.936,51,1.894,52,0.981,53,1.813,54,0.481,56,1.894,57,0.481,58,0.481,59,0.388,60,1.199,61,1.422,62,1.138,63,1.234,64,0.825,65,0.388,66,1.737,67,1.806,68,1.894,69,2.12,70,2.12,71,1.728,72,3.245,73,1.541,74,1.211,75,1.234,76,1.728,77,1.747,78,1.984,79,0.895,80,1.67,81,0.639,82,1.894,83,0.895,84,1.234,85,1.234,86,1.147,87,2.234,88,1.234,89,1.234,90,1.913,91,1.913,106,2.74,107,2.74]],["title/classes/AddMany-1.html",[36,0.099,74,0.763,92,1.631]],["body/classes/AddMany-1.html",[3,0.335,4,0.335,5,0.619,7,0.402,8,0.872,9,0.928,10,0.945,13,0.217,14,0.968,15,0.032,16,0.458,19,0.586,20,1.01,22,0.577,24,0.945,29,0.78,36,0.198,41,0.021,42,0.021,43,1.722,44,0.804,47,1.109,48,1.19,52,0.968,54,0.469,56,1.869,57,0.469,58,0.469,59,0.378,60,1.188,61,1.024,62,1.109,63,1.202,64,0.804,65,0.378,67,1.79,68,1.869,69,2.102,70,2.102,71,1.71,73,1.514,74,1.19,75,1.202,76,1.591,77,1.724,78,1.974,79,0.872,80,1.641,81,0.968,82,2.169,83,0.872,84,1.641,85,1.641,86,1.226,93,1.398,94,1.398,95,1.925,96,2.028,97,1.936,98,1.693,99,3.265,100,1.547,101,2.008,102,1.547,103,1.547,106,2.671,107,2.671]],["title/components/DestroyHostComponent.html",[108,2.148,109,2.772]],["body/components/DestroyHostComponent.html",[3,0.357,4,0.357,5,0.357,7,0.419,11,1.067,13,0.231,15,0.032,16,0.357,19,0.357,21,3.985,22,0.601,23,2.202,29,0.45,30,1.242,33,1.09,36,0.12,40,2.991,41,0.022,42,0.022,54,0.499,57,0.499,58,0.803,59,0.402,65,0.538,108,3.695,109,4.908,110,3.802,111,5.124,112,3.399,113,2.842,114,2.654,115,4.547,116,3.399,117,2.946,118,4.547,119,4.769,120,3.802,121,3.312,122,4.547,123,2.476,124,2.147,125,2.276,126,5.868,127,3.733,128,5.124,129,1.858,130,4.547,131,3.545,132,3.399,133,3.312,134,2.946,135,4.275,136,3.996,137,5.471,138,3.802,139,4.547,140,4.285,141,2.654,142,5.702,143,4.547,144,1.51,145,2.202,146,1.389,147,2.476,148,4.547,149,3.399,150,2.202,151,1.984,152,3.399,153,3.399,154,3.399,155,4.547,156,1.646,157,5.471,158,3.399,159,1.984,160,2.202,161,3.399,162,2.476,163,2.842,164,3.399]],["title/interfaces/DestructorScope.html",[0,0.981,165,2.148]],["body/interfaces/DestructorScope.html",[0,1.05,2,1.719,3,0.373,4,0.373,5,0.373,7,0.431,11,0.692,13,0.318,15,0.032,16,0.373,19,0.55,22,0.469,23,1.719,29,0.692,30,1.278,31,1.971,33,1.138,36,0.126,41,0.022,42,0.022,48,0.969,54,0.521,57,0.521,58,0.521,59,0.42,65,0.42,67,1.138,114,2.731,129,1.912,146,1.45,151,2.071,165,3.606,166,3.409,167,2.585,168,3.376,169,4.479,170,2.481,171,3.913,172,4.378,173,3.913,174,2.274,175,3.549,176,3.913,177,3.913,178,3.409,179,3.913,180,1.719,181,2.585,182,2.299,183,3.606,184,4.328,185,4.214,186,1.912,187,2.299,188,2.585,189,1.881,190,2.585,191,2.585,192,2.585,193,3.913,194,3.913,195,2.968,196,4.378,197,3.913,198,2.585,199,2.071,200,1.45,201,2.968,202,2.071,203,2.585,204,2.968,205,2.968,206,2.968,207,2.968,208,2.968,209,2.968]],["title/interfaces/HoverContext.html",[0,0.981,210,2.415]],["body/interfaces/HoverContext.html",[0,0.822,2,1.346,3,0.292,4,0.292,5,0.292,7,0.256,11,0.542,12,1.757,13,0.189,15,0.032,16,0.484,19,0.415,20,1.067,22,0.702,31,1.477,36,0.098,41,0.019,42,0.019,65,0.545,81,1.035,117,1.801,124,1.046,127,2.882,131,2.564,133,2.882,134,2.564,135,2.024,136,2.985,141,1.622,144,1.234,145,1.801,146,1.135,147,2.882,150,1.801,156,2.569,160,1.801,174,1.882,210,3.356,211,2.324,212,2.047,213,3.356,214,4.198,215,4.133,216,3.309,217,4.437,218,2.051,219,2.564,220,3.309,221,4.437,222,4.745,223,2.324,224,3.309,225,2.324,226,2.024,227,2.024,228,1.346,229,3.356,230,3.309,231,2.324,232,2.324,233,3.309,234,3.309,235,2.324,236,2.882,237,2.324,238,3.309,239,2.324,240,2.324,241,3.853,242,3.309,243,4.936,244,3.356,245,2.324,246,2.324,247,2.324,248,3.853,249,2.051,250,2.024,251,3.309,252,2.324,253,3.309,254,2.324,255,3.309,256,2.324,257,4.198,258,2.324,259,2.324,260,2.324,261,2.324,262,2.324,263,4.198,264,4.198,265,4.198,266,4.198,267,4.198,268,4.198,269,4.198,270,4.198,271,2.324,272,2.324,273,1.801,274,2.024,275,2.324,276,3.853,277,3.309,278,2.882,279,2.324,280,2.324,281,2.324,282,3.853,283,3.309,284,2.324,285,2.324,286,2.324,287,2.324,288,3.309,289,2.324,290,2.324,291,2.324,292,2.024,293,2.324]],["title/directives/HoverDirective.html",[156,1.605,160,2.148]],["body/directives/HoverDirective.html",[0,0.631,3,0.224,4,0.224,5,0.224,7,0.197,11,0.416,12,1.446,13,0.323,15,0.032,16,0.414,19,0.342,20,1.102,22,0.729,30,1.206,31,1.672,36,0.076,41,0.015,42,0.015,54,0.825,57,0.478,58,0.478,59,0.523,65,0.467,81,1.017,117,2.109,123,1.554,124,1.226,127,3.465,129,1.33,131,2.109,133,1.554,134,1.382,135,1.554,136,2.862,141,1.245,144,0.948,145,1.382,146,0.872,147,1.554,150,1.382,156,2.428,159,1.245,160,2.109,174,2.13,186,0.872,210,2.372,211,1.784,212,1.962,213,2.372,214,4.192,215,4.222,216,1.784,217,2.722,218,1.943,219,1.382,220,1.784,221,4.607,222,4.957,223,1.784,224,3.301,225,1.784,226,1.554,227,1.554,228,1.033,229,2.876,230,3.977,231,2.722,232,3.694,233,4.192,234,4.192,235,1.784,236,2.372,237,1.784,238,2.722,239,1.784,240,1.784,241,3.301,242,2.722,243,5.112,244,3.465,245,1.784,246,1.784,247,1.784,248,3.694,249,1.804,250,1.554,251,3.694,252,2.722,253,3.977,254,2.722,255,3.694,256,2.722,257,4.192,258,2.722,259,2.722,260,2.722,261,2.722,262,2.722,263,4.496,264,4.496,265,4.496,266,4.496,267,4.496,268,4.496,269,4.496,270,4.496,271,2.722,272,1.784,273,1.382,274,1.554,275,1.784,276,4.36,277,4.192,278,3.652,279,3.301,280,2.722,281,3.694,282,3.301,283,2.722,284,3.301,285,3.301,286,2.722,287,3.694,288,2.722,289,1.784,290,1.784,291,1.784,292,1.554,293,1.784,294,2.722,295,3.255,296,2.722,297,3.255,298,3.255,299,3.255,300,3.255,301,3.255,302,3.255,303,3.255,304,1.726,305,1.131,306,2.133,307,2.133,308,2.133,309,2.133]],["title/directives/LinkDirective.html",[156,1.605,162,2.415]],["body/directives/LinkDirective.html",[3,0.217,4,0.217,5,0.217,7,0.357,8,0.565,9,0.925,11,0.404,12,1.413,13,0.386,14,1.136,15,0.032,16,0.52,18,1.002,19,0.217,20,1.291,23,1.002,29,0.512,30,1.058,33,1.504,36,0.073,41,0.015,42,0.015,49,1.845,51,1.865,52,0.848,53,1.299,54,0.802,57,0.467,58,0.467,59,0.646,65,0.586,86,1.133,87,1.413,88,0.779,113,1.731,123,1.508,124,1.458,125,1.413,129,1.299,136,3.942,140,1.731,144,0.919,145,1.341,146,1.917,150,1.341,151,1.208,156,2.105,159,1.208,162,2.317,163,3.636,174,1.299,186,1.583,200,1.776,212,0.919,226,1.508,227,1.508,228,1.002,229,1.508,249,2.381,250,1.508,278,4.061,292,3.167,294,3.24,296,2.66,304,2.305,305,2.054,310,2.07,311,2.66,312,2.66,313,3.874,314,4.953,315,3.608,316,3.608,317,3.181,318,3.181,319,3.181,320,3.181,321,3.181,322,4.692,323,3.636,324,2.07,325,2.66,326,3.181,327,3.181,328,4.953,329,3.181,330,1.731,331,3.181,332,4.347,333,3.874,334,3.181,335,3.874,336,3.181,337,2.66,338,3.181,339,2.66,340,3.181,341,3.181,342,3.181,343,3.874,344,1.731,345,2.07,346,2.07,347,3.181,348,3.181,349,2.07,350,2.07,351,2.07,352,3.636,353,1.731,354,2.66,355,1.731,356,2.07,357,2.317,358,2.07,359,1.508,360,1.341,361,2.07,362,2.07,363,3.181,364,2.07,365,1.731,366,1.731,367,2.07,368,4.347,369,2.07,370,2.07,371,2.07,372,2.07,373,2.07,374,3.181,375,2.07,376,2.07,377,0.846,378,2.07,379,2.07,380,2.07,381,3.181,382,2.07,383,2.07,384,2.07,385,4.347,386,2.07,387,2.07,388,3.181,389,2.07,390,2.07,391,2.07,392,2.07,393,2.07,394,2.07,395,2.07,396,3.181,397,3.181,398,3.181,399,3.181,400,3.181,401,3.181,402,2.66,403,2.07,404,2.07,405,2.07,406,2.07,407,2.07,408,3.874,409,3.181,410,3.181,411,2.07,412,2.07,413,2.07,414,2.07,415,2.07,416,2.07,417,2.07,418,2.07,419,2.07,420,2.07,421,2.07,422,2.07,423,2.07]],["title/classes/LinkRegistrySelectors.html",[36,0.117,359,2.415]],["body/classes/LinkRegistrySelectors.html",[3,0.371,4,0.371,5,0.371,7,0.43,11,0.688,13,0.422,15,0.032,16,0.583,18,2.529,19,0.371,29,0.735,30,1.426,31,1.495,33,1.495,36,0.125,40,3.242,41,0.022,42,0.022,44,0.888,45,1.62,46,1.62,49,2.011,51,1.755,52,1.197,53,1.442,54,0.518,57,0.518,58,0.518,59,0.552,60,1.262,64,0.888,65,0.552,124,1.329,125,1.568,129,1.905,189,1.871,200,2.269,218,1.442,249,1.442,304,1.871,359,3.397,360,2.287,377,2.471,424,2.287,425,3.397,426,2.944,427,3.397,428,4.207,429,3.53,430,3.53,431,3.397,432,3.021,433,3.804,434,3.383,435,2.06,436,1.71,437,2.572,438,2.572,439,3.53,440,3.53,441,2.287,442,2.06,443,2.572,444,2.572,445,2.572,446,3.397,447,2.287]],["title/injectables/LinkRegistryState.html",[437,2.415,448,2.148]],["body/injectables/LinkRegistryState.html",[3,0.211,4,0.211,5,0.449,7,0.451,9,1.177,11,0.392,13,0.359,14,0.742,15,0.032,16,0.568,19,0.326,20,0.881,22,0.566,29,0.766,30,1.394,31,0.644,33,0.644,35,1.065,36,0.071,41,0.015,42,0.015,43,1.599,45,1.7,46,1.7,48,0.849,49,1.773,51,1.171,52,1.098,53,0.821,54,0.68,57,0.68,58,0.719,59,0.604,60,1.152,64,0.506,65,0.45,71,0.997,72,1.648,74,1.394,76,1.805,78,1.636,79,1.169,81,0.835,83,1.169,86,0.911,87,2.539,88,1.611,89,1.922,100,0.973,102,1.506,125,0.893,129,1.27,144,0.893,174,2.085,180,0.973,200,2,202,1.815,212,2.456,218,0.821,228,0.973,249,1.891,304,2.454,305,1.065,311,1.681,315,1.464,316,1.464,352,3.58,353,1.681,357,2.265,360,1.302,365,2.6,366,1.681,377,2.392,402,1.681,426,1.065,428,1.464,433,1.464,434,2.015,435,1.173,436,0.973,437,2.265,442,1.173,447,1.302,448,2.015,449,1.464,450,1.464,451,2.6,452,2.6,453,3.109,454,2.6,455,2.6,456,2.6,457,4.28,458,2.6,459,4.989,460,2.6,461,2.01,462,4.625,463,2.6,464,2.6,465,2.01,466,2.6,467,3.871,468,2.6,469,2.01,470,2.6,471,1.464,472,2.6,473,2.6,474,1.815,475,2.6,476,2.6,477,2.6,478,2.01,479,3.18,480,2.999,481,2.6,482,3.109,483,3.109,484,2.01,485,3.109,486,4.629,487,1.681,488,1.681,489,3.109,490,1.681,491,1.681,492,1.681,493,2.6,494,1.681,495,1.681,496,1.464,497,2.6,498,1.464,499,1.681,500,1.681,501,2.6,502,2.01,503,2.01,504,2.6,505,1.681,506,1.681,507,2.01,508,1.681,509,1.681,510,1.681,511,1.681,512,1.065,513,1.681,514,1.681,515,1.681,516,2.01,517,2.01,518,1.464,519,2.265,520,2.01,521,3.109,522,2.01,523,3.109,524,2.01,525,1.681,526,2.01,527,1.681,528,2.01,529,3.109,530,2.6,531,1.681,532,1.681,533,2.01,534,2.01,535,2.01,536,2.01,537,2.01,538,2.01,539,2.01,540,2.01,541,2.01]],["title/classes/LoadFromYaml.html",[36,0.117,83,0.905]],["body/classes/LoadFromYaml.html",[3,0.341,4,0.341,5,0.633,7,0.407,8,0.888,9,0.939,10,0.962,13,0.221,14,1.048,15,0.032,16,0.463,19,0.59,20,0.753,22,0.43,24,0.962,29,0.766,36,0.199,41,0.021,42,0.021,43,1.703,44,0.818,45,1.532,46,1.532,47,1.129,48,1.205,49,1.933,51,1.886,52,0.977,53,1.803,54,0.477,56,1.661,57,0.477,58,0.477,59,0.385,60,1.195,61,1.415,62,1.129,63,1.224,64,0.818,65,0.385,66,1.723,67,1.801,68,1.886,69,2.115,70,2.115,71,1.415,72,3.196,73,1.129,74,0.888,75,1.224,76,1.606,77,1.129,78,2.028,79,0.888,80,1.661,81,0.634,82,2.181,83,1.205,84,1.224,85,1.661,86,1.233,87,2.225,88,1.224,89,1.224,90,1.897,91,1.897,542,2.718,543,2.718]],["title/classes/LoadFromYaml-1.html",[36,0.099,83,0.763,92,1.631]],["body/classes/LoadFromYaml-1.html",[3,0.333,4,0.333,5,0.646,7,0.4,8,0.865,9,0.923,10,0.938,13,0.215,14,1.086,15,0.032,16,0.455,19,0.584,20,1.004,22,0.419,24,0.938,29,0.778,36,0.197,41,0.021,42,0.021,43,1.72,44,0.797,47,1.101,48,1.184,52,0.964,54,0.465,56,1.632,57,0.465,58,0.465,59,0.375,60,1.185,61,1.016,62,1.101,63,1.193,64,0.797,65,0.375,67,1.785,68,1.861,69,2.096,70,2.096,71,1.39,73,1.101,74,0.865,75,1.193,76,1.39,77,1.101,78,2.02,79,0.865,80,1.632,81,0.964,82,2.288,83,1.184,84,1.632,85,1.861,86,1.275,93,1.39,94,1.39,95,1.921,96,2.02,97,1.926,98,1.68,99,3.222,100,1.534,101,2.001,102,1.534,103,1.534,542,2.65,543,2.65]],["title/classes/LoadMarkdown.html",[36,0.117,103,1.605]],["body/classes/LoadMarkdown.html",[3,0.329,4,0.329,5,0.644,7,0.396,8,0.854,9,0.915,10,0.926,13,0.213,14,1.081,15,0.032,16,0.451,19,0.582,20,0.996,22,0.414,24,0.926,29,0.776,36,0.196,41,0.02,42,0.02,43,1.717,44,0.788,47,1.087,48,1.174,50,2.028,52,0.958,54,0.459,56,1.618,57,0.459,58,0.459,59,0.37,60,1.248,61,1.003,62,1.087,63,1.178,64,0.788,65,0.37,67,1.777,68,1.849,69,2.087,70,2.087,71,1.378,73,1.087,74,0.854,75,1.178,76,1.378,77,1.087,78,1.967,79,0.854,80,1.618,81,1.031,82,2.282,83,0.854,84,1.618,85,1.849,86,1.29,93,1.378,94,1.378,95,1.986,96,2.264,97,1.91,98,1.659,99,3.109,100,1.515,101,2.208,102,2.082,103,2.082,544,3.129]],["title/classes/Navigate.html",[36,0.117,87,1.472]],["body/classes/Navigate.html",[3,0.343,4,0.343,5,0.591,7,0.408,8,0.893,9,0.943,10,0.968,13,0.222,14,0.864,15,0.032,16,0.465,19,0.591,20,0.758,22,0.433,24,0.968,29,0.768,36,0.199,41,0.021,42,0.021,43,1.671,44,0.823,45,1.539,46,1.539,47,1.136,48,1.21,49,2.001,50,2.12,51,2.119,52,0.98,53,1.811,54,0.48,56,1.668,57,0.48,58,0.48,59,0.387,60,1.263,61,1.611,62,1.136,63,1.232,64,0.823,65,0.387,66,1.734,67,1.805,68,1.892,69,2.119,70,2.119,71,1.421,72,3.077,73,1.136,74,0.893,75,1.232,76,1.611,77,1.136,78,1.983,79,0.893,80,1.668,81,0.638,82,1.892,83,0.893,84,1.232,85,1.232,86,1.198,87,2.578,88,1.668,89,1.668,90,1.91,91,2.587,545,3.271]],["title/interfaces/ResourceRegistryQuery.html",[0,0.981,546,2.415]],["body/interfaces/ResourceRegistryQuery.html",[0,0.763,2,1.249,3,0.271,4,0.271,5,0.271,7,0.238,11,0.503,12,1.666,13,0.429,14,1.005,15,0.032,16,0.509,18,1.249,19,0.464,29,0.752,30,1.552,31,1.823,33,1.888,35,1.988,36,0.091,40,3.138,41,0.018,42,0.018,52,1.213,59,0.305,60,1.344,64,0.649,65,0.574,81,1.082,86,0.798,93,0.827,94,0.827,95,1.952,96,2.323,97,1.146,101,1.412,124,0.971,125,1.146,189,1.367,200,2.405,218,1.982,249,1.054,274,2.732,305,1.367,377,2.487,424,1.671,425,1.879,426,3.197,427,1.879,431,1.879,432,3.339,434,3.339,435,1.505,436,1.249,438,1.879,441,1.671,442,2.579,443,1.879,444,1.879,445,1.879,446,2.732,447,2.43,512,2.572,518,1.879,519,2.732,546,3.219,547,3.75,548,3.75,549,3.136,550,3.219,551,2.732,552,3.595,553,2.43,554,1.671,555,3.754,556,1.879,557,1.879,558,4.31,559,4.31,560,2.157,561,1.879,562,2.157,563,2.157,564,2.157,565,2.157,566,2.157,567,2.157,568,2.157,569,2.157,570,2.157]],["title/classes/ResourceRegistrySelectors.html",[36,0.117,557,2.415]],["body/classes/ResourceRegistrySelectors.html",[0,0.659,3,0.234,4,0.234,5,0.234,7,0.47,11,0.434,13,0.421,14,0.88,15,0.032,16,0.474,18,1.078,19,0.425,29,0.72,30,1.576,31,1.875,33,1.822,35,1.18,36,0.079,40,3.545,41,0.016,42,0.016,44,0.56,52,1.165,54,0.712,57,0.712,58,0.712,59,0.603,60,1.302,64,0.56,65,0.534,81,1.154,86,1.084,93,1.634,94,1.634,95,1.875,96,2.082,97,0.989,101,1.918,124,0.838,125,0.989,129,1.373,189,1.18,200,2.225,218,1.655,249,0.909,304,2.569,305,1.18,377,2.572,424,1.442,425,2.449,426,3.325,427,2.449,431,2.449,432,3.681,434,2.924,435,1.299,436,1.078,438,1.621,441,1.442,442,1.962,443,1.621,444,1.621,445,1.621,446,2.449,447,2.178,512,3.012,518,1.621,519,2.449,546,2.951,549,1.861,550,2.449,551,2.449,552,3.963,553,2.178,554,1.442,555,4.061,556,2.449,557,2.449,558,4.052,559,4.052,560,2.811,561,1.621,562,1.861,563,1.861,564,1.861,565,2.811,566,1.861,567,2.811,568,1.861,569,2.811,570,1.861,571,3.361,572,4.845,573,2.225,574,2.225,575,2.225,576,2.225,577,2.225]],["title/injectables/ResourceRegistryState.html",[448,2.148,554,2.148]],["body/injectables/ResourceRegistryState.html",[3,0.238,4,0.238,5,0.539,7,0.473,9,1.25,11,0.442,13,0.349,14,0.798,15,0.032,16,0.559,19,0.238,20,0.525,22,0.602,25,2.482,29,0.767,30,1.453,33,1.092,36,0.08,41,0.016,42,0.016,43,1.637,48,0.93,52,1.092,54,0.717,57,0.717,58,0.753,59,0.63,60,1.039,64,0.57,65,0.403,71,1.092,74,1.453,76,1.858,78,1.706,79,1.244,81,0.888,83,1.244,86,1.039,89,1.931,93,1.645,94,1.645,95,1.313,99,1.806,100,1.097,101,1.715,102,2.206,103,2.484,129,1.392,144,1.006,174,2.096,180,1.097,200,1.995,202,2.658,212,2.535,215,2.482,228,1.097,249,0.926,304,2.589,377,2.45,436,1.097,448,2.208,449,1.65,450,1.65,451,2.849,452,2.849,454,2.849,455,2.849,456,2.849,458,2.849,460,2.849,462,4.773,463,2.849,464,2.849,466,2.849,467,4.084,468,2.849,470,2.849,471,1.65,472,2.849,473,2.849,474,1.989,475,2.849,476,2.849,477,2.849,479,3.424,480,3.63,481,3.809,487,1.895,488,1.895,490,1.895,491,1.895,492,1.895,496,1.65,497,2.849,498,1.65,499,1.895,500,1.895,504,2.849,505,1.895,506,1.895,508,1.895,509,1.895,510,1.895,511,2.849,512,1.806,513,1.895,514,1.895,515,1.895,552,1.468,553,1.468,554,2.208,556,1.65,561,1.65,578,3.407,579,5.095,580,2.266,581,2.266,582,2.266,583,3.407,584,3.407,585,2.266,586,2.266,587,1.895,588,2.266,589,2.266,590,1.895,591,2.266,592,2.266,593,2.266,594,2.266]],["title/classes/ScopedDestructorSubject.html",[36,0.117,203,2.415]],["body/classes/ScopedDestructorSubject.html",[0,1.037,3,0.368,4,0.368,5,0.368,7,0.428,10,1.037,13,0.354,15,0.032,16,0.368,19,0.546,22,0.614,23,2.248,29,0.688,30,0.957,31,1.898,33,1.124,36,0.124,41,0.022,42,0.022,44,0.882,48,1.267,54,0.515,57,0.515,58,0.515,59,0.415,65,0.415,67,1.488,114,2.709,146,1.432,151,2.046,165,3.733,166,3.381,167,2.554,168,3.233,169,4.399,170,1.858,171,2.931,172,2.931,173,2.931,174,1.896,176,2.931,177,2.931,178,2.554,179,4.351,180,1.698,181,2.554,182,2.271,183,3.836,184,4.564,185,4.197,186,2.126,187,2.271,188,2.554,189,1.858,190,2.554,191,2.554,192,2.554,193,3.881,194,3.881,195,2.931,196,4.951,197,4.632,198,3.381,199,2.709,200,1.896,201,3.881,202,2.709,203,3.381,204,3.881,205,3.881,206,2.931,207,2.931,208,2.931,209,2.931,595,3.505]],["title/interfaces/SelectOptions.html",[0,0.981,596,2.415]],["body/interfaces/SelectOptions.html",[0,0.988,2,1.616,3,0.35,4,0.533,5,0.35,7,0.308,11,0.651,12,1.995,13,0.345,15,0.032,16,0.595,19,0.533,22,0.441,23,1.616,29,0.671,30,1.226,31,1.628,33,1.628,41,0.021,42,0.021,59,0.601,65,0.601,119,2.79,124,1.691,125,1.482,141,2.963,144,1.482,146,2.218,170,1.769,180,2.175,182,2.91,186,1.363,199,2.621,212,1.482,218,1.363,228,1.616,273,2.162,337,4.245,377,2.074,435,1.948,436,1.616,474,1.948,480,3.519,496,3.272,596,3.956,597,2.431,598,3.956,599,4.491,600,4.988,601,5.837,602,4.491,603,3.756,604,4.245,605,4.245,606,3.337,607,4.245,608,3.756,609,2.79,610,4.491,611,2.79,612,2.431,613,2.79,614,3.272,615,3.337,616,2.79,617,2.79,618,2.162,619,2.79,620,2.79,621,2.79,622,2.79,623,3.756,624,3.337,625,4.491,626,3.337,627,5.43,628,3.337,629,2.79,630,2.79,631,2.79,632,2.79,633,2.79,634,2.79,635,2.79,636,2.79,637,2.79,638,2.79,639,2.79,640,2.79,641,2.431,642,2.79,643,2.79,644,3.337,645,3.337,646,3.337]],["title/classes/SnapshotObserver.html",[36,0.117,647,2.772]],["body/classes/SnapshotObserver.html",[3,0.361,4,0.361,5,0.361,7,0.475,11,0.671,13,0.234,15,0.032,16,0.361,19,0.361,22,0.606,29,0.606,30,1.501,33,1.103,36,0.122,41,0.022,42,0.022,44,0.866,54,0.757,57,0.673,58,0.673,59,0.542,65,0.407,129,1.872,168,2.007,174,2.246,180,1.666,186,2.658,192,3.339,199,3.208,200,1.872,218,2.456,249,1.872,312,3.833,441,2.97,474,3.608,525,4.311,618,2.97,629,3.833,647,3.833,648,4.597,649,2.876,650,4.583,651,4.583,652,5.027,653,3.833,654,4.583,655,5.154,656,5.154,657,4.583,658,3.439,659,5.497,660,5.154,661,3.439,662,4.583,663,4.583,664,3.439,665,2.876,666,4.311,667,3.439,668,3.439,669,3.439,670,3.439,671,5.154,672,5.154]],["title/dependencies.html",[673,2.337,674,3.322]],["body/dependencies.html",[15,0.031,41,0.027,42,0.027,125,2.543,144,2.18,344,4.105,436,2.377,674,4.787,675,4.908,676,4.908,677,4.908,678,5.724,679,4.908,680,4.908,681,4.908]],["title/miscellaneous/enumerations.html",[682,1.241,683,3.322]],["body/miscellaneous/enumerations.html",[11,0.91,15,0.031,41,0.026,42,0.026,45,1.622,46,1.622,49,1.497,86,1.183,88,2.093,89,2.093,93,1.497,94,1.497,95,1.497,101,2.093,186,2.564,360,3.601,512,2.947,553,3.601,641,3.401,682,2.074,683,3.904,684,3.025,685,3.981,686,3.025,687,4.049,688,3.904,689,3.904]],["title/miscellaneous/functions.html",[170,2.106,682,1.241]],["body/miscellaneous/functions.html",[1,1.97,6,1.408,7,0.525,8,0.738,9,1.333,10,1.411,11,0.328,13,0.426,14,1.111,15,0.03,17,2.261,21,1.97,22,0.694,23,2.401,24,1.148,25,1.226,26,2.834,27,2.834,28,4.643,30,1.695,31,1.864,32,1.408,35,0.892,36,0.06,37,1.408,38,1.408,41,0.013,42,0.013,45,0.585,46,0.585,49,0.54,51,0.634,54,0.247,57,0.861,58,0.861,59,0.699,60,0.575,61,1.086,62,0.939,73,0.585,81,0.328,93,0.54,94,0.54,95,0.867,96,0.688,108,1.091,110,2.834,114,1.578,117,2.196,120,2.261,121,1.226,124,1.795,131,1.091,134,1.091,138,2.834,141,1.578,146,0.688,151,0.983,156,0.815,159,1.978,165,1.752,166,1.226,167,1.97,168,2.649,169,1.226,170,1.797,174,1.105,178,1.97,180,0.815,181,1.226,182,1.752,183,2.514,184,2.827,185,1.226,186,2.232,187,1.091,188,1.226,189,0.892,190,1.226,191,1.226,199,2.48,202,1.578,212,1.505,213,2.469,218,1.736,219,1.752,228,0.815,244,1.226,273,2.94,330,4.391,339,1.408,354,4.57,355,2.261,377,1.384,426,2.057,432,1.752,471,1.97,480,3.799,498,1.226,501,2.261,527,1.408,530,1.408,590,2.834,596,2.827,597,1.226,598,2.469,600,3.554,603,1.408,604,2.834,605,2.834,608,1.408,609,1.408,611,2.834,612,1.226,614,3.306,616,2.834,617,2.834,618,1.091,619,2.261,620,1.408,621,1.408,622,1.408,623,1.408,630,2.261,631,1.408,632,1.408,633,1.408,634,2.261,635,2.834,636,1.408,637,3.245,638,3.988,639,1.408,640,1.408,641,1.226,642,1.408,643,1.408,652,2.261,653,2.834,682,0.748,684,1.091,685,2.514,686,1.091,690,2.704,691,2.704,692,2.261,693,2.834,694,2.704,695,4.958,696,2.704,697,2.704,698,4.538,699,2.704,700,3.389,701,3.245,702,3.554,703,3.389,704,2.704,705,3.389,706,2.704,707,1.683,708,2.704,709,2.261,710,2.704,711,2.704,712,3.389,713,2.704,714,1.408,715,1.683,716,1.683,717,2.834,718,1.683,719,1.683,720,1.683,721,5.758,722,1.683,723,4.25,724,1.683,725,4.538,726,1.683,727,2.704,728,2.704,729,2.704,730,2.704,731,4.25,732,4.769,733,1.683,734,1.683,735,1.683,736,1.683,737,3.389,738,4.958,739,1.683,740,1.683,741,1.683,742,2.704,743,1.683,744,1.683,745,1.683,746,1.683,747,1.683,748,1.683,749,3.389,750,1.683,751,1.683,752,1.683,753,1.683,754,2.704,755,1.683,756,1.683,757,1.683,758,1.683,759,1.683,760,2.704,761,1.683,762,1.683,763,1.683,764,1.683,765,1.683,766,3.389,767,2.704,768,1.683,769,3.389,770,1.683,771,1.683,772,1.683,773,1.683,774,1.683,775,1.683,776,2.704,777,1.683,778,1.683,779,1.683,780,1.683,781,1.683,782,2.704,783,1.683,784,2.704,785,1.683,786,1.683,787,2.704,788,1.683,789,1.683,790,1.683,791,1.683,792,1.683,793,1.683,794,1.683,795,1.683,796,1.683,797,1.683,798,1.683,799,1.683,800,1.683,801,1.683,802,1.683,803,1.683,804,2.704,805,1.683,806,1.683,807,1.683,808,1.683,809,1.683,810,2.704,811,2.704,812,1.683,813,1.683,814,1.683]],["title/index.html",[11,0.545,815,2.794,816,2.794]],["body/index.html",[15,0.028,41,0.028,42,0.028,187,3.252,198,3.656,817,5.798,818,5.018,819,5.018,820,5.798,821,5.018,822,5.798,823,5.798,824,5.018]],["title/modules.html",[825,3.739]],["body/modules.html",[15,0.028,41,0.028,42,0.028,825,4.337]],["title/overview.html",[826,3.739]],["body/overview.html",[2,2.449,15,0.028,41,0.028,42,0.028,44,1.273,92,2.951,108,3.276,159,2.951,449,3.683,826,4.228,827,5.823,828,5.056,829,5.056]],["title/properties.html",[12,1.764,673,2.337]],["body/properties.html",[12,2.286,15,0.029,41,0.028,42,0.028,830,5.146,831,5.146]],["title/miscellaneous/typealiases.html",[682,1.241,832,3.972]],["body/miscellaneous/typealiases.html",[2,1.798,9,0.79,11,0.724,13,0.422,15,0.025,18,1.798,31,1.816,35,1.968,41,0.023,42,0.023,45,1.674,46,1.674,49,1.882,51,1.814,52,1.173,53,1.969,61,1.545,81,0.94,88,1.398,89,1.398,93,1.545,94,1.545,95,1.716,96,1.969,97,2.141,124,1.398,170,1.968,212,2.141,219,2.405,357,3.511,377,2.186,424,3.123,426,2.555,428,3.511,433,3.511,442,2.167,450,3.511,459,4.03,493,4.03,495,4.03,550,3.511,551,3.511,552,3.123,555,3.511,579,4.03,597,2.704,598,2.704,607,3.105,613,3.105,614,3.511,682,1.649,684,3.968,685,4.194,686,3.968,687,3.511,688,4.03,689,4.03,709,3.105,717,4.03,833,3.712,834,6.328,835,3.712,836,3.712,837,3.712,838,3.712,839,3.712,840,4.819,841,4.819]],["title/miscellaneous/variables.html",[682,1.241,842,3.322]],["body/miscellaneous/variables.html",[8,1.203,9,1.26,11,0.633,13,0.424,14,0.859,15,0.031,18,2.424,22,0.583,24,1.304,41,0.021,42,0.021,45,1.531,46,1.531,47,1.865,49,1.721,52,0.859,60,0.691,66,1.72,77,1.738,86,0.938,88,1.222,89,1.222,93,1.413,94,1.413,95,1.04,98,1.72,101,1.222,114,1.894,121,2.364,146,2.045,168,3.276,183,2.103,186,2.524,236,2.364,305,3.275,315,3.211,316,3.211,323,3.686,325,2.714,474,1.894,494,3.686,512,1.72,531,2.714,532,3.686,587,3.686,612,2.364,618,2.103,648,2.714,649,3.686,665,2.714,666,3.686,682,1.441,684,3.637,685,3.837,686,2.856,687,2.364,692,2.714,693,3.686,701,2.714,702,3.686,714,2.714,842,2.714,843,4.407,844,4.407,845,5.005,846,5.005,847,3.245,848,3.245,849,3.245,850,3.245,851,5.789,852,3.245,853,5.922,854,3.245,855,3.245,856,3.245,857,3.245,858,3.245,859,3.245,860,3.245,861,3.245,862,3.245,863,3.245,864,3.245,865,5.005,866,3.245,867,3.245,868,3.245,869,3.245,870,4.407,871,4.407,872,3.245,873,3.245,874,3.245,875,4.407,876,3.245,877,3.245,878,3.245,879,5.005,880,3.245,881,3.245,882,3.245,883,3.245,884,3.245,885,3.245]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":140,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["0.0.1",{"_index":831,"title":{},"body":{"properties.html":{}}}],["1",{"_index":92,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"overview.html":{}}}],["1165545544",{"_index":805,"title":{},"body":{"miscellaneous/functions.html":{}}}],["1199063426",{"_index":806,"title":{},"body":{"miscellaneous/functions.html":{}}}],["14",{"_index":828,"title":{},"body":{"overview.html":{}}}],["15.1.0",{"_index":678,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":827,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":676,"title":{},"body":{"dependencies.html":{}}}],["3.7.6",{"_index":679,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":829,"title":{},"body":{"overview.html":{}}}],["_data",{"_index":275,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["accessors",{"_index":299,"title":{},"body":{"directives/HoverDirective.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('load",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":464,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":468,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":460,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadfromyaml",{"_index":477,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":584,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":483,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionfactory",{"_index":745,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actiongroup",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{}}}],["actiongroup('linkregistry",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":98,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actions",{"_index":738,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actions/actions",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["actiontyperegistry",{"_index":843,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activate",{"_index":367,"title":{},"body":{"directives/LinkDirective.html":{}}}],["activatedroute",{"_index":351,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":164,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":592,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":481,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":79,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":515,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":641,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["addmany",{"_index":74,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":458,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":508,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":454,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":463,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["addyaml",{"_index":455,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":466,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["aliases",{"_index":833,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["along",{"_index":254,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["altkey",{"_index":399,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":384,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":365,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["angular/cdk/overlay",{"_index":223,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/cdk/portal",{"_index":225,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["angular/common",{"_index":344,"title":{},"body":{"directives/LinkDirective.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":488,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":144,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":349,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular/router",{"_index":353,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["anytext",{"_index":571,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":560,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["application",{"_index":231,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["area'].includes(this.tagname",{"_index":386,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":615,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["argument",{"_index":752,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arguments",{"_index":330,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["array",{"_index":737,"title":{},"body":{"miscellaneous/functions.html":{}}}],["asserts",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype(type",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associated",{"_index":197,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["async",{"_index":457,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attach",{"_index":279,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["attached",{"_index":244,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["attaches",{"_index":204,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["attaching",{"_index":118,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["attr.href",{"_index":319,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":320,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":321,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":328,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatic",{"_index":728,"title":{},"body":{"miscellaneous/functions.html":{}}}],["automatically",{"_index":635,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["available",{"_index":811,"title":{},"body":{"miscellaneous/functions.html":{}}}],["await",{"_index":521,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":339,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["before",{"_index":777,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boolean",{"_index":337,"title":{},"body":{"directives/LinkDirective.html":{},"interfaces/SelectOptions.html":{}}}],["bottom",{"_index":266,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["bound",{"_index":723,"title":{},"body":{"miscellaneous/functions.html":{}}}],["boundargs",{"_index":721,"title":{},"body":{"miscellaneous/functions.html":{}}}],["brand('linkid",{"_index":873,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":877,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":523,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browser",{"_index":350,"title":{},"body":{"directives/LinkDirective.html":{}}}],["build",{"_index":772,"title":{},"body":{"miscellaneous/functions.html":{}}}],["built",{"_index":688,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["builtin",{"_index":549,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["builtinresourceentry",{"_index":551,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["button",{"_index":396,"title":{},"body":{"directives/LinkDirective.html":{}}}],["cache",{"_index":764,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cached",{"_index":849,"title":{},"body":{"miscellaneous/variables.html":{}}}],["call",{"_index":725,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":178,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["called",{"_index":638,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["care",{"_index":794,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":519,"title":{},"body":{"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["caveats",{"_index":774,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cb",{"_index":177,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["cdk",{"_index":817,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":625,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["cdr.markforcheck",{"_index":628,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["change",{"_index":604,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["changedetectorref",{"_index":606,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["changes",{"_index":292,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["changes['linkid'].currentvalue",{"_index":394,"title":{},"body":{"directives/LinkDirective.html":{}}}],["child",{"_index":139,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"overview.html":{}}}],["cleanup",{"_index":169,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["click",{"_index":322,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":531,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":801,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":630,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["completed",{"_index":736,"title":{},"body":{"miscellaneous/functions.html":{}}}],["completes",{"_index":202,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["completion",{"_index":800,"title":{},"body":{"miscellaneous/functions.html":{}}}],["complex",{"_index":773,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":108,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["component/directive/etc",{"_index":807,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component/directive/pipe",{"_index":122,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["component_template",{"_index":158,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["componentref",{"_index":142,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["components",{"_index":110,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["configuration",{"_index":599,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["connectionpositionpair",{"_index":221,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["constructor(entries",{"_index":106,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(readonly",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(scope",{"_index":205,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["constructor(url",{"_index":542,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":104,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":135,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["container.createcomponent(destroyhostcomponent",{"_index":149,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["containing",{"_index":603,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["contains",{"_index":392,"title":{},"body":{"directives/LinkDirective.html":{}}}],["content",{"_index":215,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/ResourceRegistryState.html":{}}}],["content(content",{"_index":237,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["context",{"_index":212,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["control",{"_index":771,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlling",{"_index":796,"title":{},"body":{"miscellaneous/functions.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["create(container",{"_index":130,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["createa",{"_index":757,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createactionfactory",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createactionfactory(type",{"_index":720,"title":{},"body":{"miscellaneous/functions.html":{}}}],["created",{"_index":251,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["createlinkid",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid('@@__empty__",{"_index":850,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createlinkid(id",{"_index":756,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid(id",{"_index":759,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["creating",{"_index":724,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ctrlkey",{"_index":397,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":462,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.getstate()[id",{"_index":517,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":505,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["current",{"_index":432,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{}}}],["custom",{"_index":835,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["customresourceentry",{"_index":550,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["data",{"_index":81,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data(data",{"_index":246,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["date",{"_index":291,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["decorators",{"_index":304,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["default",{"_index":305,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":496,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{}}}],["defined",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["dependencies",{"_index":674,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":119,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/SelectOptions.html":{}}}],["destroy.ts",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroy/destroy",{"_index":115,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["destroy/destructor",{"_index":166,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["destroy/on",{"_index":612,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":787,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destroyhostcomponent",{"_index":109,"title":{"components/DestroyHostComponent.html":{}},"body":{"components/DestroyHostComponent.html":{}}}],["destructor",{"_index":183,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destructor_cache",{"_index":844,"title":{},"body":{"miscellaneous/variables.html":{}}}],["destructorscope",{"_index":165,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["detach",{"_index":285,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["detection",{"_index":605,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["determines",{"_index":181,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["directive",{"_index":156,"title":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["directives",{"_index":159,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["disable",{"_index":620,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["discriminated",{"_index":837,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["discriminatedunion('type",{"_index":878,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":354,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["dispatch$(type",{"_index":733,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":380,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatch(type",{"_index":726,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchaction",{"_index":698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatches",{"_index":731,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchimpl",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatchimpl(actionfactory",{"_index":741,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatching",{"_index":729,"title":{},"body":{"miscellaneous/functions.html":{}}}],["display",{"_index":127,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["displayed",{"_index":234,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["dom",{"_index":112,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["domsanitizer",{"_index":348,"title":{},"body":{"directives/LinkDirective.html":{}}}],["don't",{"_index":788,"title":{},"body":{"miscellaneous/functions.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":799,"title":{},"body":{"miscellaneous/functions.html":{}}}],["el",{"_index":150,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["el?.remove",{"_index":153,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["element",{"_index":136,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["elementref",{"_index":226,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["emit",{"_index":776,"title":{},"body":{"miscellaneous/functions.html":{}}}],["emits",{"_index":199,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":618,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["emitting",{"_index":631,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["empty",{"_index":325,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["empty_link",{"_index":323,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["end",{"_index":264,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["endhover",{"_index":287,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["entries",{"_index":76,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["entry",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.extras",{"_index":536,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":562,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":541,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":540,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":564,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":447,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["enumerations",{"_index":683,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":667,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["err",{"_index":660,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":474,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["error(`cannot",{"_index":526,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(err",{"_index":657,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorobserver",{"_index":656,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":662,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":669,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["event",{"_index":278,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["excluding",{"_index":813,"title":{},"body":{"miscellaneous/functions.html":{}}}],["execute",{"_index":824,"title":{},"body":{"index.html":{}}}],["existing",{"_index":528,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["explicitly",{"_index":619,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ScopedDestructorSubject.html":{}}}],["external",{"_index":89,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":845,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":493,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extras",{"_index":532,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["failure",{"_index":797,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":190,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["filename",{"_index":467,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["finddestructorscope",{"_index":700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finds",{"_index":760,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findstablekeyobject",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["finished",{"_index":740,"title":{},"body":{"miscellaneous/functions.html":{}}}],["first",{"_index":138,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["firstdefinedvalue",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["firstdefinedvalue(genfn",{"_index":765,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flexibleconnectedto(this.el",{"_index":261,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["found",{"_index":443,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["fragment",{"_index":859,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functionality",{"_index":743,"title":{},"body":{"miscellaneous/functions.html":{}}}],["functions",{"_index":170,"title":{"miscellaneous/functions.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["generated",{"_index":819,"title":{},"body":{"index.html":{}}}],["generator",{"_index":767,"title":{},"body":{"miscellaneous/functions.html":{}}}],["genfn",{"_index":768,"title":{},"body":{"miscellaneous/functions.html":{}}}],["get(url",{"_index":510,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":444,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["gethref(link",{"_index":417,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":441,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getting",{"_index":815,"title":{"index.html":{}},"body":{}}],["global",{"_index":578,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["globally",{"_index":453,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["guarantees",{"_index":775,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handle",{"_index":276,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["handlers",{"_index":839,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":659,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["hook",{"_index":780,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":126,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts",{"_index":116,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["host.component.ts:19",{"_index":132,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hostbinding",{"_index":345,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":340,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":341,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":342,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":318,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":227,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":336,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('mouseout",{"_index":286,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlistener('mouseover",{"_index":280,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hostlisteners",{"_index":296,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["hover",{"_index":214,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hovercontext",{"_index":210,"title":{"interfaces/HoverContext.html":{}},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hoverdirective",{"_index":160,"title":{"directives/HoverDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hra",{"_index":125,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["hrahover",{"_index":232,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["hrahover]'},{'name",{"_index":161,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["hrahoverdata",{"_index":295,"title":{},"body":{"directives/HoverDirective.html":{}}}],["hralink",{"_index":163,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["href",{"_index":314,"title":{},"body":{"directives/LinkDirective.html":{}}}],["html",{"_index":155,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["htmlelement",{"_index":364,"title":{},"body":{"directives/LinkDirective.html":{}}}],["http",{"_index":497,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":487,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["https://github.com/angular/angular/issues/10185",{"_index":802,"title":{},"body":{"miscellaneous/functions.html":{}}}],["https://github.com/angular/angular/issues/10185#issuecomment",{"_index":804,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["identity",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["identity(value",{"_index":750,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ids",{"_index":758,"title":{},"body":{"miscellaneous/functions.html":{}}}],["immediately",{"_index":201,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["implement",{"_index":744,"title":{},"body":{"miscellaneous/functions.html":{}}}],["implements",{"_index":312,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["implicit",{"_index":217,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["important",{"_index":790,"title":{},"body":{"miscellaneous/functions.html":{}}}],["improved",{"_index":473,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indicating",{"_index":665,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["initial",{"_index":722,"title":{},"body":{"miscellaneous/functions.html":{}}}],["inject",{"_index":228,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["inject(activatedroute",{"_index":369,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(changedetectorref",{"_index":626,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(domsanitizer",{"_index":375,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(elementref).nativeelement",{"_index":250,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inject(httpclient",{"_index":500,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(locationstrategy",{"_index":372,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(ngzone",{"_index":503,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(overlay",{"_index":260,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(overlay).create",{"_index":258,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["inject(router",{"_index":366,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":644,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["inject(viewcontainerref",{"_index":272,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["injectable",{"_index":448,"title":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["injectables",{"_index":449,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["injectdestroy",{"_index":611,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["injected",{"_index":770,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injection",{"_index":637,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["injectors/.../destructor",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../dispatch.ts",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../on",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/.../select.ts",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/.../snapshot",{"_index":847,"title":{},"body":{"miscellaneous/variables.html":{}}}],["injectors/src/lib/dispatch/dispatch.ts",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/src/lib/on",{"_index":114,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select/select",{"_index":808,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectors/src/lib/select/select.ts",{"_index":597,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/select/snapshot",{"_index":648,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["injects",{"_index":501,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["input",{"_index":229,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["input('hrahover",{"_index":235,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hrahoverdata",{"_index":245,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["input('hralink",{"_index":362,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":294,"title":{},"body":{"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["inserted",{"_index":137,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["inside",{"_index":133,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["instance",{"_index":735,"title":{},"body":{"miscellaneous/functions.html":{}}}],["instances",{"_index":730,"title":{},"body":{"miscellaneous/functions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/ResourceRegistryQuery.html":{},"interfaces/SelectOptions.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"interfaces/ResourceRegistryQuery.html":{},"interfaces/SelectOptions.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":846,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":357,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["isanchorelement",{"_index":385,"title":{},"body":{"directives/LinkDirective.html":{}}}],["isdestructorscopelike",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isdestructorscopelike(obj",{"_index":191,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["isobject",{"_index":193,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["js",{"_index":490,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["keeping",{"_index":451,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["key",{"_index":763,"title":{},"body":{"miscellaneous/functions.html":{}}}],["know",{"_index":383,"title":{},"body":{"directives/LinkDirective.html":{}}}],["latest",{"_index":652,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":154,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["level",{"_index":783,"title":{},"body":{"miscellaneous/functions.html":{}}}],["library",{"_index":818,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":120,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["lifetime",{"_index":634,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":389,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":420,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.rel",{"_index":412,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.target",{"_index":413,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":401,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.url",{"_index":411,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":494,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":507,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":162,"title":{"directives/LinkDirective.html":{}},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["linkentry",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":872,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":495,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":358,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":459,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":428,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":433,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":359,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":437,"title":{"injectables/LinkRegistryState.html":{}},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":360,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":402,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":520,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["load",{"_index":479,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":506,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":83,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":499,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":103,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":583,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":85,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":456,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":476,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["location",{"_index":370,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy",{"_index":343,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy.prepareexternalurl(router.serializeurl(urltree",{"_index":422,"title":{},"body":{"directives/LinkDirective.html":{}}}],["maintain",{"_index":795,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manipulate",{"_index":792,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":491,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":593,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":591,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maps",{"_index":755,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mark",{"_index":602,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markdown",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(state",{"_index":565,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["markfn",{"_index":627,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["markforcheck",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["markforcheck(options",{"_index":623,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["marking",{"_index":621,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["marks",{"_index":616,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":475,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":123,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["metakey",{"_index":400,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":529,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["methods",{"_index":129,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["miscellaneous",{"_index":682,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":841,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":782,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":825,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["monotypeoperatorfunction",{"_index":608,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["mostly",{"_index":803,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mouse",{"_index":277,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["mouseevent",{"_index":335,"title":{},"body":{"directives/LinkDirective.html":{}}}],["mouseout",{"_index":297,"title":{},"body":{"directives/HoverDirective.html":{}}}],["mouseover",{"_index":298,"title":{},"body":{"directives/HoverDirective.html":{}}}],["multiple",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":363,"title":{},"body":{"directives/LinkDirective.html":{}}}],["navigate",{"_index":87,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":482,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":538,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":533,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["nearest",{"_index":761,"title":{},"body":{"miscellaneous/functions.html":{}}}],["never",{"_index":785,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["newly",{"_index":143,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["next",{"_index":629,"title":{},"body":{"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["next(value",{"_index":663,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["nextobserver",{"_index":655,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngonchanges(changes",{"_index":393,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngondestroy",{"_index":779,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxs/store",{"_index":436,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"dependencies.html":{}}}],["ngzone",{"_index":489,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["no_error_sentinel",{"_index":668,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["no_error_sentinel_obj",{"_index":666,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["non",{"_index":527,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["none",{"_index":128,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["notifyonchange",{"_index":601,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["null",{"_index":151,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["nullable",{"_index":863,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nx",{"_index":820,"title":{},"body":{"index.html":{}}}],["obj",{"_index":185,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["obj.ondestroy",{"_index":195,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["object",{"_index":168,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["obs",{"_index":754,"title":{},"body":{"miscellaneous/functions.html":{}}}],["observable",{"_index":480,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["observable's",{"_index":633,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["observables",{"_index":121,"title":{},"body":{"components/DestroyHostComponent.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":650,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts",{"_index":649,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["observer.ts:18",{"_index":661,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:30",{"_index":664,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.ts:38",{"_index":658,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{}}}],["onchanges",{"_index":313,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick",{"_index":317,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":334,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":172,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["ondestroy(cb",{"_index":173,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["onsameurlnavigation",{"_index":866,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":791,"title":{},"body":{"miscellaneous/functions.html":{}}}],["operator",{"_index":622,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":442,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["options",{"_index":600,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["options?.notifyonchange",{"_index":624,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["or(z.object",{"_index":883,"title":{},"body":{"miscellaneous/variables.html":{}}}],["originx",{"_index":263,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["originy",{"_index":265,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["otherwise",{"_index":189,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["out",{"_index":284,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["output",{"_index":747,"title":{},"body":{"miscellaneous/functions.html":{}}}],["over",{"_index":253,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlay",{"_index":222,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref",{"_index":257,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.attach(portal",{"_index":283,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.detach",{"_index":288,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayref.hasattached",{"_index":282,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayx",{"_index":267,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overlayy",{"_index":268,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["overview",{"_index":826,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["package",{"_index":673,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["param1",{"_index":516,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":470,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["parts",{"_index":632,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["passed",{"_index":213,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["passthrough",{"_index":884,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":677,"title":{},"body":{"dependencies.html":{}}}],["performed",{"_index":333,"title":{},"body":{"directives/LinkDirective.html":{}}}],["pipe",{"_index":590,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["pipe(map((data",{"_index":513,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipe(takeuntil(injectdestroy",{"_index":646,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["pipeactioninstance",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pipeactioninstance(action",{"_index":753,"title":{},"body":{"miscellaneous/functions.html":{}}}],["pipes",{"_index":810,"title":{},"body":{"miscellaneous/functions.html":{}}}],["portal",{"_index":243,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["position",{"_index":255,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["positionstrategy",{"_index":259,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["preserve",{"_index":862,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":864,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":249,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["promise",{"_index":486,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"interfaces/ResourceRegistryQuery.html":{},"interfaces/SelectOptions.html":{},"properties.html":{}}}],["property",{"_index":274,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/ResourceRegistryQuery.html":{}}}],["provided",{"_index":134,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["queries",{"_index":431,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":426,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":427,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["querying",{"_index":376,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":378,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":857,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":860,"title":{},"body":{"miscellaneous/variables.html":{}}}],["r",{"_index":748,"title":{},"body":{"miscellaneous/functions.html":{}}}],["raw",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["ref",{"_index":148,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["ref.location.nativeelement",{"_index":152,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["reference",{"_index":248,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["register",{"_index":176,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registered",{"_index":171,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["registers",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":492,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":107,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["registry.actions.ts:31",{"_index":105,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:42",{"_index":543,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:52",{"_index":545,"title":{},"body":{"classes/Navigate.html":{}}}],["registry.actions.ts:53",{"_index":544,"title":{},"body":{"classes/LoadMarkdown.html":{}}}],["registry.actions.ts:8",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{}}}],["registry.model",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":685,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":424,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:16",{"_index":430,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:32",{"_index":575,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:45",{"_index":573,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:67",{"_index":574,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:77",{"_index":576,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:87",{"_index":577,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":438,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":450,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":581,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":580,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:46",{"_index":465,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":582,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:56",{"_index":461,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":586,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:67",{"_index":469,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":585,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:80",{"_index":478,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:93",{"_index":484,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":94,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["regular",{"_index":778,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rel",{"_index":315,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relativeto",{"_index":421,"title":{},"body":{"directives/LinkDirective.html":{}}}],["rely",{"_index":789,"title":{},"body":{"miscellaneous/functions.html":{}}}],["remote",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["replaceurl",{"_index":869,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":179,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["res",{"_index":812,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resource",{"_index":95,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":587,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":588,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":97,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":96,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":876,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":556,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":579,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrydataquery",{"_index":555,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":552,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryquery",{"_index":546,"title":{"interfaces/ResourceRegistryQuery.html":{}},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors",{"_index":557,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.getentry(state",{"_index":559,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistrystate",{"_index":554,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":553,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["resourcetype.markdown",{"_index":561,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype.markdown)?.markdown",{"_index":566,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text",{"_index":563,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text)?.text",{"_index":568,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.url)?.url",{"_index":570,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["responsetype",{"_index":511,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["result",{"_index":798,"title":{},"body":{"miscellaneous/functions.html":{}}}],["resulthandler",{"_index":742,"title":{},"body":{"miscellaneous/functions.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["returned",{"_index":766,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returning",{"_index":751,"title":{},"body":{"miscellaneous/functions.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":781,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route",{"_index":368,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":352,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["router.createurltree(link.commands",{"_index":419,"title":{},"body":{"directives/LinkDirective.html":{}}}],["routing",{"_index":311,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":198,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"index.html":{}}}],["running",{"_index":821,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":180,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["same",{"_index":769,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sanitize",{"_index":373,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitized",{"_index":416,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer",{"_index":374,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer.sanitize(urlsecuritycontext",{"_index":423,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizes",{"_index":415,"title":{},"body":{"directives/LinkDirective.html":{}}}],["schema",{"_index":875,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":184,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["scope.ondestroy",{"_index":207,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["scopeddestructorsubject",{"_index":203,"title":{"classes/ScopedDestructorSubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["security",{"_index":387,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext",{"_index":346,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.resource_url",{"_index":390,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.url",{"_index":391,"title":{},"body":{"directives/LinkDirective.html":{}}}],["seems",{"_index":188,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["select",{"_index":598,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["select$(selector",{"_index":643,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["select(selector",{"_index":645,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["selected",{"_index":642,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selection",{"_index":639,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selectoptions",{"_index":596,"title":{"interfaces/SelectOptions.html":{}},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["selector",{"_index":124,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['linkregistrystate",{"_index":429,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":572,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([linkregistrystate",{"_index":439,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":558,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["selectors",{"_index":425,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["selectquerysnapshot",{"_index":355,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":379,"title":{},"body":{"directives/LinkDirective.html":{}}}],["selectquerysnapshot(selector",{"_index":809,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selects",{"_index":746,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot(selector",{"_index":814,"title":{},"body":{"miscellaneous/functions.html":{}}}],["service",{"_index":498,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":784,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":236,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/variables.html":{}}}],["setcontent(content",{"_index":308,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setdata(data",{"_index":309,"title":{},"body":{"directives/HoverDirective.html":{}}}],["setter",{"_index":233,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["setting",{"_index":256,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["shiftkey",{"_index":398,"title":{},"body":{"directives/LinkDirective.html":{}}}],["signature",{"_index":548,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{}}}],["simplechanges",{"_index":347,"title":{},"body":{"directives/LinkDirective.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{}}}],["skiplocationchange",{"_index":868,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":653,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["snapshot.ts",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["snapshotobserver",{"_index":647,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/hover/hover.directive.ts",{"_index":211,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:19",{"_index":300,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:26",{"_index":301,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:38",{"_index":306,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:58",{"_index":307,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:62",{"_index":303,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/hover/hover.directive.ts:71",{"_index":302,"title":{},"body":{"directives/HoverDirective.html":{}}}],["src/lib/link/link.directive.ts",{"_index":310,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:32",{"_index":324,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:34",{"_index":326,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:36",{"_index":327,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:38",{"_index":329,"title":{},"body":{"directives/LinkDirective.html":{}}}],["src/lib/link/link.directive.ts:82",{"_index":331,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stable",{"_index":762,"title":{},"body":{"miscellaneous/functions.html":{}}}],["standalone",{"_index":145,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{}}}],["start",{"_index":270,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["started",{"_index":816,"title":{"index.html":{}},"body":{}}],["starthover",{"_index":281,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["state",{"_index":377,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["state/.../action",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/.../actions.ts",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state/.../link",{"_index":684,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":686,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/action",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":93,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state[id",{"_index":445,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["statecontext",{"_index":840,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["stateselector",{"_index":614,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":607,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"components/DestroyHostComponent.html":{},"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["store",{"_index":273,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["storing",{"_index":651,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["strategy",{"_index":371,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stream",{"_index":654,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["style",{"_index":613,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/typealiases.html":{}}}],["styles",{"_index":111,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["subject",{"_index":196,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["subject.ts",{"_index":167,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{}}}],["subject.ts:27",{"_index":595,"title":{},"body":{"classes/ScopedDestructorSubject.html":{}}}],["subject.ts:9",{"_index":175,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["super",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["super(1",{"_index":206,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["support",{"_index":689,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{}}}],["switch",{"_index":518,"title":{},"body":{"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["t",{"_index":218,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["tagname",{"_index":381,"title":{},"body":{"directives/LinkDirective.html":{}}}],["take",{"_index":793,"title":{},"body":{"miscellaneous/functions.html":{}}}],["takeuntil",{"_index":609,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":749,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tap",{"_index":610,"title":{},"body":{"interfaces/SelectOptions.html":{}}}],["target",{"_index":316,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":147,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal",{"_index":224,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateportal(content",{"_index":239,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templateref",{"_index":230,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["templates",{"_index":216,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["test",{"_index":187,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["tests",{"_index":823,"title":{},"body":{"index.html":{}}}],["text",{"_index":512,"title":{},"body":{"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(state",{"_index":567,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["this._data",{"_index":241,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.addmany(ctx",{"_index":504,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":594,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":514,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.complete",{"_index":209,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.el.tagname.tolowercase",{"_index":382,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.errorvalue",{"_index":671,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.getentry(state",{"_index":440,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.gethref(link",{"_index":414,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.href",{"_index":408,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":509,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":589,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.link",{"_index":406,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":403,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":524,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":522,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":208,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["this.portal",{"_index":238,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.portal.context",{"_index":247,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.querylink(this.linkid",{"_index":407,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.rel",{"_index":410,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router.navigate(entry.commands",{"_index":535,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.target",{"_index":409,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatecontent",{"_index":242,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.updatelink",{"_index":395,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":672,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.viewcontainerref",{"_index":240,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["this.zone.run",{"_index":534,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":525,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["throws",{"_index":670,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["tied",{"_index":636,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["time",{"_index":732,"title":{},"body":{"miscellaneous/functions.html":{}}}],["token",{"_index":640,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["top",{"_index":269,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["track",{"_index":452,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":871,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":113,"title":{},"body":{"components/DestroyHostComponent.html":{},"directives/LinkDirective.html":{}}}],["triggers",{"_index":332,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":146,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":338,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tslib",{"_index":675,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"components/DestroyHostComponent.html":{},"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":832,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typematches",{"_index":446,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["typeof",{"_index":194,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{}}}],["types",{"_index":687,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/injectors",{"_index":356,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":361,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":680,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":681,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":435,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"interfaces/SelectOptions.html":{}}}],["unamed",{"_index":547,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{}}}],["unchanged",{"_index":739,"title":{},"body":{"miscellaneous/functions.html":{}}}],["undefined",{"_index":200,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["union",{"_index":838,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unionmember",{"_index":434,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["unique",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":822,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":192,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{}}}],["unless",{"_index":786,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unparsed",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["up",{"_index":290,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatecontent",{"_index":293,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["updatelink",{"_index":405,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":404,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updation",{"_index":289,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["url",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":569,"title":{},"body":{"interfaces/ResourceRegistryQuery.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":472,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["urls",{"_index":485,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["urlsecuritycontext",{"_index":388,"title":{},"body":{"directives/LinkDirective.html":{}}}],["urltree",{"_index":418,"title":{},"body":{"directives/LinkDirective.html":{}}}],["use",{"_index":220,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["used",{"_index":117,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["user",{"_index":219,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["userhovers",{"_index":252,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["using",{"_index":530,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":885,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":186,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":157,"title":{},"body":{"components/DestroyHostComponent.html":{}}}],["variables",{"_index":842,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":830,"title":{},"body":{"properties.html":{}}}],["view",{"_index":141,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["viewcontainerref",{"_index":131,"title":{},"body":{"components/DestroyHostComponent.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":174,"title":{},"body":{"interfaces/DestructorScope.html":{},"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestructorSubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["weakmap",{"_index":848,"title":{},"body":{"miscellaneous/variables.html":{}}}],["whenever",{"_index":617,"title":{},"body":{"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["whether",{"_index":182,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ScopedDestructorSubject.html":{},"interfaces/SelectOptions.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":537,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(entry.url",{"_index":539,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["without",{"_index":836,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["withpositions",{"_index":262,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["withpush(true",{"_index":271,"title":{},"body":{"interfaces/HoverContext.html":{},"directives/HoverDirective.html":{}}}],["wrapper",{"_index":734,"title":{},"body":{"miscellaneous/functions.html":{}}}],["wraps",{"_index":727,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yaml",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":471,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["z",{"_index":851,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":856,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":865,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":874,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":861,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":834,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":867,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":852,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":855,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.markdown",{"_index":880,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.text",{"_index":881,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.url",{"_index":882,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":879,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":870,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":858,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":853,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":854,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":502,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/DestroyHostComponent.html":{"url":"components/DestroyHostComponent.html","title":"component - DestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  DestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/destroy-host.component.ts\n\n\n\n    \n        Description\n    \n    \n        Component used when attaching destroy lifecycle observables to a component/directive/pipe\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-destroy-host\n            \n\n\n            \n                styles\n                :host { display: none }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                create\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n\n\n\n    \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(container: ViewContainerRef)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destroy-host.component.ts:19\n                \n            \n\n\n            \n                \n                    Creates a new DestroyHostComponent inside the provided container.\nThe element is inserted as the first child (index '0') in the container.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    container\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View in which to create the element\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ComponentRef\n\n                    \n                    \n                        The ComponentRef of the newly inserted element\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n    \n        import { Component, ComponentRef, ViewContainerRef } from '@angular/core';\n\n/**\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\n */\n@Component({\n  selector: 'hra-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: none }'],\n})\nexport class DestroyHostComponent {\n  /**\n   * Creates a new DestroyHostComponent inside the provided container.\n   * The element is inserted as the first child (index '0') in the container.\n   * @param container View in which to create the element\n   * @returns The ComponentRef of the newly inserted element\n   */\n  static create(container: ViewContainerRef): ComponentRef {\n    const ref = container.createComponent(DestroyHostComponent, { index: 0 });\n    const el: Element | null = ref.location.nativeElement;\n\n    el?.remove();\n    return ref;\n  }\n}\n\n    \n\n\n    \n            :host { display: none }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'DestroyHostComponent', 'selector': 'hra-destroy-host'}];\n    var DIRECTIVES = [{'name': 'HoverDirective', 'selector': '[hraHover]'},{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'DestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup functions can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/destructor-subject.ts:9\n                \n            \n\n\n            \n                \n                    Register a cleanup function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback function\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/HoverContext.html":{"url":"interfaces/HoverContext.html","title":"interface - HoverContext","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  HoverContext\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Context passed to hover content templates\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            $implicit\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        $implicit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        $implicit:     T\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     T\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Data provided by the user for use inside the content template\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/HoverDirective.html":{"url":"directives/HoverDirective.html","title":"directive - HoverDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  HoverDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hover/hover.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Hover overlay directive to be used across the application\n\n            \n\n\n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraHover]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                overlayRef\n                            \n                            \n                                    Optional\n                                portal\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                endHover\n                            \n                            \n                                startHover\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraHover\n                            \n                            \n                                hraHoverData\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                mouseout\n                            \n                            \n                                mouseover\n                            \n                        \n                    \n                \n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    content\n                                \n                                \n                                    data\n                                \n                            \n                        \n                    \n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraHover\n                    \n                \n                \n                    \n                        Type :         TemplateRef>\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                            \n                        \n                \n                    \n                        Setter for the content to be displayed in the overlay\n\n                    \n                \n            \n        \n        \n            \n                \n                    \n                        \n                        hraHoverData\n                    \n                \n                \n                    \n                        Type :     T\n\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                            \n                        \n                \n                    \n                        Setter for the context that is to be displayed in the portal attached to the overlay\n\n                    \n                \n            \n        \n\n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            mouseout\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            mouseover\n                        \n                        \n                    \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        endHover\n                        \n                    \n                \n            \n            \n                \nendHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseout')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:71\n                \n            \n\n\n            \n                \n                    Function to handle the mouse out event to detach the portal\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        startHover\n                        \n                    \n                \n            \n            \n                \nstartHover()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('mouseover')\n                \n            \n\n            \n                \n                    Defined in src/lib/hover/hover.directive.ts:62\n                \n            \n\n\n            \n                \n                    Function to handle the mouse over event to attach the portal and display the hover content\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        overlayRef\n                        \n                    \n                \n            \n                \n                    \n                        Default value : inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  })\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:38\n                        \n                    \n\n            \n                \n                    Reference to the overlay that is created when the userhovers over the element along with its position setting\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        portal\n                        \n                    \n                \n            \n                \n                    \n                        Type :         TemplatePortal>\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hover/hover.directive.ts:58\n                        \n                    \n\n            \n                \n                    Portal that is created to display the overlay\n\n                \n            \n\n        \n    \n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        content\n                    \n                \n\n\n                \n                    \n                        setcontent(content: TemplateRef>)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:19\n                                \n                            \n                    \n                        \n                                Setter for the content to be displayed in the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            content\n                                                    \n                                                            \n                                                                            TemplateRef>\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n\n\n                \n                    \n                        setdata(data: T)\n                    \n                \n                            \n                                \n                                    Defined in src/lib/hover/hover.directive.ts:26\n                                \n                            \n                    \n                        \n                                Setter for the context that is to be displayed in the portal attached to the overlay\n\n\n                                \n                                        Parameters :\n                                        \n                                            \n                                                \n                                                    Name\n                                                        Type\n                                                    Optional\n                                                \n                                            \n                                            \n                                                    \n                                                            data\n                                                    \n                                                            \n                                                                        T\n                                                            \n                                                    \n                                                        \n                                                                No\n                                                        \n                                                        \n                                                    \n                                            \n                                        \n                                \n                                \n                                \n                                \n                                    Returns :         void\n\n                                \n                        \n                    \n            \n        \n\n\n    \n\n\n    \n        import { ConnectionPositionPair, Overlay } from '@angular/cdk/overlay';\nimport { TemplatePortal } from '@angular/cdk/portal';\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from '@angular/core';\n\n/**  Context passed to hover content templates */\nexport interface HoverContext {\n  /** Data provided by the user for use inside the content template */\n  $implicit: T;\n}\n\n/** Hover overlay directive to be used across the application */\n@Directive({\n  selector: '[hraHover]',\n  standalone: true,\n})\nexport class HoverDirective {\n  /**  Setter for the content to be displayed in the overlay */\n  @Input('hraHover')\n  set content(content: TemplateRef>) {\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\n    this.updateContent();\n  }\n\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\n  @Input('hraHoverData')\n  set data(data: T) {\n    this._data = { $implicit: data };\n    if (this.portal) {\n      this.portal.context = this._data;\n      this.updateContent();\n    }\n  }\n\n  /**  Reference to the element that the directive is attached to */\n  private readonly el: Element = inject(ElementRef).nativeElement;\n\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\n  readonly overlayRef = inject(Overlay).create({\n    positionStrategy: inject(Overlay)\n      .position()\n      .flexibleConnectedTo(this.el)\n      .withPositions([\n        new ConnectionPositionPair({ originX: 'end', originY: 'bottom' }, { overlayX: 'end', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'top' }, { overlayX: 'start', overlayY: 'bottom' }),\n        new ConnectionPositionPair({ originX: 'start', originY: 'bottom' }, { overlayX: 'start', overlayY: 'top' }),\n        new ConnectionPositionPair({ originX: 'end', originY: 'top' }, { overlayX: 'end', overlayY: 'bottom' }),\n      ])\n      .withPush(true),\n  });\n\n  /** Reference view container that the directive is attached to */\n  private readonly viewContainerRef = inject(ViewContainerRef);\n\n  /** Store the data that is passed into the data input property */\n  private _data?: HoverContext;\n\n  /** Portal that is created to display the overlay */\n  portal?: TemplatePortal>;\n\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\n  @HostListener('mouseover')\n  startHover(): void {\n    const { overlayRef, portal } = this;\n    if (!overlayRef.hasAttached() && portal) {\n      overlayRef.attach(portal);\n    }\n  }\n\n  /** Function to handle the mouse out event to detach the portal  */\n  @HostListener('mouseout')\n  endHover(): void {\n    const { overlayRef } = this;\n    if (overlayRef.hasAttached()) {\n      overlayRef.detach();\n    }\n  }\n\n  /** Function to handle the updation of overlay with up to date content when the input changes */\n  private updateContent(): void {\n    const { overlayRef, portal } = this;\n    if (overlayRef.hasAttached() && portal) {\n      overlayRef.detach();\n      overlayRef.attach(portal);\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/link/link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                rel\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraLink\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK\n                    \n                \n                        \n                            \n                                    Defined in src/lib/link/link.directive.ts:32\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onClick\n                        \n                    \n                \n            \n            \n                \nonClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/link/link.directive.ts:82\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true/false based on entry and element\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:34\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:36\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/link/link.directive.ts:38\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { LocationStrategy } from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  inject,\n  Input,\n  OnChanges,\n  SecurityContext,\n  SimpleChanges,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport {\n  EMPTY_LINK,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkRegistryActions,\n  LinkRegistrySelectors,\n  LinkType,\n} from '@hra-ui/cdk/state';\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements OnChanges {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK;\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Native Element */\n  private readonly el: HTMLElement = inject(ElementRef).nativeElement;\n  /** Angular router */\n  private readonly router = inject(Router);\n  /** Activate route */\n  private readonly route = inject(ActivatedRoute, { optional: true });\n  /** Location strategy */\n  private readonly locationStrategy = inject(LocationStrategy);\n  /** DomSanitizer to sanitize the url */\n  private readonly sanitizer = inject(DomSanitizer);\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n  /** tagName from Native Element */\n  private readonly tagName = this.el.tagName.toLowerCase();\n  /** to know if the element is an anchor element */\n  private readonly isAnchorElement = ['a', 'area'].includes(this.tagName);\n  /** url security context */\n  private readonly urlSecurityContext = ['base', 'link'].includes(this.tagName)\n    ? SecurityContext.RESOURCE_URL\n    : SecurityContext.URL;\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /**\n   * triggers when linkId changes\n   * @param changes contains changes of inputs\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['linkId'].currentValue !== EMPTY_LINK) {\n      this.updateLink();\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External) {\n        return true;\n      }\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId);\n    return !isAnchorElement;\n  }\n\n  /**\n   * Updates link when linkId changes\n   */\n  private updateLink(): void {\n    const link = (this.link = this.queryLink(this.linkId));\n    this.href = undefined;\n    this.target = undefined;\n    this.rel = undefined;\n    if (link) {\n      if (link.type === LinkType.External) {\n        this.href = link.url;\n        this.rel = link.rel;\n        this.target = link.target;\n      } else {\n        this.href = this.getHref(link) ?? undefined;\n      }\n    }\n  }\n\n  /**\n   * Creates a url tree and sanitizes the url\n   * @param link Internal link entry\n   * @returns A sanitized url string\n   */\n  private getHref(link: InternalLinkEntry): string | null {\n    const { router, route, locationStrategy, sanitizer, urlSecurityContext } = this;\n    const urlTree = router.createUrlTree(link.commands, {\n      ...link.extras,\n      relativeTo: route,\n    });\n    const url = locationStrategy.prepareExternalUrl(router.serializeUrl(urlTree));\n    return sanitizer.sanitize(urlSecurityContext, url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.selectors.ts:16\n                \n            \n\n\n            \n                \n                    Queries for a link entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                LinkRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkRegistryQuery\n\n                    \n                    \n                        link query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadYaml\n                            \n                            \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:56\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:46\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:67\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:80\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                    \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:93\n                \n            \n\n\n            \n                \n                    Navigate to Internal or External urls from id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Navigate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router);\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry): Promise {\n    await this.zone.run(() => this.router.navigate(entry.commands, entry.extras));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry): void {\n    window.open(entry.url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:52\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ResourceRegistryQuery.html":{"url":"interfaces/ResourceRegistryQuery.html","title":"interface - ResourceRegistryQuery","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ResourceRegistryQuery\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Query function for resource entry optionally with type specified\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Unamed property\n                                \n                                \n                                            Unamed property\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [id: ResourceId, type: T]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     UnionMember | undefined\n\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Get a resource entry with builtin type\n\n                                \n                            \n                        \n                    \n                    \n                        \n\n                                    \n                                        \n                                            Signature :\n                                            \n                                            \n                                                \n                                                    [id: ResourceId, type: string]\n                                            \n                                        \n                                    \n\n\n                                    \n                                        \n                                            Returns :     CustomResourceEntry | undefined\n\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Get a resource entry of any type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceEntry,\n  CustomResourceEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function for resource entry optionally with type specified */\nexport interface ResourceRegistryQuery {\n  /** Get a resource entry with builtin type */\n  (id: ResourceId, type: T): UnionMember | undefined;\n  /** Get a resource entry of any type */\n  (id: ResourceId, type?: string): CustomResourceEntry | undefined;\n}\n\n/** Query function for resource data */\nexport type ResourceRegistryDataQuery = (id: ResourceId) => T | undefined;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries for a resource entry\n   * @param state Current state\n   * @returns Resource query function\n   */\n  @Selector([ResourceRegistryState])\n  static query(state: ResourceRegistryModel): ResourceRegistryQuery {\n    return (id: ResourceId, type?: ResourceType | string) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id, type);\n      return entry as BuiltinResourceEntry;\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id);\n      switch (entry?.type) {\n        case ResourceType.Markdown:\n          return entry.markdown as string;\n\n        case ResourceType.Text:\n          return entry.text as string;\n\n        default:\n          return undefined;\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistryState])\n  static markdown(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Markdown)?.markdown;\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static text(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Text)?.text;\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistryState])\n  static url(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Url)?.url;\n  }\n\n  /**\n   * Gets a resource entry by id and optionally type\n   * @param state Resource registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: ResourceRegistryModel,\n    id: ResourceId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anyText\n                            \n                            \n                                    Static\n                                markdown\n                            \n                            \n                                    Static\n                                query\n                            \n                            \n                                    Static\n                                text\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:45\n                \n            \n\n\n            \n                \n                    Query for any text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    markdown(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:67\n                \n            \n\n\n            \n                \n                    Query for markdown data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Markdown data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:32\n                \n            \n\n\n            \n                \n                    Queries for a resource entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryQuery\n\n                    \n                    \n                        Resource query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                    \n                    text(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:77\n                \n            \n\n\n            \n                \n                    Query for text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:87\n                \n            \n\n\n            \n                \n                    Query for an url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Url query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport {\n  BuiltinResourceEntry,\n  CustomResourceEntry,\n  ResourceEntry,\n  ResourceId,\n  ResourceRegistryModel,\n  ResourceType,\n} from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function for resource entry optionally with type specified */\nexport interface ResourceRegistryQuery {\n  /** Get a resource entry with builtin type */\n  (id: ResourceId, type: T): UnionMember | undefined;\n  /** Get a resource entry of any type */\n  (id: ResourceId, type?: string): CustomResourceEntry | undefined;\n}\n\n/** Query function for resource data */\nexport type ResourceRegistryDataQuery = (id: ResourceId) => T | undefined;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries for a resource entry\n   * @param state Current state\n   * @returns Resource query function\n   */\n  @Selector([ResourceRegistryState])\n  static query(state: ResourceRegistryModel): ResourceRegistryQuery {\n    return (id: ResourceId, type?: ResourceType | string) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id, type);\n      return entry as BuiltinResourceEntry;\n    };\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id);\n      switch (entry?.type) {\n        case ResourceType.Markdown:\n          return entry.markdown as string;\n\n        case ResourceType.Text:\n          return entry.text as string;\n\n        default:\n          return undefined;\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistryState])\n  static markdown(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Markdown)?.markdown;\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static text(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Text)?.text;\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistryState])\n  static url(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Url)?.url;\n  }\n\n  /**\n   * Gets a resource entry by id and optionally type\n   * @param state Resource registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: ResourceRegistryModel,\n    id: ResourceId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadMarkdown\n                            \n                            \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:40\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:30\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:51\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \nloadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:77\n                \n            \n\n\n            \n                \n                    Adds a markdown entry with content loaded from an external file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadMarkdown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entry has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:64\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  ResourceType,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: ResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestructorSubject.html":{"url":"classes/ScopedDestructorSubject.html","title":"class - ScopedDestructorSubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestructorSubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/destructor-subject.ts\n        \n\n\n            \n                Description\n            \n            \n                A subject type that is associated with a destructor scope.\nWhen the cleanup function is run the subject emits a single\nundefined value and immediately completes\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/destructor-subject.ts:27\n                            \n                        \n\n                \n                    \n                            Creates a new subject and attaches cleanup to the destructor scope\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Associated scope\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup functions can be registered */\nexport interface DestructorScope {\n  /**\n   * Register a cleanup function\n   * @param cb Cleanup callback function\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Determines whether an object is destructor scope like\n * @param obj Value to test\n * @returns true if the object seems to be a destructor scope, otherwise false\n */\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\n  const isObject = typeof obj === 'object' && obj !== null;\n  return isObject && 'onDestroy' in obj && typeof obj.onDestroy === 'function';\n}\n\n/**\n * A subject type that is associated with a destructor scope.\n * When the cleanup function is run the subject emits a single\n * undefined value and immediately completes\n */\nexport class ScopedDestructorSubject extends ReplaySubject {\n  /**\n   * Creates a new subject and attaches cleanup to the destructor scope\n   * @param scope Associated scope\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SelectOptions.html":{"url":"interfaces/SelectOptions.html","title":"interface - SelectOptions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SelectOptions\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/select.ts\n        \n\n\n            \n                Description\n            \n            \n                select$ configuration options\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            notifyOnChange\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        notifyOnChange\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        notifyOnChange:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                            \n                                \n                                    Whether to mark the containing view for change detection on emits. Defaults to true.\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from 'rxjs';\nimport { injectDestroy$ } from '../on-destroy/on-destroy';\n\n/** Selector type for select style functions */\nexport type StateSelector = ((...args: Any[]) => T) | StateToken;\n\n/** `select$` configuration options */\nexport interface SelectOptions {\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\n  notifyOnChange?: boolean;\n}\n\n/**\n * Marks a view for change detection whenever a new value is emitted\n * @param options Options to explicitly disable marking\n * @returns A rxjs operator\n */\nfunction markForCheck(options?: SelectOptions): MonoTypeOperatorFunction {\n  const notifyOnChange = options?.notifyOnChange ?? true;\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  if (notifyOnChange && cdr) {\n    const markFn = () => cdr.markForCheck();\n    return tap({ next: markFn, error: markFn, complete: markFn });\n  }\n\n  return (source) => source;\n}\n\n/**\n * Creates an observable emitting parts of the state. The observable's lifetime\n * is automatically tied to the injection context where this is called.\n * @param selector State selection function or token\n * @param options Additional select options\n * @returns An observable of the selected state\n */\nexport function select$(selector: StateSelector, options?: SelectOptions): Observable {\n  return inject(Store)\n    .select(selector as StateToken)\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select/snapshot-observer.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        NextObserver\n                        ErrorObserver\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:38\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:18\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select/snapshot-observer.ts:30\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ErrorObserver, NextObserver } from 'rxjs';\n\n/** Object indicating that no error has been emitted */\nconst NO_ERROR_SENTINEL_OBJ = {};\n\n/** Observer storing the latest value from a snapshot stream */\nexport class SnapshotObserver implements NextObserver, ErrorObserver {\n  /** The latest value */\n  private value?: T = undefined;\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.value = undefined;\n    this.errorValue = err;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ResourceType\n                    \n                \n                    \n                        \n                            Built in resource types with additional support\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../actions.ts)\n                        \n                        \n                            ActionGroup   (state/.../actions.ts)\n                        \n                        \n                            assertUniqueActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            createActionFactory   (injectors/.../dispatch.ts)\n                        \n                        \n                            createLinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            createResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            dispatch   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatch$   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchAction   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchAction$   (injectors/.../dispatch.ts)\n                        \n                        \n                            dispatchImpl   (injectors/.../dispatch.ts)\n                        \n                        \n                            findDestructorScope   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findStableKeyObject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            firstDefinedValue   (injectors/.../on-destroy.ts)\n                        \n                        \n                            identity   (injectors/.../dispatch.ts)\n                        \n                        \n                            injectDestroy$   (injectors/.../on-destroy.ts)\n                        \n                        \n                            isDestructorScopeLike   (injectors/.../destructor-subject.ts)\n                        \n                        \n                            markForCheck   (injectors/.../select.ts)\n                        \n                        \n                            pipeActionInstance   (injectors/.../dispatch.ts)\n                        \n                        \n                            registerActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            select$   (injectors/.../select.ts)\n                        \n                        \n                            selectQuerySnapshot   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            selectSnapshot   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/actions/actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n            \n                \nAction(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new base action with a specified type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        A base action class\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ActionGroup\n                        \n                    \n                \n            \n            \n                \nActionGroup(group: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory that adds a common group string to each action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Common action type group\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        An action factory\n\n                    \n                \n            \n        \n    \n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assertUniqueActionType\n                        \n                    \n                \n            \n            \n                \nassertUniqueActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Asserts that an action type is unique\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerActionType\n                        \n                    \n                \n            \n            \n                \nregisterActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Registers an action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    injectors/src/lib/dispatch/dispatch.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createActionFactory\n                        \n                    \n                \n            \n            \n                \ncreateActionFactory(type, boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory function\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Initial bound arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A factory function creating a new action on each call\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatch\n                        \n                    \n                \n            \n            \n                \ndispatch(type, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Bound arguments to the action constructor\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatch$\n                        \n                    \n                \n            \n            \n                \ndispatch$(type, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\nEach call to the wrapper returns an observable that emits the action instance once the\ndispatch action has completed.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Bound arguments to the action constructor\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchAction\n                        \n                    \n                \n            \n            \n                \ndispatchAction()\n                \n            \n\n\n\n\n            \n                \n                    Creates a callback that can dispatch any action or array of actions.\nEach call returns passed actions unchanged\n\n\n                    \n                    \n                    \n                        Returns :     A\n\n                    \n                    \n                        A function that dispatches actions on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchAction$\n                        \n                    \n                \n            \n            \n                \ndispatchAction$()\n                \n            \n\n\n\n\n            \n                \n                    Creates a callback that can dispatch any action or array of actions.\nEach call returns an observable that emits the passed actions when the dispatch has finished\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        A function that dispatches actions on the store each time it is called\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dispatchImpl\n                        \n                    \n                \n            \n            \n                \ndispatchImpl(actionFactory, resultHandler)\n                \n            \n\n\n\n\n            \n                \n                    Common dispatch functionality used to implement all dispatch functions\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actionFactory\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Creates an action or array of actions from the user provided arguments\n\n                                    \n                                \n                                \n                                    resultHandler\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Selects the output value from the action and the dispatch observable\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     R\n\n                    \n                    \n                        A new dispatch function taking user arguments, dispatches actions, and returns a value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        identity\n                        \n                    \n                \n            \n            \n                \nidentity(value: T)\n                \n            \n\n\n\n\n            \n                \n                    Identity function returning the first argument passed\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        pipeActionInstance\n                        \n                    \n                \n            \n            \n                \npipeActionInstance(action: A, obs$: Observable)\n                \n            \n\n\n\n\n            \n                \n                    Maps all emits to an action value\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    action\n                                    \n                                            A\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    obs$\n                                    \n                                            Observable\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLinkId\n                        \n                    \n                \n            \n            \n                \ncreateLinkId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    function to createa unique link ids\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createResourceId\n                        \n                    \n                \n            \n            \n                \ncreateResourceId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new resource identifier\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique resource identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceId\n\n                    \n                    \n                        A new identifier\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findDestructorScope\n                        \n                    \n                \n            \n            \n                \nfindDestructorScope()\n                \n            \n\n\n\n\n            \n                \n                    Finds the nearest destructor scope object in the current injection context\n\n\n                    \n                    \n                    \n                        Returns :         DestructorScope\n\n                    \n                    \n                        The scope on which cleanup can be attached\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findStableKeyObject\n                        \n                    \n                \n            \n            \n                \nfindStableKeyObject()\n                \n            \n\n\n\n\n            \n                \n                    Finds a stable object in the current injection context to be\nused as a key in the destructor cache\n\n\n                    \n                    \n                    \n                        Returns :         object\n\n                    \n                    \n                        An object\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        firstDefinedValue\n                        \n                    \n                \n            \n            \n                \nfirstDefinedValue(genFn)\n                \n            \n\n\n\n\n            \n                \n                    Get the first defined value returned by a generator\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    genFn\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Generator function taking no arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The first non-null value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        injectDestroy$\n                        \n                    \n                \n            \n            \n                \ninjectDestroy$()\n                \n            \n\n\n\n\n            \n                \n                    Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe takeUntil pipe, and to build other complex injection functions.\nCaveats:\n\nThere are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook\nFor root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don't rely on it for important operations\nComponents, directives, pipe, and services that manipulate the ViewContainerRef MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable\n\nBased on comment on https://github.com/angular/angular/issues/10185\nMostly https://github.com/angular/angular/issues/10185#issuecomment-1165545544 and\nhttps://github.com/angular/angular/issues/10185#issuecomment-1199063426\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that emits and completes when the component/directive/etc. is destroyed\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/destructor-subject.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        isDestructorScopeLike\n                        \n                    \n                \n            \n            \n                \nisDestructorScopeLike(obj)\n                \n            \n\n\n\n\n            \n                \n                    Determines whether an object is destructor scope like\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    obj\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Value to test\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         DestructorScope\n\n                    \n                    \n                        true if the object seems to be a destructor scope, otherwise false\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        markForCheck\n                        \n                    \n                \n            \n            \n                \nmarkForCheck(options?: SelectOptions)\n                \n            \n\n\n\n\n            \n                \n                    Marks a view for change detection whenever a new value is emitted\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    options\n                                    \n                                                SelectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Options to explicitly disable marking\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     MonoTypeOperatorFunction\n\n                    \n                    \n                        A rxjs operator\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        select$\n                        \n                    \n                \n            \n            \n                \nselect$(selector: StateSelector, options?: SelectOptions)\n                \n            \n\n\n\n\n            \n                \n                    Creates an observable emitting parts of the state. The observable's lifetime\nis automatically tied to the injection context where this is called.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State selection function or token\n\n                                    \n                                \n                                \n                                    options\n                                    \n                                                SelectOptions\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Additional select options\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable of the selected state\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select/select-snapshot.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectQuerySnapshot\n                        \n                    \n                \n            \n            \n                \nselectQuerySnapshot(selector: StateSelector, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store query selector\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional bound query arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Res\n\n                    \n                    \n                        A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSnapshot\n                        \n                    \n                \n            \n            \n                \nselectSnapshot(selector: StateSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                StateSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store data selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        A snapshot function\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    2 Directives\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BuiltinResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            CustomResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryDataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            StateSelector   (injectors/.../select.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    BuiltinResourceEntry\n                \n            \n            \n                \n                    Entry types with built in support\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CustomResourceEntry\n                \n            \n            \n                \n                    Entry for custom user types without built in support\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Discriminated union of all resource interfaces\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Unique identifier for a resource\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryDataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select/select.ts\n    \n    \n        \n            \n                \n                    \n                    StateSelector\n                \n            \n            \n                \n                    Selector type for select style functions\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            DESTRUCTOR_CACHE   (injectors/.../on-destroy.ts)\n                        \n                        \n                            EMPTY_LINK   (state/.../link-registry.model.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            NO_ERROR_SENTINEL_OBJ   (injectors/.../snapshot-observer.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        DESTRUCTOR_CACHE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    Cached destructor observables\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('@@__EMPTY__')\n                    \n                \n\n            \n                \n                    Empty link id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/select/snapshot-observer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        NO_ERROR_SENTINEL_OBJ\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n\n            \n                \n                    Object indicating that no error has been emitted\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `ResourceId:'${id}'`)\n    .brand('ResourceId'),\n  z\n    .discriminatedUnion('type', [\n      z.object({ type: z.literal(ResourceType.Markdown), markdown: z.string() }),\n      z.object({ type: z.literal(ResourceType.Text), text: z.string() }),\n      z.object({ type: z.literal(ResourceType.Url), url: z.string() }),\n    ])\n    .or(z.object({ type: z.string() }).passthrough())\n)\n                    \n                \n\n            \n                \n                    Resource registry schema validator\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
