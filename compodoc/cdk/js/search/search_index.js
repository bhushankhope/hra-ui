var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.636,1,2.298]],["body/interfaces/ActionConstructor.html",[0,2.371,1,3.908,2,2.271,3,0.456,4,0.456,5,0.456,6,2.975,7,0.399,8,1.37,9,1.13,10,0.836,11,0.791,12,2.942,13,0.611,14,1.073,15,0.036,16,0.456,17,2.975,18,1.831,19,0.98,20,1.201,21,2.031,22,0.741,23,2.15,24,1.238,25,2.572,26,3.853,27,4.274,28,2.572,29,0.59,30,1.357,31,1.628,32,2.975,33,1.487,34,3.586,35,2.031,36,0.223,37,2.975,38,2.975,39,3.586,40,2.572,41,0.026,42,0.026]],["title/classes/Add.html",[36,0.154,43,0.778]],["body/classes/Add.html",[3,0.396,4,0.396,5,0.685,7,0.471,8,0.756,9,0.761,10,0.561,13,0.299,14,0.761,15,0.036,16,0.538,19,0.97,20,0.687,22,0.448,24,0.831,29,0.706,36,0.259,41,0.024,42,0.024,43,1.464,44,0.687,45,1.354,46,1.354,47,0.997,48,1.136,49,1.329,50,1.973,51,1.888,52,1,53,1.978,54,0.448,55,2.585,56,1.684,57,0.448,58,0.396,59,0.396,60,1,61,1.404,62,0.997,63,1.092,64,0.756,65,0.448,66,1.591,67,1.436,68,1.684,69,1.888,70,1.888,71,1.237,72,2.837,73,1.092,74,0.756,75,1.092,76,1.404,77,0.997,78,1.733,79,0.756,80,1.483,81,0.622,82,1.684,83,0.756,84,1.092,85,1.092,86,1.029,87,2.023,88,1.092,89,1.092,90,1.765,91,1.765]],["title/classes/Add-1.html",[36,0.13,43,0.657,92,1.533]],["body/classes/Add-1.html",[3,0.386,4,0.386,5,0.718,7,0.462,8,0.737,9,0.748,10,0.546,13,0.292,14,0.853,15,0.036,16,0.529,19,0.961,20,0.917,22,0.437,24,0.81,29,0.718,36,0.257,41,0.023,42,0.023,43,1.476,44,0.67,47,0.972,48,1.124,50,1.923,52,0.992,54,0.437,55,2.519,56,1.662,57,0.437,58,0.386,59,0.386,60,0.992,61,1.215,62,0.972,63,1.064,64,0.737,65,0.437,67,1.424,68,1.662,69,1.872,70,1.872,71,1.215,73,1.064,74,0.737,75,1.064,76,1.215,77,0.972,78,1.724,79,0.737,80,1.457,81,0.946,82,1.933,83,0.737,84,1.457,85,1.457,86,1.101,93,1.331,94,1.331,95,1.922,96,2.248,97,2.36,98,1.551,99,2.883,100,1.406,101,1.957,102,1.406,103,1.406]],["title/classes/AddFromYaml.html",[36,0.154,79,0.778]],["body/classes/AddFromYaml.html",[3,0.399,4,0.399,5,0.708,7,0.473,8,0.761,9,0.765,10,0.564,13,0.301,14,0.93,15,0.036,16,0.54,19,0.972,20,0.691,22,0.451,24,0.836,29,0.708,36,0.26,41,0.024,42,0.024,43,1.454,44,0.691,45,1.36,46,1.36,47,1.004,48,0.937,49,1.277,51,1.689,52,0.867,53,1.631,54,0.451,56,1.489,57,0.451,58,0.399,59,0.399,60,0.972,61,1.242,62,1.004,63,1.099,64,0.761,65,0.451,66,1.601,67,1.44,68,1.689,69,1.893,70,1.893,71,1.242,72,2.907,73,1.099,74,0.761,75,1.099,76,1.51,77,1.004,78,1.786,79,1.031,80,1.811,81,0.848,82,1.689,83,0.761,84,1.099,85,1.099,86,1.031,87,2.029,88,1.099,89,1.099,90,1.776,91,1.776,104,2.602,105,2.602]],["title/classes/AddFromYaml-1.html",[36,0.13,79,0.657,92,1.533]],["body/classes/AddFromYaml-1.html",[3,0.388,4,0.388,5,0.719,7,0.464,8,0.741,9,0.751,10,0.549,13,0.293,14,0.963,15,0.036,16,0.53,19,0.963,20,0.92,22,0.439,24,0.813,29,0.719,36,0.257,41,0.023,42,0.023,43,1.469,44,0.673,47,0.977,48,0.92,52,0.855,54,0.439,56,1.462,57,0.439,58,0.388,59,0.388,60,0.963,61,0.892,62,0.977,63,1.069,64,0.741,65,0.439,67,1.426,68,1.666,69,1.875,70,1.875,71,1.219,73,1.069,74,0.741,75,1.069,76,1.219,77,0.977,78,1.779,79,1.012,80,1.791,81,1.068,82,1.936,83,0.741,84,1.462,85,1.462,86,1.102,93,1.335,94,1.335,95,1.842,96,2.001,97,1.931,98,1.558,99,2.981,100,1.931,101,1.961,102,1.412,103,1.412,104,2.531,105,2.531]],["title/classes/AddMany.html",[36,0.154,74,0.778]],["body/classes/AddMany.html",[3,0.399,4,0.399,5,0.687,7,0.473,8,0.762,9,0.766,10,0.565,13,0.302,14,0.766,15,0.036,16,0.541,19,0.972,20,0.692,22,0.612,24,0.837,29,0.708,36,0.26,41,0.024,42,0.024,43,1.454,44,0.692,45,1.362,46,1.362,47,1.005,48,0.938,49,1.277,51,1.691,52,0.868,53,1.633,54,0.452,56,1.691,57,0.452,58,0.399,59,0.399,60,0.972,61,1.243,62,1.005,63,1.101,64,0.762,65,0.452,66,1.604,67,1.44,68,1.691,69,1.894,70,1.894,71,1.511,72,2.999,73,1.491,74,1.033,75,1.101,76,1.511,77,1.544,78,1.735,79,0.762,80,1.491,81,0.627,82,1.691,83,0.762,84,1.101,85,1.101,86,1.032,87,2.031,88,1.101,89,1.101,90,1.779,91,1.779,106,2.606,107,2.606]],["title/classes/AddMany-1.html",[36,0.13,74,0.657,92,1.533]],["body/classes/AddMany-1.html",[3,0.389,4,0.389,5,0.719,7,0.465,8,0.743,9,0.752,10,0.551,13,0.294,14,0.857,15,0.036,16,0.531,19,0.964,20,0.922,22,0.601,24,0.816,29,0.719,36,0.258,41,0.023,42,0.023,43,1.469,44,0.675,47,0.98,48,0.922,52,0.857,54,0.44,56,1.668,57,0.44,58,0.389,59,0.389,60,0.964,61,0.895,62,0.98,63,1.073,64,0.743,65,0.44,67,1.428,68,1.668,69,1.877,70,1.877,71,1.495,73,1.465,74,1.015,75,1.073,76,1.391,77,1.524,78,1.727,79,0.743,80,1.465,81,0.95,82,1.937,83,0.743,84,1.465,85,1.465,86,1.103,93,1.338,94,1.338,95,1.844,96,2.004,97,1.935,98,1.563,99,3.017,100,1.417,101,1.964,102,1.417,103,1.417,106,2.539,107,2.539]],["title/interfaces/DestructorScope.html",[0,1.636,108,1.815]],["body/interfaces/DestructorScope.html",[0,1.347,2,1.67,3,0.335,4,0.335,5,0.335,7,0.419,10,0.475,11,1.057,13,0.253,15,0.036,16,0.479,21,1.494,22,0.781,23,1.221,29,0.645,30,1.401,31,1.777,33,1.688,36,0.181,41,0.021,42,0.021,48,0.581,49,0.581,54,0.379,57,0.379,58,0.335,59,0.479,65,0.729,67,0.703,108,2.872,109,2.133,110,1.923,111,1.494,112,2.386,113,4.052,114,2.702,115,2.702,116,1.743,117,2.783,118,2.702,119,2.135,120,2.638,121,2.702,122,3.438,123,2.702,124,3.152,125,3.346,126,2.702,127,2.702,128,2.589,129,1.67,130,1.11,131,1.892,132,2.386,133,1.892,134,1.11,135,2.961,136,2.702,137,1.347,138,3.438,139,2.133,140,2.386,141,1.67,142,1.11,143,1.494,144,1.67,145,1.892,146,1.892,147,1.892,148,1.892,149,1.892,150,1.347,151,3.152,152,1.012,153,1.012,154,1.67,155,1.67,156,1.923,157,1.892,158,1.892,159,1.892,160,1.892,161,1.67,162,1.67,163,1.892,164,1.892,165,1.892,166,1.67,167,1.67,168,1.67,169,1.67,170,1.494,171,1.892,172,1.494,173,2.489,174,1.67,175,1.67,176,2.783,177,2.783,178,2.715,179,2.783,180,2.244,181,1.68,182,1.67,183,2.702,184,1.67,185,1.67,186,3.515,187,1.892,188,1.892,189,2.386,190,2.386,191,1.67,192,1.67,193,1.67,194,2.783,195,1.67,196,2.386,197,1.67,198,1.892,199,1.892,200,1.892,201,1.892,202,1.892,203,1.892]],["title/directives/LinkDirective.html",[204,1.815,205,2.298]],["body/directives/LinkDirective.html",[3,0.247,4,0.247,5,0.247,7,0.408,8,0.472,9,0.742,11,0.429,12,1.902,13,0.52,14,1.002,15,0.036,16,0.599,18,0.993,19,0.35,20,1.173,23,0.9,29,0.466,30,1.072,33,1.427,36,0.094,41,0.017,42,0.017,49,1.227,51,1.652,52,0.742,53,1.153,54,0.749,57,0.432,58,0.382,59,0.662,60,0.35,65,0.707,86,1.013,87,1.264,88,0.681,116,1.39,119,1.264,129,1.231,130,0.819,134,0.819,142,1.545,150,1.873,152,1.408,153,1.153,155,1.231,156,2.277,166,3.685,167,1.231,168,1.231,169,1.231,170,1.101,181,1.446,197,1.231,204,2.337,205,2.154,206,1.231,207,4.413,208,1.613,209,2.491,210,2.491,211,3.669,212,1.613,213,3.423,214,4.714,215,3.38,216,3.38,217,3.003,218,3.669,219,3.003,220,3.003,221,3.003,222,3.003,223,3.003,224,4.46,225,2.323,226,3.423,227,1.945,228,3.003,229,3.003,230,4.714,231,3.003,232,1.231,233,5.32,234,3.003,235,4.126,236,3.669,237,3.003,238,3.669,239,2.337,240,3.003,241,3.003,242,3.003,243,2.491,244,3.003,245,3.003,246,3.003,247,3.669,248,1.613,249,1.945,250,1.945,251,1.945,252,1.945,253,3.003,254,3.003,255,1.945,256,1.945,257,1.945,258,3.423,259,1.613,260,2.491,261,1.231,262,1.945,263,2.154,264,2.154,265,1.945,266,1.395,267,1.231,268,1.945,269,1.945,270,3.003,271,2.842,272,1.613,273,1.613,274,1.945,275,4.126,276,1.945,277,1.945,278,1.945,279,1.945,280,1.945,281,3.003,282,1.945,283,1.945,284,0.993,285,1.945,286,1.945,287,1.945,288,3.003,289,1.945,290,1.945,291,1.945,292,4.126,293,1.945,294,1.945,295,1.231,296,3.003,297,1.945,298,1.945,299,1.945,300,4.126,301,1.945,302,1.945,303,1.945,304,1.945,305,3.003,306,3.003,307,3.003,308,3.003,309,3.003,310,3.003,311,2.491,312,1.945,313,1.945,314,1.945,315,1.945,316,1.945,317,3.669,318,3.003,319,3.003,320,1.945,321,1.945,322,1.945,323,1.945,324,1.613,325,1.945,326,1.945,327,1.945,328,1.945,329,1.945,330,1.945,331,1.945,332,1.945,333,1.945]],["title/classes/LinkRegistrySelectors.html",[36,0.154,266,2.298]],["body/classes/LinkRegistrySelectors.html",[3,0.43,4,0.43,5,0.43,7,0.497,11,0.746,13,0.573,15,0.036,16,0.677,18,2.557,19,0.609,29,0.677,30,1.464,31,1.567,33,1.431,36,0.163,40,3.822,41,0.025,42,0.025,44,0.746,45,1.431,46,1.431,49,1.327,51,1.567,52,1.06,53,1.299,54,0.487,57,0.487,58,0.43,59,0.568,60,1.024,64,0.821,65,0.643,116,2.07,152,1.299,153,1.299,180,1.728,181,1.867,239,1.917,266,3.207,267,2.143,271,1.728,284,2.964,334,2.427,335,3.71,336,2.72,337,3.71,338,3.974,339,3.385,340,3.385,341,3.71,342,3.71,343,3.592,344,3.592,345,2.143,346,1.728,347,2.427,348,2.807,349,3.385,350,3.385,351,2.427,352,2.143,353,2.807,354,2.807,355,1.917,356,2.807,357,3.71,358,2.427]],["title/injectables/LinkRegistryState.html",[347,2.298,359,2.029]],["body/injectables/LinkRegistryState.html",[3,0.245,4,0.245,5,0.522,7,0.522,9,0.954,11,0.424,13,0.486,14,0.656,15,0.036,16,0.66,19,0.536,20,0.804,22,0.59,29,0.706,30,1.431,31,0.675,33,0.616,35,1.09,36,0.093,41,0.017,42,0.017,43,1.363,45,1.503,46,1.503,48,0.657,49,1.169,51,1.044,52,0.972,53,0.739,54,0.638,57,0.638,58,0.597,59,0.622,60,0.934,64,0.467,65,0.524,71,0.871,72,1.521,74,1.188,76,1.578,78,1.431,79,0.996,81,0.819,83,0.996,86,0.819,87,2.308,88,1.438,89,1.716,100,0.891,102,1.379,116,1.379,119,2.061,130,0.81,134,0.81,135,2.266,137,0.983,153,0.739,178,1.09,181,1.645,209,1.597,215,1.381,216,1.381,225,1.219,239,2.514,258,3.404,259,1.597,264,2.137,267,1.219,271,2.266,272,2.472,273,1.597,284,2.868,295,3.36,311,1.597,336,0.983,338,1.381,343,1.381,344,2.137,345,1.219,346,0.983,347,2.137,352,1.219,355,1.09,358,1.381,359,1.887,360,1.381,361,1.381,362,2.472,363,2.472,364,2.98,365,2.472,366,2.472,367,2.472,368,4.104,369,2.472,370,4.748,371,2.472,372,1.925,373,4.4,374,2.472,375,2.472,376,1.925,377,2.472,378,3.682,379,2.472,380,1.925,381,2.472,382,1.597,383,2.472,384,2.472,385,2.137,386,2.472,387,2.472,388,2.472,389,1.925,390,3.024,391,2.137,392,2.472,393,2.98,394,2.98,395,1.925,396,2.98,397,4.439,398,1.597,399,1.597,400,2.98,401,1.597,402,1.597,403,1.597,404,2.472,405,1.597,406,1.597,407,1.597,408,2.472,409,1.381,410,1.597,411,1.597,412,2.137,413,1.925,414,1.925,415,2.472,416,1.597,417,1.597,418,1.925,419,1.597,420,1.597,421,1.597,422,1.597,423,1.09,424,1.597,425,1.597,426,1.597,427,1.925,428,1.925,429,1.597,430,2.472,431,1.925,432,2.98,433,1.925,434,2.98,435,1.925,436,1.597,437,1.925,438,1.925,439,2.98,440,2.472,441,1.597,442,1.597,443,1.925,444,1.925,445,1.925,446,1.925,447,1.925,448,1.925,449,1.925,450,1.925,451,1.925]],["title/classes/LoadFromYaml.html",[36,0.154,83,0.778]],["body/classes/LoadFromYaml.html",[3,0.396,4,0.396,5,0.735,7,0.471,8,0.756,9,0.761,10,0.561,13,0.299,14,0.927,15,0.036,16,0.538,19,0.97,20,0.687,22,0.448,24,0.831,29,0.706,36,0.259,41,0.024,42,0.024,43,1.452,44,0.687,45,1.354,46,1.354,47,0.997,48,0.933,49,1.275,51,1.684,52,0.864,53,1.624,54,0.448,56,1.483,57,0.448,58,0.396,59,0.396,60,0.97,61,1.237,62,0.997,63,1.092,64,0.756,65,0.448,66,1.591,67,1.436,68,1.684,69,1.888,70,1.888,71,1.237,72,2.953,73,1.092,74,0.756,75,1.092,76,1.404,77,0.997,78,1.774,79,0.756,80,1.483,81,0.622,82,1.948,83,1.027,84,1.092,85,1.483,86,1.109,87,2.023,88,1.092,89,1.092,90,1.765,91,1.765,452,2.585,453,2.585]],["title/classes/LoadFromYaml-1.html",[36,0.13,83,0.657,92,1.533]],["body/classes/LoadFromYaml-1.html",[3,0.386,4,0.386,5,0.75,7,0.462,8,0.737,9,0.748,10,0.546,13,0.292,14,0.961,15,0.036,16,0.529,19,0.961,20,0.917,22,0.437,24,0.81,29,0.718,36,0.257,41,0.023,42,0.023,43,1.467,44,0.67,47,0.972,48,0.917,52,0.853,54,0.437,56,1.457,57,0.437,58,0.386,59,0.386,60,0.961,61,0.888,62,0.972,63,1.064,64,0.737,65,0.437,67,1.424,68,1.662,69,1.872,70,1.872,71,1.215,73,1.064,74,0.737,75,1.064,76,1.215,77,0.972,78,1.767,79,0.737,80,1.457,81,0.946,82,2.044,83,1.009,84,1.457,85,1.662,86,1.147,93,1.331,94,1.331,95,1.84,96,1.996,97,1.924,98,1.551,99,2.978,100,1.406,101,1.957,102,1.406,103,1.406,452,2.519,453,2.519]],["title/classes/LoadMarkdown.html",[36,0.154,103,1.483]],["body/classes/LoadMarkdown.html",[3,0.381,4,0.381,5,0.748,7,0.458,8,0.728,9,0.742,10,0.54,13,0.288,14,0.957,15,0.036,16,0.524,19,0.957,20,0.909,22,0.431,24,0.799,29,0.715,36,0.256,41,0.023,42,0.023,43,1.465,44,0.661,47,0.96,48,0.909,50,1.899,52,0.848,54,0.431,56,1.445,57,0.431,58,0.381,59,0.381,60,1.013,61,0.877,62,0.96,63,1.051,64,0.728,65,0.431,67,1.417,68,1.651,69,1.863,70,1.863,71,1.205,73,1.051,74,0.728,75,1.051,76,1.205,77,0.96,78,1.72,79,0.728,80,1.445,81,1.012,82,2.038,83,0.728,84,1.445,85,1.651,86,1.161,93,1.32,94,1.32,95,1.902,96,2.238,97,1.908,98,1.531,99,2.873,100,1.388,101,2.16,102,1.908,103,1.908,454,2.999]],["title/classes/Navigate.html",[36,0.154,87,1.349]],["body/classes/Navigate.html",[3,0.399,4,0.399,5,0.686,7,0.473,8,0.761,9,0.765,10,0.564,13,0.301,14,0.765,15,0.036,16,0.54,19,0.972,20,0.691,22,0.451,24,0.836,29,0.708,36,0.26,41,0.024,42,0.024,43,1.425,44,0.691,45,1.36,46,1.36,47,1.004,48,0.937,49,1.321,50,1.986,51,1.893,52,0.867,53,1.631,54,0.451,56,1.489,57,0.451,58,0.399,59,0.399,60,1.025,61,1.409,62,1.004,63,1.099,64,0.761,65,0.451,66,1.601,67,1.44,68,1.689,69,1.893,70,1.893,71,1.242,72,2.843,73,1.099,74,0.761,75,1.099,76,1.409,77,1.004,78,1.735,79,0.761,80,1.489,81,0.626,82,1.689,83,0.761,84,1.099,85,1.099,86,1.078,87,2.344,88,1.489,89,1.489,90,1.776,91,2.407,455,3.136]],["title/components/OnDestroyHostComponent.html",[128,1.636,161,2.029]],["body/components/OnDestroyHostComponent.html",[0,1.292,3,0.322,4,0.322,5,0.322,7,0.281,10,0.773,11,0.946,15,0.036,16,0.465,21,1.433,22,0.789,23,1.692,29,0.634,30,1.255,31,1.648,33,1.664,36,0.176,41,0.021,42,0.021,48,0.558,49,0.558,54,0.364,58,0.546,59,0.322,65,0.717,67,0.674,108,2.664,109,2.071,110,1.867,111,1.433,112,1.602,113,3.729,114,1.815,115,1.815,117,1.602,118,1.815,119,1.808,121,1.815,122,2.622,123,1.815,124,2.622,125,3.292,126,1.815,127,1.815,128,2.802,129,1.602,130,1.065,131,1.815,132,2.316,133,1.815,134,1.065,135,2.936,136,2.622,137,1.292,138,3.373,139,2.071,140,2.316,141,1.602,142,1.065,143,1.433,144,1.602,145,1.815,146,1.815,147,1.815,148,1.815,149,1.815,150,1.867,151,3.937,152,1.805,153,1.648,154,2.719,155,1.602,156,1.867,157,1.815,158,3.079,159,3.079,160,3.079,161,2.979,162,2.316,163,2.622,164,2.622,165,3.079,166,2.979,167,1.602,168,1.602,169,1.602,170,1.433,171,1.815,172,1.433,173,2.431,174,1.602,175,1.602,176,2.719,177,2.719,178,2.664,179,2.719,180,2.192,181,1.648,182,1.602,183,2.622,184,1.602,185,1.602,186,3.476,187,1.815,188,1.815,189,2.316,190,2.316,191,1.602,192,1.602,193,1.602,194,2.719,195,1.602,196,2.316,197,1.602,198,1.815,199,1.815,200,1.815,201,1.815,202,1.815,203,1.815,204,1.433,205,1.815,206,1.602,212,2.099,213,2.099,324,2.099,456,2.622,457,2.53,458,2.53,459,3.657,460,4.704,461,2.53,462,2.53]],["title/classes/ResourceRegistrySelectors.html",[36,0.154,463,2.658]],["body/classes/ResourceRegistrySelectors.html",[3,0.28,4,0.28,5,0.28,7,0.55,11,0.486,13,0.567,14,0.595,15,0.036,16,0.56,18,1.126,19,0.713,29,0.671,30,1.631,31,1.981,33,1.728,35,1.249,36,0.106,40,4.204,41,0.019,42,0.019,44,0.486,52,0.989,54,0.678,57,0.678,58,0.599,59,0.629,60,1.055,64,0.535,65,0.57,81,1.141,86,0.988,93,1.584,94,1.584,95,1.76,96,1.853,97,1.021,101,1.9,116,1.529,152,0.847,153,0.847,180,1.126,181,1.799,225,1.397,239,2.67,271,1.126,284,3.097,334,1.582,335,2.741,336,3.086,337,2.741,341,2.741,342,4.56,344,3.157,345,1.397,346,1.126,348,1.829,351,1.582,352,2.093,353,1.829,354,1.829,355,2.245,356,1.829,357,2.741,358,2.37,423,3.113,429,1.829,430,2.741,463,2.741,464,2.741,465,3.305,466,3.305,467,4.232,468,4.715,469,2.205,470,4.478,471,3.305,472,2.205,473,2.205,474,3.288,475,3.305,476,2.205,477,3.305,478,2.205,479,1.582,480,1.582,481,4.715,482,4.715,483,1.829,484,2.205,485,2.205,486,2.205,487,2.205,488,2.205,489,2.205]],["title/injectables/ResourceRegistryState.html",[359,2.029,480,2.298]],["body/injectables/ResourceRegistryState.html",[3,0.276,4,0.276,5,0.625,7,0.547,9,1.014,11,0.478,13,0.473,14,0.706,15,0.036,16,0.649,19,0.391,20,0.478,22,0.628,25,2.342,29,0.707,30,1.492,33,1.045,36,0.104,41,0.018,42,0.018,43,1.396,48,0.72,52,0.967,54,0.673,57,0.673,58,0.625,59,0.649,60,0.843,64,0.527,65,0.47,71,0.954,74,1.239,76,1.625,78,1.492,79,1.06,81,0.872,83,1.06,86,0.935,89,1.724,93,1.575,94,1.575,95,1.257,99,1.667,100,1.004,101,1.676,102,2.021,103,2.277,116,1.511,119,2.071,130,0.914,134,0.914,135,2.744,137,1.108,181,1.641,239,2.652,271,1.108,284,2.937,295,3.468,346,1.108,359,2.068,360,1.557,361,1.557,362,2.709,363,2.709,365,2.709,366,2.709,367,2.709,369,2.709,371,2.709,373,4.542,374,2.709,375,2.709,377,2.709,378,3.885,379,2.709,381,2.709,382,1.8,383,2.709,384,2.709,385,2.342,386,2.709,387,2.709,388,2.709,390,3.256,391,3.132,392,3.623,398,1.8,399,1.8,401,1.8,402,1.8,403,1.8,407,1.8,408,2.709,409,1.557,410,1.8,411,1.8,415,2.709,416,1.8,417,1.8,419,1.8,420,1.8,421,1.8,422,2.709,423,1.849,424,1.8,425,1.8,426,1.8,464,1.8,467,1.557,479,1.557,480,2.342,483,1.8,490,3.266,491,4.85,492,2.171,493,2.171,494,2.171,495,3.266,496,3.266,497,2.171,498,3.266,499,2.171,500,1.8,501,2.171,502,2.171,503,1.8,504,2.171,505,2.171,506,2.171,507,2.171]],["title/classes/ScopedDestroySubject.html",[36,0.154,144,2.029]],["body/classes/ScopedDestroySubject.html",[0,1.339,3,0.333,4,0.333,5,0.333,7,0.417,10,0.675,11,0.966,13,0.252,15,0.036,16,0.477,21,2.125,22,0.811,23,1.214,29,0.643,30,1.281,31,1.773,33,1.685,36,0.18,41,0.021,42,0.021,44,0.578,48,0.827,49,0.827,54,0.377,57,0.377,58,0.333,59,0.477,65,0.728,67,1,108,2.981,109,2.125,110,1.916,111,1.486,112,1.661,113,4.047,114,1.881,115,1.881,117,1.661,118,1.881,119,2.013,121,1.881,122,2.691,123,1.881,124,3.142,125,3.39,126,1.881,127,1.881,128,2.583,129,1.661,130,1.104,131,1.881,132,2.377,133,1.881,134,1.104,135,2.958,136,3.142,137,1.339,138,3.975,139,2.708,140,3.029,141,2.377,142,1.58,143,2.125,144,2.377,145,2.691,146,1.881,147,1.881,148,1.881,149,1.881,150,1.339,151,3.142,152,1.007,153,1.007,154,1.661,155,1.661,156,1.916,157,1.881,158,1.881,159,1.881,160,1.881,161,1.661,162,1.661,163,1.881,164,1.881,165,1.881,166,1.661,167,1.661,168,1.661,169,1.661,170,1.486,171,1.881,172,1.486,173,2.481,174,1.661,175,1.661,176,2.775,177,2.775,178,2.708,179,2.775,180,2.237,181,1.676,182,1.661,183,2.691,184,1.661,185,1.661,186,3.51,187,1.881,188,1.881,189,2.377,190,2.377,191,1.661,192,1.661,193,1.661,194,2.775,195,1.661,196,2.377,197,1.661,198,1.881,199,1.881,200,1.881,201,1.881,202,1.881,203,1.881,508,2.623]],["title/classes/SnapshotObserver.html",[36,0.154,509,2.658]],["body/classes/SnapshotObserver.html",[3,0.287,4,0.287,5,0.287,7,0.495,10,0.406,11,0.498,13,0.457,15,0.036,16,0.605,19,0.723,20,0.498,22,0.781,23,1.556,28,2.412,29,0.635,30,1.587,31,1.75,33,1.286,36,0.109,41,0.019,42,0.019,44,0.498,54,0.685,57,0.578,58,0.511,59,0.605,65,0.718,81,0.671,110,1.152,116,1.556,119,2.102,130,0.95,134,0.95,137,1.152,139,1.904,142,2.569,143,2.522,150,1.152,152,2.04,153,0.866,154,2.129,156,2.052,170,2.276,181,1.178,206,2.129,210,2.789,232,2.82,261,2.129,271,2.052,336,2.273,345,1.429,346,1.152,351,2.412,355,3.076,385,3.896,412,2.412,436,3.333,456,2.412,509,3.694,510,3.581,511,3.581,512,1.619,513,4.993,514,3.363,515,4.506,516,3.95,517,3.363,518,3.363,519,2.257,520,4.453,521,2.257,522,4.453,523,3.694,524,3.363,525,3.363,526,3.694,527,4.453,528,2.257,529,4.993,530,2.789,531,4.142,532,3.363,533,2.257,534,4.019,535,2.257,536,3.363,537,3.363,538,2.257,539,2.789,540,3.694,541,1.872,542,2.789,543,1.872,544,3.363,545,2.257,546,2.257,547,3.363,548,2.257,549,2.257,550,3.363,551,3.363,552,4.019,553,2.257,554,2.257,555,1.619,556,1.872,557,2.882,558,4.453,559,2.789,560,2.789,561,2.789,562,2.789,563,2.789,564,2.789,565,2.789,566,2.257,567,2.257,568,2.257,569,2.257,570,2.257,571,2.257,572,2.257,573,2.412,574,3.333,575,2.789,576,1.872,577,1.872,578,2.789,579,2.257,580,2.257]],["title/dependencies.html",[581,2.245,582,3.183]],["body/dependencies.html",[15,0.036,41,0.031,42,0.031,134,1.983,153,2.109,248,3.907,346,2.405,582,4.557,583,4.71,584,4.71,585,4.71,586,5.494,587,4.71,588,4.71,589,4.71]],["title/miscellaneous/enumerations.html",[590,1.14,591,3.183]],["body/miscellaneous/enumerations.html",[11,0.987,15,0.035,41,0.03,42,0.03,45,1.434,46,1.434,49,0.987,86,1.064,88,1.869,89,1.869,93,1.434,94,1.434,95,1.434,101,2.047,142,2.536,267,3.378,423,3.021,479,3.825,590,1.886,591,3.716,592,2.837,593,3.734,594,2.837,595,4.424,596,4.48,597,4.48,598,4.48]],["title/miscellaneous/functions.html",[590,1.14,599,3.183]],["body/miscellaneous/functions.html",[1,2.34,6,1.798,7,0.618,8,0.792,9,1.052,10,0.587,11,0.478,13,0.587,14,1.044,15,0.035,17,2.706,21,1.228,22,0.755,23,1.815,24,0.87,25,1.555,26,2.706,27,3.254,28,3.357,30,1.695,31,1.788,32,1.798,33,0.694,35,1.228,36,0.104,37,1.798,38,1.798,41,0.018,42,0.018,45,0.694,46,0.694,49,0.478,51,0.76,57,0.81,58,0.716,59,0.724,60,0.587,61,1.146,62,1.044,81,0.433,93,0.694,94,0.694,95,1.044,96,0.913,108,2.472,109,1.228,110,1.107,111,2.651,119,1.374,125,2.89,128,1.107,130,0.913,132,2.484,135,3.004,139,1.848,140,1.373,141,2.066,142,1.837,143,1.848,152,1.888,172,1.228,173,1.848,176,2.484,177,2.484,178,2.472,179,2.484,180,2.003,181,1.53,182,1.373,184,1.373,185,1.373,186,1.373,189,2.484,190,2.066,191,1.373,192,1.373,193,1.373,194,1.373,195,1.373,196,1.373,204,1.228,206,2.484,232,2.764,243,1.798,260,2.706,261,2.066,263,2.34,336,2.228,355,1.228,391,2.34,409,1.555,412,2.34,440,1.798,456,2.814,503,3.254,510,1.555,511,1.555,512,2.814,515,2.706,516,3.254,523,2.706,526,2.706,530,1.798,531,2.706,540,3.254,541,1.798,542,3.254,543,1.798,555,2.34,557,3.13,559,3.621,560,3.254,561,2.706,562,2.706,563,2.706,564,2.706,565,1.798,573,2.814,574,3.621,575,2.706,576,1.798,577,1.798,578,1.798,590,0.913,592,1.373,593,2.764,594,1.373,599,2.706,600,3.263,601,3.263,602,2.706,603,3.254,604,3.263,605,1.798,606,3.263,607,3.621,608,3.263,609,3.263,610,2.706,611,1.798,612,2.168,613,2.168,614,3.254,615,2.168,616,2.168,617,2.168,618,2.168,619,1.798,620,1.798,621,2.168,622,2.168,623,2.168,624,2.168,625,2.168,626,2.168,627,1.798,628,2.168,629,2.168,630,2.168,631,2.168,632,2.168,633,2.168,634,2.168,635,2.168,636,2.168,637,2.168,638,2.706,639,2.168,640,2.168,641,2.168,642,3.263,643,2.168,644,2.168,645,3.263,646,2.168,647,3.263,648,2.168,649,2.168,650,2.168,651,2.168,652,3.263,653,2.168,654,2.168,655,2.168,656,2.168,657,2.168,658,2.168,659,2.168,660,2.168,661,2.168,662,2.168,663,2.168,664,2.168,665,2.168,666,2.168,667,3.263,668,2.168,669,2.168,670,2.168,671,2.168]],["title/index.html",[11,0.597,672,2.707,673,2.707]],["body/index.html",[15,0.031,41,0.031,42,0.031,674,5.565,675,4.816,676,4.816,677,5.565,678,4.816,679,5.565,680,5.565,681,4.816,682,4.816,683,4.816]],["title/modules.html",[684,3.577]],["body/modules.html",[15,0.032,41,0.032,42,0.032,684,4.129]],["title/overview.html",[685,3.577]],["body/overview.html",[2,3.073,15,0.031,41,0.031,42,0.031,44,1.07,92,3.165,128,2.477,204,2.748,360,3.48,685,4.025,686,5.589,687,4.852]],["title/properties.html",[12,2.43,581,2.245]],["body/properties.html",[12,3.128,15,0.033,41,0.032,42,0.032,688,4.94,689,4.94]],["title/miscellaneous/typealiases.html",[590,1.14,690,3.838]],["body/miscellaneous/typealiases.html",[2,2.205,9,0.914,10,0.627,11,0.768,13,0.581,15,0.028,18,1.778,30,1.018,31,2.078,35,2.581,41,0.026,42,0.026,45,1.459,46,1.459,49,1.233,51,1.597,52,1.006,53,1.749,61,1.332,81,0.909,88,1.22,89,1.22,93,1.459,94,1.459,95,1.725,96,1.918,97,2.109,152,1.337,162,2.205,232,2.205,261,2.205,264,3.268,284,2.593,295,2.886,334,3.643,336,2.593,338,3.268,343,3.268,352,2.886,361,3.268,370,3.78,404,3.78,406,3.78,467,3.268,470,3.78,474,3.78,491,3.78,510,2.498,511,2.498,512,3.268,539,2.889,555,2.498,556,2.889,557,3.268,573,2.498,590,1.466,592,3.702,593,3.885,594,3.633,605,2.889,610,2.889,614,3.78,619,2.889,620,2.889,627,3.78,638,2.889,691,3.483,692,3.483,693,3.483,694,5.929,695,4.557,696,4.557,697,3.483,698,3.483,699,3.483]],["title/miscellaneous/variables.html",[590,1.14,700,3.183]],["body/miscellaneous/variables.html",[8,1.041,9,1.028,11,0.945,13,0.572,14,0.771,15,0.035,18,2.478,22,0.617,24,1.143,41,0.024,42,0.024,45,1.372,46,1.372,47,1.663,49,1.145,52,0.771,60,0.572,66,1.622,77,1.553,86,0.856,88,1.114,89,1.114,93,1.372,94,1.372,95,1.017,98,1.622,101,1.22,109,1.8,110,1.622,111,2.428,112,3.073,117,2.012,125,1.8,142,2.479,150,1.622,156,2.478,172,1.8,173,1.8,174,2.715,175,2.012,207,2.636,208,3.557,215,3.075,216,3.075,225,3.729,226,3.557,263,2.279,405,3.557,423,1.8,441,2.636,442,3.557,500,3.557,590,1.338,592,3.29,593,3.54,594,2.715,595,2.636,602,2.636,603,3.557,607,2.636,611,2.636,700,2.636,701,4.288,702,3.178,703,4.853,704,4.853,705,3.178,706,5.59,707,3.178,708,5.714,709,3.178,710,3.178,711,3.178,712,3.178,713,3.178,714,3.178,715,3.178,716,3.178,717,3.178,718,3.178,719,3.178,720,4.853,721,3.178,722,3.178,723,3.178,724,3.178,725,4.288,726,4.288,727,3.178,728,3.178,729,3.178,730,4.288,731,3.178,732,3.178,733,3.178,734,4.853,735,3.178,736,3.178,737,3.178,738,3.178,739,3.178,740,3.178]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":197,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["0.0.1",{"_index":689,"title":{},"body":{"properties.html":{}}}],["1",{"_index":92,"title":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"overview.html":{}}}],["1165545544",{"_index":668,"title":{},"body":{"miscellaneous/functions.html":{}}}],["1199063426",{"_index":669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["14",{"_index":687,"title":{},"body":{"overview.html":{}}}],["15.1.0",{"_index":586,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":686,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":584,"title":{},"body":{"dependencies.html":{}}}],["3.7.6",{"_index":587,"title":{},"body":{"dependencies.html":{}}}],["accepts",{"_index":692,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('load",{"_index":84,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["action('navigate",{"_index":90,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":375,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":379,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":371,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadfromyaml",{"_index":388,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":496,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(navigate",{"_index":394,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actiongroup",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{}}}],["actiongroup('linkregistry",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["actiongroup('resourceregistry",{"_index":98,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actions/actions",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["actiontype",{"_index":625,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actiontyperegistry",{"_index":701,"title":{},"body":{"miscellaneous/variables.html":{}}}],["activate",{"_index":274,"title":{},"body":{"directives/LinkDirective.html":{}}}],["activatedroute",{"_index":257,"title":{},"body":{"directives/LinkDirective.html":{}}}],["actual_component",{"_index":462,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{},"classes/Add-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":505,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":392,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":79,"title":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":426,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":597,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addmany",{"_index":74,"title":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":369,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":419,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":365,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":374,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["addyaml",{"_index":366,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":377,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["aliases",{"_index":691,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["altkey",{"_index":308,"title":{},"body":{"directives/LinkDirective.html":{}}}],["anchor",{"_index":291,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular",{"_index":272,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["angular/common",{"_index":248,"title":{},"body":{"directives/LinkDirective.html":{},"dependencies.html":{}}}],["angular/common/http",{"_index":399,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":134,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["angular/platform",{"_index":255,"title":{},"body":{"directives/LinkDirective.html":{}}}],["angular/router",{"_index":259,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["anytext",{"_index":465,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":466,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["area'].includes(this.tagname",{"_index":293,"title":{},"body":{"directives/LinkDirective.html":{}}}],["args",{"_index":558,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["argument",{"_index":556,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":232,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asserts",{"_index":613,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype",{"_index":601,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype(type",{"_index":612,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associated",{"_index":179,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["async",{"_index":368,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["attr.href",{"_index":220,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.rel",{"_index":221,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attr.target",{"_index":222,"title":{},"body":{"directives/LinkDirective.html":{}}}],["attribute",{"_index":230,"title":{},"body":{"directives/LinkDirective.html":{}}}],["automatic",{"_index":622,"title":{},"body":{"miscellaneous/functions.html":{}}}],["automatically",{"_index":139,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["available",{"_index":564,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["await",{"_index":432,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":243,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["before",{"_index":639,"title":{},"body":{"miscellaneous/functions.html":{}}}],["block",{"_index":160,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["boolean",{"_index":241,"title":{},"body":{"directives/LinkDirective.html":{}}}],["bound",{"_index":575,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["boundargs",{"_index":574,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["brand('linkid",{"_index":728,"title":{},"body":{"miscellaneous/variables.html":{}}}],["brand('resourceid",{"_index":732,"title":{},"body":{"miscellaneous/variables.html":{}}}],["break",{"_index":434,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["browser",{"_index":256,"title":{},"body":{"directives/LinkDirective.html":{}}}],["build",{"_index":633,"title":{},"body":{"miscellaneous/functions.html":{}}}],["built",{"_index":596,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["button",{"_index":305,"title":{},"body":{"directives/LinkDirective.html":{}}}],["call",{"_index":624,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":122,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["callbacks",{"_index":114,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["called",{"_index":560,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["care",{"_index":659,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":430,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["caveats",{"_index":636,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cb",{"_index":127,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["cdk",{"_index":674,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":522,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["change",{"_index":523,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["changedetectorref",{"_index":520,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["changes",{"_index":300,"title":{},"body":{"directives/LinkDirective.html":{}}}],["changes['linkid'].currentvalue",{"_index":303,"title":{},"body":{"directives/LinkDirective.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"overview.html":{}}}],["cleanup",{"_index":113,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["click",{"_index":224,"title":{},"body":{"directives/LinkDirective.html":{}}}],["commands",{"_index":441,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["comment",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":143,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["completes",{"_index":391,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["completion",{"_index":530,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["complex",{"_index":634,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":128,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["component/directive/etc",{"_index":670,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component_template",{"_index":461,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["components",{"_index":456,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["constructor(cdr",{"_index":519,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(entries",{"_index":106,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["constructor(id",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(private",{"_index":548,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(readonly",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["constructor(scope",{"_index":145,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["constructor(url",{"_index":452,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["constructor(yaml",{"_index":104,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["container",{"_index":190,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["containing",{"_index":650,"title":{},"body":{"miscellaneous/functions.html":{}}}],["contains",{"_index":301,"title":{},"body":{"directives/LinkDirective.html":{}}}],["content",{"_index":498,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["context",{"_index":295,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["control",{"_index":631,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlling",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["createa",{"_index":616,"title":{},"body":{"miscellaneous/functions.html":{}}}],["created",{"_index":184,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["createlinkid",{"_index":263,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["createlinkid(id",{"_index":615,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid",{"_index":604,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid(id",{"_index":618,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["ctrlkey",{"_index":306,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ctx",{"_index":373,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["ctx.getstate()[id",{"_index":428,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":416,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["current",{"_index":342,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["data",{"_index":81,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data$.subscribe(observer",{"_index":571,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["decorators",{"_index":239,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["default",{"_index":225,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":407,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["defined",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["dependencies",{"_index":582,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":154,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["destroy.ts",{"_index":111,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroy.ts:10",{"_index":120,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["destroy.ts:17",{"_index":508,"title":{},"body":{"classes/ScopedDestroySubject.html":{}}}],["destroy.ts:39",{"_index":457,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["destroy/on",{"_index":110,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":652,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destruction",{"_index":126,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["destructorscope",{"_index":108,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["detection",{"_index":563,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["detector",{"_index":524,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["directive",{"_index":204,"title":{"directives/LinkDirective.html":{}},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["directives",{"_index":206,"title":{},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["discriminated",{"_index":697,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["discriminatedunion('type",{"_index":733,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":260,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/functions.html":{}}}],["dispatch(actiontype",{"_index":620,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["dispatch(linkregistryactions.navigate",{"_index":287,"title":{},"body":{"directives/LinkDirective.html":{}}}],["dispatcher",{"_index":627,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["dispatches",{"_index":628,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatching",{"_index":623,"title":{},"body":{"miscellaneous/functions.html":{}}}],["display",{"_index":159,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["dom",{"_index":165,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["domsanitizer",{"_index":254,"title":{},"body":{"directives/LinkDirective.html":{}}}],["don't",{"_index":653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["during",{"_index":124,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["el",{"_index":167,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["el?.remove",{"_index":171,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["element",{"_index":166,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["elementref",{"_index":129,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["emit",{"_index":141,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["emits",{"_index":531,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":527,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["empty",{"_index":150,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["empty_link_id",{"_index":226,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["entries",{"_index":76,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["entry",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["entry.extras",{"_index":446,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.markdown",{"_index":484,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.rel",{"_index":451,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.target",{"_index":450,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["entry.text",{"_index":486,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":358,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["enumerations",{"_index":591,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":534,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":385,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["error(`cannot",{"_index":437,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["error(err",{"_index":532,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":536,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":546,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["event",{"_index":233,"title":{},"body":{"directives/LinkDirective.html":{}}}],["excluding",{"_index":577,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["execute",{"_index":683,"title":{},"body":{"index.html":{}}}],["existing",{"_index":178,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["explicitly",{"_index":651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["external",{"_index":89,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["external_link_schema",{"_index":703,"title":{},"body":{"miscellaneous/variables.html":{}}}],["externallinkentry",{"_index":404,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["extras",{"_index":442,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["failure",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":545,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["filename",{"_index":378,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["find",{"_index":177,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject",{"_index":606,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject(component.hostview",{"_index":203,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(inject(ngmoduleref",{"_index":201,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(scope",{"_index":185,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubject",{"_index":608,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubject(scope",{"_index":182,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubjectinview",{"_index":609,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubjectinview(ref",{"_index":196,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":180,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["fragment",{"_index":714,"title":{},"body":{"miscellaneous/variables.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":599,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":676,"title":{},"body":{"index.html":{}}}],["get()(...boundargs",{"_index":580,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["get(url",{"_index":421,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":354,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["gethref(link",{"_index":327,"title":{},"body":{"directives/LinkDirective.html":{}}}],["gets",{"_index":351,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getting",{"_index":672,"title":{"index.html":{}},"body":{}}],["global",{"_index":490,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["globally",{"_index":364,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["guarantees",{"_index":637,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":699,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":529,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["haserror",{"_index":544,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["hook",{"_index":643,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":151,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["hostbinding",{"_index":249,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.href",{"_index":244,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.rel",{"_index":245,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbinding('attr.target",{"_index":246,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostbindings",{"_index":219,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener",{"_index":250,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlistener('click",{"_index":240,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hostlisteners",{"_index":223,"title":{},"body":{"directives/LinkDirective.html":{}}}],["hra",{"_index":153,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["hralink",{"_index":213,"title":{},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{}}}],["href",{"_index":214,"title":{},"body":{"directives/LinkDirective.html":{}}}],["html",{"_index":459,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["htmlelement",{"_index":169,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["http",{"_index":408,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":398,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["https://github.com/angular/angular/issues/10185",{"_index":665,"title":{},"body":{"miscellaneous/functions.html":{}}}],["https://github.com/angular/angular/issues/10185#issuecomment",{"_index":667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["identifier",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["ids",{"_index":617,"title":{},"body":{"miscellaneous/functions.html":{}}}],["immediately",{"_index":163,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["implements",{"_index":210,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["important",{"_index":655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["improved",{"_index":384,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["inject",{"_index":130,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["inject(activatedroute",{"_index":276,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(changedetectorref",{"_index":567,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(domsanitizer",{"_index":282,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(elementref).nativeelement",{"_index":168,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["inject(httpclient",{"_index":411,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["inject(locationstrategy",{"_index":279,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inject(ngzone",{"_index":414,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["inject(router",{"_index":273,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["inject(store",{"_index":566,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(viewcontainerref",{"_index":200,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["injectable",{"_index":359,"title":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["injectables",{"_index":360,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["injected",{"_index":629,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injection",{"_index":635,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectondestroy",{"_index":542,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["injectors/.../dispatch.ts",{"_index":605,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/.../on",{"_index":607,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":610,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/dispatch/dispatch.ts",{"_index":619,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/on",{"_index":109,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select",{"_index":510,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injects",{"_index":412,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["input",{"_index":251,"title":{},"body":{"directives/LinkDirective.html":{}}}],["input('hralink",{"_index":269,"title":{},"body":{"directives/LinkDirective.html":{}}}],["inputs",{"_index":218,"title":{},"body":{"directives/LinkDirective.html":{}}}],["instance",{"_index":162,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/typealiases.html":{}}}],["instances",{"_index":626,"title":{},"body":{"miscellaneous/functions.html":{}}}],["intentionally",{"_index":554,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["internal",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["internal_link_schema",{"_index":704,"title":{},"body":{"miscellaneous/variables.html":{}}}],["internallinkentry",{"_index":264,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["isanchorelement",{"_index":292,"title":{},"body":{"directives/LinkDirective.html":{}}}],["js",{"_index":401,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["keeping",{"_index":362,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["know",{"_index":290,"title":{},"body":{"directives/LinkDirective.html":{}}}],["latest",{"_index":515,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":458,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["length",{"_index":198,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["level",{"_index":646,"title":{},"body":{"miscellaneous/functions.html":{}}}],["library",{"_index":675,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":642,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lifetime",{"_index":632,"title":{},"body":{"miscellaneous/functions.html":{}}}],["link",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link'].includes(this.tagname",{"_index":297,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.directive.ts",{"_index":208,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["link.directive.ts:35",{"_index":227,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.directive.ts:37",{"_index":228,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.directive.ts:39",{"_index":229,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.directive.ts:41",{"_index":231,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.directive.ts:85",{"_index":234,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.extras",{"_index":330,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.rel",{"_index":321,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.target",{"_index":322,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.type",{"_index":310,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link.url",{"_index":320,"title":{},"body":{"directives/LinkDirective.html":{}}}],["link_registry_schema",{"_index":405,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["link_registry_schema.parse(data",{"_index":418,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["linkdirective",{"_index":205,"title":{"directives/LinkDirective.html":{}},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{}}}],["linkentry",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/typealiases.html":{}}}],["linkid",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["linkid:'${id",{"_index":727,"title":{},"body":{"miscellaneous/variables.html":{}}}],["linkregistry",{"_index":406,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryactions",{"_index":265,"title":{},"body":{"directives/LinkDirective.html":{}}}],["linkregistrycontext",{"_index":370,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistrymodel",{"_index":338,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryquery",{"_index":343,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["linkregistryselectors",{"_index":266,"title":{"classes/LinkRegistrySelectors.html":{}},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{}}}],["linkregistrystate",{"_index":347,"title":{"injectables/LinkRegistryState.html":{}},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{}}}],["links",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["linktype",{"_index":267,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["linktype.external",{"_index":311,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["linktype.internal",{"_index":431,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["load",{"_index":390,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":417,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":102,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":83,"title":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":410,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":103,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":495,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":85,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["loadyaml",{"_index":367,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":387,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["location",{"_index":277,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy",{"_index":247,"title":{},"body":{"directives/LinkDirective.html":{}}}],["locationstrategy.prepareexternalurl(router.serializeurl(urltree",{"_index":332,"title":{},"body":{"directives/LinkDirective.html":{}}}],["maintain",{"_index":660,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manipulate",{"_index":657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["map",{"_index":402,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":506,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":504,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["markdown",{"_index":101,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(state",{"_index":471,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["marks",{"_index":561,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":386,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":212,"title":{},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{}}}],["metakey",{"_index":309,"title":{},"body":{"directives/LinkDirective.html":{}}}],["method",{"_index":439,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["methods",{"_index":116,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["miscellaneous",{"_index":590,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":696,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":645,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":684,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mostly",{"_index":666,"title":{},"body":{"miscellaneous/functions.html":{}}}],["mouseevent",{"_index":238,"title":{},"body":{"directives/LinkDirective.html":{}}}],["multiple",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["native",{"_index":270,"title":{},"body":{"directives/LinkDirective.html":{}}}],["navigate",{"_index":87,"title":{"classes/Navigate.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["navigate(ctx",{"_index":393,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetoexternal(entry",{"_index":448,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["navigatetointernal(entry",{"_index":443,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["never",{"_index":648,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":518,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["next(value",{"_index":537,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngmoduleref",{"_index":131,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ngonchanges(changes",{"_index":302,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ngondestroy",{"_index":641,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxs/store",{"_index":346,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["ngzone",{"_index":400,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["non",{"_index":438,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["notify",{"_index":525,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["null",{"_index":170,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["nullable",{"_index":718,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nx",{"_index":677,"title":{},"body":{"index.html":{}}}],["object",{"_index":112,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["observable",{"_index":135,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["observables",{"_index":172,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":513,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.get.bind(observer",{"_index":572,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["onchanges",{"_index":211,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick",{"_index":217,"title":{},"body":{"directives/LinkDirective.html":{}}}],["onclick(event",{"_index":237,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ondestroy",{"_index":117,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["ondestroy(cb",{"_index":118,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ondestroyhostcomponent",{"_index":161,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["onsameurlnavigation",{"_index":721,"title":{},"body":{"miscellaneous/variables.html":{}}}],["operations",{"_index":656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":352,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["or(z.object",{"_index":738,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":353,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["overview",{"_index":685,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["owned",{"_index":192,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["owning",{"_index":173,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":581,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["param1",{"_index":427,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":381,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["passed",{"_index":693,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["passthrough",{"_index":739,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":585,"title":{},"body":{"dependencies.html":{}}}],["perform",{"_index":123,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["performed",{"_index":236,"title":{},"body":{"directives/LinkDirective.html":{}}}],["pipe",{"_index":503,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["pipe(map((data",{"_index":424,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["pipes",{"_index":562,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["preserve",{"_index":717,"title":{},"body":{"miscellaneous/variables.html":{}}}],["preservefragment",{"_index":719,"title":{},"body":{"miscellaneous/variables.html":{}}}],["private",{"_index":271,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["promise",{"_index":397,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"directives/LinkDirective.html":{},"properties.html":{}}}],["queries",{"_index":341,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":336,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":337,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["queryargs",{"_index":579,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["querying",{"_index":283,"title":{},"body":{"directives/LinkDirective.html":{}}}],["querylink",{"_index":285,"title":{},"body":{"directives/LinkDirective.html":{}}}],["queryparams",{"_index":712,"title":{},"body":{"miscellaneous/variables.html":{}}}],["queryparamshandling",{"_index":715,"title":{},"body":{"miscellaneous/variables.html":{}}}],["raw",{"_index":100,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["ref",{"_index":194,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["ref.createcomponent(ondestroyhostcomponent",{"_index":202,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ref.length",{"_index":199,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["register",{"_index":121,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registered",{"_index":115,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registers",{"_index":140,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":403,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":107,"title":{},"body":{"classes/AddMany.html":{},"classes/AddMany-1.html":{}}}],["registry.actions.ts:31",{"_index":105,"title":{},"body":{"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{}}}],["registry.actions.ts:42",{"_index":453,"title":{},"body":{"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{}}}],["registry.actions.ts:52",{"_index":455,"title":{},"body":{"classes/Navigate.html":{}}}],["registry.actions.ts:53",{"_index":454,"title":{},"body":{"classes/LoadMarkdown.html":{}}}],["registry.actions.ts:8",{"_index":55,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{}}}],["registry.model",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":593,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":334,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:16",{"_index":340,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["registry.selectors.ts:23",{"_index":473,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:33",{"_index":469,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:55",{"_index":472,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:65",{"_index":476,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:75",{"_index":478,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":348,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":361,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["registry.state.ts:30",{"_index":493,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":492,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:46",{"_index":376,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:51",{"_index":494,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:56",{"_index":372,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:64",{"_index":499,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:67",{"_index":380,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:77",{"_index":497,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:80",{"_index":389,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.state.ts:93",{"_index":395,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["registry.ts",{"_index":603,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["registry/link",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":94,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["regular",{"_index":640,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rel",{"_index":215,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["relativeto",{"_index":331,"title":{},"body":{"directives/LinkDirective.html":{}}}],["rely",{"_index":654,"title":{},"body":{"miscellaneous/functions.html":{}}}],["remote",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["removes",{"_index":164,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["replaceurl",{"_index":724,"title":{},"body":{"miscellaneous/variables.html":{}}}],["replaysubject",{"_index":136,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["res",{"_index":578,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["resource",{"_index":95,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":500,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":501,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":97,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":96,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":731,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":464,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":491,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrydataquery",{"_index":470,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":467,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryquery",{"_index":474,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":463,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.getentry(state",{"_index":482,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistrystate",{"_index":480,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":99,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":479,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["resourcetype.markdown",{"_index":483,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype.markdown)?.markdown",{"_index":487,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text",{"_index":485,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text)?.text",{"_index":488,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.url)?.url",{"_index":489,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["responsetype",{"_index":422,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["result",{"_index":186,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["returned",{"_index":638,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["root",{"_index":644,"title":{},"body":{"miscellaneous/functions.html":{}}}],["route",{"_index":275,"title":{},"body":{"directives/LinkDirective.html":{}}}],["router",{"_index":258,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["router.createurltree(link.commands",{"_index":329,"title":{},"body":{"directives/LinkDirective.html":{}}}],["routing",{"_index":209,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{}}}],["run",{"_index":681,"title":{},"body":{"index.html":{}}}],["running",{"_index":678,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":137,"title":{},"body":{"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["same",{"_index":573,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["sanitize",{"_index":280,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitized",{"_index":326,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer",{"_index":281,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizer.sanitize(urlsecuritycontext",{"_index":333,"title":{},"body":{"directives/LinkDirective.html":{}}}],["sanitizes",{"_index":325,"title":{},"body":{"directives/LinkDirective.html":{}}}],["schema",{"_index":730,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":125,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["scope.ondestroy",{"_index":147,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject",{"_index":144,"title":{"classes/ScopedDestroySubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject(scope).asobservable",{"_index":187,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects",{"_index":174,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["scopedsubjects.get(scope",{"_index":183,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects.set(scope",{"_index":188,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["search",{"_index":195,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["searching",{"_index":191,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["security",{"_index":294,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext",{"_index":252,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.resource_url",{"_index":298,"title":{},"body":{"directives/LinkDirective.html":{}}}],["securitycontext.url",{"_index":299,"title":{},"body":{"directives/LinkDirective.html":{}}}],["selector",{"_index":152,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['linkregistrystate",{"_index":339,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector(['resourceregistrystate",{"_index":468,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([linkregistrystate",{"_index":349,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":481,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selectors",{"_index":335,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["selectquerysnapshot",{"_index":261,"title":{},"body":{"directives/LinkDirective.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(linkregistryselectors.query",{"_index":286,"title":{},"body":{"directives/LinkDirective.html":{}}}],["selectquerysnapshot(selector",{"_index":671,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot",{"_index":555,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectsnapshot(selector",{"_index":565,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["selectsnapshotselector",{"_index":557,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["service",{"_index":409,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":647,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":705,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shiftkey",{"_index":307,"title":{},"body":{"directives/LinkDirective.html":{}}}],["simplechanges",{"_index":253,"title":{},"body":{"directives/LinkDirective.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{}}}],["skiplocationchange",{"_index":723,"title":{},"body":{"miscellaneous/variables.html":{}}}],["snapshot",{"_index":516,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["snapshot.ts",{"_index":512,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshot.ts:14",{"_index":521,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:27",{"_index":535,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:39",{"_index":538,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:48",{"_index":533,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:57",{"_index":528,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot/select",{"_index":511,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":509,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["snapshotobserver(cdr",{"_index":570,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../hra",{"_index":702,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/lib/hra",{"_index":207,"title":{},"body":{"directives/LinkDirective.html":{},"miscellaneous/variables.html":{}}}],["standalone",{"_index":155,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["started",{"_index":673,"title":{"index.html":{}},"body":{}}],["state",{"_index":284,"title":{},"body":{"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["state/.../action",{"_index":602,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/.../actions.ts",{"_index":600,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state/.../link",{"_index":592,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/.../resource",{"_index":594,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/action",{"_index":611,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["state/src/link",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/resource",{"_index":93,"title":{},"body":{"classes/Add-1.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state[id",{"_index":356,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["statecontext",{"_index":695,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":539,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken).pipe(takeuntil(destroy",{"_index":569,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["store",{"_index":540,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["store.select(selector",{"_index":568,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["storing",{"_index":514,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["strategy",{"_index":278,"title":{},"body":{"directives/LinkDirective.html":{}}}],["stream",{"_index":517,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styles",{"_index":158,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["subject",{"_index":138,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["super",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["super(1",{"_index":146,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["support",{"_index":598,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch",{"_index":429,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["t",{"_index":355,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["tagname",{"_index":288,"title":{},"body":{"directives/LinkDirective.html":{}}}],["take",{"_index":658,"title":{},"body":{"miscellaneous/functions.html":{}}}],["takeuntil",{"_index":541,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":576,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["target",{"_index":216,"title":{},"body":{"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"miscellaneous/variables.html":{}}}],["template",{"_index":157,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["test",{"_index":682,"title":{},"body":{"index.html":{}}}],["tests",{"_index":680,"title":{},"body":{"index.html":{}}}],["text",{"_index":423,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(state",{"_index":475,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["this.addmany(ctx",{"_index":415,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":507,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":425,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.cdr?.markforcheck",{"_index":553,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.complete",{"_index":149,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.el.tagname.tolowercase",{"_index":289,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.errorvalue",{"_index":551,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.getentry(state",{"_index":350,"title":{},"body":{"classes/LinkRegistrySelectors.html":{}}}],["this.gethref(link",{"_index":323,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.haserror",{"_index":550,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.href",{"_index":317,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.http",{"_index":420,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":502,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.link",{"_index":315,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigate(linkid",{"_index":312,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.navigatetoexternal(entry",{"_index":435,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.navigatetointernal(entry",{"_index":433,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.next",{"_index":148,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.querylink(this.linkid",{"_index":316,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.rel",{"_index":319,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.router.navigate(entry.commands",{"_index":445,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["this.target",{"_index":318,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.updatelink",{"_index":304,"title":{},"body":{"directives/LinkDirective.html":{}}}],["this.value",{"_index":552,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.zone.run",{"_index":444,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["throw",{"_index":436,"title":{},"body":{"injectables/LinkRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["throws",{"_index":549,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["time",{"_index":559,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["track",{"_index":363,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":726,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":324,"title":{},"body":{"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{}}}],["tries",{"_index":176,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["triggers",{"_index":235,"title":{},"body":{"directives/LinkDirective.html":{}}}],["true",{"_index":156,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/variables.html":{}}}],["true/false",{"_index":242,"title":{},"body":{"directives/LinkDirective.html":{}}}],["tslib",{"_index":583,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":690,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typematches",{"_index":357,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["types",{"_index":595,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ui/cdk/injectors",{"_index":262,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/cdk/state",{"_index":268,"title":{},"body":{"directives/LinkDirective.html":{}}}],["ui/theming",{"_index":588,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":589,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":345,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["undefined",{"_index":181,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":698,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unionmember",{"_index":344,"title":{},"body":{"classes/LinkRegistrySelectors.html":{},"injectables/LinkRegistryState.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["unique",{"_index":614,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":679,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":547,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["unless",{"_index":649,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unparsed",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{}}}],["unqiue",{"_index":91,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/Navigate.html":{}}}],["updatelink",{"_index":314,"title":{},"body":{"directives/LinkDirective.html":{}}}],["updates",{"_index":313,"title":{},"body":{"directives/LinkDirective.html":{}}}],["url",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":477,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":383,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["urls",{"_index":396,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["urlsecuritycontext",{"_index":296,"title":{},"body":{"directives/LinkDirective.html":{}}}],["urltree",{"_index":328,"title":{},"body":{"directives/LinkDirective.html":{}}}],["used",{"_index":630,"title":{},"body":{"miscellaneous/functions.html":{}}}],["using",{"_index":440,"title":{},"body":{"injectables/LinkRegistryState.html":{},"miscellaneous/functions.html":{}}}],["validator",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":142,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":460,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["variables",{"_index":700,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":688,"title":{},"body":{"properties.html":{}}}],["view",{"_index":189,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewcontainerref",{"_index":132,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewref",{"_index":133,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["views",{"_index":193,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":119,"title":{},"body":{"interfaces/DestructorScope.html":{},"directives/LinkDirective.html":{},"injectables/LinkRegistryState.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["weakmap",{"_index":175,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["whenever",{"_index":526,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["whether",{"_index":543,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["window",{"_index":447,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["window.open(entry.url",{"_index":449,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}],["wraps",{"_index":621,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yaml",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/Add-1.html":{},"classes/AddFromYaml.html":{},"classes/AddFromYaml-1.html":{},"classes/AddMany.html":{},"classes/AddMany-1.html":{},"injectables/LinkRegistryState.html":{},"classes/LoadFromYaml.html":{},"classes/LoadFromYaml-1.html":{},"classes/LoadMarkdown.html":{},"classes/Navigate.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":382,"title":{},"body":{"injectables/LinkRegistryState.html":{},"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":706,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.any().array",{"_index":711,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.boolean",{"_index":720,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.discriminatedunion('type",{"_index":729,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.enum(['merge",{"_index":716,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":694,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal('reload",{"_index":722,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.external",{"_index":707,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(linktype.internal",{"_index":710,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.markdown",{"_index":735,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.text",{"_index":736,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.url",{"_index":737,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":734,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":725,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record(z.any()).nullable",{"_index":713,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":708,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().default('noopener",{"_index":709,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zone",{"_index":413,"title":{},"body":{"injectables/LinkRegistryState.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single link\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId, entry: LinkEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        LinkEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                link entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add-1.html":{"url":"classes/Add-1.html","title":"class - Add-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add entries from yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add links from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml-1.html":{"url":"classes/AddFromYaml-1.html","title":"class - AddFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple links at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New links\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany-1.html":{"url":"classes/AddMany-1.html","title":"class - AddMany-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup callbacks can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/on-destroy.ts:10\n                \n            \n\n\n            \n                \n                    Register a callback to perform cleanup during scope destruction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"directives/LinkDirective.html":{"url":"directives/LinkDirective.html","title":"directive - LinkDirective","body":"\n                   \n\n\n\n\n\n\n\n\n  Directives\n  LinkDirective\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/hra-link.directive.ts\n        \n\n\n            \n                Description\n            \n            \n                Link Directive for routing\n\n            \n\n\n            \n                Implements\n            \n            \n                            OnChanges\n            \n\n\n        \n            Metadata\n            \n                \n\n                    \n                        Selector\n                        [hraLink]\n                    \n\n                \n            \n        \n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                href\n                            \n                            \n                                    Optional\n                                rel\n                            \n                            \n                                    Optional\n                                target\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                        \n                    \n                \n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                hraLink\n                            \n                        \n                    \n                \n\n\n                \n                    \n                        HostBindings\n                    \n                \n                \n                    \n                        \n                            \n                                attr.href\n                            \n                            \n                                attr.rel\n                            \n                            \n                                attr.target\n                            \n                        \n                    \n                \n\n                \n                    \n                        HostListeners\n                    \n                \n                \n                    \n                        \n                            \n                                click\n                            \n                        \n                    \n                \n\n        \n    \n\n\n\n            \n    Inputs\n        \n            \n                \n                    \n                        \n                        hraLink\n                    \n                \n                \n                    \n                        Type :         any\n\n                    \n                \n                \n                    \n                        Default value : EMPTY_LINK_ID\n                    \n                \n                        \n                            \n                                    Defined in src/lib/hra-link.directive.ts:35\n                            \n                        \n                \n                    \n                        linkId with empty string as default value\n\n                    \n                \n            \n        \n\n\n            \n    HostBindings    \n        \n            \n                \n                    \n                    \n                        attr.href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:37\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:39\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        attr.target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:41\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n            \n    HostListeners    \n        \n            \n                \n                    \n                    \n                        \n                            click\n                        \n                        \n                    \n                \n            \n            \n                \n                    Arguments : '$event' \n                \n            \n\n\n            \n                \n                    Defined in src/lib/hra-link.directive.ts:85\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onClick\n                        \n                    \n                \n            \n            \n                \nonClick(event: MouseEvent)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @HostListener('click', ['$event'])\n                \n            \n\n            \n                \n                    Defined in src/lib/hra-link.directive.ts:85\n                \n            \n\n\n            \n                \n                    Triggers when a click action is performed on the element\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    event\n                                    \n                                            MouseEvent\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        type of event\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        true/false based on entry and element\n\n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        href\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.href')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:37\n                        \n                    \n\n            \n                \n                    href of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rel\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.rel')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:39\n                        \n                    \n\n            \n                \n                    rel attribute of the element\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        target\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @HostBinding('attr.target')\n                        \n                    \n                \n                    \n                        \n                                Defined in src/lib/hra-link.directive.ts:41\n                        \n                    \n\n            \n                \n                    target attribute of the element\n\n                \n            \n\n        \n    \n\n\n\n    \n\n\n    \n        import { LocationStrategy } from '@angular/common';\nimport {\n  Directive,\n  ElementRef,\n  HostBinding,\n  HostListener,\n  inject,\n  Input,\n  OnChanges,\n  SecurityContext,\n  SimpleChanges,\n} from '@angular/core';\nimport { DomSanitizer } from '@angular/platform-browser';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport {\n  createLinkId,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkRegistryActions,\n  LinkRegistrySelectors,\n  LinkType,\n} from '@hra-ui/cdk/state';\n\n/** Empty Link ID */\nconst EMPTY_LINK_ID = createLinkId('');\n\n/** Link Directive for routing */\n@Directive({\n  selector: '[hraLink]',\n  standalone: true,\n})\nexport class LinkDirective implements OnChanges {\n  /** linkId with empty string as default value */\n  @Input('hraLink') linkId = EMPTY_LINK_ID;\n  /** href of the element */\n  @HostBinding('attr.href') href?: string;\n  /** rel attribute of the element */\n  @HostBinding('attr.rel') rel?: string;\n  /** target attribute of the element */\n  @HostBinding('attr.target') target?: string;\n\n  /** Native Element */\n  private readonly el: HTMLElement = inject(ElementRef).nativeElement;\n  /** Angular router */\n  private readonly router = inject(Router);\n  /** Activate route */\n  private readonly route = inject(ActivatedRoute, { optional: true });\n  /** Location strategy */\n  private readonly locationStrategy = inject(LocationStrategy);\n  /** DomSanitizer to sanitize the url */\n  private readonly sanitizer = inject(DomSanitizer);\n  /** Selector for querying the link registry state */\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\n  /** Dispatch action to navigate to a url */\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\n  /** tagName from Native Element */\n  private readonly tagName = this.el.tagName.toLowerCase();\n  /** to know if the element is an anchor element */\n  private readonly isAnchorElement = ['a', 'area'].includes(this.tagName);\n  /** url security context */\n  private readonly urlSecurityContext = ['base', 'link'].includes(this.tagName)\n    ? SecurityContext.RESOURCE_URL\n    : SecurityContext.URL;\n\n  /** Link Entry */\n  private link?: LinkEntry;\n\n  /**\n   * triggers when linkId changes\n   * @param changes contains changes of inputs\n   */\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes['linkId'].currentValue !== EMPTY_LINK_ID) {\n      this.updateLink();\n    }\n  }\n\n  /**\n   * Triggers when a click action is performed on the element\n   * @param event type of event\n   * @returns true/false based on entry and element\n   */\n  @HostListener('click', ['$event'])\n  onClick(event: MouseEvent): boolean {\n    const { link, linkId, isAnchorElement } = this;\n    if (!link) {\n      return true;\n    }\n\n    if (isAnchorElement) {\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\n      if (link.type === LinkType.External) {\n        return true;\n      }\n      if (button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\n        return true;\n      }\n    }\n\n    this.navigate(linkId);\n    return !isAnchorElement;\n  }\n\n  /**\n   * Updates link when linkId changes\n   */\n  private updateLink(): void {\n    const link = (this.link = this.queryLink(this.linkId));\n    this.href = undefined;\n    this.target = undefined;\n    this.rel = undefined;\n    if (link) {\n      if (link.type === LinkType.External) {\n        this.href = link.url;\n        this.rel = link.rel;\n        this.target = link.target;\n      } else {\n        this.href = this.getHref(link) ?? undefined;\n      }\n    }\n  }\n\n  /**\n   * Creates a url tree and sanitizes the url\n   * @param link Internal link entry\n   * @returns A sanitized url string\n   */\n  private getHref(link: InternalLinkEntry): string | null {\n    const { router, route, locationStrategy, sanitizer, urlSecurityContext } = this;\n    const urlTree = router.createUrlTree(link.commands, {\n      ...link.extras,\n      relativeTo: route,\n    });\n    const url = locationStrategy.prepareExternalUrl(router.serializeUrl(urlTree));\n    return sanitizer.sanitize(urlSecurityContext, url);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LinkRegistrySelectors.html":{"url":"classes/LinkRegistrySelectors.html","title":"class - LinkRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LinkRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for Link Registry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                query\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: LinkRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['LinkRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.selectors.ts:16\n                \n            \n\n\n            \n                \n                    Queries for a link entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                LinkRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkRegistryQuery\n\n                    \n                    \n                        link query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from './link-registry.model';\nimport { LinkRegistryQuery, LinkRegistryState } from './link-registry.state';\n\n/**\n * Selectors for Link Registry\n */\nexport class LinkRegistrySelectors {\n  /**\n   * Queries for a link entry\n   * @param state Current state\n   * @returns link query function\n   */\n  @Selector([LinkRegistryState])\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\n    return (id, type) => this.getEntry(state, id, type);\n  }\n\n  /**\n   * Gets a link entry by id and optionally type\n   * @param state link registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: LinkRegistryModel,\n    id: LinkId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/LinkRegistryState.html":{"url":"injectables/LinkRegistryState.html","title":"injectable - LinkRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  LinkRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State for keeping track of links globally\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadYaml\n                            \n                            \n                                    Async\n                                navigate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: LinkRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:56\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: LinkRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:46\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: LinkRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:67\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: LinkRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:80\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        navigate\n                        \n                    \n                \n            \n            \n                \n                    \n                    navigate(ctx: LinkRegistryContext, undefined: Navigate)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Navigate)\n                \n            \n\n            \n                \n                    Defined in state/src/link-registry/link-registry.state.ts:93\n                \n            \n\n\n            \n                \n                    Navigate to Internal or External urls from id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                LinkRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Navigate\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        A promise\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, NgZone } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { UnionMember } from '@hra-ui/utils/types';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from './link-registry.actions';\nimport {\n  ExternalLinkEntry,\n  InternalLinkEntry,\n  LinkEntry,\n  LinkId,\n  LinkRegistryContext,\n  LinkRegistryModel,\n  LinkType,\n  LINK_REGISTRY_SCHEMA,\n} from './link-registry.model';\n\n/** Query function for link entry optionally with type specified */\nexport type LinkRegistryQuery = (\n  id: LinkId,\n  type?: T\n) => UnionMember | undefined;\n\n/** State for keeping track of links globally */\n@State({\n  name: 'linkRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class LinkRegistryState {\n  /** Http service for link loading */\n  private readonly http = inject(HttpClient);\n  /** Injects angular router */\n  private readonly router = inject(Router);\n  /** Injects ngZone for routing */\n  private readonly zone = inject(NgZone);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Navigate to Internal or External urls from id\n   * @param ctx State context\n   * @param param1 Navigate action with link id\n   * @returns A promise\n   */\n  @Action(Navigate)\n  async navigate(ctx: LinkRegistryContext, { id }: Navigate): Promise {\n    const entry = ctx.getState()[id];\n    switch (entry?.type) {\n      case LinkType.Internal:\n        await this.navigateToInternal(entry);\n        break;\n\n      case LinkType.External:\n        this.navigateToExternal(entry);\n        break;\n\n      default:\n        throw new Error(`Cannot navigate to non-existing link '${id}'`);\n    }\n  }\n\n  /**\n   * Method to navigate to an internal link using Angular router\n   * @param entry Internal Link Entry with commands and extras\n   */\n  private async navigateToInternal(entry: InternalLinkEntry): Promise {\n    await this.zone.run(() => this.router.navigate(entry.commands, entry.extras));\n  }\n\n  /**\n   * Method to navigate to an external link using window\n   * @param entry External link entry with url, target, and rel\n   */\n  private navigateToExternal(entry: ExternalLinkEntry): void {\n    window.open(entry.url, entry.target, entry.rel);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add links from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add links\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml-1.html":{"url":"classes/LoadFromYaml-1.html","title":"class - LoadFromYaml-1","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Navigate.html":{"url":"classes/Navigate.html","title":"class - Navigate","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Navigate\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/link-registry/link-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Navigate to an Internal or external url from Link id\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: LinkId)\n                    \n                \n                        \n                            \n                                Defined in state/src/link-registry/link-registry.actions.ts:52\n                            \n                        \n\n                \n                    \n                            navigate to a link\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        LinkId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                unqiue identifier of link\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { LinkEntry, LinkId } from './link-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('LinkRegistry');\n\n/** Add a single link */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single link\n   * @param id link identifier\n   * @param entry link entry\n   */\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\n    super();\n  }\n}\n\n/** Add multiple links at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple links\n   * @param entries New links\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add entries from yaml file */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add links from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add links from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add links\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n/** Navigate to an Internal or external url from Link id */\nexport class Navigate extends Action('Navigate') {\n  /**\n   * navigate to a link\n   * @param id unqiue identifier of link\n   */\n  constructor(readonly id: LinkId) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OnDestroyHostComponent.html":{"url":"components/OnDestroyHostComponent.html","title":"component - OnDestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OnDestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/on-destroy.ts\n\n\n\n    \n        Description\n    \n    \n        Empty host component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-on-destroy-host\n            \n\n\n            \n                styles\n                :host { display: block; }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:39\n                            \n                        \n\n                \n                    \n                            Creates a new component instance that immediately removes its own DOM element\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n    \n            :host { display: block; }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'OnDestroyHostComponent', 'selector': 'hra-on-destroy-host'}];\n    var DIRECTIVES = [{'name': 'LinkDirective', 'selector': '[hraLink]'}];\n    var ACTUAL_COMPONENT = {'name': 'OnDestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anyText\n                            \n                            \n                                    Static\n                                markdown\n                            \n                            \n                                    Static\n                                query\n                            \n                            \n                                    Static\n                                text\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:33\n                \n            \n\n\n            \n                \n                    Query for any text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    markdown(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:55\n                \n            \n\n\n            \n                \n                    Query for markdown data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Markdown data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:23\n                \n            \n\n\n            \n                \n                    Queries for a resource entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryQuery\n\n                    \n                    \n                        Resource query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                    \n                    text(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:65\n                \n            \n\n\n            \n                \n                    Query for text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:75\n                \n            \n\n\n            \n                \n                    Query for an url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Url query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { ResourceEntry, ResourceId, ResourceRegistryModel, ResourceType } from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function for resource entry optionally with type specified */\nexport type ResourceRegistryQuery = (\n  id: ResourceId,\n  type?: T\n) => UnionMember | undefined;\n\n/** Query function for resource data */\nexport type ResourceRegistryDataQuery = (id: ResourceId) => T | undefined;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries for a resource entry\n   * @param state Current state\n   * @returns Resource query function\n   */\n  @Selector([ResourceRegistryState])\n  static query(state: ResourceRegistryModel): ResourceRegistryQuery {\n    return (id, type) => ResourceRegistrySelectors.getEntry(state, id, type);\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id);\n      switch (entry?.type) {\n        case ResourceType.Markdown:\n          return entry.markdown as string;\n\n        case ResourceType.Text:\n          return entry.text as string;\n\n        default:\n          return undefined;\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistryState])\n  static markdown(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Markdown)?.markdown;\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static text(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Text)?.text;\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistryState])\n  static url(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Url)?.url;\n  }\n\n  /**\n   * Gets a resource entry by id and optionally type\n   * @param state Resource registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: ResourceRegistryModel,\n    id: ResourceId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadMarkdown\n                            \n                            \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:40\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:30\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:51\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \nloadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:77\n                \n            \n\n\n            \n                \n                    Adds a markdown entry with content loaded from an external file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadMarkdown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entry has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:64\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  ResourceType,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: ResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestroySubject.html":{"url":"classes/ScopedDestroySubject.html","title":"class - ScopedDestroySubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestroySubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Subject that automatically registers a cleanup function on a scope\nDuring cleanup the subject will emit a single void value and then complete\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:17\n                            \n                        \n\n                \n                    \n                            Create a new subject that automatically registers cleanup\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Scope which to link the new subject\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select-snapshot/select-snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        Observer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complete\n                            \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cdr: ChangeDetectorRef | null)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:14\n                            \n                        \n\n                \n                    \n                            Creates a new SnapshotObserver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Change detector to notify whenever a new value is emitted\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        complete\n                        \n                    \n                \n            \n            \n                \ncomplete()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:57\n                \n            \n\n\n            \n                \n                    Handles completion emits\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:48\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:27\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:39\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport type { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { Observer, takeUntil } from 'rxjs';\nimport { injectOnDestroy } from '../on-destroy/on-destroy';\n\n/** Observer storing the latest value from a snapshot stream */\nclass SnapshotObserver implements Observer {\n  /** Whether an error has been emitted */\n  private hasError = false;\n  /** The latest value */\n  private value?: T = undefined;\n  /** The error value if `hasError === true` */\n  private errorValue?: unknown;\n\n  /**\n   * Creates a new SnapshotObserver\n   * @param cdr Change detector to notify whenever a new value is emitted\n   */\n  constructor(private readonly cdr: ChangeDetectorRef | null) {}\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.hasError) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n    this.cdr?.markForCheck();\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.hasError = true;\n    this.value = undefined;\n    this.errorValue = err;\n  }\n\n  /**\n   * Handles completion emits\n   */\n  complete(): void {\n    // Intentionally empty\n  }\n}\n\n/** Type of `selectSnapshot` and `selectQuerySnapshot` selector argument */\nexport type SelectSnapshotSelector = ((...args: Any[]) => T) | StateToken;\n\n/**\n * Injects a function that returns the latest snapshot value each time it is called\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store data selector\n * @returns A snapshot function\n */\nexport function selectSnapshot(selector: SelectSnapshotSelector): () => T {\n  const store = inject(Store);\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  const destroy$ = injectOnDestroy();\n  const data$ = store.select(selector as StateToken).pipe(takeUntil(destroy$));\n  const observer = new SnapshotObserver(cdr);\n\n  data$.subscribe(observer);\n  return observer.get.bind(observer);\n}\n\n/**\n * Injects a function that can be called with the same arguments as the query selector\n * and returns the latest value each time\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store query selector\n * @param boundArgs Optional bound query arguments\n * @returns A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n */\nexport function selectQuerySnapshot(\n  selector: SelectSnapshotSelector Res>,\n  ...boundArgs: BoundArgs\n): (...args: QueryArgs) => Res {\n  const get = selectSnapshot(selector);\n  return (...args) => get()(...boundArgs, ...args);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            LinkType   (state/.../link-registry.model.ts)\n                        \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        LinkType\n                    \n                \n                    \n                        \n                            Types for Link\n\n                        \n                    \n                        \n                            \n                                 Internal\n                            \n                        \n                        \n                            \n                                Value : internal\n                            \n                        \n                        \n                            \n                                 External\n                            \n                        \n                        \n                            \n                                Value : external\n                            \n                        \n            \n        \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ResourceType\n                    \n                \n                    \n                        \n                            Built in resource types with additional support\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../actions.ts)\n                        \n                        \n                            ActionGroup   (state/.../actions.ts)\n                        \n                        \n                            assertUniqueActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            createLinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            createResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            dispatch   (injectors/.../dispatch.ts)\n                        \n                        \n                            findOrCreateScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubjectInView   (injectors/.../on-destroy.ts)\n                        \n                        \n                            injectOnDestroy   (injectors/.../on-destroy.ts)\n                        \n                        \n                            registerActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            selectQuerySnapshot   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            selectSnapshot   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/actions/actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n            \n                \nAction(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new base action with a specified type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        A base action class\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ActionGroup\n                        \n                    \n                \n            \n            \n                \nActionGroup(group: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory that adds a common group string to each action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Common action type group\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        An action factory\n\n                    \n                \n            \n        \n    \n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assertUniqueActionType\n                        \n                    \n                \n            \n            \n                \nassertUniqueActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Asserts that an action type is unique\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerActionType\n                        \n                    \n                \n            \n            \n                \nregisterActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Registers an action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createLinkId\n                        \n                    \n                \n            \n            \n                \ncreateLinkId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    function to createa unique link ids\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         LinkId\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createResourceId\n                        \n                    \n                \n            \n            \n                \ncreateResourceId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new resource identifier\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique resource identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceId\n\n                    \n                    \n                        A new identifier\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/dispatch/dispatch.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dispatch\n                        \n                    \n                \n            \n            \n                \ndispatch(actionType: A)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actionType\n                                    \n                                            A\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Dispatcher\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findOrCreateScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindOrCreateScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable for the scope\nIf not found a new observable is created and associated with the scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The existing or new observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find and return an existing observable associated with a scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        The observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubjectInView\n                        \n                    \n                \n            \n            \n                \nfindScopedSubjectInView(ref: ViewContainerRef)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable associated with a view container by searching all owned views\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ref\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View container to search\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        An observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        injectOnDestroy\n                        \n                    \n                \n            \n            \n                \ninjectOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                    Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe takeUntil pipe, and to build other complex injection functions.\nCaveats:\n\nThere are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook\nFor root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don't rely on it for important operations\nComponents, directives, pipe, and services that manipulate the ViewContainerRef MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable\n\nBased on comment on https://github.com/angular/angular/issues/10185\nMostly https://github.com/angular/angular/issues/10185#issuecomment-1165545544 and\nhttps://github.com/angular/angular/issues/10185#issuecomment-1199063426\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that emits and completes when the component/directive/etc. is destroyed\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectQuerySnapshot\n                        \n                    \n                \n            \n            \n                \nselectQuerySnapshot(selector: SelectSnapshotSelector, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store query selector\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional bound query arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Res\n\n                    \n                    \n                        A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSnapshot\n                        \n                    \n                \n            \n            \n                \nselectSnapshot(selector: SelectSnapshotSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store data selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        A snapshot function\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Directive\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    14 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Dispatcher   (injectors/.../dispatch.ts)\n                        \n                        \n                            ExternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            InternalLinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkEntry   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkId   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryContext   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryModel   (state/.../link-registry.model.ts)\n                        \n                        \n                            LinkRegistryQuery   (state/.../link-registry.state.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryDataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            SelectSnapshotSelector   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    injectors/src/lib/dispatch/dispatch.ts\n    \n    \n        \n            \n                \n                    \n                    Dispatcher\n                \n            \n            \n                \n                    Function type returned by dispatch(actionType).\nAccepts the same arguments as the passed action constructor and\nreturns an instance of the action.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ExternalLinkEntry\n                \n            \n            \n                \n                    type for external link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    InternalLinkEntry\n                \n            \n            \n                \n                    type for internal link entry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkEntry\n                \n            \n            \n                \n                    entry for link registry\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkId\n                \n            \n            \n                \n                    Type for unique identifier for link\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryContext\n                \n            \n            \n                \n                    type for State Context of LinkRegistry\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    LinkRegistryModel\n                \n            \n            \n                \n                    Model for LinkRegistry State\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/link-registry/link-registry.state.ts\n    \n    \n        \n            \n                \n                    \n                    LinkRegistryQuery\n                \n            \n            \n                \n                    Query function for link entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Discriminated union of all resource interfaces\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Unique identifier for a resource\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryDataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryQuery\n                \n            \n            \n                \n                    Query function for resource entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    SelectSnapshotSelector\n                \n            \n            \n                \n                    Type of selectSnapshot and selectQuerySnapshot selector argument\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../link-registry.actions.ts)\n                        \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            EMPTY_LINK_ID   (src/.../hra-link.directive.ts)\n                        \n                        \n                            EXTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            INTERNAL_LINK_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            LINK_REGISTRY_SCHEMA   (state/.../link-registry.model.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            scopedSubjects   (injectors/.../on-destroy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/link-registry/link-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('LinkRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    src/lib/hra-link.directive.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EMPTY_LINK_ID\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('')\n                    \n                \n\n            \n                \n                    Empty Link ID\n\n                \n            \n\n        \n    \n\n    state/src/link-registry/link-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EXTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.External),\n    url: z.string(),\n    rel: z.string().default('noopener'),\n    target: z.string(),\n  })\n  .partial({ rel: true, target: true })\n                    \n                \n\n            \n                \n                    Type for external link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        INTERNAL_LINK_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z\n  .object({\n    type: z.literal(LinkType.Internal),\n    commands: z.any().array(),\n    extras: z\n      .object({\n        queryParams: z.record(z.any()).nullable(),\n        fragment: z.string(),\n        queryParamsHandling: z.enum(['merge', 'preserve', '']).nullable(),\n        preserveFragment: z.boolean(),\n        onSameUrlNavigation: z.literal('reload'),\n        skipLocationChange: z.boolean(),\n        replaceUrl: z.boolean(),\n      })\n      .partial(),\n  })\n  .partial({ extras: true })\n                    \n                \n\n            \n                \n                    Type for internal link entry\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LINK_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `LinkId:'${id}'`)\n    .brand('LinkId'),\n  z.discriminatedUnion('type', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\n)\n                    \n                \n\n            \n                \n                    Schema for link registry\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `ResourceId:'${id}'`)\n    .brand('ResourceId'),\n  z\n    .discriminatedUnion('type', [\n      z.object({ type: z.literal(ResourceType.Markdown), markdown: z.string() }),\n      z.object({ type: z.literal(ResourceType.Text), text: z.string() }),\n      z.object({ type: z.literal(ResourceType.Url), url: z.string() }),\n    ])\n    .or(z.object({ type: z.string() }).passthrough())\n)\n                    \n                \n\n            \n                \n                    Resource registry schema validator\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scopedSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    OnDestroy observables index by their owning scope\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
