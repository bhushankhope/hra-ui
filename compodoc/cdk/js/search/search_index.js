var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ActionConstructor.html",[0,1.295,1,1.952]],["body/interfaces/ActionConstructor.html",[0,1.837,1,3.288,2,1.819,3,0.648,4,0.648,5,0.648,6,2.492,7,0.56,8,1.767,9,1.544,10,0.852,11,0.648,12,2.77,13,0.882,14,1.459,15,0.049,16,0.648,17,2.492,18,2.107,19,1.502,20,1.701,21,1.589,22,0.822,23,1.837,24,1.433,25,2.107,26,3.277,27,3.662,28,2.107,29,0.852,30,1.265,31,1.433,32,2.492,33,1.433,34,3.077,35,1.819,36,0.035,37,2.492,38,2.492,39,3.077,40,2.492,41,0.035,42,0.035]],["title/classes/Add.html",[36,0.024,43,1.143]],["body/classes/Add.html",[3,0.54,4,0.54,5,1.049,7,0.651,8,0.909,9,0.985,10,0.54,13,0.398,14,1.135,15,0.05,16,0.753,19,1.466,20,1.267,22,0.467,24,0.909,29,1.049,36,0.04,41,0.031,42,0.031,43,2.166,44,0.802,45,0.864,46,0.864,47,1.165,48,1.394,49,1.287,50,2.078,51,1.66,52,1.719,53,1.786,54,0.62,55,2.566,56,2.126,57,0.62,58,0.54,59,0.54,60,1.719,61,1.434,62,1.165,63,1.324,64,1.028,65,0.62,66,1.165,67,1.66,68,2.126,69,2.419,70,2.419,71,1.624,72,2.261,73,1.324,74,1.028,75,1.324,76,1.624,77,1.324,78,1.165,79,2.373,80,1.135,81,1.028,82,1.847,83,2.506,84,1.028,85,1.847,86,1.847,87,1.518,88,1.394,89,1.165,90,1.028]],["title/classes/AddFromYaml.html",[36,0.024,81,1.143]],["body/classes/AddFromYaml.html",[3,0.543,4,0.543,5,1.05,7,0.653,8,0.913,9,0.989,10,0.543,13,0.4,14,1.293,15,0.05,16,0.756,19,1.468,20,1.271,22,0.469,24,0.913,29,1.05,36,0.04,41,0.031,42,0.031,43,2.154,44,0.806,45,0.867,46,0.867,47,1.171,48,1.123,49,1.229,51,1.463,52,1.463,53,1.439,54,0.623,56,1.853,57,0.623,58,0.543,59,0.543,60,1.663,61,1.033,62,1.171,63,1.331,64,1.033,65,0.623,66,1.171,67,1.663,68,2.132,69,2.424,70,2.424,71,1.63,72,2.346,73,1.331,74,1.033,75,1.331,76,1.63,77,1.331,78,1.63,79,2.456,80,1.293,81,1.439,82,2.306,83,2.51,84,1.033,85,1.853,86,1.853,87,1.52,88,1.397,89,1.171,90,1.033,91,2.579,92,2.579]],["title/classes/AddMany.html",[36,0.024,74,1.143]],["body/classes/AddMany.html",[3,0.545,4,0.545,5,1.051,7,0.654,8,0.916,9,0.991,10,0.545,13,0.402,14,1.14,15,0.05,16,0.758,19,1.47,20,1.274,22,0.654,24,0.916,29,1.051,36,0.04,41,0.031,42,0.031,43,2.155,44,0.809,45,0.869,46,0.869,47,1.175,48,1.125,49,1.23,51,1.465,52,1.465,53,1.442,54,0.625,56,2.136,57,0.625,58,0.545,59,0.545,60,1.665,61,1.037,62,1.175,63,1.336,64,1.037,65,0.625,66,1.175,67,1.665,68,2.136,69,2.427,70,2.427,71,2.031,72,2.377,73,1.858,74,1.442,75,1.336,76,1.879,77,2.136,78,1.175,79,2.377,80,1.14,81,1.037,82,1.858,83,2.513,84,1.037,85,1.858,86,1.858,87,1.522,88,1.399,89,1.175,90,1.037,93,2.588,94,2.588]],["title/interfaces/DestructorScope.html",[0,1.295,95,1.472]],["body/interfaces/DestructorScope.html",[0,1,2,1.302,3,0.464,4,0.464,5,0.464,7,0.584,10,0.464,11,0.876,13,0.342,15,0.05,16,0.676,21,1.137,22,0.866,23,1,29,0.931,30,1.301,31,1.566,33,1.634,36,0.027,41,0.027,42,0.027,48,0.689,54,0.532,57,0.532,58,0.464,59,0.676,65,1.068,67,0.78,95,2.282,96,1.657,97,1.457,98,1.137,99,2.197,100,3.407,101,2.197,102,2.197,103,1.896,104,2.237,105,2.197,106,2.007,107,2.203,108,2.197,109,2.847,110,2.197,111,2.591,112,2.7,113,2.197,114,2.197,115,2.007,116,1.508,117,1,118,1.508,119,1.896,120,1.508,121,1,122,2.645,123,2.197,124,1.137,125,2.847,126,1.657,127,1.896,128,1.302,129,0.883,130,1.137,131,1.302,132,1.508,133,1.508,134,1.508,135,1.508,136,1.508,137,1.508,138,1.302,139,2.591,140,0.883,141,1,142,1.302,143,1.508,144,1.896,145,1.508,146,1.508,147,1.508,148,1.508,149,1.302,150,1.302,151,1.508,152,1.508,153,1.508,154,1.508,155,1.508,156,1.508,157,1.508,158,1.302,159,1.508,160,1.137,161,1.954,162,1.302,163,1.302,164,2.237,165,2.237,166,2.458,167,2.237,168,1.954,169,1.667,170,1.302,171,2.197,172,1.302,173,1.302,174,2.885,175,1.508,176,1.508,177,1.896,178,1.896,179,1.302,180,1.302,181,1.302,182,2.237,183,1.302,184,1.896,185,1.508,186,1.508,187,1.508,188,1.508,189,1.508,190,1.508,191,1.508]],["title/classes/LoadFromYaml.html",[36,0.024,84,1.143]],["body/classes/LoadFromYaml.html",[3,0.54,4,0.54,5,1.1,7,0.651,8,0.909,9,0.985,10,0.54,13,0.398,14,1.291,15,0.05,16,0.753,19,1.466,20,1.267,22,0.467,24,0.909,29,1.049,36,0.04,41,0.031,42,0.031,43,2.152,44,0.802,45,0.864,46,0.864,47,1.165,48,1.119,49,1.227,51,1.459,52,1.459,53,1.434,54,0.62,56,1.847,57,0.62,58,0.54,59,0.54,60,1.66,61,1.028,62,1.165,63,1.324,64,1.028,65,0.62,66,1.165,67,1.66,68,2.126,69,2.419,70,2.419,71,1.624,72,2.343,73,1.324,74,1.028,75,1.324,76,1.624,77,1.324,78,1.165,79,2.438,80,1.135,81,1.028,82,1.847,83,2.664,84,1.434,85,1.847,86,2.126,87,1.589,88,1.394,89,1.165,90,1.028,192,2.566,193,2.566]],["title/classes/LoadMarkdown.html",[36,0.024,90,1.143]],["body/classes/LoadMarkdown.html",[3,0.533,4,0.533,5,1.097,7,0.644,8,0.896,9,0.976,10,0.533,13,0.393,14,1.284,15,0.05,16,0.746,19,1.458,20,1.255,22,0.46,24,0.896,29,1.045,36,0.04,41,0.03,42,0.03,43,2.147,44,0.791,45,0.856,46,0.856,47,1.149,48,1.108,49,1.273,50,2.05,51,1.651,52,1.448,53,1.42,54,0.611,56,1.829,57,0.611,58,0.533,59,0.533,60,1.757,61,1.014,62,1.149,63,1.306,64,1.014,65,0.611,66,1.149,67,1.651,68,2.111,69,2.407,70,2.407,71,1.609,72,2.253,73,1.306,74,1.014,75,1.306,76,1.609,77,1.306,78,1.149,79,2.367,80,1.22,81,1.014,82,1.829,83,2.656,84,1.014,85,1.829,86,2.111,87,1.609,88,1.552,89,1.609,90,1.42,194,2.531]],["title/components/OnDestroyHostComponent.html",[115,1.295,149,1.685]],["body/components/OnDestroyHostComponent.html",[0,0.961,3,0.445,4,0.445,5,0.445,7,0.385,10,0.779,11,0.779,15,0.05,16,0.656,21,1.092,22,0.878,23,1.415,29,0.915,30,1.156,31,1.445,33,1.611,36,0.027,41,0.027,42,0.027,48,0.662,54,0.511,58,0.656,59,0.445,65,1.051,67,0.749,95,2.106,96,1.608,97,1.415,98,1.092,99,1.448,100,3.114,101,1.448,102,1.448,104,1.25,105,1.448,106,1.679,108,1.448,109,2.133,110,1.448,111,2.133,112,2.653,113,1.448,114,1.448,115,2.191,116,1.448,117,0.961,118,1.448,119,1.841,120,1.448,121,0.961,122,2.623,123,2.133,124,1.092,125,2.793,126,1.608,127,1.841,128,1.25,129,0.848,130,1.092,131,1.25,132,1.448,133,1.448,134,1.448,135,1.448,136,1.448,137,1.448,138,1.841,139,3.304,140,1.482,141,1.679,142,2.186,143,1.448,144,1.841,145,1.448,146,2.532,147,2.532,148,2.532,149,2.411,150,1.841,151,2.133,152,2.133,153,2.532,154,2.793,155,1.448,156,1.448,157,1.448,158,1.25,159,1.448,160,1.092,161,1.909,162,1.25,163,1.25,164,2.186,165,2.186,166,2.411,167,2.186,168,1.909,169,1.635,170,1.25,171,2.133,172,1.25,173,1.25,174,2.852,175,1.448,176,1.448,177,1.841,178,1.841,179,1.25,180,1.25,181,1.25,182,2.186,183,1.25,184,1.841,185,1.448,186,1.448,187,1.448,188,1.448,189,1.448,190,1.448,191,1.448,195,2.133,196,2.116,197,2.116,198,2.116,199,2.116,200,3.116,201,1.713,202,4.08,203,2.116,204,1.448,205,2.116]],["title/classes/ResourceRegistrySelectors.html",[36,0.024,206,2.31]],["body/classes/ResourceRegistrySelectors.html",[3,0.383,4,0.383,5,0.383,7,0.782,11,0.383,13,0.81,14,0.766,15,0.05,16,0.796,18,1.246,19,1.056,29,0.971,30,1.534,31,1.762,33,1.674,35,1.075,36,0.016,40,4.195,41,0.024,42,0.024,44,0.569,45,1.038,46,1.038,49,1.165,51,1.34,52,1.708,53,0.729,54,0.985,57,0.985,58,0.858,59,0.905,60,1.835,64,0.729,65,0.816,80,1.388,87,1.344,88,1.344,103,1.644,140,0.729,141,0.826,168,0.939,169,1.792,206,2.253,207,1.474,208,2.783,209,2.253,210,2.783,211,3.168,212,2.851,213,2.783,214,3.572,215,3.301,216,4.077,217,1.82,218,3.684,219,4.824,220,3.829,221,2.783,222,1.82,223,2.783,224,1.82,225,2.783,226,2.736,227,2.783,228,1.82,229,2.783,230,1.82,231,3.783,232,1.474,233,1.075,234,1.246,235,1.246,236,1.82,237,2.253,238,2.313,239,4.077,240,4.077,241,1.82,242,2.783,243,2.783,244,1.474,245,1.82,246,1.82,247,1.82,248,1.474,249,1.82,250,1.82,251,1.82,252,1.474,253,1.82,254,1.246,255,1.82,256,1.82,257,2.783]],["title/injectables/ResourceRegistryState.html",[235,1.952,258,1.952]],["body/injectables/ResourceRegistryState.html",[3,0.377,4,0.377,5,0.899,7,0.776,9,1.365,11,0.377,13,0.663,14,0.921,15,0.049,16,0.936,19,0.56,20,0.634,22,0.682,25,1.88,29,1.028,30,1.39,33,0.973,36,0.015,41,0.024,42,0.024,43,2.033,45,1.031,46,1.031,48,0.859,49,0.808,52,1.666,54,0.977,57,0.977,58,0.899,59,0.936,60,1.433,64,0.717,65,0.664,71,1.247,72,1.247,74,1.782,76,2.218,78,0.812,79,2.019,80,1.033,81,1.503,84,1.503,87,1.265,88,1.173,89,1.703,90,1.711,103,1.623,106,1.939,117,0.812,121,0.812,122,2.429,124,0.924,169,1.621,209,1.449,212,1.623,214,1.225,215,3.276,218,3.473,233,1.057,234,1.225,235,1.88,244,1.449,254,1.225,258,1.88,259,1.789,260,1.789,261,2.747,262,2.747,263,2.747,264,2.747,265,2.747,266,2.747,267,2.747,268,4.183,269,2.747,270,1.789,271,4.803,272,3.889,273,2.747,274,2.747,275,1.789,276,2.747,277,4.046,278,2.747,279,1.789,280,2.747,281,1.789,282,2.747,283,2.747,284,2.224,285,2.747,286,2.747,287,2.747,288,1.789,289,2.747,290,4.27,291,3.037,292,3.75,293,2.747,294,2.747,295,1.789,296,3.343,297,1.789,298,1.789,299,1.789,300,1.789,301,1.789,302,1.449,303,1.789,304,2.747,305,1.449,306,1.789,307,1.789,308,2.747,309,1.789,310,1.789,311,1.789,312,1.789,313,1.789,314,1.789,315,2.747,316,1.789,317,1.789,318,1.789,319,1.789,320,1.449,321,1.789,322,1.789,323,1.789,324,1.789]],["title/classes/ScopedDestroySubject.html",[36,0.024,131,1.685]],["body/classes/ScopedDestroySubject.html",[0,0.994,3,0.461,4,0.461,5,0.461,7,0.581,10,0.673,11,0.794,13,0.34,15,0.05,16,0.673,21,1.65,22,0.904,23,0.994,29,0.928,30,1.18,31,1.562,33,1.631,36,0.027,41,0.027,42,0.027,44,0.685,48,0.999,54,0.529,57,0.529,58,0.461,59,0.673,65,1.065,67,1.132,95,2.377,96,1.65,97,1.451,98,1.131,99,1.499,100,3.402,101,1.499,102,1.499,104,1.294,105,1.499,106,1.883,108,1.499,109,2.187,110,1.499,111,2.583,112,2.74,113,1.499,114,1.499,115,2.002,116,1.499,117,0.994,118,1.499,119,1.888,120,1.499,121,0.994,122,2.642,123,2.583,124,1.131,125,3.336,126,2.141,127,2.451,128,1.888,129,1.281,130,1.65,131,1.888,132,2.187,133,2.187,134,1.499,135,1.499,136,1.499,137,1.499,138,1.294,139,2.583,140,0.878,141,0.994,142,1.294,143,1.499,144,1.888,145,1.499,146,1.499,147,1.499,148,1.499,149,1.294,150,1.294,151,1.499,152,1.499,153,1.499,154,1.499,155,1.499,156,1.499,157,1.499,158,1.294,159,1.499,160,1.131,161,1.948,162,1.294,163,1.294,164,2.23,165,2.23,166,2.451,167,2.23,168,1.948,169,1.662,170,1.294,171,2.187,172,1.294,173,1.294,174,2.88,175,1.499,176,1.499,177,1.888,178,1.888,179,1.294,180,1.294,181,1.294,182,2.23,183,1.294,184,1.888,185,1.499,186,1.499,187,1.499,188,1.499,189,1.499,190,1.499,191,1.499,325,2.19]],["title/classes/SnapshotObserver.html",[36,0.024,326,2.31]],["body/classes/SnapshotObserver.html",[3,0.393,4,0.393,5,0.393,7,0.697,10,0.393,11,0.393,13,0.64,15,0.05,16,0.868,19,1.073,20,0.661,22,0.866,23,1.287,28,1.941,29,0.914,30,1.489,31,1.537,33,1.215,36,0.016,41,0.024,42,0.024,44,0.583,54,0.996,57,0.829,58,0.722,59,0.868,65,1.048,80,0.781,97,0.847,103,1.676,106,1.97,117,0.847,121,0.847,124,0.963,126,1.464,129,2.171,130,1.978,138,1.102,140,1.863,141,0.847,142,1.676,144,2.027,158,2.027,169,1.136,195,1.941,204,1.941,211,2.264,232,1.51,233,1.102,238,3.259,252,2.296,254,2.348,284,3.856,326,3.103,327,2.971,328,2.971,329,1.277,330,4.34,331,2.835,332,3.856,333,3.338,334,2.835,335,2.835,336,2.835,337,1.865,338,3.832,339,1.865,340,3.832,341,3.103,342,2.835,343,2.835,344,3.103,345,3.832,346,1.865,347,4.34,348,2.296,349,3.515,350,2.835,351,1.865,352,3.43,353,1.865,354,3.43,355,2.835,356,2.835,357,1.865,358,2.296,359,3.103,360,1.51,361,2.296,362,1.51,363,2.835,364,1.865,365,1.865,366,2.835,367,1.865,368,1.865,369,2.835,370,2.835,371,3.43,372,1.865,373,1.865,374,1.277,375,1.941,376,1.51,377,2.348,378,3.832,379,2.296,380,2.296,381,2.296,382,2.296,383,2.296,384,2.296,385,2.296,386,2.296,387,1.865,388,1.865,389,1.865,390,1.865,391,1.865,392,1.865,393,1.865,394,1.941,395,2.623,396,2.778,397,2.296,398,1.51,399,1.51,400,2.296,401,1.865,402,1.865]],["title/dependencies.html",[403,1.947,404,2.768]],["body/dependencies.html",[15,0.049,41,0.042,42,0.042,121,1.896,141,2.222,233,2.468,404,3.963,405,4.177,406,4.177,407,4.177,408,4.177,409,4.894,410,4.177,411,4.177,412,4.177]],["title/miscellaneous/enumerations.html",[413,0.851,414,2.768]],["body/miscellaneous/enumerations.html",[11,0.87,15,0.047,41,0.042,42,0.042,45,0.998,46,0.998,49,0.998,87,1.52,88,1.52,129,2.071,212,2.873,234,3.328,413,1.463,414,3.345,415,2.441,416,2.873,417,4.131,418,3.345,419,4.131,420,4.131]],["title/miscellaneous/functions.html",[413,0.851,421,2.768]],["body/miscellaneous/functions.html",[1,1.921,6,1.49,7,0.895,8,0.994,9,1.43,10,0.591,11,0.387,13,0.843,14,1.391,15,0.047,17,2.272,21,0.95,22,0.842,23,1.544,24,0.994,25,1.26,26,2.272,27,2.754,28,2.804,30,1.595,31,1.529,32,1.49,33,0.652,35,1.087,36,0.016,37,1.49,38,1.49,41,0.024,42,0.024,45,0.444,46,0.444,49,0.678,51,0.652,57,1.188,58,1.036,59,1.05,60,0.652,61,1.363,62,1.274,80,0.507,95,1.964,96,0.95,97,0.835,98,2.115,106,1.274,112,2.318,115,0.835,117,0.835,119,2.01,122,2.699,126,1.449,127,1.087,128,1.658,129,1.525,130,1.449,140,1.73,160,0.95,161,1.449,164,2.01,165,2.01,166,2.249,167,2.01,168,1.756,169,1.525,170,1.087,172,1.087,173,1.087,174,1.087,177,2.01,178,1.658,179,1.087,180,1.087,181,1.087,182,1.087,183,1.087,184,1.087,195,2.328,201,1.49,204,2.328,211,2.249,238,1.26,291,2.272,305,1.49,320,2.754,327,1.26,328,1.26,329,2.328,332,2.272,333,2.754,341,2.272,344,2.272,348,1.49,349,2.272,359,2.754,360,1.49,361,2.754,362,1.49,374,1.921,375,1.921,377,2.605,379,2.272,380,3.081,381,2.754,382,2.272,383,2.272,384,2.272,385,2.272,386,1.49,394,2.328,395,2.605,396,3.081,397,2.272,398,1.49,399,1.49,400,1.49,413,0.652,415,1.087,416,1.658,421,2.272,422,2.806,423,2.806,424,2.272,425,2.754,426,2.806,427,2.806,428,1.49,429,2.806,430,3.081,431,2.806,432,2.806,433,2.272,434,1.49,435,1.84,436,1.84,437,2.272,438,1.84,439,1.49,440,1.49,441,1.84,442,1.84,443,1.84,444,1.84,445,1.84,446,1.84,447,1.49,448,1.84,449,1.84,450,1.84,451,1.84,452,1.84,453,1.84,454,1.84,455,1.84,456,1.84,457,1.84,458,1.84,459,2.272,460,1.84,461,1.84,462,1.84,463,2.806,464,1.84,465,1.84,466,2.806,467,1.84,468,2.806,469,1.84,470,1.84,471,1.84,472,1.84,473,2.806,474,1.84,475,1.84,476,1.84,477,1.84,478,1.84,479,1.84,480,1.84,481,1.84,482,1.84,483,1.84,484,1.84,485,1.84,486,1.84,487,1.84,488,1.84,489,2.806,490,1.84,491,1.84,492,1.84,493,1.84]],["title/index.html",[11,0.506,494,2.405,495,2.405]],["body/index.html",[15,0.043,41,0.043,42,0.043,496,4.967,497,4.285,498,4.285,499,4.967,500,4.285,501,4.967,502,4.967,503,4.285,504,4.285,505,4.285]],["title/modules.html",[506,3.115]],["body/modules.html",[15,0.043,41,0.043,42,0.043,506,3.604]],["title/overview.html",[507,3.115]],["body/overview.html",[2,2.569,15,0.043,41,0.043,42,0.043,44,1.359,115,1.973,258,2.975,507,3.52,508,5.009,509,4.347,510,4.347]],["title/properties.html",[12,2.34,403,1.947]],["body/properties.html",[12,3.019,15,0.045,41,0.043,42,0.043,511,4.411,512,4.411]],["title/miscellaneous/typealiases.html",[413,0.851,513,3.418]],["body/miscellaneous/typealiases.html",[2,2.046,9,1.317,10,0.729,11,0.729,13,0.804,15,0.041,30,1.082,31,1.872,35,2.046,41,0.037,42,0.037,45,1.055,46,1.055,49,1.213,51,1.546,52,1.226,53,1.749,61,1.387,80,1.202,140,1.387,150,2.046,207,3.872,211,2.58,214,2.988,218,2.37,220,3.535,226,3.535,237,2.803,268,3.535,272,2.803,327,2.37,328,2.37,329,2.988,358,2.803,374,2.37,375,2.37,376,2.803,377,2.988,394,2.37,395,2.37,413,1.226,415,3.123,416,3.059,428,2.803,433,2.803,437,2.803,439,2.803,440,2.803,447,3.535,459,2.803,514,3.462,515,3.462,516,3.462,517,3.462,518,3.462,519,4.782,520,3.462,521,3.462,522,3.462]],["title/miscellaneous/variables.html",[413,0.851,523,2.768]],["body/miscellaneous/variables.html",[8,1.223,9,1.382,11,0.918,13,0.82,14,0.951,15,0.048,18,2.984,22,0.793,24,1.223,41,0.037,42,0.037,45,1.053,46,1.053,47,1.979,49,0.834,66,1.568,87,1.08,88,1.08,96,1.783,97,1.568,98,2.25,104,2.041,112,1.783,129,2.01,160,1.783,161,1.783,162,2.576,163,2.041,212,2.041,248,4.063,302,3.53,413,1.223,415,2.576,416,2.576,418,2.797,424,2.797,425,3.53,430,2.797,434,2.797,523,2.797,524,4.359,525,3.454,526,3.454,527,4.359,528,3.454,529,3.454,530,3.454,531,3.454,532,4.777,533,3.454,534,5.017,535,3.454,536,3.454,537,3.454,538,3.454,539,3.454,540,3.454]]],"invertedIndex":[["",{"_index":15,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":185,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["0.0.1",{"_index":512,"title":{},"body":{"properties.html":{}}}],["1",{"_index":508,"title":{},"body":{"overview.html":{}}}],["1165545544",{"_index":490,"title":{},"body":{"miscellaneous/functions.html":{}}}],["1199063426",{"_index":491,"title":{},"body":{"miscellaneous/functions.html":{}}}],["15.1.0",{"_index":409,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":510,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":406,"title":{},"body":{"dependencies.html":{}}}],["3.7.6",{"_index":410,"title":{},"body":{"dependencies.html":{}}}],["8",{"_index":509,"title":{},"body":{"overview.html":{}}}],["accepts",{"_index":515,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["action",{"_index":9,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["action('add",{"_index":68,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["action('load",{"_index":85,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["action(`[${group",{"_index":34,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["action(add",{"_index":274,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(addfromyaml",{"_index":278,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(addmany",{"_index":269,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(loadfromyaml",{"_index":294,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(loadmarkdown",{"_index":287,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["action(type",{"_index":37,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actionconstructor",{"_index":1,"title":{"interfaces/ActionConstructor.html":{}},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actiongroup",{"_index":62,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/functions.html":{}}}],["actiongroup('resourceregistry",{"_index":66,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["actiongroup(group",{"_index":32,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["actions/actions",{"_index":63,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["actiontype",{"_index":445,"title":{},"body":{"miscellaneous/functions.html":{}}}],["actiontyperegistry",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual_component",{"_index":205,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["add",{"_index":43,"title":{"classes/Add.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["add(id",{"_index":322,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["added",{"_index":292,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["addfromyaml",{"_index":81,"title":{"classes/AddFromYaml.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["addfromyaml(data",{"_index":318,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["additional",{"_index":419,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["addmany",{"_index":74,"title":{"classes/AddMany.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["addmany(ctx",{"_index":267,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["addmany(entries",{"_index":312,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["addone",{"_index":264,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["addone(ctx",{"_index":273,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["adds",{"_index":25,"title":{},"body":{"interfaces/ActionConstructor.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["addyaml",{"_index":265,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["addyaml(ctx",{"_index":276,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["aliases",{"_index":514,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular/common",{"_index":408,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":298,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["angular/core",{"_index":121,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["anytext",{"_index":210,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["anytext(state",{"_index":213,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["args",{"_index":378,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["argument",{"_index":376,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["arguments",{"_index":395,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["asserts",{"_index":436,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype",{"_index":423,"title":{},"body":{"miscellaneous/functions.html":{}}}],["assertuniqueactiontype(type",{"_index":435,"title":{},"body":{"miscellaneous/functions.html":{}}}],["associated",{"_index":167,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["automatic",{"_index":442,"title":{},"body":{"miscellaneous/functions.html":{}}}],["automatically",{"_index":126,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["available",{"_index":385,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["base",{"_index":8,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["baseaction",{"_index":39,"title":{},"body":{"interfaces/ActionConstructor.html":{}}}],["based",{"_index":485,"title":{},"body":{"miscellaneous/functions.html":{}}}],["before",{"_index":460,"title":{},"body":{"miscellaneous/functions.html":{}}}],["block",{"_index":148,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["bound",{"_index":397,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["boundargs",{"_index":396,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["brand('resourceid",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["build",{"_index":454,"title":{},"body":{"miscellaneous/functions.html":{}}}],["built",{"_index":417,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["call",{"_index":444,"title":{},"body":{"miscellaneous/functions.html":{}}}],["callback",{"_index":109,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["callbacks",{"_index":101,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["called",{"_index":381,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["care",{"_index":480,"title":{},"body":{"miscellaneous/functions.html":{}}}],["case",{"_index":243,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["caveats",{"_index":457,"title":{},"body":{"miscellaneous/functions.html":{}}}],["cb",{"_index":114,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["cdk",{"_index":496,"title":{},"body":{"index.html":{}}}],["cdr",{"_index":340,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["change",{"_index":341,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["changedetectorref",{"_index":338,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["class",{"_index":36,"title":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["classes",{"_index":44,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"overview.html":{}}}],["cleanup",{"_index":100,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["comment",{"_index":486,"title":{},"body":{"miscellaneous/functions.html":{}}}],["common",{"_index":26,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["complete",{"_index":130,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["completes",{"_index":291,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["completion",{"_index":348,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["complex",{"_index":455,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component",{"_index":115,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["component/directive/etc",{"_index":492,"title":{},"body":{"miscellaneous/functions.html":{}}}],["component_template",{"_index":203,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["components",{"_index":195,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["const",{"_index":65,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["constructor",{"_index":10,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["constructor(cdr",{"_index":337,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(entries",{"_index":93,"title":{},"body":{"classes/AddMany.html":{}}}],["constructor(id",{"_index":50,"title":{},"body":{"classes/Add.html":{},"classes/LoadMarkdown.html":{}}}],["constructor(private",{"_index":367,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["constructor(readonly",{"_index":69,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["constructor(scope",{"_index":133,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["constructor(url",{"_index":192,"title":{},"body":{"classes/LoadFromYaml.html":{}}}],["constructor(yaml",{"_index":91,"title":{},"body":{"classes/AddFromYaml.html":{}}}],["container",{"_index":178,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["containing",{"_index":471,"title":{},"body":{"miscellaneous/functions.html":{}}}],["content",{"_index":289,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["context",{"_index":272,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["control",{"_index":451,"title":{},"body":{"miscellaneous/functions.html":{}}}],["controlling",{"_index":482,"title":{},"body":{"miscellaneous/functions.html":{}}}],["create",{"_index":21,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["created",{"_index":172,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["createresourceid",{"_index":426,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createresourceid(id",{"_index":438,"title":{},"body":{"miscellaneous/functions.html":{}}}],["creates",{"_index":23,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["ctx",{"_index":271,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["ctx.patchstate(entries",{"_index":309,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["current",{"_index":219,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["data",{"_index":80,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["data$.subscribe(observer",{"_index":392,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["decorators",{"_index":215,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["default",{"_index":248,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["defaults",{"_index":303,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["defined",{"_index":54,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["dependencies",{"_index":404,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["destroy",{"_index":142,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["destroy.ts",{"_index":98,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroy.ts:10",{"_index":107,"title":{},"body":{"interfaces/DestructorScope.html":{}}}],["destroy.ts:17",{"_index":325,"title":{},"body":{"classes/ScopedDestroySubject.html":{}}}],["destroy.ts:39",{"_index":198,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["destroy/on",{"_index":97,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["destroyed",{"_index":473,"title":{},"body":{"miscellaneous/functions.html":{}}}],["destruction",{"_index":113,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["destructorscope",{"_index":95,"title":{"interfaces/DestructorScope.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["detection",{"_index":384,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["detector",{"_index":342,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["directive",{"_index":201,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"miscellaneous/functions.html":{}}}],["directives",{"_index":204,"title":{},"body":{"components/OnDestroyHostComponent.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["discriminated",{"_index":517,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["discriminatedunion('type",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dispatch",{"_index":427,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatch(actiontype",{"_index":440,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["dispatcher",{"_index":447,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["dispatches",{"_index":448,"title":{},"body":{"miscellaneous/functions.html":{}}}],["dispatching",{"_index":443,"title":{},"body":{"miscellaneous/functions.html":{}}}],["display",{"_index":147,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["dom",{"_index":153,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["don't",{"_index":474,"title":{},"body":{"miscellaneous/functions.html":{}}}],["during",{"_index":111,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["each",{"_index":28,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["early",{"_index":484,"title":{},"body":{"miscellaneous/functions.html":{}}}],["el",{"_index":155,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["el?.remove",{"_index":159,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["element",{"_index":154,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["elementref",{"_index":116,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["emit",{"_index":128,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["emits",{"_index":349,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["emitted",{"_index":345,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["empty",{"_index":138,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["entries",{"_index":76,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["entry",{"_index":52,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["entry.markdown",{"_index":245,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry.text",{"_index":247,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["entry?.type",{"_index":242,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["enumerations",{"_index":414,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":352,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["error",{"_index":284,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["error(err",{"_index":350,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errors",{"_index":355,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["errorvalue",{"_index":365,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["excluding",{"_index":399,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["execute",{"_index":505,"title":{},"body":{"index.html":{}}}],["existing",{"_index":166,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["explicitly",{"_index":472,"title":{},"body":{"miscellaneous/functions.html":{}}}],["export",{"_index":19,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["extends",{"_index":67,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["external",{"_index":290,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["factory",{"_index":24,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["failure",{"_index":483,"title":{},"body":{"miscellaneous/functions.html":{}}}],["false",{"_index":364,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["filename",{"_index":277,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["find",{"_index":165,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject",{"_index":429,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findorcreatescopedsubject(component.hostview",{"_index":191,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(inject(ngmoduleref",{"_index":189,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["findorcreatescopedsubject(scope",{"_index":173,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubject",{"_index":431,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubject(scope",{"_index":170,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["findscopedsubjectinview",{"_index":432,"title":{},"body":{"miscellaneous/functions.html":{}}}],["findscopedsubjectinview(ref",{"_index":184,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["found",{"_index":168,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":31,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":421,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generated",{"_index":498,"title":{},"body":{"index.html":{}}}],["get()(...boundargs",{"_index":402,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["get(url",{"_index":314,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["getentry",{"_index":255,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["gets",{"_index":252,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["getting",{"_index":494,"title":{"index.html":{}},"body":{}}],["global",{"_index":263,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["group",{"_index":27,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["guarantees",{"_index":458,"title":{},"body":{"miscellaneous/functions.html":{}}}],["handlers",{"_index":520,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["handles",{"_index":347,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["haserror",{"_index":363,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["hook",{"_index":464,"title":{},"body":{"miscellaneous/functions.html":{}}}],["host",{"_index":139,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["hra",{"_index":141,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["html",{"_index":200,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["htmlelement",{"_index":157,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["http",{"_index":304,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["httpclient",{"_index":297,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["https://github.com/angular/angular/issues/10185",{"_index":487,"title":{},"body":{"miscellaneous/functions.html":{}}}],["https://github.com/angular/angular/issues/10185#issuecomment",{"_index":489,"title":{},"body":{"miscellaneous/functions.html":{}}}],["id",{"_index":60,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["identifier",{"_index":61,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["immediately",{"_index":151,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["implements",{"_index":335,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["import",{"_index":16,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["important",{"_index":476,"title":{},"body":{"miscellaneous/functions.html":{}}}],["improved",{"_index":283,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["index",{"_index":11,"title":{"index.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["inject",{"_index":117,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["inject(changedetectorref",{"_index":388,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(elementref).nativeelement",{"_index":156,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["inject(httpclient",{"_index":307,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["inject(store",{"_index":387,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["inject(viewcontainerref",{"_index":188,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["injectable",{"_index":258,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"injectables/ResourceRegistryState.html":{},"overview.html":{}}}],["injectables",{"_index":259,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["injected",{"_index":449,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injection",{"_index":456,"title":{},"body":{"miscellaneous/functions.html":{}}}],["injectondestroy",{"_index":361,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["injectors/.../dispatch.ts",{"_index":428,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/.../on",{"_index":430,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/.../select",{"_index":433,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/dispatch/dispatch.ts",{"_index":439,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injectors/src/lib/on",{"_index":96,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["injectors/src/lib/select",{"_index":327,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["injects",{"_index":379,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["instance",{"_index":150,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/typealiases.html":{}}}],["instances",{"_index":446,"title":{},"body":{"miscellaneous/functions.html":{}}}],["intentionally",{"_index":373,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{}},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"overview.html":{},"miscellaneous/typealiases.html":{}}}],["js",{"_index":299,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["keeping",{"_index":261,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["latest",{"_index":332,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["legend",{"_index":199,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["length",{"_index":186,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["level",{"_index":467,"title":{},"body":{"miscellaneous/functions.html":{}}}],["library",{"_index":497,"title":{},"body":{"index.html":{}}}],["lifecycle",{"_index":463,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lifetime",{"_index":452,"title":{},"body":{"miscellaneous/functions.html":{}}}],["link",{"_index":132,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["load",{"_index":296,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["load(yaml",{"_index":310,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loaded",{"_index":89,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadfromyaml",{"_index":84,"title":{"classes/LoadFromYaml.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loading",{"_index":306,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown",{"_index":90,"title":{"classes/LoadMarkdown.html":{}},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["loadmarkdown(ctx",{"_index":286,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loads",{"_index":86,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["loadyaml",{"_index":266,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["loadyaml(ctx",{"_index":293,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["maintain",{"_index":481,"title":{},"body":{"miscellaneous/functions.html":{}}}],["manipulate",{"_index":478,"title":{},"body":{"miscellaneous/functions.html":{}}}],["many",{"_index":75,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["map",{"_index":300,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((action",{"_index":323,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["map((markdown",{"_index":321,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["markdown",{"_index":88,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["markdown(state",{"_index":221,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["marks",{"_index":382,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":42,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["messages",{"_index":285,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["metadata",{"_index":197,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["methods",{"_index":103,"title":{},"body":{"interfaces/DestructorScope.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["miscellaneous",{"_index":413,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":522,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["module",{"_index":466,"title":{},"body":{"miscellaneous/functions.html":{}}}],["modules",{"_index":506,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["mostly",{"_index":488,"title":{},"body":{"miscellaneous/functions.html":{}}}],["multiple",{"_index":71,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["name",{"_index":58,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["never",{"_index":469,"title":{},"body":{"miscellaneous/functions.html":{}}}],["new",{"_index":22,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":336,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["next(value",{"_index":356,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["ngmoduleref",{"_index":118,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ngondestroy",{"_index":462,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ngxs/store",{"_index":233,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{}}}],["notify",{"_index":343,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["null",{"_index":158,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["nx",{"_index":499,"title":{},"body":{"index.html":{}}}],["object",{"_index":99,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["observable",{"_index":122,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["observables",{"_index":160,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["observer",{"_index":330,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["observer.get.bind(observer",{"_index":393,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["once",{"_index":73,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["ondestroy",{"_index":104,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["ondestroy(cb",{"_index":105,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ondestroyhostcomponent",{"_index":149,"title":{"components/OnDestroyHostComponent.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["operations",{"_index":477,"title":{},"body":{"miscellaneous/functions.html":{}}}],["optional",{"_index":59,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["optionally",{"_index":237,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["or(z.object",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["otherwise",{"_index":253,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["overview",{"_index":507,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["overwrite",{"_index":56,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["owned",{"_index":180,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["owning",{"_index":161,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":403,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":29,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["parameters",{"_index":57,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":280,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["partial",{"_index":77,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["passed",{"_index":516,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["passthrough",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["peer",{"_index":407,"title":{},"body":{"dependencies.html":{}}}],["perform",{"_index":110,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["pipe",{"_index":320,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["pipe(map((data",{"_index":316,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["pipes",{"_index":383,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["private",{"_index":254,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["properties",{"_index":12,"title":{"properties.html":{}},"body":{"interfaces/ActionConstructor.html":{},"properties.html":{}}}],["queries",{"_index":225,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["query",{"_index":211,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["query(state",{"_index":223,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["queryargs",{"_index":401,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["raw",{"_index":78,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["readonly",{"_index":20,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{},"classes/SnapshotObserver.html":{}}}],["ref",{"_index":182,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["ref.createcomponent(ondestroyhostcomponent",{"_index":190,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["ref.length",{"_index":187,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["register",{"_index":108,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registeractiontype",{"_index":17,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registeractiontype(type",{"_index":38,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["registered",{"_index":102,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["registers",{"_index":127,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["registry",{"_index":18,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/variables.html":{}}}],["registry.actions",{"_index":301,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.actions.ts",{"_index":47,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"miscellaneous/variables.html":{}}}],["registry.actions.ts:20",{"_index":94,"title":{},"body":{"classes/AddMany.html":{}}}],["registry.actions.ts:31",{"_index":92,"title":{},"body":{"classes/AddFromYaml.html":{}}}],["registry.actions.ts:42",{"_index":193,"title":{},"body":{"classes/LoadFromYaml.html":{}}}],["registry.actions.ts:53",{"_index":194,"title":{},"body":{"classes/LoadMarkdown.html":{}}}],["registry.actions.ts:8",{"_index":55,"title":{},"body":{"classes/Add.html":{}}}],["registry.model",{"_index":64,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["registry.model.ts",{"_index":416,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["registry.selectors.ts",{"_index":207,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["registry.selectors.ts:23",{"_index":224,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:33",{"_index":217,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:55",{"_index":222,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:65",{"_index":228,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.selectors.ts:75",{"_index":230,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state",{"_index":236,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["registry.state.ts",{"_index":260,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:30",{"_index":275,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:40",{"_index":270,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:51",{"_index":279,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:64",{"_index":295,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.state.ts:77",{"_index":288,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["registry.ts",{"_index":425,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["registry/resource",{"_index":46,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["regular",{"_index":461,"title":{},"body":{"miscellaneous/functions.html":{}}}],["rely",{"_index":475,"title":{},"body":{"miscellaneous/functions.html":{}}}],["remote",{"_index":83,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["removes",{"_index":152,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["replaysubject",{"_index":123,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["res",{"_index":400,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["resource",{"_index":49,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema",{"_index":302,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/variables.html":{}}}],["resource_registry_schema.parse(data",{"_index":311,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["resourceentry",{"_index":53,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid",{"_index":51,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["resourceid:'${id",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["resourceregistry",{"_index":209,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourceregistrycontext",{"_index":268,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrydataquery",{"_index":220,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistrymodel",{"_index":214,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryquery",{"_index":226,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"miscellaneous/typealiases.html":{}}}],["resourceregistryselectors",{"_index":206,"title":{"classes/ResourceRegistrySelectors.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistryselectors.getentry(state",{"_index":240,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourceregistrystate",{"_index":235,"title":{"injectables/ResourceRegistryState.html":{}},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resources",{"_index":72,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype",{"_index":234,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{}}}],["resourcetype.markdown",{"_index":244,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{}}}],["resourcetype.markdown)?.markdown",{"_index":249,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text",{"_index":246,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.text)?.text",{"_index":250,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["resourcetype.url)?.url",{"_index":251,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["responsetype",{"_index":315,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["result",{"_index":174,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["results",{"_index":41,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":33,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["returned",{"_index":459,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["returns",{"_index":30,"title":{},"body":{"interfaces/ActionConstructor.html":{},"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["root",{"_index":465,"title":{},"body":{"miscellaneous/functions.html":{}}}],["run",{"_index":503,"title":{},"body":{"index.html":{}}}],["running",{"_index":500,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":124,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["same",{"_index":394,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["schema",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["scope",{"_index":112,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["scope.ondestroy",{"_index":135,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject",{"_index":131,"title":{"classes/ScopedDestroySubject.html":{}},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopeddestroysubject(scope).asobservable",{"_index":175,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects",{"_index":162,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["scopedsubjects.get(scope",{"_index":171,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["scopedsubjects.set(scope",{"_index":176,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["search",{"_index":183,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["searching",{"_index":179,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["selector",{"_index":140,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selector(['resourceregistrystate",{"_index":216,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selector([resourceregistrystate",{"_index":239,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selectors",{"_index":208,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["selectquerysnapshot",{"_index":375,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectquerysnapshot(selector",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["selectsnapshot",{"_index":374,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["selectsnapshot(selector",{"_index":386,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["selectsnapshotselector",{"_index":377,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["service",{"_index":305,"title":{},"body":{"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{}}}],["services",{"_index":468,"title":{},"body":{"miscellaneous/functions.html":{}}}],["set",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["single",{"_index":48,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{}}}],["snapshot",{"_index":333,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["snapshot.ts",{"_index":329,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshot.ts:14",{"_index":339,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:27",{"_index":353,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:39",{"_index":357,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:48",{"_index":351,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot.ts:57",{"_index":346,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["snapshot/select",{"_index":328,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["snapshotobserver",{"_index":326,"title":{"classes/SnapshotObserver.html":{}},"body":{"classes/SnapshotObserver.html":{}}}],["snapshotobserver(cdr",{"_index":391,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["specified",{"_index":35,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/ResourceRegistrySelectors.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["standalone",{"_index":143,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["started",{"_index":495,"title":{"index.html":{}},"body":{}}],["state",{"_index":218,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/typealiases.html":{}}}],["state/.../action",{"_index":424,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/.../actions.ts",{"_index":422,"title":{},"body":{"miscellaneous/functions.html":{}}}],["state/.../resource",{"_index":415,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/action",{"_index":434,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["state/src/actions/actions.ts",{"_index":6,"title":{},"body":{"interfaces/ActionConstructor.html":{},"miscellaneous/functions.html":{}}}],["state/src/resource",{"_index":45,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["state[id",{"_index":256,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["statecontext",{"_index":521,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["statetoken",{"_index":358,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/typealiases.html":{}}}],["statetoken).pipe(takeuntil(destroy",{"_index":390,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["static",{"_index":40,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/ResourceRegistrySelectors.html":{}}}],["store",{"_index":359,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["store.select(selector",{"_index":389,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["storing",{"_index":331,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["stream",{"_index":334,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["string",{"_index":14,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["styles",{"_index":146,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["subject",{"_index":125,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["super",{"_index":70,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["super(1",{"_index":134,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["support",{"_index":420,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["switch",{"_index":241,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["t",{"_index":238,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["take",{"_index":479,"title":{},"body":{"miscellaneous/functions.html":{}}}],["takeuntil",{"_index":360,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["taking",{"_index":398,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["template",{"_index":145,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["test",{"_index":504,"title":{},"body":{"index.html":{}}}],["tests",{"_index":502,"title":{},"body":{"index.html":{}}}],["text",{"_index":212,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["text(state",{"_index":227,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["this.addmany(ctx",{"_index":308,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addone(ctx",{"_index":324,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.addyaml(ctx",{"_index":317,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.cdr?.markforcheck",{"_index":372,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.complete",{"_index":137,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.errorvalue",{"_index":370,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.haserror",{"_index":369,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["this.http",{"_index":313,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.http.get(url",{"_index":319,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["this.next",{"_index":136,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["this.value",{"_index":371,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["throw",{"_index":354,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["throws",{"_index":368,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["time",{"_index":380,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["track",{"_index":262,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["transform((id",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tree",{"_index":196,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["tries",{"_index":164,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":144,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{}}}],["tslib",{"_index":405,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":13,"title":{},"body":{"interfaces/ActionConstructor.html":{},"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"interfaces/DestructorScope.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":513,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typematches",{"_index":257,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["types",{"_index":418,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ui/theming",{"_index":411,"title":{},"body":{"dependencies.html":{}}}],["ui/utils",{"_index":412,"title":{},"body":{"dependencies.html":{}}}],["ui/utils/types",{"_index":232,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{},"classes/SnapshotObserver.html":{}}}],["undefined",{"_index":169,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["union",{"_index":518,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["unionmember",{"_index":231,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["unique",{"_index":437,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["unit",{"_index":501,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":366,"title":{},"body":{"classes/SnapshotObserver.html":{}}}],["unless",{"_index":470,"title":{},"body":{"miscellaneous/functions.html":{}}}],["unparsed",{"_index":82,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{}}}],["url",{"_index":87,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"classes/ResourceRegistrySelectors.html":{},"injectables/ResourceRegistryState.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["url(state",{"_index":229,"title":{},"body":{"classes/ResourceRegistrySelectors.html":{}}}],["url/filename",{"_index":282,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["used",{"_index":450,"title":{},"body":{"miscellaneous/functions.html":{}}}],["using",{"_index":453,"title":{},"body":{"miscellaneous/functions.html":{}}}],["validator",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["value",{"_index":129,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["var",{"_index":202,"title":{},"body":{"components/OnDestroyHostComponent.html":{}}}],["variables",{"_index":523,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":511,"title":{},"body":{"properties.html":{}}}],["view",{"_index":177,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewcontainerref",{"_index":119,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["viewref",{"_index":120,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{}}}],["views",{"_index":181,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/functions.html":{}}}],["void",{"_index":106,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"injectables/ResourceRegistryState.html":{},"classes/ScopedDestroySubject.html":{},"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["weakmap",{"_index":163,"title":{},"body":{"interfaces/DestructorScope.html":{},"components/OnDestroyHostComponent.html":{},"classes/ScopedDestroySubject.html":{},"miscellaneous/variables.html":{}}}],["whenever",{"_index":344,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["whether",{"_index":362,"title":{},"body":{"classes/SnapshotObserver.html":{},"miscellaneous/functions.html":{}}}],["wraps",{"_index":441,"title":{},"body":{"miscellaneous/functions.html":{}}}],["yaml",{"_index":79,"title":{},"body":{"classes/Add.html":{},"classes/AddFromYaml.html":{},"classes/AddMany.html":{},"classes/LoadFromYaml.html":{},"classes/LoadMarkdown.html":{},"injectables/ResourceRegistryState.html":{}}}],["yes",{"_index":281,"title":{},"body":{"injectables/ResourceRegistryState.html":{}}}],["z",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.infer",{"_index":519,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["z.literal(resourcetype.markdown",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.text",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.literal(resourcetype.url",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.object",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.record",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ActionConstructor.html":{"url":"interfaces/ActionConstructor.html","title":"interface - ActionConstructor","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ActionConstructor\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/actions/actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Base action constructor\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            type\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Action type\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { registerActionType } from './action-type-registry';\n\n/** Base action type */\nexport interface Action {\n  /** Action type */\n  readonly type: string;\n}\n\n/** Base action constructor */\nexport interface ActionConstructor {\n  /** Action type */\n  readonly type: string;\n\n  /** Create a new action */\n  new (): Action;\n}\n\n/**\n * Creates an action factory that adds a common group string to each action type\n * @param group Common action type group\n * @returns An action factory\n */\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\n  return (type) => Action(`[${group}] ${type}`);\n}\n\n/**\n * Creates a new base action with a specified type\n * @param type Action type\n * @returns A base action class\n */\nexport function Action(type: string): ActionConstructor {\n  registerActionType(type);\n  return class BaseAction {\n    static readonly type = type;\n    readonly type = type;\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Add.html":{"url":"classes/Add.html","title":"class - Add","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Add\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a single resource\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, entry: ResourceEntry)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:8\n                            \n                        \n\n                \n                    \n                            Add or overwrite a single resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource identifier\n\n                                                        \n                                                \n                                                \n                                                        entry\n                                                  \n                                                        \n                                                                        ResourceEntry\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource entry\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddFromYaml.html":{"url":"classes/AddFromYaml.html","title":"class - AddFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from raw yaml data\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(yaml: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:31\n                            \n                        \n\n                \n                    \n                            Add resources from unparsed yaml\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        yaml\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Unparsed yaml data\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AddMany.html":{"url":"classes/AddMany.html","title":"class - AddMany","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AddMany\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add multiple resources at once\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entries: Partial>)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:20\n                            \n                        \n\n                \n                    \n                            Add or overwrite multiple resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        entries\n                                                  \n                                                        \n                                                                    Partial>\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                New resources\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/DestructorScope.html":{"url":"interfaces/DestructorScope.html","title":"interface - DestructorScope","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  DestructorScope\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Object on which cleanup callbacks can be registered\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        onDestroy\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        onDestroy\n                        \n                    \n                \n            \n            \n                \nonDestroy(cb: () => void)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/on-destroy/on-destroy.ts:10\n                \n            \n\n\n            \n                \n                    Register a callback to perform cleanup during scope destruction\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    cb\n                                    \n                                                function\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Cleanup callback\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadFromYaml.html":{"url":"classes/LoadFromYaml.html","title":"class - LoadFromYaml","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadFromYaml\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add resources from a remote yaml file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:42\n                            \n                        \n\n                \n                    \n                            Loads a remote yaml file and add resources\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote yaml file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoadMarkdown.html":{"url":"classes/LoadMarkdown.html","title":"class - LoadMarkdown","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoadMarkdown\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.actions.ts\n        \n\n\n            \n                Description\n            \n            \n                Add a markdown resource with data loaded from a remote file\n\n            \n\n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: ResourceId, url: string)\n                    \n                \n                        \n                            \n                                Defined in state/src/resource-registry/resource-registry.actions.ts:53\n                            \n                        \n\n                \n                    \n                            Loads a remote markdown file and add a resource\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        ResourceId\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Resource id\n\n                                                        \n                                                \n                                                \n                                                        url\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Remote markdown file url\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ActionGroup } from '../actions/actions';\nimport { ResourceEntry, ResourceId } from './resource-registry.model';\n\n/** Base action factory */\nconst Action = ActionGroup('ResourceRegistry');\n\n/** Add a single resource */\nexport class Add extends Action('Add') {\n  /**\n   * Add or overwrite a single resource\n   * @param id Resource identifier\n   * @param entry Resource entry\n   */\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\n    super();\n  }\n}\n\n/** Add multiple resources at once */\nexport class AddMany extends Action('Add Many') {\n  /**\n   * Add or overwrite multiple resources\n   * @param entries New resources\n   */\n  constructor(readonly entries: Partial>) {\n    super();\n  }\n}\n\n/** Add resources from raw yaml data */\nexport class AddFromYaml extends Action('Add from Yaml') {\n  /**\n   * Add resources from unparsed yaml\n   * @param yaml Unparsed yaml data\n   */\n  constructor(readonly yaml: string) {\n    super();\n  }\n}\n\n/** Add resources from a remote yaml file */\nexport class LoadFromYaml extends Action('Load from Yaml') {\n  /**\n   * Loads a remote yaml file and add resources\n   * @param url Remote yaml file url\n   */\n  constructor(readonly url: string) {\n    super();\n  }\n}\n\n/** Add a markdown resource with data loaded from a remote file */\nexport class LoadMarkdown extends Action('Load Markdown') {\n  /**\n   * Loads a remote markdown file and add a resource\n   * @param id Resource id\n   * @param url Remote markdown file url\n   */\n  constructor(readonly id: ResourceId, readonly url: string) {\n    super();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/OnDestroyHostComponent.html":{"url":"components/OnDestroyHostComponent.html","title":"component - OnDestroyHostComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  OnDestroyHostComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    injectors/src/lib/on-destroy/on-destroy.ts\n\n\n\n    \n        Description\n    \n    \n        Empty host component\n\n    \n\n\n\n\n\n    Metadata\n    \n        \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                hra-on-destroy-host\n            \n\n\n            \n                styles\n                :host { display: block; }\n            \n\n\n\n\n\n\n\n\n\n\n        \n    \n\n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor()\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:39\n                            \n                        \n\n                \n                    \n                            Creates a new component instance that immediately removes its own DOM element\n\n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n    \n            :host { display: block; }\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'OnDestroyHostComponent', 'selector': 'hra-on-destroy-host'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'OnDestroyHostComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ResourceRegistrySelectors.html":{"url":"classes/ResourceRegistrySelectors.html","title":"class - ResourceRegistrySelectors","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ResourceRegistrySelectors\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.selectors.ts\n        \n\n\n            \n                Description\n            \n            \n                Selectors for ResourceRegistry\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                anyText\n                            \n                            \n                                    Static\n                                markdown\n                            \n                            \n                                    Static\n                                query\n                            \n                            \n                                    Static\n                                text\n                            \n                            \n                                    Static\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        anyText\n                        \n                    \n                \n            \n            \n                \n                    \n                    anyText(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:33\n                \n            \n\n\n            \n                \n                    Query for any text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        markdown\n                        \n                    \n                \n            \n            \n                \n                    \n                    markdown(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:55\n                \n            \n\n\n            \n                \n                    Query for markdown data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Markdown data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        query\n                        \n                    \n                \n            \n            \n                \n                    \n                    query(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:23\n                \n            \n\n\n            \n                \n                    Queries for a resource entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryQuery\n\n                    \n                    \n                        Resource query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        text\n                        \n                    \n                \n            \n            \n                \n                    \n                    text(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:65\n                \n            \n\n\n            \n                \n                    Query for text data\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Text data query function\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Static\n                        url\n                        \n                    \n                \n            \n            \n                \n                    \n                    url(state: ResourceRegistryModel)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Selector(['ResourceRegistryState'])\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.selectors.ts:75\n                \n            \n\n\n            \n                \n                    Query for an url\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                ResourceRegistryModel\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Current state\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceRegistryDataQuery\n\n                    \n                    \n                        Url query function\n\n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { UnionMember } from '@hra-ui/utils/types';\nimport { Selector } from '@ngxs/store';\nimport { ResourceEntry, ResourceId, ResourceRegistryModel, ResourceType } from './resource-registry.model';\nimport { ResourceRegistryState } from './resource-registry.state';\n\n/** Query function for resource entry optionally with type specified */\nexport type ResourceRegistryQuery = (\n  id: ResourceId,\n  type?: T\n) => UnionMember | undefined;\n\n/** Query function for resource data */\nexport type ResourceRegistryDataQuery = (id: ResourceId) => T | undefined;\n\n/** Selectors for ResourceRegistry */\nexport class ResourceRegistrySelectors {\n  /**\n   * Queries for a resource entry\n   * @param state Current state\n   * @returns Resource query function\n   */\n  @Selector([ResourceRegistryState])\n  static query(state: ResourceRegistryModel): ResourceRegistryQuery {\n    return (id, type) => ResourceRegistrySelectors.getEntry(state, id, type);\n  }\n\n  /**\n   * Query for any text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static anyText(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => {\n      const entry = ResourceRegistrySelectors.getEntry(state, id);\n      switch (entry?.type) {\n        case ResourceType.Markdown:\n          return entry.markdown as string;\n\n        case ResourceType.Text:\n          return entry.text as string;\n\n        default:\n          return undefined;\n      }\n    };\n  }\n\n  /**\n   * Query for markdown data\n   * @param state Current state\n   * @returns Markdown data query function\n   */\n  @Selector([ResourceRegistryState])\n  static markdown(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Markdown)?.markdown;\n  }\n\n  /**\n   * Query for text data\n   * @param state Current state\n   * @returns Text data query function\n   */\n  @Selector([ResourceRegistryState])\n  static text(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Text)?.text;\n  }\n\n  /**\n   * Query for an url\n   * @param state Current state\n   * @returns Url query function\n   */\n  @Selector([ResourceRegistryState])\n  static url(state: ResourceRegistryModel): ResourceRegistryDataQuery {\n    return (id) => ResourceRegistrySelectors.getEntry(state, id, ResourceType.Url)?.url;\n  }\n\n  /**\n   * Gets a resource entry by id and optionally type\n   * @param state Resource registry state\n   * @param id Entry id\n   * @param type Optional entry type\n   * @returns The entry if found, undefined otherwise\n   */\n  private static getEntry(\n    state: ResourceRegistryModel,\n    id: ResourceId,\n    type?: T\n  ): UnionMember | undefined {\n    const entry = state[id] as UnionMember;\n    const typeMatches = type === undefined || entry?.type === type;\n    return typeMatches ? entry : undefined;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ResourceRegistryState.html":{"url":"injectables/ResourceRegistryState.html","title":"injectable - ResourceRegistryState","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ResourceRegistryState\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            state/src/resource-registry/resource-registry.state.ts\n        \n\n\n            \n                Description\n            \n            \n                State keeping track of global resources\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                addMany\n                            \n                            \n                                addOne\n                            \n                            \n                                addYaml\n                            \n                            \n                                loadMarkdown\n                            \n                            \n                                loadYaml\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        addMany\n                        \n                    \n                \n            \n            \n                \naddMany(ctx: ResourceRegistryContext, undefined: AddMany)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddMany)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:40\n                \n            \n\n\n            \n                \n                    Add multiple entries\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddMany\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addOne\n                        \n                    \n                \n            \n            \n                \naddOne(ctx: ResourceRegistryContext, undefined: Add)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(Add)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:30\n                \n            \n\n\n            \n                \n                    Add a single entry\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                Add\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addYaml\n                        \n                    \n                \n            \n            \n                \naddYaml(ctx: ResourceRegistryContext, undefined: AddFromYaml, filename?: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(AddFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:51\n                \n            \n\n\n            \n                \n                    Parse and add entries from yaml\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                AddFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                                \n                                    filename\n                                    \n                                                string\n                                    \n\n                                    \n                                        Yes\n                                    \n\n\n                                    \n                                        Optional url/filename from which the data was loaded (for improved error messages)\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadMarkdown\n                        \n                    \n                \n            \n            \n                \nloadMarkdown(ctx: ResourceRegistryContext, undefined: LoadMarkdown)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadMarkdown)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:77\n                \n            \n\n\n            \n                \n                    Adds a markdown entry with content loaded from an external file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadMarkdown\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entry has been added\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadYaml\n                        \n                    \n                \n            \n            \n                \nloadYaml(ctx: ResourceRegistryContext, undefined: LoadFromYaml)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Action(LoadFromYaml)\n                \n            \n\n            \n                \n                    Defined in state/src/resource-registry/resource-registry.state.ts:64\n                \n            \n\n\n            \n                \n                    Load and add entries from an external yaml file\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ctx\n                                    \n                                                ResourceRegistryContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        State context\n\n                                    \n                                \n                                \n                                    \n                                                LoadFromYaml\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that completes when the entries has been added\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable } from '@angular/core';\nimport { Action, State } from '@ngxs/store';\nimport { load } from 'js-yaml';\nimport { map, Observable } from 'rxjs';\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from './resource-registry.actions';\nimport {\n  ResourceRegistryContext,\n  ResourceRegistryModel,\n  ResourceType,\n  RESOURCE_REGISTRY_SCHEMA,\n} from './resource-registry.model';\n\n/** State keeping track of global resources */\n@State({\n  name: 'resourceRegistry',\n  defaults: {},\n})\n@Injectable()\nexport class ResourceRegistryState {\n  /** Http service for resource loading */\n  private readonly http = inject(HttpClient);\n\n  /**\n   * Add a single entry\n   * @param ctx State context\n   * @param action Action with id and entry to add\n   */\n  @Action(Add)\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\n    this.addMany(ctx, new AddMany({ [id]: entry }));\n  }\n\n  /**\n   * Add multiple entries\n   * @param ctx State context\n   * @param action Action with entries to add\n   */\n  @Action(AddMany)\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\n    ctx.patchState(entries);\n  }\n\n  /**\n   * Parse and add entries from yaml\n   * @param ctx State context\n   * @param action Action with raw yaml data\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\n   */\n  @Action(AddFromYaml)\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\n    const data = load(yaml, { filename });\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\n    this.addMany(ctx, new AddMany(entries));\n  }\n\n  /**\n   * Load and add entries from an external yaml file\n   * @param ctx State context\n   * @param action Action with the external file url\n   * @returns An observable that completes when the entries has been added\n   */\n  @Action(LoadFromYaml)\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable {\n    return this.http\n      .get(url, { responseType: 'text' })\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\n  }\n\n  /**\n   * Adds a markdown entry with content loaded from an external file\n   * @param ctx State context\n   * @param action Action with id and url to the external markdown\n   * @returns An observable that completes when the entry has been added\n   */\n  @Action(LoadMarkdown)\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable {\n    return this.http.get(url, { responseType: 'text' }).pipe(\n      map((markdown) => new Add(id, { type: ResourceType.Markdown, markdown })),\n      map((action) => this.addOne(ctx, action))\n    );\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ScopedDestroySubject.html":{"url":"classes/ScopedDestroySubject.html","title":"class - ScopedDestroySubject","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ScopedDestroySubject\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/on-destroy/on-destroy.ts\n        \n\n\n            \n                Description\n            \n            \n                Subject that automatically registers a cleanup function on a scope\nDuring cleanup the subject will emit a single void value and then complete\n\n            \n\n            \n                Extends\n            \n            \n                    ReplaySubject\n            \n\n\n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(scope: DestructorScope)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/on-destroy/on-destroy.ts:17\n                            \n                        \n\n                \n                    \n                            Create a new subject that automatically registers cleanup\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        scope\n                                                  \n                                                        \n                                                                        DestructorScope\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Scope which to link the new subject\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Component, ElementRef, inject, NgModuleRef, ViewContainerRef, ViewRef } from '@angular/core';\nimport { Observable, ReplaySubject } from 'rxjs';\n\n/** Object on which cleanup callbacks can be registered */\ninterface DestructorScope {\n  /**\n   * Register a callback to perform cleanup during scope destruction\n   * @param cb Cleanup callback\n   */\n  onDestroy(cb: () => void): void;\n}\n\n/**\n * Subject that automatically registers a cleanup function on a scope\n * During cleanup the subject will emit a single void value and then complete\n */\nclass ScopedDestroySubject extends ReplaySubject {\n  /**\n   * Create a new subject that automatically registers cleanup\n   * @param scope Scope which to link the new subject\n   */\n  constructor(scope: DestructorScope) {\n    super(1);\n\n    scope.onDestroy(() => {\n      this.next();\n      this.complete();\n    });\n  }\n}\n\n/** Empty host component */\n@Component({\n  selector: 'hra-on-destroy-host',\n  standalone: true,\n  template: '',\n  styles: [':host { display: block; }'],\n})\nclass OnDestroyHostComponent {\n  /** Creates a new component instance that immediately removes its own DOM element */\n  constructor() {\n    const el = inject(ElementRef).nativeElement as HTMLElement | null;\n    el?.remove();\n  }\n}\n\n/** OnDestroy observables index by their owning scope */\nconst scopedSubjects = new WeakMap>();\n\n/**\n * Tries to find and return an existing observable associated with a scope\n * @param scope Owning scope\n * @returns The observable if found, else undefined\n */\nfunction findScopedSubject(scope: DestructorScope): Observable | undefined {\n  return scopedSubjects.get(scope);\n}\n\n/**\n * Tries to find an existing observable for the scope\n * If not found a new observable is created and associated with the scope\n * @param scope Owning scope\n * @returns The existing or new observable\n */\nfunction findOrCreateScopedSubject(scope: DestructorScope): Observable {\n  let result = scopedSubjects.get(scope);\n  if (!result) {\n    result = new ScopedDestroySubject(scope).asObservable();\n    scopedSubjects.set(scope, result);\n  }\n\n  return result;\n}\n\n/**\n * Tries to find an existing observable associated with a view container by searching all owned views\n * @param ref View container to search\n * @returns An observable if found, else undefined\n */\nfunction findScopedSubjectInView(ref: ViewContainerRef): Observable | undefined {\n  for (let index = 0, length = ref.length; index  {\n  const ref = inject(ViewContainerRef, { optional: true });\n  if (!ref) {\n    return findOrCreateScopedSubject(inject(NgModuleRef));\n  }\n\n  const result = findScopedSubjectInView(ref);\n  if (result) {\n    return result;\n  }\n\n  const component = ref.createComponent(OnDestroyHostComponent);\n  return findOrCreateScopedSubject(component.hostView);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SnapshotObserver.html":{"url":"classes/SnapshotObserver.html","title":"class - SnapshotObserver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SnapshotObserver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            injectors/src/lib/select-snapshot/select-snapshot.ts\n        \n\n\n            \n                Description\n            \n            \n                Observer storing the latest value from a snapshot stream\n\n            \n\n\n            \n                Implements\n            \n            \n                        Observer\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                complete\n                            \n                            \n                                error\n                            \n                            \n                                get\n                            \n                            \n                                next\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(cdr: ChangeDetectorRef | null)\n                    \n                \n                        \n                            \n                                Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:14\n                            \n                        \n\n                \n                    \n                            Creates a new SnapshotObserver\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                                    Description\n                                            \n                                        \n                                        \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef | null\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                        \n                                                                Change detector to notify whenever a new value is emitted\n\n                                                        \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        complete\n                        \n                    \n                \n            \n            \n                \ncomplete()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:57\n                \n            \n\n\n            \n                \n                    Handles completion emits\n\n\n                    \n                        Returns :         void\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        error\n                        \n                    \n                \n            \n            \n                \nerror(err)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:48\n                \n            \n\n\n            \n                \n                    Handles error emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    err\n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The error value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        get\n                        \n                    \n                \n            \n            \n                \nget()\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:27\n                \n            \n\n\n            \n                \n                    Gets the latest value or throw on errors\n\n\n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        The latest value\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        next\n                        \n                    \n                \n            \n            \n                \nnext(value: T)\n                \n            \n\n\n            \n                \n                    Defined in injectors/src/lib/select-snapshot/select-snapshot.ts:39\n                \n            \n\n\n            \n                \n                    Handles value emits\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    value\n                                    \n                                            T\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        The new value\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ChangeDetectorRef, inject } from '@angular/core';\nimport type { Any } from '@hra-ui/utils/types';\nimport { StateToken, Store } from '@ngxs/store';\nimport { Observer, takeUntil } from 'rxjs';\nimport { injectOnDestroy } from '../on-destroy/on-destroy';\n\n/** Observer storing the latest value from a snapshot stream */\nclass SnapshotObserver implements Observer {\n  /** Whether an error has been emitted */\n  private hasError = false;\n  /** The latest value */\n  private value?: T = undefined;\n  /** The error value if `hasError === true` */\n  private errorValue?: unknown;\n\n  /**\n   * Creates a new SnapshotObserver\n   * @param cdr Change detector to notify whenever a new value is emitted\n   */\n  constructor(private readonly cdr: ChangeDetectorRef | null) {}\n\n  /**\n   * Gets the latest value or throw on errors\n   * @returns The latest value\n   * @throws If an error has been emitted\n   */\n  get(): T {\n    if (this.hasError) {\n      throw this.errorValue;\n    }\n\n    return this.value as T;\n  }\n\n  /**\n   * Handles value emits\n   * @param value The new value\n   */\n  next(value: T): void {\n    this.value = value;\n    this.cdr?.markForCheck();\n  }\n\n  /**\n   * Handles error emits\n   * @param err The error value\n   */\n  error(err: unknown): void {\n    this.hasError = true;\n    this.value = undefined;\n    this.errorValue = err;\n  }\n\n  /**\n   * Handles completion emits\n   */\n  complete(): void {\n    // Intentionally empty\n  }\n}\n\n/** Type of `selectSnapshot` and `selectQuerySnapshot` selector argument */\nexport type SelectSnapshotSelector = ((...args: Any[]) => T) | StateToken;\n\n/**\n * Injects a function that returns the latest snapshot value each time it is called\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store data selector\n * @returns A snapshot function\n */\nexport function selectSnapshot(selector: SelectSnapshotSelector): () => T {\n  const store = inject(Store);\n  const cdr = inject(ChangeDetectorRef, { optional: true });\n  const destroy$ = injectOnDestroy();\n  const data$ = store.select(selector as StateToken).pipe(takeUntil(destroy$));\n  const observer = new SnapshotObserver(cdr);\n\n  data$.subscribe(observer);\n  return observer.get.bind(observer);\n}\n\n/**\n * Injects a function that can be called with the same arguments as the query selector\n * and returns the latest value each time\n * Automatically marks components, directives, or pipes for change detection whenever\n * a new value is available\n * @param selector Store query selector\n * @param boundArgs Optional bound query arguments\n * @returns A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n */\nexport function selectQuerySnapshot(\n  selector: SelectSnapshotSelector Res>,\n  ...boundArgs: BoundArgs\n): (...args: QueryArgs) => Res {\n  const get = selectSnapshot(selector);\n  return (...args) => get()(...boundArgs, ...args);\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n        \n            @ngxs/store : ^3.7.6\n        \n            @hra-ui/theming : *\n        \n            @hra-ui/utils : *\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            ResourceType   (state/.../resource-registry.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n            \n                \n                    \n                        \n                        ResourceType\n                    \n                \n                    \n                        \n                            Built in resource types with additional support\n\n                        \n                    \n                        \n                            \n                                 Markdown\n                            \n                        \n                        \n                            \n                                Value : markdown\n                            \n                        \n                        \n                            \n                                 Text\n                            \n                        \n                        \n                            \n                                Value : text\n                            \n                        \n                        \n                            \n                                 Url\n                            \n                        \n                        \n                            \n                                Value : url\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../actions.ts)\n                        \n                        \n                            ActionGroup   (state/.../actions.ts)\n                        \n                        \n                            assertUniqueActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            createResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            dispatch   (injectors/.../dispatch.ts)\n                        \n                        \n                            findOrCreateScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubject   (injectors/.../on-destroy.ts)\n                        \n                        \n                            findScopedSubjectInView   (injectors/.../on-destroy.ts)\n                        \n                        \n                            injectOnDestroy   (injectors/.../on-destroy.ts)\n                        \n                        \n                            registerActionType   (state/.../action-type-registry.ts)\n                        \n                        \n                            selectQuerySnapshot   (injectors/.../select-snapshot.ts)\n                        \n                        \n                            selectSnapshot   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/actions/actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n            \n                \nAction(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new base action with a specified type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        A base action class\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ActionGroup\n                        \n                    \n                \n            \n            \n                \nActionGroup(group: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates an action factory that adds a common group string to each action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    group\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Common action type group\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ActionConstructor\n\n                    \n                    \n                        An action factory\n\n                    \n                \n            \n        \n    \n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        assertUniqueActionType\n                        \n                    \n                \n            \n            \n                \nassertUniqueActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Asserts that an action type is unique\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerActionType\n                        \n                    \n                \n            \n            \n                \nregisterActionType(type: string)\n                \n            \n\n\n\n\n            \n                \n                    Registers an action type\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    type\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action type string\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createResourceId\n                        \n                    \n                \n            \n            \n                \ncreateResourceId(id: string)\n                \n            \n\n\n\n\n            \n                \n                    Creates a new resource identifier\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Unique resource identifier\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         ResourceId\n\n                    \n                    \n                        A new identifier\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/dispatch/dispatch.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        dispatch\n                        \n                    \n                \n            \n            \n                \ndispatch(actionType: A)\n                \n            \n\n\n\n\n            \n                \n                    Wraps an action constructor with automatic dispatching on each call to the function.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    actionType\n                                    \n                                            A\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Action constructor to create new instances\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Dispatcher\n\n                    \n                    \n                        A function that dispatches an action on the store each time it is called\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        findOrCreateScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindOrCreateScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable for the scope\nIf not found a new observable is created and associated with the scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        The existing or new observable\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubject\n                        \n                    \n                \n            \n            \n                \nfindScopedSubject(scope: DestructorScope)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find and return an existing observable associated with a scope\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    scope\n                                    \n                                                DestructorScope\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Owning scope\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        The observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findScopedSubjectInView\n                        \n                    \n                \n            \n            \n                \nfindScopedSubjectInView(ref: ViewContainerRef)\n                \n            \n\n\n\n\n            \n                \n                    Tries to find an existing observable associated with a view container by searching all owned views\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    ref\n                                    \n                                                ViewContainerRef\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        View container to search\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable | undefined\n\n                    \n                    \n                        An observable if found, else undefined\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        injectOnDestroy\n                        \n                    \n                \n            \n            \n                \ninjectOnDestroy()\n                \n            \n\n\n\n\n            \n                \n                    Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\nit is injected into. It can be used to control the lifetime of other observables using\nthe takeUntil pipe, and to build other complex injection functions.\nCaveats:\n\nThere are NO guarantees about whether the returned observable will emit and complete\nbefore or after the regular ngOnDestroy lifecycle hook\nFor root and module level services the observable may never complete unless\nthe containing module is explicitly destroyed, so don't rely on it for important operations\nComponents, directives, pipe, and services that manipulate the ViewContainerRef MUST\ntake care to maintain the view controlling the lifecycle of the observable. Failure\nto do so may result in early emit and completion of the returned observable\n\nBased on comment on https://github.com/angular/angular/issues/10185\nMostly https://github.com/angular/angular/issues/10185#issuecomment-1165545544 and\nhttps://github.com/angular/angular/issues/10185#issuecomment-1199063426\n\n\n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        An observable that emits and completes when the component/directive/etc. is destroyed\n\n                    \n                \n            \n        \n    \n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        selectQuerySnapshot\n                        \n                    \n                \n            \n            \n                \nselectQuerySnapshot(selector: SelectSnapshotSelector, ...boundArgs: BoundArgs)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that can be called with the same arguments as the query selector\nand returns the latest value each time\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store query selector\n\n                                    \n                                \n                                \n                                    boundArgs\n                                    \n                                            BoundArgs\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Optional bound query arguments\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Res\n\n                    \n                    \n                        A snapshot function taking the same arguments as the query selector (excluding bound arguments)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        selectSnapshot\n                        \n                    \n                \n            \n            \n                \nselectSnapshot(selector: SelectSnapshotSelector)\n                \n            \n\n\n\n\n            \n                \n                    Injects a function that returns the latest snapshot value each time it is called\nAutomatically marks components, directives, or pipes for change detection whenever\na new value is available\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                    Description\n                                \n                            \n                            \n                                \n                                    selector\n                                    \n                                                SelectSnapshotSelector\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                    \n                                        Store data selector\n\n                                    \n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     T\n\n                    \n                    \n                        A snapshot function\n\n                    \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\ncdk\nThis library was generated with Nx.\nRunning unit tests\nRun nx test cdk to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Component\n                \n            \n        \n        \n            \n                \n                    \n                    1 Injectable\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Dispatcher   (injectors/.../dispatch.ts)\n                        \n                        \n                            ResourceEntry   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceId   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryContext   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryDataQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            ResourceRegistryModel   (state/.../resource-registry.model.ts)\n                        \n                        \n                            ResourceRegistryQuery   (state/.../resource-registry.selectors.ts)\n                        \n                        \n                            SelectSnapshotSelector   (injectors/.../select-snapshot.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    injectors/src/lib/dispatch/dispatch.ts\n    \n    \n        \n            \n                \n                    \n                    Dispatcher\n                \n            \n            \n                \n                    Function type returned by dispatch(actionType).\nAccepts the same arguments as the passed action constructor and\nreturns an instance of the action.\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.model.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceEntry\n                \n            \n            \n                \n                    Discriminated union of all resource interfaces\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceId\n                \n            \n            \n                \n                    Unique identifier for a resource\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryContext\n                \n            \n            \n                \n                    Context type for action handlers\n\n                \n            \n            \n                \n                            StateContext\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryModel\n                \n            \n            \n                \n                    State data model\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    state/src/resource-registry/resource-registry.selectors.ts\n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryDataQuery\n                \n            \n            \n                \n                    Query function for resource data\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    ResourceRegistryQuery\n                \n            \n            \n                \n                    Query function for resource entry optionally with type specified\n\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    injectors/src/lib/select-snapshot/select-snapshot.ts\n    \n    \n        \n            \n                \n                    \n                    SelectSnapshotSelector\n                \n            \n            \n                \n                    Type of selectSnapshot and selectQuerySnapshot selector argument\n\n                \n            \n            \n                \n                         | StateToken\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Action   (state/.../resource-registry.actions.ts)\n                        \n                        \n                            actionTypeRegistry   (state/.../action-type-registry.ts)\n                        \n                        \n                            RESOURCE_REGISTRY_SCHEMA   (state/.../resource-registry.model.ts)\n                        \n                        \n                            scopedSubjects   (injectors/.../on-destroy.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    state/src/resource-registry/resource-registry.actions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Action\n                        \n                    \n                \n            \n                \n                    \n                        Default value : ActionGroup('ResourceRegistry')\n                    \n                \n\n            \n                \n                    Base action factory\n\n                \n            \n\n        \n    \n\n    state/src/actions/action-type-registry.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        actionTypeRegistry\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new Set()\n                    \n                \n\n            \n                \n                    Registry of action types\n\n                \n            \n\n        \n    \n\n    state/src/resource-registry/resource-registry.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RESOURCE_REGISTRY_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.record(\n  z\n    .string()\n    .transform((id) => `ResourceId:'${id}'`)\n    .brand('ResourceId'),\n  z\n    .discriminatedUnion('type', [\n      z.object({ type: z.literal(ResourceType.Markdown), markdown: z.string() }),\n      z.object({ type: z.literal(ResourceType.Text), text: z.string() }),\n      z.object({ type: z.literal(ResourceType.Url), url: z.string() }),\n    ])\n    .or(z.object({ type: z.string() }).passthrough())\n)\n                    \n                \n\n            \n                \n                    Resource registry schema validator\n\n                \n            \n\n        \n    \n\n    injectors/src/lib/on-destroy/on-destroy.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        scopedSubjects\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new WeakMap>()\n                    \n                \n\n            \n                \n                    OnDestroy observables index by their owning scope\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
