{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "BiomarkerDetailsComponent",
            "id": "component-BiomarkerDetailsComponent-77362795c55e59d8109b5a13e3d57e4774ce01b5484ac21237c42d2857f2de4ecd80ec15ae66e99983246bdc3de1df675717253be566d7ba0efe1495a48c9f3c",
            "file": "src/lib/biomarker-details/biomarker-details.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-biomarker-details",
            "styleUrls": [
                "./biomarker-details.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./biomarker-details.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collaborateText",
                    "defaultValue": "'Collaborate with the HRA Team'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>button text of empty biomarker component.</p>\n",
                    "line": 106,
                    "rawdescription": "\n\nbutton text of empty biomarker component.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "gradientHoverInfo",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Info to be shown on the tooltip for Gradient Legend</p>\n",
                    "line": 58,
                    "rawdescription": "\nInfo to be shown on the tooltip for Gradient Legend",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "gradients",
                    "defaultValue": "selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, 'points' as const, [])<\n    GradientPoint[]\n  >",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gradient colors along with their stop points</p>\n",
                    "line": 67,
                    "rawdescription": "\nGradient colors along with their stop points",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "iri",
                    "defaultValue": "selectSnapshot(ActiveFtuSelectors.iri)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Iri  of medical illustration behavior component</p>\n",
                    "line": 80,
                    "rawdescription": "\n\nIri  of medical illustration behavior component\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "isTableFullScreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Indicates if the table is fully shown, defaults to false</p>\n",
                    "line": 64,
                    "rawdescription": "\nIndicates if the table is fully shown, defaults to false"
                },
                {
                    "name": "message",
                    "defaultValue": "`We currently do not have cell type data for this biomarker.\n  <br><br> Please contact us to discuss your dataset.`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>message markdown of empty biomarker component.</p>\n",
                    "line": 111,
                    "rawdescription": "\n\nmessage markdown of empty biomarker component.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "selectedOnHovered",
                    "defaultValue": "selectSnapshot(IllustratorSelectors.selectedOnHovered)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Selects the cells hovered currently to highlight in table</p>\n",
                    "line": 88,
                    "rawdescription": "\nSelects the cells hovered currently to highlight in table",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "sizeHoverInfo",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Info to be shown on the tooltip for Size Legend</p>\n",
                    "line": 61,
                    "rawdescription": "\nInfo to be shown on the tooltip for Size Legend",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "sizes",
                    "defaultValue": "selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, 'sizes' as const, [])<SizeLegend[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Taking input for the radius of the circle and the label to be displayed.</p>\n",
                    "line": 72,
                    "rawdescription": "\nTaking input for the radius of the circle and the label to be displayed.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "source",
                    "defaultValue": "selectSnapshot(SourceRefsSelectors.sourceReferences)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>List of sources with titles and links displayed to the user</p>\n",
                    "line": 75,
                    "rawdescription": "\nList of sources with titles and links displayed to the user",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tabs",
                    "defaultValue": "selectSnapshot(CellSummarySelectors.aggregates)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Table tabs</p>\n",
                    "line": 55,
                    "rawdescription": "\nTable tabs",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tissues",
                    "defaultValue": "selectSnapshot(TissueLibrarySelectors.tissues)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Get all tissues</p>\n",
                    "line": 85,
                    "rawdescription": "\n\nGet all tissues\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collaborate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which opens the contact modal dialog box",
                    "description": "<p>A function which opens the contact modal dialog box</p>\n"
                },
                {
                    "name": "toggleFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 123,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function that toggles isTableFullScreen and\ncalls the setScreenMode function.\n",
                    "description": "<p>A function that toggles isTableFullScreen and\ncalls the setScreenMode function.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>The component displays the biomarker details which includes the details, gradient legends, size legends and source lists</p>\n",
            "rawdescription": "\nThe component displays the biomarker details which includes the details, gradient legends, size legends and source lists",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RR } from '@hra-ui/cdk/state';\nimport { ActiveFtuSelectors, IllustratorSelectors, ScreenModeAction, TissueLibrarySelectors } from '@hra-ui/state';\nimport {\n  EmptyBiomarkerComponent,\n  GradientLegendComponent,\n  GradientPoint,\n  LabelBoxComponent,\n  SizeLegend,\n  SizeLegendComponent,\n} from '@hra-ui/components/atoms';\nimport { BiomarkerTableDataCardComponent, SourceListComponent } from '@hra-ui/components/molecules';\nimport { BiomarkerTableComponent, TissueInfo } from '@hra-ui/components/organisms';\nimport { CellSummarySelectors, ResourceIds as Ids, ResourceTypes as RTypes, SourceRefsSelectors } from '@hra-ui/state';\nimport { MatDialog, MatDialogConfig, MatDialogModule } from '@angular/material/dialog';\nimport { ContactBehaviorComponent } from '../contact-behavior/contact-behavior.component';\n\n/**\n * PlaceHolder for Empty Tissue Info\n */\nconst EMPTY_TISSUE_INFO: TissueInfo = {\n  id: '',\n  label: '',\n};\n\n/** The component displays the biomarker details which includes the details, gradient legends, size legends and source lists*/\n@Component({\n  selector: 'ftu-biomarker-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatTabsModule,\n    MatDialogModule,\n    BiomarkerTableComponent,\n    BiomarkerTableDataCardComponent,\n    GradientLegendComponent,\n    HoverDirective,\n    LabelBoxComponent,\n    SizeLegendComponent,\n    SourceListComponent,\n    EmptyBiomarkerComponent,\n  ],\n  templateUrl: './biomarker-details.component.html',\n  styleUrls: ['./biomarker-details.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerDetailsComponent {\n  /** Table tabs */\n  readonly tabs = selectSnapshot(CellSummarySelectors.aggregates);\n\n  /** Info to be shown on the tooltip for Gradient Legend */\n  readonly gradientHoverInfo = selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo);\n\n  /** Info to be shown on the tooltip for Size Legend */\n  readonly sizeHoverInfo = selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo);\n\n  /** Indicates if the table is fully shown, defaults to false*/\n  isTableFullScreen = false;\n\n  /** Gradient colors along with their stop points */\n  readonly gradients = selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, 'points' as const, [])<\n    GradientPoint[]\n  >;\n\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  readonly sizes = selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, 'sizes' as const, [])<SizeLegend[]>;\n\n  /** List of sources with titles and links displayed to the user */\n  readonly source = selectSnapshot(SourceRefsSelectors.sourceReferences);\n\n  /**\n   * Iri  of medical illustration behavior component\n   */\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\n\n  /**\n   * Get all tissues\n   */\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\n\n  /** Selects the cells hovered currently to highlight in table */\n  readonly selectedOnHovered = selectSnapshot(IllustratorSelectors.selectedOnHovered);\n\n  /**\n   * Gets tissue title from the list of tissues\n   */\n  get tissueInfo(): TissueInfo {\n    const iri = this.iri();\n    const tissues = this.tissues();\n    if (iri === undefined) {\n      return EMPTY_TISSUE_INFO;\n    }\n    const { id, label } = tissues[iri];\n    return { id, label };\n  }\n\n  /**\n   * button text of empty biomarker component.\n   */\n  readonly collaborateText = 'Collaborate with the HRA Team';\n\n  /**\n   * message markdown of empty biomarker component.\n   */\n  readonly message = `We currently do not have cell type data for this biomarker.\n  <br><br> Please contact us to discuss your dataset.`;\n\n  /** A dispatcher function to set the screen mode */\n  private readonly setScreenMode = dispatch(ScreenModeAction.Set);\n\n  /** A dialog box which shows contact modal after clicking on contact */\n  private readonly dialog = inject(MatDialog);\n\n  /** A function that toggles isTableFullScreen and\n   * calls the setScreenMode function.\n   */\n  toggleFullscreen(): void {\n    this.isTableFullScreen = !this.isTableFullScreen;\n    this.setScreenMode(this.isTableFullScreen);\n  }\n\n  /** A function which opens the contact modal dialog box */\n  collaborate(): void {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  display: grid;\n  grid-template-columns: 1fr 1fr auto;\n  grid-template-rows: 3.5rem minmax(5rem, 2fr) 3rem 5rem minmax(5rem, 1fr);\n  grid-template-areas:\n    'table-header table-header table-header'\n    'table table table'\n    'gradient-legend-header size-legend-header .'\n    'gradient-legend size-legend .'\n    'source-list source-list source-list';\n  overflow-y: auto;\n\n  .table-header {\n    grid-area: table-header;\n    border-bottom: 0.063rem solid #d3d3d3;\n    height: 3.5rem;\n    font-weight: 400;\n  }\n\n  .table {\n    grid-area: table;\n    max-width: 100%;\n    overflow: auto;\n    border-bottom: 0.063rem solid #d3d3d3;\n\n    ::ng-deep .table-tab-header {\n      padding-left: 1rem;\n      padding-right: 1rem;\n      border-left: 0.063rem solid #d3d3d3;\n      border-bottom: 0.063rem solid #d3d3d3;\n      background-color: white;\n      font-weight: 400;\n      letter-spacing: 0;\n\n      &:last-child {\n        border-right: 0.063rem solid #d3d3d3;\n      }\n\n      &.mdc-tab-indicator--active {\n        background-color: #f8f9fa;\n      }\n\n      &:hover {\n        background-color: #f8f9fa;\n      }\n      .mat-tab__text-label {\n        --palette-accent-500-rgb: #243142;\n      }\n    }\n  }\n\n  ::ng-deep {\n    .table-tab-header > .mdc-tab__content > span {\n      color: vars.$primary;\n    }\n    .mat-mdc-tab-group.mat-accent .mat-mdc-tab:not(.mat-mdc-tab-disabled).mdc-tab--active .mdc-tab__text-label {\n      color: vars.$primary;\n    }\n\n    ::ng-deep .mdc-tab__text-label {\n      color: black !important;\n    }\n\n    ::ng-deep .mdc-tab-indicator__content--underline {\n      border-color: #990000 !important;\n      border-top-width: 4px !important;\n    }\n  }\n\n  .legend-header {\n    color: vars.$dark-primary-text;\n    border-top: 0.063rem solid #d3d3d3;\n    border-bottom: 0.063rem solid #d3d3d3;\n    border-right: 0.063rem solid #d3d3d3;\n\n    &.gradient {\n      grid-area: gradient-legend-header;\n      font-size: 0.75rem;\n    }\n\n    &.size {\n      grid-area: size-legend-header;\n      font-size: 0.75rem;\n    }\n\n    .icon {\n      margin-left: 0.6rem;\n      width: unset;\n    }\n  }\n\n  .legend {\n    padding: 1rem 2rem;\n    border-right: 0.063rem solid #d3d3d3;\n\n    &.gradient {\n      grid-area: gradient-legend;\n\n      .content {\n        width: 10rem;\n      }\n    }\n\n    &.size {\n      grid-area: size-legend;\n    }\n  }\n\n  .source-list {\n    grid-area: source-list;\n  }\n\n  .cursor {\n    cursor: default;\n  }\n}\n\n::ng-deep .biomarker-details.info-tooltip {\n  display: flex;\n  padding: 1rem;\n  border: 1px solid #a8a3a3;\n  border-radius: 0.5rem;\n  box-shadow: 1px 2px 16px 2px #00000029;\n  background-color: vars.$primary-contrast-rgb;\n  max-width: 21rem;\n  font-size: small;\n  font-family: Inter;\n}\n\n::ng-deep .mdc-tab__ripple::before {\n  opacity: 0 !important;\n}\n",
                    "styleUrl": "./biomarker-details.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tissueInfo": {
                    "name": "tissueInfo",
                    "getSignature": {
                        "name": "tissueInfo",
                        "type": "",
                        "returnType": "TissueInfo",
                        "line": 93,
                        "rawdescription": "\n\nGets tissue title from the list of tissues\n",
                        "description": "<p>Gets tissue title from the list of tissues</p>\n"
                    }
                }
            },
            "templateData": "<hra-label-box class=\"table-header\">\n  Cell Types by Gene Biomarkers\n  <span (click)=\"toggleFullscreen()\" class=\"end material-symbols-outlined cursor\">\n    {{ isTableFullScreen ? 'close_fullscreen' : 'open_in_full' }}\n  </span>\n</hra-label-box>\n\n<mat-tab-group class=\"table\" [class.table-fullscreen]=\"isTableFullScreen\" mat-stretch-tabs=\"true\" color=\"accent\">\n  <mat-tab *ngFor=\"let tab of tabs()\" labelClass=\"table-tab-header\" [label]=\"tab.label\">\n    <hra-biomarker-table\n      *ngIf=\"tab.rows.length !== 0\"\n      [data]=\"$any(tab.rows)\"\n      [columns]=\"tab.columns\"\n      [gradient]=\"gradients()\"\n      [sizes]=\"sizes()\"\n      [tissueInfo]=\"tissueInfo\"\n      [hightlightedCellName]=\"selectedOnHovered()?.label ?? ''\"\n    ></hra-biomarker-table>\n    <hra-empty-biomarker\n      *ngIf=\"tab.rows.length === 0\"\n      [collaborateText]=\"collaborateText\"\n      [message]=\"message\"\n      (collaborateClick)=\"collaborate()\"\n    ></hra-empty-biomarker>\n  </mat-tab>\n</mat-tab-group>\n\n<hra-label-box class=\"legend-header gradient\">\n  Biomarker Expression Mean in FTU\n  <mat-icon class=\"icon\" [hraHover]=\"infoTooltip\" [hraHoverData]=\"gradientHoverInfo()\">info_outlined</mat-icon>\n</hra-label-box>\n<div class=\"legend gradient\">\n  <hra-gradient-legend [gradient]=\"gradients()\" class=\"content\"></hra-gradient-legend>\n</div>\n\n<hra-label-box class=\"legend-header size\">\n  Percentage of Cells in FTU\n  <mat-icon class=\"icon\" [hraHover]=\"infoTooltip\" [hraHoverData]=\"sizeHoverInfo()\">info_outlined</mat-icon>\n</hra-label-box>\n<div class=\"legend size\">\n  <hra-size-legend [sizes]=\"sizes()\" class=\"content\"></hra-size-legend>\n</div>\n\n<div class=\"source-list\">\n  <hra-source-list\n    [collaborateText]=\"collaborateText\"\n    [message]=\"message\"\n    (collaborateClick)=\"collaborate()\"\n    [sources]=\"source()\"\n    class=\"content\"\n  ></hra-source-list>\n</div>\n\n<ng-template #infoTooltip let-tooltip>\n  <div class=\"biomarker-details info-tooltip\">\n    {{ tooltip }}\n  </div>\n</ng-template>\n"
        },
        {
            "name": "BiomarkerDetailsWcComponent",
            "id": "component-BiomarkerDetailsWcComponent-2a35b01614cd4a83a9546a33b9e03200b2f96e7d06e07e8803741ed0f77a8815075e35be5e35822c9fb46279ff45ee49dbbfc6fc96f328f11a42b7f9898a30ef",
            "file": "src/lib/biomarker-details-wc/biomarker-details-wc.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-wc-biomarker-details",
            "styleUrls": [
                "./biomarker-details-wc.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./biomarker-details-wc.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "collaborateText",
                    "defaultValue": "'Collaborate with the HRA Team'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "<p>button text of empty biomarker component.</p>\n",
                    "line": 145,
                    "rawdescription": "\n\nbutton text of empty biomarker component.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "currentUrl",
                    "defaultValue": "selectSnapshot(IllustratorSelectors.url)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current illustration url</p>\n",
                    "line": 71,
                    "rawdescription": "\n\nCurrent illustration url\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "gradientHoverInfo",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Info to be shown on the tooltip for Gradient Legend</p>\n",
                    "line": 111,
                    "rawdescription": "\nInfo to be shown on the tooltip for Gradient Legend",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "gradients",
                    "defaultValue": "selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, 'points' as const, [])<\n    GradientPoint[]\n  >",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Gradient colors along with their stop points</p>\n",
                    "line": 120,
                    "rawdescription": "\nGradient colors along with their stop points",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "iri",
                    "defaultValue": "selectSnapshot(ActiveFtuSelectors.iri)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Iri  of medical illustration behavior component</p>\n",
                    "line": 81,
                    "rawdescription": "\n\nIri  of medical illustration behavior component\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "isTableFullScreen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Indicates if the table is fully shown, defaults to false</p>\n",
                    "line": 117,
                    "rawdescription": "\nIndicates if the table is fully shown, defaults to false"
                },
                {
                    "name": "mapping",
                    "defaultValue": "selectSnapshot(IllustratorSelectors.mapping)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current mapping file</p>\n",
                    "line": 76,
                    "rawdescription": "\n\nCurrent mapping file\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "message",
                    "defaultValue": "`We currently do not have cell type data for this biomarker.\n<br><br> Please contact us to discuss your dataset.`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>message markdown of empty biomarker component.</p>\n",
                    "line": 150,
                    "rawdescription": "\n\nmessage markdown of empty biomarker component.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "sizeHoverInfo",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Info to be shown on the tooltip for Size Legend</p>\n",
                    "line": 114,
                    "rawdescription": "\nInfo to be shown on the tooltip for Size Legend",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "sizes",
                    "defaultValue": "selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, 'sizes' as const, [])<SizeLegend[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Taking input for the radius of the circle and the label to be displayed.</p>\n",
                    "line": 125,
                    "rawdescription": "\nTaking input for the radius of the circle and the label to be displayed.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "source",
                    "defaultValue": "selectSnapshot(SourceRefsSelectors.sourceReferences)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>List of sources with titles and links displayed to the user</p>\n",
                    "line": 128,
                    "rawdescription": "\nList of sources with titles and links displayed to the user",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tabs",
                    "defaultValue": "selectSnapshot(CellSummarySelectors.aggregates)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Table tabs</p>\n",
                    "line": 108,
                    "rawdescription": "\nTable tabs",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tissues",
                    "defaultValue": "selectSnapshot(TissueLibrarySelectors.tissues)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Get all tissues</p>\n",
                    "line": 86,
                    "rawdescription": "\n\nGet all tissues\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateNodeOnClicked",
                    "defaultValue": "dispatch(IllustratorActions.SetClicked)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Updates the active node on node click</p>\n",
                    "line": 105,
                    "rawdescription": "\n\nUpdates the active node on node click\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateNodeOnHover",
                    "defaultValue": "dispatch(IllustratorActions.SetHover)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Updates the active node on node hover</p>\n",
                    "line": 100,
                    "rawdescription": "\n\nUpdates the active node on node hover\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "collaborate",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 167,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which opens the contact modal dialog box",
                    "description": "<p>A function which opens the contact modal dialog box</p>\n"
                },
                {
                    "name": "toggleFullscreen",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 162,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function that toggles isTableFullScreen and\ncalls the setScreenMode function.\n",
                    "description": "<p>A function that toggles isTableFullScreen and\ncalls the setScreenMode function.</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Biomarker Table Details Web component</p>\n",
            "rawdescription": "\nComponent for Biomarker Table Details Web component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatTabsModule } from '@angular/material/tabs';\nimport { HoverDirective } from '@hra-ui/cdk';\nimport { selectSnapshot, selectQuerySnapshot, dispatch } from '@hra-ui/cdk/injectors';\nimport {\n  GradientLegendComponent,\n  LabelBoxComponent,\n  SizeLegendComponent,\n  EmptyBiomarkerComponent,\n  GradientPoint,\n  SizeLegend,\n} from '@hra-ui/components/atoms';\nimport {\n  BiomarkerTableDataCardComponent,\n  InteractiveSvgComponent,\n  SourceListComponent,\n} from '@hra-ui/components/molecules';\nimport { TissueInfo, BiomarkerTableComponent } from '@hra-ui/components/organisms';\nimport {\n  ActiveFtuSelectors,\n  TissueLibrarySelectors,\n  ScreenModeAction,\n  IllustratorActions,\n  IllustratorSelectors,\n  CellSummarySelectors,\n  ResourceIds as Ids,\n  ResourceTypes as RTypes,\n  SourceRefsSelectors,\n} from '@hra-ui/state';\nimport { ResourceRegistrySelectors as RR } from '@hra-ui/cdk/state';\nimport { MatDialog, MatDialogConfig } from '@angular/material/dialog';\nimport { ContactBehaviorComponent } from '../contact-behavior/contact-behavior.component';\n\n/**\n * PlaceHolder for Empty Tissue Info\n */\nconst EMPTY_TISSUE_INFO: TissueInfo = {\n  id: '',\n  label: '',\n};\n\n/** Component for Biomarker Table Details Web component */\n@Component({\n  selector: 'ftu-wc-biomarker-details',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatIconModule,\n    MatTabsModule,\n\n    BiomarkerTableComponent,\n    BiomarkerTableDataCardComponent,\n    GradientLegendComponent,\n    HoverDirective,\n    LabelBoxComponent,\n    SizeLegendComponent,\n    SourceListComponent,\n    EmptyBiomarkerComponent,\n    InteractiveSvgComponent,\n  ],\n  templateUrl: './biomarker-details-wc.component.html',\n  styleUrls: ['./biomarker-details-wc.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class BiomarkerDetailsWcComponent {\n  /**\n   * Current illustration url\n   */\n  readonly currentUrl = selectSnapshot(IllustratorSelectors.url);\n\n  /**\n   * Current mapping file\n   */\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\n\n  /**\n   * Iri  of medical illustration behavior component\n   */\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\n\n  /**\n   * Get all tissues\n   */\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\n\n  /**\n   * Gets tissue title from the list of tissues\n   */\n  get tissueTitle(): string {\n    const iri = this.iri();\n    const tissues = this.tissues();\n    return iri ? tissues[iri].label : '';\n  }\n\n  /**\n   * Updates the active node on node hover\n   */\n  readonly updateNodeOnHover = dispatch(IllustratorActions.SetHover);\n\n  /**\n   * Updates the active node on node click\n   */\n  readonly updateNodeOnClicked = dispatch(IllustratorActions.SetClicked);\n\n  /** Table tabs */\n  readonly tabs = selectSnapshot(CellSummarySelectors.aggregates);\n\n  /** Info to be shown on the tooltip for Gradient Legend */\n  readonly gradientHoverInfo = selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo);\n\n  /** Info to be shown on the tooltip for Size Legend */\n  readonly sizeHoverInfo = selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo);\n\n  /** Indicates if the table is fully shown, defaults to false*/\n  isTableFullScreen = false;\n\n  /** Gradient colors along with their stop points */\n  readonly gradients = selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, 'points' as const, [])<\n    GradientPoint[]\n  >;\n\n  /** Taking input for the radius of the circle and the label to be displayed. */\n  readonly sizes = selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, 'sizes' as const, [])<SizeLegend[]>;\n\n  /** List of sources with titles and links displayed to the user */\n  readonly source = selectSnapshot(SourceRefsSelectors.sourceReferences);\n  /**\n   * Gets tissue title from the list of tissues\n   */\n  get tissueInfo(): TissueInfo {\n    const iri = this.iri();\n    const tissues = this.tissues();\n    if (iri === undefined) {\n      return EMPTY_TISSUE_INFO;\n    }\n    const { id, label } = tissues[iri];\n    return { id, label };\n  }\n\n  /**\n   * button text of empty biomarker component.\n   */\n  readonly collaborateText = 'Collaborate with the HRA Team';\n\n  /**\n   * message markdown of empty biomarker component.\n   */\n  readonly message = `We currently do not have cell type data for this biomarker.\n<br><br> Please contact us to discuss your dataset.`;\n\n  /** A dispatcher function to set the screen mode */\n  private readonly setScreenMode = dispatch(ScreenModeAction.Set);\n\n  /** A dialog box which shows contact modal after clicking on contact */\n  private readonly dialog = inject(MatDialog);\n\n  /** A function that toggles isTableFullScreen and\n   * calls the setScreenMode function.\n   */\n  toggleFullscreen(): void {\n    this.isTableFullScreen = !this.isTableFullScreen;\n    this.setScreenMode(this.isTableFullScreen);\n  }\n  /** A function which opens the contact modal dialog box */\n  collaborate(): void {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@use 'variables' as vars;\n\n:host {\n  ::ng-deep .extraTab {\n    border: 0.063rem solid #d3d3d3;\n    border-top: 0;\n    padding-left: 1rem;\n    padding-right: 1rem;\n    border-left: 0.063rem solid #d3d3d3;\n    border-bottom: 0.063rem solid #d3d3d3;\n    background-color: white;\n    font-weight: 400;\n    letter-spacing: 0;\n    font-family: 'Inter';\n\n    &:last-child {\n      border-right: 0.063rem solid #d3d3d3;\n    }\n\n    &.mdc-tab-indicator--active {\n      background-color: #f8f9fa;\n    }\n\n    &:hover {\n      background-color: #f8f9fa;\n    }\n    .mat-tab__text-label {\n      --palette-accent-500-rgb: #243142;\n    }\n  }\n\n  .table-header {\n    grid-area: table-header;\n    border: 0.063rem solid #d3d3d3;\n    width: 43rem;\n    height: 3.5rem;\n  }\n\n  .table {\n    grid-area: table;\n    max-width: 100%;\n    overflow: auto;\n    border: 0.063rem solid #d3d3d3;\n\n    ::ng-deep .table-tab-header {\n      padding-left: 1rem;\n      padding-right: 1rem;\n      border-left: 0.063rem solid #d3d3d3;\n      border-bottom: 0.063rem solid #d3d3d3;\n      background-color: white;\n      font-weight: 400;\n      letter-spacing: 0;\n\n      &:last-child {\n        border-right: 0.063rem solid #d3d3d3;\n      }\n\n      &.mdc-tab-indicator--active {\n        background-color: #f8f9fa;\n      }\n\n      &:hover {\n        background-color: #f8f9fa;\n      }\n      .mat-tab__text-label {\n        --palette-accent-500-rgb: #243142;\n      }\n    }\n  }\n\n  hra-biomarker-table {\n    overflow-y: auto;\n    overflow-x: auto;\n  }\n\n  .legends {\n    display: inline-flex;\n    width: 100%;\n    .legends-right {\n      width: 50%;\n    }\n    .legends-left {\n      width: 50%;\n    }\n  }\n\n  .legend-header {\n    color: vars.$dark-primary-text;\n    border-top: 0.063rem solid #d3d3d3;\n    border-bottom: 0.063rem solid #d3d3d3;\n    border-right: 0.063rem solid #d3d3d3;\n\n    &.gradient {\n      grid-area: gradient-legend-header;\n    }\n\n    &.size {\n      grid-area: size-legend-header;\n    }\n\n    .icon {\n      margin-left: 0.6rem;\n    }\n  }\n\n  .legend {\n    padding: 1rem 2rem;\n    border-right: 0.063rem solid #d3d3d3;\n\n    &.gradient {\n      grid-area: gradient-legend-header;\n      font-size: 0.75rem;\n\n      .content {\n        width: 10rem;\n      }\n    }\n\n    &.size {\n      grid-area: size-legend-header;\n      font-size: 0.75rem;\n    }\n\n    .icon {\n      margin-left: 0.6rem;\n      width: unset;\n    }\n  }\n\n  .source-list {\n    grid-area: source-list;\n\n    .content {\n      width: min-content;\n    }\n  }\n  .cursor {\n    cursor: default;\n  }\n}\n\n::ng-deep .biomarker-details.info-tooltip {\n  display: flex;\n  padding: 1rem;\n  border: 1px solid #a8a3a3;\n  border-radius: 0.5rem;\n  box-shadow: 1px 2px 16px 2px #00000029;\n  background-color: vars.$primary-contrast-rgb;\n  max-width: 21rem;\n  font-size: small;\n  font-family: Inter;\n}\n\n::ng-deep {\n  .table-tab-header > .mdc-tab__content > span {\n    color: vars.$primary;\n  }\n  .extraTab > .mdc-tab__content > span {\n    color: vars.$primary;\n  }\n  .mat-mdc-tab-group.mat-accent .mat-mdc-tab:not(.mat-mdc-tab-disabled).mdc-tab--active .mdc-tab__text-label {\n    color: vars.$primary;\n  }\n\n  .mdc-tab__text-label {\n    color: black !important;\n  }\n\n  .mdc-tab-indicator__content--underline {\n    border-color: #990000 !important;\n    border-top-width: 4px !important;\n  }\n  .mdc-tab__ripple::before {\n    opacity: 0 !important;\n  }\n}\n",
                    "styleUrl": "./biomarker-details-wc.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tissueTitle": {
                    "name": "tissueTitle",
                    "getSignature": {
                        "name": "tissueTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 91,
                        "rawdescription": "\n\nGets tissue title from the list of tissues\n",
                        "description": "<p>Gets tissue title from the list of tissues</p>\n"
                    }
                },
                "tissueInfo": {
                    "name": "tissueInfo",
                    "getSignature": {
                        "name": "tissueInfo",
                        "type": "",
                        "returnType": "TissueInfo",
                        "line": 132,
                        "rawdescription": "\n\nGets tissue title from the list of tissues\n",
                        "description": "<p>Gets tissue title from the list of tissues</p>\n"
                    }
                }
            },
            "templateData": "<hra-label-box class=\"table-header\">\n  {{ tissueTitle }}: FTU Illustration\n  <mat-icon (click)=\"toggleFullscreen()\" class=\"end\">\n    {{ isTableFullScreen ? 'close_fullscreen' : 'open_in_full' }}\n  </mat-icon>\n</hra-label-box>\n\n<mat-tab-group class=\"table\" [class.table-fullscreen]=\"isTableFullScreen\" mat-stretch-tabs=\"false\" color=\"accent\">\n  <mat-tab labelClass=\"extraTab\" label=\"FTU Illustration\">\n    <hra-interactive-svg\n      [url]=\"currentUrl()\"\n      [mapping]=\"mapping()\"\n      (nodeHover)=\"updateNodeOnHover($event)\"\n      (nodeClick)=\"updateNodeOnClicked($event)\"\n    >\n    </hra-interactive-svg>\n  </mat-tab>\n  <mat-tab *ngFor=\"let tab of tabs()\" labelClass=\"table-tab-header\" [label]=\"tab.label\">\n    <hra-biomarker-table\n      *ngIf=\"tab.rows.length !== 0\"\n      [data]=\"$any(tab.rows)\"\n      [columns]=\"tab.columns\"\n      [gradient]=\"gradients()\"\n      [sizes]=\"sizes()\"\n      [tissueInfo]=\"tissueInfo\"\n    ></hra-biomarker-table>\n\n    <div *ngIf=\"tab.rows.length !== 0\" class=\"legends\">\n      <div class=\"legends-left\">\n        <hra-label-box class=\"legend-header gradient\">\n          Biomarker Expression Mean in FTU\n          <mat-icon class=\"icon\" [hraHover]=\"infoTooltip\" [hraHoverData]=\"gradientHoverInfo()\">info_outlined</mat-icon>\n        </hra-label-box>\n        <div class=\"legend gradient\">\n          <hra-gradient-legend [gradient]=\"gradients()\" class=\"content\"></hra-gradient-legend>\n        </div>\n      </div>\n\n      <div class=\"legends-right\">\n        <hra-label-box class=\"legend-header size\">\n          Percentage of Cells in FTU\n          <mat-icon class=\"icon\" [hraHover]=\"infoTooltip\" [hraHoverData]=\"sizeHoverInfo()\">info_outlined</mat-icon>\n        </hra-label-box>\n        <div class=\"legend size\">\n          <hra-size-legend [sizes]=\"sizes()\" class=\"content\"></hra-size-legend>\n        </div>\n      </div>\n    </div>\n    <hra-empty-biomarker\n      *ngIf=\"tab.rows.length === 0\"\n      [collaborateText]=\"collaborateText\"\n      [message]=\"message\"\n      (collaborateClick)=\"collaborate()\"\n    ></hra-empty-biomarker>\n  </mat-tab>\n  <mat-tab labelClass=\"extraTab\" label=\"Source Data\">\n    <div class=\"source-list\">\n      <hra-source-list\n        [collaborateText]=\"collaborateText\"\n        [message]=\"message\"\n        (collaborateClick)=\"collaborate()\"\n        [sources]=\"source()\"\n        class=\"content\"\n      ></hra-source-list>\n    </div>\n\n    <ng-template #infoTooltip let-tooltip>\n      <div class=\"biomarker-details info-tooltip\">\n        {{ tooltip }}\n      </div>\n    </ng-template>\n  </mat-tab>\n</mat-tab-group>\n"
        },
        {
            "name": "ContactBehaviorComponent",
            "id": "component-ContactBehaviorComponent-b9d5e223798d92be933b5dbadc75b1d6c247f7b00beb75f933bb07b0a4949d22458ee53931ca654d0b255f40508dbf23ef4e516e2f80368415a86fdfe44d60b6",
            "file": "src/lib/contact-behavior/contact-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-contact-behavior",
            "styleUrls": [
                "./contact-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./contact-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "description",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Information modal message to the user</p>\n",
                    "line": 29,
                    "rawdescription": "\nInformation modal message to the user",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "postMessageTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<void>",
                    "optional": false,
                    "description": "<p>A template to post a message</p>\n",
                    "line": 20,
                    "rawdescription": "\nA template to post a message",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'postMessage'"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 23,
                    "rawdescription": "\nInput for product logo URL to displayed on the left side.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productTitle",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.ProductTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 26,
                    "rawdescription": "\nInput for product title to displayed on the left side.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "sendMessage",
                    "defaultValue": "dispatch(ContactActions.SendMessage)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>A dispatcher function to send message entered by user</p>\n",
                    "line": 32,
                    "rawdescription": "\nA dispatcher function to send message entered by user",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which closes the 'Contact us' dialog and the acknowledgement dialog.",
                    "description": "<p>A function which closes the &#39;Contact us&#39; dialog and the acknowledgement dialog.</p>\n"
                },
                {
                    "name": "submit",
                    "args": [
                        {
                            "name": "message",
                            "type": "ContactData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.",
                    "description": "<p>A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.</p>\n",
                    "jsdoctags": [
                        {
                            "name": "message",
                            "type": "ContactData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A Component for contact behavior which sends the message entered by the user and shows an acknowledgement</p>\n",
            "rawdescription": "\nA Component for contact behavior which sends the message entered by the user and shows an acknowledgement",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject, TemplateRef, ViewChild } from '@angular/core';\nimport { MatDialog, MatDialogModule, MatDialogRef } from '@angular/material/dialog';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RR } from '@hra-ui/cdk/state';\nimport { ContactData, ContactModalComponent, InfoModalComponent } from '@hra-ui/components/molecules';\nimport { ResourceIds as Ids, ContactActions } from '@hra-ui/state';\n\n/** A Component for contact behavior which sends the message entered by the user and shows an acknowledgement */\n@Component({\n  selector: 'ftu-contact-behavior',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, ContactModalComponent, InfoModalComponent],\n  templateUrl: './contact-behavior.component.html',\n  styleUrls: ['./contact-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ContactBehaviorComponent {\n  /** A template to post a message */\n  @ViewChild('postMessage') readonly postMessageTemplate!: TemplateRef<void>;\n\n  /** Input for product logo URL to displayed on the left side. */\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\n\n  /** Input for product title to displayed on the left side. */\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\n\n  /** Information modal message to the user */\n  readonly description = selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement);\n\n  /** A dispatcher function to send message entered by user */\n  readonly sendMessage = dispatch(ContactActions.SendMessage);\n\n  /** A dialog box which shows user an acknowledgement after clicking on submit */\n  private readonly dialog = inject(MatDialog);\n\n  /** A mat form field dialog which accepts the email, subject, and message of user and validates it */\n  private readonly selfRef = inject(MatDialogRef, { optional: true });\n\n  /** Dialog box which references the acknowledgement dialog box */\n  private postRef?: MatDialogRef<void>;\n\n  /** A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box. */\n  submit(message: ContactData): void {\n    this.sendMessage(message);\n    this.selfRef?.close();\n    this.postRef = this.dialog.open(this.postMessageTemplate);\n  }\n\n  /** A function which closes the 'Contact us' dialog and the acknowledgement dialog.  */\n  close(): void {\n    this.postRef?.close();\n    this.selfRef?.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .contact-modal {\n    width: 41rem;\n    height: 40rem;\n  }\n\n  .info-modal {\n    width: 35rem;\n    height: 11.8rem;\n  }\n\n  @media screen and (max-height: 328px) {\n    .contact-modal {\n      height: calc(100vh - 2rem);\n    }\n  }\n}\n",
                    "styleUrl": "./contact-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<hra-contact-modal\n  class=\"contact-modal\"\n  [productLogoUrl]=\"productLogoUrl()\"\n  [productTitle]=\"productTitle()\"\n  (submitClick)=\"submit($event)\"\n  (closeClick)=\"close()\"\n>\n</hra-contact-modal>\n\n<ng-template #postMessage>\n  <hra-info-modal\n    class=\"info-modal\"\n    [productLogoUrl]=\"productLogoUrl()\"\n    [productTitle]=\"productTitle()\"\n    [description]=\"description()\"\n    (closeClick)=\"close()\"\n  >\n  </hra-info-modal>\n</ng-template>\n"
        },
        {
            "name": "FooterBehaviorComponent",
            "id": "component-FooterBehaviorComponent-d9ecf51e28e6cdbe2f77b2f819a2e3df3acd0382e946f213975e78af53f6c11b1a7a013fefb862cfa9449b9973d2ea3497fa9687d6c04eb492751c2a83c17410",
            "file": "src/lib/footer-behavior/footer-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-footer-behavior",
            "styleUrls": [
                "./footer-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./footer-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "download",
                    "defaultValue": "dispatch(DownloadActions.Download)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>A dispatcher function to download file in specified format</p>\n",
                    "line": 39,
                    "rawdescription": "\nA dispatcher function to download file in specified format",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "downloadFormats",
                    "defaultValue": "selectSnapshot(DownloadSelectors.formats)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Selects a snapshot of the current value of the available download formats</p>\n",
                    "line": 27,
                    "rawdescription": "\nSelects a snapshot of the current value of the available download formats",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "embed",
                    "defaultValue": "LinkIds.Embed",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Embed link routing after clicking on Embed</p>\n",
                    "line": 36,
                    "rawdescription": "\nEmbed link routing after clicking on Embed",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "hraPortal",
                    "defaultValue": "LinkIds.Portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Hra portal link routing after clicking on HRA Portal</p>\n",
                    "line": 30,
                    "rawdescription": "\nHra portal link routing after clicking on HRA Portal",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "illustrationMetadata",
                    "defaultValue": "LinkIds.Illustration",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Metadata page link routing after clicking on Illustration</p>\n",
                    "line": 33,
                    "rawdescription": "\nMetadata page link routing after clicking on Illustration",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 21,
                    "rawdescription": "\nInput for product logo URL to displayed on the left side.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productTitle",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.ProductTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 24,
                    "rawdescription": "\nInput for product title to displayed on the left side.",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "size",
                    "defaultValue": "selectSnapshot(ScreenModeSelectors.size)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Selects the current value of the available ScreenMode Size</p>\n",
                    "line": 41,
                    "rawdescription": "\nSelects the current value of the available ScreenMode Size",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "contact",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which opens the contact modal dialog box",
                    "description": "<p>A function which opens the contact modal dialog box</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A component for footer behavior which provides functionality for various buttons in footer</p>\n",
            "rawdescription": "\nA component for footer behavior which provides functionality for various buttons in footer",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { MatDialog, MatDialogConfig, MatDialogModule } from '@angular/material/dialog';\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RR } from '@hra-ui/cdk/state';\nimport { FooterComponent } from '@hra-ui/components/molecules';\nimport { DownloadActions, DownloadSelectors, ResourceIds as Ids, LinkIds, ScreenModeSelectors } from '@hra-ui/state';\nimport { ContactBehaviorComponent } from '../contact-behavior/contact-behavior.component';\n\n/** A component for footer behavior which provides functionality for various buttons in footer */\n@Component({\n  selector: 'ftu-footer-behavior',\n  standalone: true,\n  imports: [CommonModule, MatDialogModule, FooterComponent, ContactBehaviorComponent],\n  templateUrl: './footer-behavior.component.html',\n  styleUrls: ['./footer-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class FooterBehaviorComponent {\n  /** Input for product logo URL to displayed on the left side. */\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\n\n  /** Input for product title to displayed on the left side. */\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\n\n  /** Selects a snapshot of the current value of the available download formats */\n  readonly downloadFormats = selectSnapshot(DownloadSelectors.formats);\n\n  /** Hra portal link routing after clicking on HRA Portal */\n  readonly hraPortal = LinkIds.Portal;\n\n  /** Metadata page link routing after clicking on Illustration */\n  readonly illustrationMetadata = LinkIds.Illustration;\n\n  /** Embed link routing after clicking on Embed */\n  readonly embed = LinkIds.Embed;\n\n  /** A dispatcher function to download file in specified format */\n  readonly download = dispatch(DownloadActions.Download);\n  /** Selects the current value of the available ScreenMode Size */\n  readonly size = selectSnapshot(ScreenModeSelectors.size);\n\n  /** A dialog box which shows contact modal after clicking on contact */\n  private readonly dialog = inject(MatDialog);\n\n  /** A function which opens the contact modal dialog box */\n  contact(): void {\n    const dialogConfig = new MatDialogConfig();\n    dialogConfig.disableClose = true;\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./footer-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<hra-footer\n  [productLogoUrl]=\"productLogoUrl()\"\n  [productTitle]=\"productTitle()\"\n  [hraPortal]=\"hraPortal\"\n  [illustrationMetadata]=\"illustrationMetadata\"\n  [embed]=\"embed\"\n  [downloadFormats]=\"downloadFormats()\"\n  (contactClick)=\"contact()\"\n  (download)=\"download($event.id)\"\n  [size]=\"size()\"\n>\n</hra-footer>\n"
        },
        {
            "name": "HeaderBehaviorComponent",
            "id": "component-HeaderBehaviorComponent-a76f74e70c7aacab4debd2492e1302dc534513cd4598dce499fc0d4f09bf0a16fc333bcb4bb100ffc9dbcb5427533473060400e0ae5eb7051dac7768474ae300",
            "file": "src/lib/header-behavior/header-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-header-behavior",
            "styleUrls": [
                "./header-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./header-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "aboutLink",
                    "defaultValue": "LinkIds.About",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for about link for user click action.</p>\n",
                    "line": 41,
                    "rawdescription": "\n\nInput for about link for user click action.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "appTitle",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.AppTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for app title to show on the left side.</p>\n",
                    "line": 31,
                    "rawdescription": "\n\nInput for app title to show on the left side.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productLogoUrl",
                    "defaultValue": "selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product logo URL to displayed on the left side.</p>\n",
                    "line": 21,
                    "rawdescription": "\n\nInput for product logo URL to displayed on the left side.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productTitle",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, Ids.ProductTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product title to displayed on the left side.</p>\n",
                    "line": 26,
                    "rawdescription": "\n\nInput for product title to displayed on the left side.\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "productTitleLink",
                    "defaultValue": "LinkIds.ProductTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for product title link for user click action</p>\n",
                    "line": 36,
                    "rawdescription": "\n\nInput for product title link for user click action\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Header Behavior</p>\n",
            "rawdescription": "\nComponent for Header Behavior",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RR } from '@hra-ui/cdk/state';\nimport { HeaderComponent } from '@hra-ui/components/molecules';\nimport { ResourceIds as Ids, LinkIds } from '@hra-ui/state';\n\n/** Component for Header Behavior */\n@Component({\n  selector: 'ftu-header-behavior',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  templateUrl: './header-behavior.component.html',\n  styleUrls: ['./header-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HeaderBehaviorComponent {\n  /**\n   * Input for product logo URL to displayed on the left side.\n   */\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\n\n  /**\n   * Input for product title to displayed on the left side.\n   */\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\n\n  /**\n   * Input for app title to show on the left side.\n   */\n  readonly appTitle = selectQuerySnapshot(RR.anyText, Ids.AppTitle);\n\n  /**\n   * Input for product title link for user click action\n   */\n  readonly productTitleLink = LinkIds.ProductTitle;\n\n  /**\n   * Input for about link for user click action.\n   */\n  readonly aboutLink = LinkIds.About;\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./header-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<hra-header\n  [productLogoUrl]=\"productLogoUrl()\"\n  [productTitle]=\"productTitle()\"\n  [appTitle]=\"appTitle()\"\n  [productTitleLink]=\"productTitleLink\"\n  [aboutLink]=\"aboutLink\"\n>\n</hra-header>\n"
        },
        {
            "name": "HraLandingPageIntroWcBehaviourComponent",
            "id": "component-HraLandingPageIntroWcBehaviourComponent-b8c2509d12b92bff8ab139855b712563f2a92e8aa91e8ecc05714063b91b1765ade0e9c6e691367a2eaa4724d94d6dfe4ade28c89da03cfcf6eae21630452b23",
            "file": "src/lib/hra-landing-page-intro-wc-behaviour/hra-landing-page-intro-wc-behaviour.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-wc-intro",
            "styleUrls": [
                "./hra-landing-page-intro-wc-behaviour.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./hra-landing-page-intro-wc-behaviour.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "landingPageIntroDescription",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro description</p>\n",
                    "line": 21,
                    "rawdescription": "\nselect snapshot for landing page intro description",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroPartners",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro partners</p>\n",
                    "line": 25,
                    "rawdescription": "\nselect snapshot for landing page intro partners",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroReadMore",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPageIntroReadMore)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro partners</p>\n",
                    "line": 23,
                    "rawdescription": "\nselect snapshot for landing page intro partners",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroTitle",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for Landing Page title</p>\n",
                    "line": 19,
                    "rawdescription": "\nselect snapshot for Landing Page title",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for LandingPage Intro Behaviour: Web component</p>\n",
            "rawdescription": "\nComponent for LandingPage Intro Behaviour: Web component",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { HraLandingPageIntroWcComponent } from '@hra-ui/components/molecules';\nimport { ResourceRegistrySelectors as RRS } from '@hra-ui/cdk/state';\nimport { selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceIds as RIds } from '@hra-ui/state';\n\n/** Component for LandingPage Intro Behaviour: Web component */\n@Component({\n  selector: 'ftu-wc-intro',\n  standalone: true,\n  imports: [CommonModule, HraLandingPageIntroWcComponent],\n  templateUrl: './hra-landing-page-intro-wc-behaviour.component.html',\n  styleUrls: ['./hra-landing-page-intro-wc-behaviour.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class HraLandingPageIntroWcBehaviourComponent {\n  /** select snapshot for Landing Page title */\n  readonly landingPageIntroTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle);\n  /** select snapshot for landing page intro description */\n  readonly landingPageIntroDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription);\n  /** select snapshot for landing page intro partners */\n  readonly landingPageIntroReadMore = selectQuerySnapshot(RRS.markdown, RIds.LandingPageIntroReadMore);\n  /** select snapshot for landing page intro partners */\n  readonly landingPageIntroPartners = selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n\n  .intro {\n    display: inline-grid;\n    border: 1px solid #e2e7e9;\n    padding: 24px 32px 24px 32px;\n    width: 100%;\n  }\n}\n",
                    "styleUrl": "./hra-landing-page-intro-wc-behaviour.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<hra-ui-hra-landing-page-intro-wc\n  class=\"intro\"\n  [description]=\"landingPageIntroDescription()\"\n  [partners]=\"landingPageIntroPartners()\"\n  [readMore]=\"landingPageIntroReadMore()\"\n  [title]=\"landingPageIntroTitle()\"\n></hra-ui-hra-landing-page-intro-wc>\n"
        },
        {
            "name": "LandingPageContentComponent",
            "id": "component-LandingPageContentComponent-d72615e2863b7f2f08c767452a75c71c9e079687610cd3e50b54f72f11546184f7ad55c5304741d79adb9bb9ea161cdac4253ae6fb1cbbf15040f2814110616a",
            "file": "src/lib/landing-page-content/landing-page-content.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-landing-page-content",
            "styleUrls": [
                "./landing-page-content.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./landing-page-content.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "intersectableEls",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "QueryList<ElementRef>",
                    "optional": false,
                    "description": "<p>array of element refs for intersectables</p>\n",
                    "line": 34,
                    "rawdescription": "\narray of element refs for intersectables",
                    "decorators": [
                        {
                            "name": "ViewChildren",
                            "stringifiedArguments": "'intersectable', {read: ElementRef}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageDepthDescription",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page depth description</p>\n",
                    "line": 57,
                    "rawdescription": "\nselect snapshot for landing page depth description",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageDepthImg",
                    "defaultValue": "selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page depth img</p>\n",
                    "line": 61,
                    "rawdescription": "\nselect snapshot for landing page depth img",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageDepthMoreText",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot forlanding page depth more text</p>\n",
                    "line": 59,
                    "rawdescription": "\nselect snapshot forlanding page depth more text",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageDepthTitle",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page depth title</p>\n",
                    "line": 55,
                    "rawdescription": "\nselect snapshot for landing page depth title",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroDescription",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro description</p>\n",
                    "line": 40,
                    "rawdescription": "\nselect snapshot for landing page intro description",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroImg",
                    "defaultValue": "selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro img</p>\n",
                    "line": 47,
                    "rawdescription": "\nselect snapshot for landing page intro img",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroMoreText",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro more text</p>\n",
                    "line": 45,
                    "rawdescription": "\nselect snapshot for landing page intro more text",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroPartners",
                    "defaultValue": "selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for landing page intro partners</p>\n",
                    "line": 42,
                    "rawdescription": "\nselect snapshot for landing page intro partners",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "landingPageIntroTitle",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for Landing Page title</p>\n",
                    "line": 37,
                    "rawdescription": "\nselect snapshot for Landing Page title",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "LinkIds",
                    "defaultValue": "LinkIds",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Expose links for use it template</p>\n",
                    "line": 64,
                    "rawdescription": "\nExpose links for use it template",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "metrics",
                    "defaultValue": "selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, 'metrics' as const, [])<MetricItem[]>",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for metrics</p>\n",
                    "line": 49,
                    "rawdescription": "\nselect snapshot for metrics",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "metricsLogo",
                    "defaultValue": "selectQuerySnapshot(RRS.url, RIds.MetricsLogo)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for metrics logo</p>\n",
                    "line": 53,
                    "rawdescription": "\nselect snapshot for metrics logo",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "metricsTitle",
                    "defaultValue": "selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>select snapshot for metrics title</p>\n",
                    "line": 51,
                    "rawdescription": "\nselect snapshot for metrics title",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleIntersection",
                    "args": [
                        {
                            "name": "entries",
                            "type": "IntersectionObserverEntry[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "observer",
                            "type": "IntersectionObserver",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\ncallback function for intersection observer",
                    "description": "<p>callback function for intersection observer</p>\n",
                    "jsdoctags": [
                        {
                            "name": "entries",
                            "type": "IntersectionObserverEntry[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "observer",
                            "type": "IntersectionObserver",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for LandingPageContent Behavior</p>\n",
            "rawdescription": "\nComponent for LandingPageContent Behavior",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport {\n  AfterViewInit,\n  ChangeDetectionStrategy,\n  Component,\n  ElementRef,\n  inject,\n  QueryList,\n  Renderer2,\n  ViewChildren,\n} from '@angular/core';\nimport { injectDestroy$, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RRS } from '@hra-ui/cdk/state';\nimport {\n  LandingPageInDepthComponent,\n  LandingPageIntroComponent,\n  MetricItem,\n  MetricsComponent,\n} from '@hra-ui/components/molecules';\nimport { LinkIds, ResourceIds as RIds, ResourceTypes as RTypes } from '@hra-ui/state';\n\n/** Component for LandingPageContent Behavior */\n@Component({\n  selector: 'ftu-landing-page-content',\n  standalone: true,\n  imports: [CommonModule, LandingPageIntroComponent, MetricsComponent, LandingPageInDepthComponent],\n  templateUrl: './landing-page-content.component.html',\n  styleUrls: ['./landing-page-content.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class LandingPageContentComponent implements AfterViewInit {\n  /** array of element refs for intersectables */\n  @ViewChildren('intersectable', { read: ElementRef })\n  readonly intersectableEls!: QueryList<ElementRef>;\n\n  /** select snapshot for Landing Page title */\n  readonly landingPageIntroTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle);\n\n  /** select snapshot for landing page intro description */\n  readonly landingPageIntroDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription);\n  /** select snapshot for landing page intro partners */\n  readonly landingPageIntroPartners = selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners);\n\n  /** select snapshot for landing page intro more text */\n  readonly landingPageIntroMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText);\n  /** select snapshot for landing page intro img */\n  readonly landingPageIntroImg = selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg);\n  /** select snapshot for metrics */\n  readonly metrics = selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, 'metrics' as const, [])<MetricItem[]>;\n  /** select snapshot for metrics title */\n  readonly metricsTitle = selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle);\n  /** select snapshot for metrics logo */\n  readonly metricsLogo = selectQuerySnapshot(RRS.url, RIds.MetricsLogo);\n  /** select snapshot for landing page depth title */\n  readonly landingPageDepthTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle);\n  /** select snapshot for landing page depth description */\n  readonly landingPageDepthDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription);\n  /** select snapshot forlanding page depth more text */\n  readonly landingPageDepthMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText);\n  /** select snapshot for landing page depth img */\n  readonly landingPageDepthImg = selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg);\n\n  /** Expose links for use it template */\n  readonly LinkIds = LinkIds;\n\n  /** Renderer to add class for animation */\n  private readonly renderer = inject(Renderer2);\n  /** destroys observer */\n  private readonly destroy$ = injectDestroy$();\n\n  /** creates an observer after view init */\n  ngAfterViewInit(): void {\n    const observer = new IntersectionObserver(this.handleIntersection.bind(this), {\n      threshold: 0.18,\n    });\n\n    this.intersectableEls.forEach((el) => observer.observe(el.nativeElement));\n    this.destroy$.subscribe(() => observer.disconnect());\n  }\n\n  /** callback function for intersection observer */\n  handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void {\n    for (const { isIntersecting, target } of entries) {\n      if (isIntersecting) {\n        this.renderer.addClass(target, 'visible');\n        observer.unobserve(target);\n      }\n    }\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  overflow-x: hidden;\n\n  .intro {\n    margin: 3.5rem 2rem;\n  }\n\n  .metrics {\n    opacity: 0;\n\n    &.visible {\n      animation: fadeIn 2s ease-in forwards;\n    }\n  }\n\n  .in-depth {\n    opacity: 0;\n\n    &.visible {\n      overflow: hidden;\n      animation: slideIn 2s ease-in-out forwards;\n    }\n  }\n}\n\n@keyframes fadeIn {\n  0% {\n    opacity: 0;\n  }\n\n  100% {\n    opacity: 1;\n  }\n}\n\n@keyframes slideIn {\n  0% {\n    transform: translateX(200%);\n    opacity: 1;\n  }\n\n  100% {\n    transform: translateX(0);\n    opacity: 1;\n  }\n}\n",
                    "styleUrl": "./landing-page-content.component.scss"
                }
            ],
            "stylesData": "",
            "implements": [
                "AfterViewInit"
            ],
            "templateData": "<hra-landing-page-intro\n  class=\"intro\"\n  [title]=\"landingPageIntroTitle()\"\n  [img]=\"landingPageIntroImg()\"\n  [partners]=\"landingPageIntroPartners()\"\n  [description]=\"landingPageIntroDescription()\"\n  [moreText]=\"landingPageIntroMoreText()\"\n  [moreLink]=\"LinkIds.ExploreFTU\"\n>\n</hra-landing-page-intro>\n<hra-metrics class=\"metrics\" [title]=\"metricsTitle()\" [metrics]=\"metrics()\" [logo]=\"metricsLogo()\" #intersectable>\n</hra-metrics>\n<hra-landing-page-in-depth\n  class=\"in-depth\"\n  [title]=\"landingPageDepthTitle()\"\n  [description]=\"landingPageDepthDescription()\"\n  [moreText]=\"landingPageDepthMoreText()\"\n  [img]=\"landingPageDepthImg()\"\n  [moreLink]=\"LinkIds.LandingPageReadMore\"\n  #intersectable\n>\n</hra-landing-page-in-depth>\n"
        },
        {
            "name": "MedicalIllustrationBehaviorComponent",
            "id": "component-MedicalIllustrationBehaviorComponent-6fea78f0a6011315eef3ff0e9cf3f451130b68d93388f1b8ff7f362f6c7f2ec8bbad2f6518d0329f94a749b1e02a1018129acf2b8340f015397957c3e0fd985d",
            "file": "src/lib/medical-illustration-behavior/medical-illustration-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-medical-illustration-behavior",
            "styleUrls": [
                "./medical-illustration-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./medical-illustration-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "currentUrl",
                    "defaultValue": "selectSnapshot(IllustratorSelectors.url)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current illustration url</p>\n",
                    "line": 23,
                    "rawdescription": "\n\nCurrent illustration url\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "iri",
                    "defaultValue": "selectSnapshot(ActiveFtuSelectors.iri)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Iri  of medical illustration behavior component</p>\n",
                    "line": 33,
                    "rawdescription": "\n\nIri  of medical illustration behavior component\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "mapping",
                    "defaultValue": "selectSnapshot(IllustratorSelectors.mapping)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Current mapping file</p>\n",
                    "line": 28,
                    "rawdescription": "\n\nCurrent mapping file\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "tissues",
                    "defaultValue": "selectSnapshot(TissueLibrarySelectors.tissues)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Get all tissues</p>\n",
                    "line": 38,
                    "rawdescription": "\n\nGet all tissues\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateNodeOnClicked",
                    "defaultValue": "dispatch(IllustratorActions.SetClicked)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Updates the active node on node click</p>\n",
                    "line": 57,
                    "rawdescription": "\n\nUpdates the active node on node click\n",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "updateNodeOnHover",
                    "defaultValue": "dispatch(IllustratorActions.SetHover)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Updates the active node on node hover</p>\n",
                    "line": 52,
                    "rawdescription": "\n\nUpdates the active node on node hover\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Behavior component for medical illustration component</p>\n",
            "rawdescription": "\n\nBehavior component for medical illustration component\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { dispatch, selectSnapshot } from '@hra-ui/cdk/injectors';\nimport { LabelBoxComponent } from '@hra-ui/components/atoms';\nimport { InteractiveSvgComponent } from '@hra-ui/components/molecules';\nimport { ActiveFtuSelectors, IllustratorActions, IllustratorSelectors, TissueLibrarySelectors } from '@hra-ui/state';\n\n/**\n * Behavior component for medical illustration component\n */\n@Component({\n  selector: 'ftu-medical-illustration-behavior',\n  standalone: true,\n  imports: [CommonModule, InteractiveSvgComponent, LabelBoxComponent],\n  templateUrl: './medical-illustration-behavior.component.html',\n  styleUrls: ['./medical-illustration-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class MedicalIllustrationBehaviorComponent {\n  /**\n   * Current illustration url\n   */\n  readonly currentUrl = selectSnapshot(IllustratorSelectors.url);\n\n  /**\n   * Current mapping file\n   */\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\n\n  /**\n   * Iri  of medical illustration behavior component\n   */\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\n\n  /**\n   * Get all tissues\n   */\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\n\n  /**\n   * Gets tissue title from the list of tissues\n   */\n  get tissueTitle(): string {\n    const iri = this.iri();\n    const tissues = this.tissues();\n    return iri ? tissues[iri].label : '';\n  }\n\n  /**\n   * Updates the active node on node hover\n   */\n  readonly updateNodeOnHover = dispatch(IllustratorActions.SetHover);\n\n  /**\n   * Updates the active node on node click\n   */\n  readonly updateNodeOnClicked = dispatch(IllustratorActions.SetClicked);\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  hra-label-box {\n    border-bottom: 0.063rem solid #d3d3d3;\n    width: 100%;\n    height: 3.5rem;\n  }\n}\n",
                    "styleUrl": "./medical-illustration-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "accessors": {
                "tissueTitle": {
                    "name": "tissueTitle",
                    "getSignature": {
                        "name": "tissueTitle",
                        "type": "string",
                        "returnType": "string",
                        "line": 43,
                        "rawdescription": "\n\nGets tissue title from the list of tissues\n",
                        "description": "<p>Gets tissue title from the list of tissues</p>\n"
                    }
                }
            },
            "templateData": "<hra-label-box>{{ tissueTitle }}</hra-label-box>\n<hra-interactive-svg\n  [url]=\"currentUrl()\"\n  [mapping]=\"mapping()\"\n  (nodeHover)=\"updateNodeOnHover($event)\"\n  (nodeClick)=\"updateNodeOnClicked($event)\"\n>\n</hra-interactive-svg>\n"
        },
        {
            "name": "ScreenNoticeBehaviorComponent",
            "id": "component-ScreenNoticeBehaviorComponent-de4fc156bf7f658d9ca0a8d114626d829387a03f3b206cb5439f1ad22b9e157cbc51e850b06eb8f0b9dd48a75acb723b42c7fd79d0c50694757e9d23cac9f416",
            "file": "src/lib/screen-notice-behavior/screen-notice-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-ui-screen-notice-behavior",
            "styleUrls": [
                "./screen-notice-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./screen-notice-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "content",
                    "defaultValue": "selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Content  of screen notice behavior component</p>\n",
                    "line": 21,
                    "rawdescription": "\nContent  of screen notice behavior component",
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "portal",
                    "defaultValue": "LinkIds.Portal",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Hra portal link routing after clicking on HRA Portal</p>\n",
                    "line": 24,
                    "rawdescription": "\nHra portal link routing after clicking on HRA Portal",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nA function which closes the screen size notice dialog box",
                    "description": "<p>A function which closes the screen size notice dialog box</p>\n"
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>A component for screen size notice behavior which provides the content to be displayed and provides functionality\nfor the buttons on the notice modal</p>\n",
            "rawdescription": "\nA component for screen size notice behavior which provides the content to be displayed and provides functionality\nfor the buttons on the notice modal",
            "type": "component",
            "sourceCode": "import { ChangeDetectionStrategy, Component, inject } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { dispatch, selectQuerySnapshot } from '@hra-ui/cdk/injectors';\nimport { ResourceRegistrySelectors as RR, StorageActions, StorageId } from '@hra-ui/cdk/state';\nimport { ResourceIds, LinkIds } from '@hra-ui/state';\nimport { ScreenSizeNoticeComponent } from '@hra-ui/components/molecules';\nimport { MatDialogRef } from '@angular/material/dialog';\n\n/** A component for screen size notice behavior which provides the content to be displayed and provides functionality\n * for the buttons on the notice modal */\n@Component({\n  selector: 'ftu-ui-screen-notice-behavior',\n  standalone: true,\n  imports: [CommonModule, ScreenSizeNoticeComponent],\n  templateUrl: './screen-notice-behavior.component.html',\n  styleUrls: ['./screen-notice-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class ScreenNoticeBehaviorComponent {\n  /** Content  of screen notice behavior component*/\n  readonly content = selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent);\n\n  /** Hra portal link routing after clicking on HRA Portal*/\n  readonly portal = LinkIds.Portal;\n\n  /** Reference for the screen size notice dialog box*/\n  private readonly ref = inject(MatDialogRef, { optional: true });\n\n  /** A dispatcher function that sets the Local Storage as 'shown'*/\n  private readonly setScreenNoticeShown = dispatch(StorageActions.Set, StorageId.Local, 'screen-size-notice', 'shown');\n\n  /** A function which closes the screen size notice dialog box*/\n  close(): void {\n    this.setScreenNoticeShown();\n    this.ref?.close();\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n}\n",
                    "styleUrl": "./screen-notice-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "templateData": "<hra-screen-size-notice [content]=\"content()\" [portal]=\"portal\" (proceedClick)=\"close()\"> </hra-screen-size-notice>\n"
        },
        {
            "name": "TissueLibraryBehaviorComponent",
            "id": "component-TissueLibraryBehaviorComponent-1565978e9f70870b546b49f929236ee86c2eb9cc241e10b805863df59e4d66dca72495ffa8c27a7f282e396acc84f78b6724255570a4eab733a3af995543b47a",
            "file": "src/lib/tissue-library-behavior/tissue-library-behavior.component.ts",
            "changeDetection": "ChangeDetectionStrategy.OnPush",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "ftu-tissue-library-behavior",
            "styleUrls": [
                "./tissue-library-behavior.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./tissue-library-behavior.component.html"
            ],
            "viewProviders": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "list",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TissueTreeListComponent<never | never>",
                    "optional": true,
                    "description": "<p>Reference to the TissueTreeListComponent.</p>\n",
                    "line": 25,
                    "rawdescription": "\n\nReference to the TissueTreeListComponent.\n",
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'list', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        144
                    ]
                },
                {
                    "name": "selected",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Tissue",
                    "optional": true,
                    "description": "<p>Selected  of tissue library behavior component</p>\n",
                    "line": 34,
                    "rawdescription": "\n\nSelected  of tissue library behavior component\n"
                },
                {
                    "name": "tissues",
                    "defaultValue": "selectSnapshot(TissueLibrarySelectors.tissues)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "<p>Input for tissues data</p>\n",
                    "line": 30,
                    "rawdescription": "\n\nInput for tissues data\n",
                    "modifierKind": [
                        144
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "description": "<p>Component for Tissue Library Behavior</p>\n",
            "rawdescription": "\n\nComponent for Tissue Library Behavior\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { ChangeDetectionStrategy, Component, ViewChild } from '@angular/core';\nimport { select$, selectSnapshot } from '@hra-ui/cdk/injectors';\nimport { TissueTreeListComponent } from '@hra-ui/components/molecules';\nimport { Tissue } from '@hra-ui/services';\nimport { ActiveFtuSelectors, TissueLibrarySelectors } from '@hra-ui/state';\nimport { LabelBoxComponent } from '@hra-ui/components/atoms';\n\n/**\n * Component for Tissue Library Behavior\n */\n@Component({\n  selector: 'ftu-tissue-library-behavior',\n  standalone: true,\n  imports: [CommonModule, LabelBoxComponent, TissueTreeListComponent],\n  templateUrl: './tissue-library-behavior.component.html',\n  styleUrls: ['./tissue-library-behavior.component.scss'],\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class TissueLibraryBehaviorComponent {\n  /**\n   * Reference to the TissueTreeListComponent.\n   */\n  @ViewChild('list', { static: true })\n  readonly list?: TissueTreeListComponent<never, never>;\n\n  /**\n   * Input for tissues data\n   */\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\n  /**\n   * Selected  of tissue library behavior component\n   */\n  selected?: Tissue;\n\n  /**\n   * Sets the TissueItem instance as undefined if\n   * the url is undefined\n   */\n  constructor() {\n    /** Get iris from the observable else reset selection if\n     * iri is undefined\n     */\n    select$(ActiveFtuSelectors.iri).subscribe((iri) => {\n      this.selected = iri && this.tissues()[iri];\n      if (iri === undefined) {\n        this.list?.resetSelection();\n      }\n    });\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ":host {\n  display: block;\n  .label {\n    border-bottom: 1px solid #e2e7e9;\n    width: 100%;\n    height: 3.5rem;\n  }\n}\n",
                    "styleUrl": "./tissue-library-behavior.component.scss"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "<p>Sets the TissueItem instance as undefined if\nthe url is undefined</p>\n",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 34,
                "rawdescription": "\n\nSets the TissueItem instance as undefined if\nthe url is undefined\n"
            },
            "templateData": "<hra-label-box class=\"label\">FTU Library</hra-label-box>\n<hra-tissue-tree-list class=\"tissue-tree\" [nodes]=\"tissues()\" [(selected)]=\"selected\" #list> </hra-tissue-tree-list>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "EMPTY_TISSUE_INFO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/biomarker-details/biomarker-details.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TissueInfo",
                "defaultValue": "{\n  id: '',\n  label: '',\n}",
                "rawdescription": "PlaceHolder for Empty Tissue Info",
                "description": "<p>PlaceHolder for Empty Tissue Info</p>\n"
            },
            {
                "name": "EMPTY_TISSUE_INFO",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/lib/biomarker-details-wc/biomarker-details-wc.component.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TissueInfo",
                "defaultValue": "{\n  id: '',\n  label: '',\n}",
                "rawdescription": "PlaceHolder for Empty Tissue Info",
                "description": "<p>PlaceHolder for Empty Tissue Info</p>\n"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/lib/biomarker-details/biomarker-details.component.ts": [
                {
                    "name": "EMPTY_TISSUE_INFO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/biomarker-details/biomarker-details.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TissueInfo",
                    "defaultValue": "{\n  id: '',\n  label: '',\n}",
                    "rawdescription": "PlaceHolder for Empty Tissue Info",
                    "description": "<p>PlaceHolder for Empty Tissue Info</p>\n"
                }
            ],
            "src/lib/biomarker-details-wc/biomarker-details-wc.component.ts": [
                {
                    "name": "EMPTY_TISSUE_INFO",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/lib/biomarker-details-wc/biomarker-details-wc.component.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TissueInfo",
                    "defaultValue": "{\n  id: '',\n  label: '',\n}",
                    "rawdescription": "PlaceHolder for Empty Tissue Info",
                    "description": "<p>PlaceHolder for Empty Tissue Info</p>\n"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    }
}