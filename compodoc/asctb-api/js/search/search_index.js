var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ASCTBData.html",[0,0.096,1,1.987]],["body/interfaces/ASCTBData.html",[0,0.06,1,3.407,2,0.626,3,0.255,4,0.255,5,0.2,6,1.248,7,0.152,8,0.484,9,0.718,10,0.585,11,3.986,12,1.347,13,3.107,14,1.397,15,0.318,16,0.065,17,1.18,18,1.092,19,0.613,20,1.326,21,1.433,22,0.626,23,1.004,24,1.129,25,0.626,26,0.626,27,0.966,28,1.581,29,0.626,30,0.966,31,0.626,32,1.248,33,1.248,34,1.581,35,1.581,36,1.581,37,1.029,38,1.581,39,0.642,40,1.853,41,1.581,42,1.581,43,1.581,44,1.316,45,1.719,46,1.581,47,1.581,48,1.581,49,1.248,50,1.581,51,1.581,52,1.581,53,1.581,54,1.539,55,1.581,56,1.581,57,1.581,58,1.581,59,0.583,60,1.739,61,1.289,62,1.134,63,2.979,64,3.349,65,1.581,66,2.979,67,1.581,68,1.581,69,1.581,70,1.581,71,1.581,72,1.581,73,1.581,74,1.581,75,2.44,76,2.44,77,2.44,78,1.926,79,0.379,80,3.336,81,3.52,82,1.248,83,2.49,84,2.979,85,1.454,86,1.581,87,2.49,88,3.619,89,1.581,90,1.581,91,2.44,92,1.581,93,1.581,94,0.735,95,2.645,96,1.581,97,2.859,98,2.44,99,3.619,100,1.581,101,1.581,102,1.581,103,1.926,104,1.248,105,1.581,106,1.581,107,1.581,108,1.581,109,1.581,110,4.565,111,2.979,112,3.336,113,2.859,114,2.352,115,1.581,116,1.926,117,3.619,118,1.248,119,1.588,120,2.44,121,2.356,122,2.44,123,2.44,124,1.939,125,1.248,126,1.581,127,1.581,128,1.581,129,1.581,130,1.581,131,0.966,132,1.581,133,1.248,134,1.248,135,1.588,136,1.248,137,1.588,138,1.248,139,2.645,140,1.515,141,2.352,142,1.926,143,1.248,144,1.248,145,0.966,146,1.248,147,1.248,148,0.626,149,1.029,150,2.356,151,2.352,152,2.352,153,1.248,154,1.248,155,1.248,156,1.926,157,1.248,158,1.248,159,1.248,160,1.581,161,1.581,162,2.645,163,2.979,164,1.581,165,2.44,166,2.859,167,2.44,168,2.44,169,2.44,170,2.44,171,1.926,172,2.44,173,1.926,174,3.349,175,2.44,176,3.349,177,2.44,178,2.44,179,3.349,180,2.44,181,2.44,182,2.44,183,1.581,184,1.581,185,3.349,186,1.926,187,2.44,188,1.581,189,1.581,190,2.44,191,1.248,192,1.581,193,1.581,194,2.44,195,1.581,196,1.581,197,2.44,198,2.44,199,1.581,200,3.349,201,1.581,202,2.44,203,1.581,204,2.979,205,0.48,206,1.926,207,1.248,208,0.2,209,2.44,210,1.581,211,0.865,212,1.581,213,1.248,214,2.44,215,2.44,216,2.44,217,2.44,218,1.004,219,3.349,220,2.979,221,1.581,222,2.979,223,2.44,224,0.718,225,2.44,226,1.18,227,3.349,228,2.44,229,2.44,230,2.44,231,1.926,232,2.44,233,1.581,234,1.581,235,1.581,236,1.248,237,1.581,238,1.248,239,1.581,240,1.581,241,1.581,242,1.581,243,1.581,244,0.041,245,1.581,246,1.581,247,1.581,248,1.581,249,1.581,250,1.581,251,1.581,252,1.581,253,1.581,254,1.248,255,0.03]],["title/interfaces/GEdge.html",[0,0.096,256,1.169]],["body/interfaces/GEdge.html",[0,0.143,2,1.149,3,0.467,4,0.736,5,0.368,7,0.11,8,0.746,9,0.605,12,1.191,15,0.434,16,0.065,19,0.649,20,1.149,39,0.754,59,0.793,79,0.901,205,0.672,208,0.579,224,0.576,244,0.046,255,0.046,256,1.748,257,1.349,258,2.416,259,1.058,260,1.589,261,1.589,262,0.946,263,0.901,264,1.349,265,0.746,266,0.746,267,1.349,268,1.349,269,1.349,270,1.349,271,1.349,272,1.349,273,1.349,274,1.349,275,1.349,276,1.349,277,1.349,278,1.349,279,1.349,280,1.349,281,1.349,282,1.349,283,1.349,284,1.349,285,1.349,286,1.349,287,1.349,288,2.059,289,2.059,290,1.748,291,1.349,292,1.349,293,0.046,294,1.349,295,2.284,296,1.589,297,1.589,298,1.589,299,0.829,300,2.747,301,0.908,302,2.059,303,0.829,304,1.589,305,1.589,306,1.589,307,1.589,308,1.589,309,1.191,310,1.349,311,1.589,312,1.589,313,1.589,314,2.284,315,0.829,316,1.589,317,1.589,318,1.589,319,2.059,320,2.059,321,1.149,322,1.589,323,1.589,324,0.368,325,1.589,326,1.589,327,1.589,328,1.589,329,1.589,330,0.829,331,1.349,332,1.589,333,1.589]],["title/classes/GNode.html",[293,0.031,294,1.169]],["body/classes/GNode.html",[0,0.135,3,0.429,4,0.572,5,0.337,7,0.101,8,0.706,9,0.572,10,0.639,12,1.306,15,0.477,16,0.065,19,0.658,20,1.055,39,0.737,59,0.793,79,0.852,205,0.737,208,0.592,224,0.529,244,0.044,255,0.044,256,1.238,257,1.238,258,1.459,259,1.097,260,1.459,261,1.459,262,0.978,263,0.852,264,1.238,265,0.706,266,0.706,267,1.238,268,1.238,269,1.238,270,1.238,271,1.238,272,1.238,273,1.238,274,1.238,275,1.238,276,1.238,277,1.238,278,1.238,279,1.238,280,1.238,281,1.238,282,1.238,283,1.238,284,1.238,285,1.238,286,1.238,287,1.238,288,1.946,289,1.946,290,1.652,291,1.238,292,1.238,293,0.044,294,1.652,295,2.557,296,2.19,297,2.19,298,2.19,299,1.015,300,2.741,301,0.927,302,2.337,303,0.761,304,1.459,305,1.459,306,1.459,307,1.459,308,1.459,309,1.142,310,1.238,311,1.459,312,1.459,313,1.459,314,2.19,315,0.761,316,1.459,317,1.459,318,1.459,319,1.946,320,1.946,321,1.055,322,1.459,323,1.459,324,0.337,325,1.459,326,1.459,327,1.459,328,1.459,329,1.459,330,0.761,331,1.238,332,1.459,333,1.459,334,0.898,335,1.238,336,1.619,337,3.555,338,0.898,339,2.104,340,2.664,341,2.664,342,2.664,343,2.664,344,2.664,345,2.664,346,2.664]],["title/interfaces/GraphData.html",[0,0.096,331,1.169]],["body/interfaces/GraphData.html",[0,0.143,2,1.149,3,0.467,4,0.605,5,0.368,7,0.11,8,0.746,9,0.605,12,1.191,15,0.434,16,0.065,19,0.649,20,1.149,39,0.754,59,0.754,79,1.123,205,0.672,208,0.579,224,0.576,244,0.046,255,0.046,256,1.349,257,1.349,258,1.589,259,1.058,260,1.589,261,1.589,262,0.946,263,0.901,264,1.349,265,0.746,266,0.746,267,1.349,268,1.349,269,1.349,270,1.349,271,1.349,272,1.349,273,1.349,274,1.349,275,1.349,276,1.349,277,1.349,278,1.349,279,1.349,280,1.349,281,1.349,282,1.349,283,1.349,284,1.349,285,1.349,286,1.349,287,1.349,288,2.059,289,2.059,290,1.748,291,1.349,292,1.349,293,0.046,294,1.349,295,2.284,296,1.589,297,1.589,298,1.589,299,0.829,300,2.747,301,0.908,302,2.059,303,0.829,304,1.589,305,1.589,306,1.589,307,1.589,308,1.589,309,1.191,310,1.349,311,1.589,312,1.589,313,1.589,314,2.284,315,0.829,316,1.589,317,1.589,318,1.589,319,2.059,320,2.059,321,1.149,322,1.589,323,1.589,324,0.368,325,1.589,326,1.589,327,1.589,328,1.589,329,1.589,330,0.829,331,1.748,332,2.416,333,2.416]],["title/interfaces/LookupResponse.html",[0,0.096,347,1.987]],["body/interfaces/LookupResponse.html",[0,0.138,2,1.433,3,0.583,4,0.583,5,0.458,7,0.138,8,0.856,10,1.144,15,0.463,16,0.064,18,1.316,19,0.651,39,0.695,208,0.605,211,2.362,244,0.053,255,0.053,263,0.867,321,1.708,324,0.546,347,3.406,348,2.857,349,4.773,350,4.773,351,4.773,352,4.773,353,2.857,354,2.808,355,3.406]],["title/classes/Metadata.html",[12,0.718,293,0.031]],["body/classes/Metadata.html",[0,0.137,3,0.436,4,0.579,5,0.343,7,0.103,8,0.714,9,0.579,10,0.967,12,1.227,15,0.466,16,0.065,19,0.658,20,1.073,39,0.74,59,0.74,79,0.862,205,0.65,208,0.611,224,0.538,244,0.044,255,0.044,256,1.26,257,1.26,258,1.483,259,1.124,260,1.483,261,1.483,262,0.974,263,0.862,264,1.26,265,0.714,266,0.714,267,1.26,268,1.26,269,1.26,270,1.26,271,1.26,272,1.26,273,1.26,274,1.26,275,1.26,276,1.26,277,1.26,278,1.26,279,1.26,280,1.26,281,1.26,282,1.26,283,1.26,284,1.26,285,1.26,286,1.26,287,1.26,288,1.968,289,1.968,290,1.671,291,1.26,292,1.26,293,0.044,294,1.26,295,2.209,296,1.483,297,1.483,298,1.483,299,1.027,300,2.766,301,0.957,302,1.968,303,0.774,304,1.483,305,1.483,306,1.483,307,1.483,308,1.483,309,1.152,310,1.26,311,1.483,312,2.209,313,2.209,314,2.568,315,1.027,316,1.483,317,1.483,318,1.483,319,1.968,320,1.968,321,1.073,322,1.483,323,1.483,324,0.343,325,1.483,326,1.483,327,1.483,328,1.483,329,1.483,330,0.774,331,1.26,332,1.483,333,1.483,334,0.913,336,1.605,338,0.913,339,2.14,356,3.595,357,2.71,358,2.71,359,2.71,360,2.71,361,2.71,362,2.71]],["title/classes/OmapDataTransformer.html",[37,1.638,293,0.031]],["body/classes/OmapDataTransformer.html",[3,0.367,4,0.367,5,0.289,7,0.14,9,0.644,10,0.546,12,1.053,13,2.741,14,1.053,15,0.216,16,0.065,17,0.903,18,1.246,19,0.613,20,1.265,23,1.077,24,1.077,32,1.8,37,2.08,39,0.367,44,1.053,45,1.692,54,1.51,59,0.514,60,1.728,61,1.348,85,1.243,95,1.8,97,1.484,103,3.157,113,1.484,119,1.484,121,2.08,124,1.484,125,1.8,131,0.903,135,2.08,137,2.08,149,1.484,150,2.741,162,2.523,166,1.484,205,0.514,208,0.405,218,0.768,224,0.732,226,1.265,231,2.913,236,2.523,238,1.8,244,0.039,254,1.8,255,0.039,262,0.452,293,0.028,299,0.651,310,1.059,324,0.405,334,0.768,336,1.243,338,0.768,363,2.279,364,3.195,365,3.998,366,3.195,367,4.21,368,2.279,369,2.279,370,2.279,371,3.195,372,2.279,373,2.279,374,0.903,375,2.279,376,2.279,377,4.76,378,4.364,379,2.279,380,2.279,381,2.279,382,4.364,383,3.689,384,3.998,385,2.279,386,3.195,387,3.195,388,2.279,389,2.279,390,2.279,391,3.195,392,1.8,393,2.279,394,2.279,395,2.279,396,2.279,397,2.279,398,2.279,399,3.195,400,2.279,401,2.279,402,2.279,403,0.903,404,2.279,405,2.279,406,2.279,407,2.279,408,2.279,409,2.279,410,2.279,411,1.8,412,2.279,413,3.195,414,3.67,415,2.279,416,2.279,417,3.195,418,2.279,419,3.998,420,3.195,421,1.265,422,0.903,423,2.279,424,2.279,425,3.195,426,3.195,427,3.689,428,3.689,429,2.279,430,2.279,431,2.279,432,2.279,433,2.279,434,2.279,435,2.279,436,3.195,437,3.998,438,3.689,439,2.279,440,2.279,441,1.461,442,3.689,443,3.689,444,2.279,445,3.195,446,1.265,447,2.279,448,2.279,449,2.279,450,2.279,451,3.998,452,3.689,453,2.279,454,2.279,455,2.279,456,2.279,457,2.279,458,2.279,459,2.279,460,2.279,461,2.279,462,2.279,463,2.279,464,3.998,465,2.279,466,2.279,467,2.279,468,2.279,469,2.279,470,2.279,471,2.279,472,2.279,473,1.8,474,2.279,475,3.195,476,2.279,477,2.279,478,2.279,479,2.279,480,2.279,481,2.279,482,2.279,483,2.279,484,2.279,485,3.195,486,2.279,487,2.279,488,2.279,489,2.279,490,2.279,491,2.279,492,2.279,493,2.279]],["title/classes/Reference.html",[259,0.603,293,0.031]],["body/classes/Reference.html",[0,0.105,3,0.299,4,0.299,5,0.56,7,0.071,8,0.547,9,0.444,10,1.009,14,0.53,15,0.4,16,0.065,17,1.538,18,1.038,19,0.631,21,0.735,22,0.735,23,0.626,24,0.626,25,0.735,26,0.735,27,0.735,29,0.735,30,0.735,31,0.735,39,0.779,40,1.28,44,0.786,45,1.573,54,1.225,59,0.529,61,0.929,62,1.689,79,1.059,85,0.626,94,0.863,131,1.091,140,0.735,145,1.439,148,0.735,205,0.774,208,0.235,218,1.63,224,0.547,226,1.091,244,0.034,255,0.034,259,0.871,262,0.955,263,0.66,265,0.368,266,0.652,293,0.04,299,0.53,301,0.652,303,0.938,309,1.161,315,0.53,324,0.235,330,0.53,334,0.626,335,1.28,336,1.309,338,0.626,374,0.735,403,0.735,421,1.091,422,1.611,441,0.735,446,1.668,494,0.626,495,1.508,496,2.189,497,2.755,498,1.856,499,1.856,500,1.856,501,1.28,502,1.28,503,1.28,504,1.28,505,1.28,506,1.28,507,0.863,508,1.28,509,0.863,510,0.863,511,0.863,512,0.863,513,0.863,514,1.28,515,1.28,516,1.28,517,0.863,518,0.863,519,0.863,520,0.863,521,1.301,522,0.863,523,0.863,524,1.301,525,0.863,526,0.863,527,1.689,528,2.121,529,1.28,530,1.28,531,2.054,532,0.863,533,0.863,534,1.28,535,1.28,536,0.863,537,0.863,538,1.28,539,0.863,540,0.863,541,1.28,542,0.863,543,0.863,544,1.28,545,0.863,546,0.863,547,1.28,548,0.863,549,0.863,550,1.28,551,0.863,552,1.611,553,1.28,554,0.863,555,0.863,556,0.863,557,0.863,558,1.28,559,0.863,560,1.301,561,1.301,562,0.863,563,1.301,564,1.28,565,1.439,566,1.28,567,1.439,568,1.28,569,1.28,570,1.28,571,1.28,572,1.439,573,1.28,574,1.439,575,1.28,576,1.439,577,0.863,578,1.016,579,2.578,580,1.28,581,1.016,582,1.016,583,1.016,584,1.016,585,1.016,586,1.016,587,1.016,588,1.016,589,1.016,590,2.126,591,1.016,592,1.016,593,1.508,594,1.798,595,1.508,596,1.508,597,1.798,598,1.99,599,1.016,600,1.016,601,1.016,602,1.016,603,1.016,604,1.016,605,1.016,606,1.016,607,1.016,608,1.016,609,0.863,610,1.016,611,1.016,612,1.016,613,1.016,614,2.419,615,1.016,616,1.016,617,1.016,618,1.016,619,1.016,620,1.508,621,1.016,622,1.508,623,1.016,624,1.508,625,1.016,626,1.508,627,1.016,628,1.508,629,1.016,630,1.016,631,1.016,632,1.016,633,1.016,634,1.016,635,1.016,636,1.016,637,1.016,638,0.863,639,1.016,640,1.016,641,0.863,642,1.508,643,1.016,644,1.016,645,1.016,646,1.508,647,1.508,648,1.798,649,1.016,650,1.508,651,1.508,652,1.016,653,1.016,654,1.016,655,1.016,656,1.016,657,1.798,658,0.863,659,1.016,660,1.508,661,1.016,662,1.508,663,1.016]],["title/classes/Row.html",[14,0.718,293,0.031]],["body/classes/Row.html",[0,0.1,3,0.281,4,0.281,5,0.55,7,0.066,8,0.522,9,0.424,10,0.418,14,0.751,15,0.446,16,0.065,17,1.396,18,1.007,19,0.616,21,0.691,22,0.691,23,0.588,24,0.588,25,0.691,26,0.691,27,0.691,29,0.691,30,0.691,31,0.691,39,0.772,40,1.223,44,0.751,45,1.554,54,1.188,59,0.64,60,1.754,61,0.887,62,1.758,79,1.149,85,0.588,94,0.811,131,1.042,140,1.396,145,1.396,148,0.691,205,0.75,208,0.221,218,1.615,224,0.522,226,1.042,244,0.032,255,0.032,259,0.845,262,0.945,263,0.631,265,0.346,266,0.628,293,0.039,299,0.498,301,0.751,303,0.904,309,1.135,315,0.498,324,0.221,330,0.498,334,0.588,335,0.811,336,1.554,338,0.588,374,0.691,403,0.691,421,1.805,422,1.396,441,0.691,446,1.498,494,0.588,495,1.44,496,2.091,501,1.223,502,1.223,503,1.223,504,1.223,505,1.223,506,1.223,507,0.811,508,1.223,509,0.811,510,0.811,511,0.811,512,0.811,513,0.811,514,1.223,515,1.223,516,1.223,517,0.811,518,0.811,519,0.811,520,0.811,521,1.254,522,0.811,523,0.811,524,1.254,525,0.811,526,0.811,527,1.639,528,2.091,529,1.223,530,1.223,531,2.02,532,0.811,533,0.811,534,1.223,535,1.223,536,0.811,537,0.811,538,1.223,539,0.811,540,0.811,541,1.223,542,0.811,543,0.811,544,1.223,545,0.811,546,0.811,547,1.223,548,0.811,549,0.811,550,1.223,551,0.811,552,1.575,553,1.223,554,0.811,555,0.811,556,0.811,557,0.811,558,1.223,559,0.811,560,1.498,561,1.498,562,0.811,563,1.498,564,1.223,565,1.575,566,1.223,567,1.575,568,1.223,569,1.223,570,1.223,571,1.223,572,1.575,573,1.223,574,1.575,575,1.223,576,1.575,577,0.811,578,0.956,579,2.549,580,1.223,581,0.956,582,0.956,583,0.956,584,0.956,585,0.956,586,0.956,587,0.956,588,0.956,589,0.956,590,2.071,591,0.956,592,0.956,593,1.44,594,1.734,595,1.44,596,1.44,597,1.734,598,1.93,599,0.956,600,0.956,601,0.956,602,0.956,603,0.956,604,0.956,605,0.956,606,0.956,607,0.956,608,0.956,609,1.472,610,0.956,611,1.93,612,0.956,613,0.956,614,2.379,615,0.956,616,0.956,617,0.956,618,0.956,619,0.956,620,1.44,621,0.956,622,1.44,623,0.956,624,1.44,625,0.956,626,1.44,627,0.956,628,1.44,629,0.956,630,0.956,631,0.956,632,0.956,633,0.956,634,0.956,635,0.956,636,0.956,637,0.956,638,0.811,639,0.956,640,0.956,641,0.811,642,1.44,643,0.956,644,0.956,645,0.956,646,1.44,647,1.44,648,1.734,649,0.956,650,1.44,651,1.44,652,0.956,653,0.956,654,0.956,655,0.956,656,0.956,657,1.734,658,0.811,659,0.956,660,1.44,661,0.956,662,1.44,663,0.956,664,2.631,665,1.745,666,2.631,667,1.745,668,1.745,669,1.745,670,1.745,671,1.745,672,1.745,673,1.745,674,1.745,675,1.745,676,1.745,677,1.745]],["title/classes/Structure.html",[293,0.031,580,1.169]],["body/classes/Structure.html",[0,0.102,3,0.287,4,0.287,5,0.554,7,0.068,8,0.531,9,0.431,10,1.121,14,0.509,15,0.429,16,0.065,17,1.512,18,1.018,19,0.638,21,0.706,22,0.706,23,0.601,24,0.601,25,0.706,26,0.706,27,0.706,29,0.706,30,0.706,31,0.706,39,0.774,40,1.243,44,0.763,45,1.561,54,1.201,59,0.517,60,1.059,61,0.901,62,1.775,79,1.048,85,0.601,94,0.829,131,1.27,140,0.706,145,1.411,148,0.706,205,0.765,208,0.226,218,1.621,224,0.531,226,1.059,244,0.033,255,0.033,259,0.769,262,0.975,263,0.641,265,0.354,266,0.637,293,0.039,299,0.509,301,0.637,303,0.916,309,1.144,315,0.763,324,0.226,330,0.509,334,0.601,335,0.829,336,1.474,338,0.901,374,0.706,403,0.706,421,1.411,422,1.411,441,0.706,446,1.646,494,0.601,495,1.464,496,2.173,501,1.243,502,1.243,503,1.243,504,1.243,505,1.243,506,1.243,507,0.829,508,1.243,509,0.829,510,0.829,511,0.829,512,0.829,513,0.829,514,1.243,515,1.243,516,1.491,517,0.829,518,0.829,519,0.829,520,0.829,521,1.27,522,0.829,523,0.829,524,1.27,525,0.829,526,0.829,527,1.657,528,2.152,529,1.243,530,1.243,531,2.102,532,0.829,533,0.829,534,1.243,535,1.243,536,0.829,537,0.829,538,1.243,539,0.829,540,0.829,541,1.243,542,0.829,543,0.829,544,1.243,545,0.829,546,0.829,547,1.243,548,0.829,549,0.829,550,1.243,551,0.829,552,1.587,553,1.491,554,0.829,555,0.829,556,0.829,557,0.829,558,1.243,559,0.829,560,1.27,561,1.27,562,0.829,563,1.27,564,1.243,565,1.411,566,1.243,567,1.411,568,1.243,569,1.243,570,1.243,571,1.243,572,1.411,573,1.243,574,1.411,575,1.243,576,1.411,577,0.829,578,0.976,579,2.617,580,1.491,581,0.976,582,0.976,583,0.976,584,0.976,585,0.976,586,1.756,587,1.756,588,0.976,589,1.464,590,2.09,591,0.976,592,0.976,593,1.464,594,1.756,595,1.464,596,1.464,597,1.756,598,1.951,599,0.976,600,0.976,601,0.976,602,0.976,603,0.976,604,0.976,605,0.976,606,0.976,607,0.976,608,0.976,609,0.829,610,0.976,611,0.976,612,0.976,613,0.976,614,2.394,615,0.976,616,0.976,617,0.976,618,0.976,619,0.976,620,1.464,621,0.976,622,1.464,623,0.976,624,1.464,625,0.976,626,1.464,627,0.976,628,1.464,629,0.976,630,0.976,631,0.976,632,0.976,633,0.976,634,0.976,635,0.976,636,0.976,637,0.976,638,0.829,639,0.976,640,0.976,641,0.829,642,1.464,643,0.976,644,0.976,645,0.976,646,1.464,647,1.464,648,1.756,649,0.976,650,1.464,651,1.464,652,0.976,653,0.976,654,0.976,655,0.976,656,0.976,657,1.756,658,0.829,659,0.976,660,1.464,661,0.976,662,1.464,663,0.976,678,2.674,679,1.784,680,1.784,681,1.784,682,1.784,683,1.784,684,1.784,685,1.784]],["title/interfaces/UploadedFile.html",[0,0.096,638,1.169]],["body/interfaces/UploadedFile.html",[0,0.1,2,0.692,3,0.281,4,0.281,5,0.603,7,0.066,8,0.522,9,0.609,10,0.631,14,0.499,15,0.442,16,0.065,17,1.635,18,1.007,19,0.639,21,0.692,22,0.692,23,0.589,24,0.589,25,0.692,26,0.692,27,0.692,29,0.692,30,0.692,31,0.692,39,0.772,40,1.639,44,0.752,45,1.554,54,1.189,59,0.609,61,1.189,62,1.849,79,1.042,85,0.589,94,0.812,131,1.397,140,0.692,145,1.575,148,1.042,205,0.75,208,0.221,218,1.624,224,0.522,226,1.397,244,0.032,255,0.032,259,0.759,262,0.969,263,0.631,265,0.347,266,0.629,293,0.039,301,0.629,303,0.904,309,1.135,315,0.499,324,0.221,330,0.499,335,0.812,336,0.887,338,0.887,374,0.692,403,0.692,421,1.042,422,1.397,441,0.692,446,1.498,494,0.589,495,1.441,496,2.091,501,1.224,502,1.224,503,1.224,504,1.224,505,1.224,506,1.224,507,0.812,508,1.224,509,0.812,510,0.812,511,0.812,512,0.812,513,0.812,514,1.224,515,1.224,516,1.224,517,0.812,518,0.812,519,0.812,520,0.812,521,1.255,522,0.812,523,0.812,524,1.255,525,0.812,526,0.812,527,1.639,528,2.091,529,1.224,530,1.224,531,2.021,532,0.812,533,0.812,534,1.224,535,1.224,536,0.812,537,0.812,538,1.224,539,0.812,540,0.812,541,1.224,542,0.812,543,0.812,544,1.224,545,0.812,546,0.812,547,1.224,548,0.812,549,0.812,550,1.224,551,0.812,552,1.575,553,1.224,554,0.812,555,0.812,556,0.812,557,0.812,558,1.224,559,0.812,560,1.255,561,1.255,562,0.812,563,1.255,564,1.224,565,1.397,566,1.224,567,1.397,568,1.224,569,1.224,570,1.224,571,1.224,572,1.397,573,1.224,574,1.397,575,1.224,576,1.397,577,0.812,578,0.956,579,2.549,580,1.224,581,0.956,582,0.956,583,0.956,584,0.956,585,0.956,586,0.956,587,0.956,588,0.956,589,0.956,590,2.071,591,0.956,592,0.956,593,1.441,594,1.734,595,1.441,596,1.441,597,1.734,598,1.931,599,0.956,600,0.956,601,0.956,602,0.956,603,0.956,604,0.956,605,0.956,606,0.956,607,0.956,608,0.956,609,0.812,610,0.956,611,0.956,612,0.956,613,0.956,614,2.38,615,0.956,616,0.956,617,0.956,618,0.956,619,0.956,620,1.441,621,0.956,622,1.441,623,0.956,624,1.441,625,0.956,626,1.441,627,0.956,628,1.441,629,0.956,630,0.956,631,0.956,632,0.956,633,0.956,634,0.956,635,0.956,636,0.956,637,0.956,638,1.224,639,1.441,640,1.441,641,1.224,642,1.931,643,1.734,644,0.956,645,1.441,646,2.177,647,2.177,648,2.26,649,1.441,650,1.931,651,1.931,652,1.931,653,1.441,654,1.931,655,1.441,656,1.441,657,2.326,658,1.224,659,1.931,660,1.931,661,1.441,662,2.177,663,1.441,686,3.527,687,1.747,688,1.747]],["title/miscellaneous/enumerations.html",[689,0.835,690,2.386]],["body/miscellaneous/enumerations.html",[7,0.116,16,0.065,33,3.068,44,0.872,49,2.411,60,2.081,83,1.988,87,1.988,171,2.411,211,2.127,244,0.048,255,0.048,257,1.419,264,1.806,265,0.771,266,0.848,267,1.419,268,1.419,269,1.806,270,1.419,271,1.419,272,1.419,273,1.419,274,1.419,275,1.419,276,1.419,277,1.419,278,1.419,279,1.419,280,1.419,281,1.419,282,1.419,283,1.419,284,1.419,285,1.419,286,1.419,287,1.419,291,1.419,292,1.419,293,0.038,321,1.539,324,0.492,348,2.411,353,3.068,354,2.529,355,3.068,473,2.411,494,1.029,516,1.806,517,1.419,518,1.419,519,1.419,520,1.419,521,1.209,522,1.419,523,1.419,524,1.209,525,1.419,552,1.539,553,1.806,554,1.419,555,1.419,556,1.419,557,1.419,558,1.806,689,1.209,690,2.411,691,2.529,692,3.885,693,4.274,694,4.498,695,3.885,696,3.053,697,3.885,698,3.885,699,2.411,700,3.053,701,3.053,702,3.053,703,3.053,704,3.053,705,3.053,706,3.053,707,3.053,708,3.053,709,3.053,710,3.053,711,3.053,712,3.053,713,2.411,714,3.053,715,3.053,716,3.053,717,3.053,718,2.411,719,3.053,720,3.053,721,3.053,722,3.053,723,2.411,724,3.053,725,2.411,726,3.053,727,3.053,728,3.053,729,3.053,730,3.053]],["title/index.html",[7,0.096,731,1.987]],["body/index.html",[2,1.6,16,0.057,244,0.057,255,0.057,334,1.362,723,3.191,725,3.191,731,3.191]],["title/modules.html",[732,2.701]],["body/modules.html",[16,0.057,244,0.057,255,0.057,732,3.21]],["title/miscellaneous/typealiases.html",[689,0.835,733,3.022]],["body/miscellaneous/typealiases.html",[7,0.148,15,0.369,16,0.063,27,1.782,244,0.055,255,0.055,301,0.772,494,1.311,560,1.54,561,1.54,563,1.54,565,1.54,567,1.54,572,1.54,574,1.54,576,1.54,689,1.54,691,2.532,734,3.889,735,4.501,736,3.889,737,4.501,738,3.889]],["title/miscellaneous/variables.html",[689,0.835,739,2.386]],["body/miscellaneous/variables.html",[5,0.261,6,1.624,7,0.078,9,0.478,12,1.271,13,1.933,14,0.995,15,0.452,16,0.065,18,1.242,19,0.534,21,1.176,22,1.176,23,1.001,24,1.001,25,1.176,26,1.176,29,1.176,30,1.38,31,1.176,44,1.156,45,1.287,54,1.175,59,0.679,60,1.972,61,0.693,78,2.752,80,3.582,81,2.752,82,1.624,83,1.339,85,0.693,87,2.485,97,1.339,104,2.345,112,2.752,113,2.269,114,2.752,116,1.624,118,1.624,119,1.933,121,1.933,124,1.339,133,1.624,134,1.624,135,2.269,136,1.624,137,1.933,138,1.624,139,2.345,140,1.512,141,2.752,142,2.345,143,1.624,144,1.624,145,1.176,146,1.624,147,1.624,148,0.815,149,1.339,150,2.485,151,3.014,152,2.752,153,1.624,154,1.624,155,1.624,156,2.345,157,1.624,158,1.624,159,1.624,166,1.933,173,1.624,186,1.624,191,2.345,205,0.759,206,1.624,207,1.624,208,0.376,211,1.908,213,1.624,218,1.654,244,0.037,255,0.037,262,0.914,265,0.803,266,0.408,290,0.956,301,0.408,324,0.441,354,1.933,374,1.176,392,1.624,403,0.815,411,2.345,414,1.624,421,1.966,422,1.38,441,0.815,446,1.38,494,0.693,496,2.109,501,1.381,502,1.381,503,1.381,504,1.381,505,1.381,506,1.62,507,0.956,508,1.381,509,0.956,510,1.381,511,0.956,512,0.956,513,0.956,514,1.62,515,1.62,521,0.815,524,0.815,526,0.956,527,1.774,528,2.141,529,1.381,530,1.381,531,2.109,532,0.956,533,0.956,534,1.381,535,1.381,536,0.956,537,0.956,538,1.381,539,0.956,540,0.956,541,1.381,542,0.956,543,0.956,544,1.381,545,0.956,546,0.956,547,1.381,548,0.956,549,0.956,550,1.381,551,0.956,552,1.38,559,0.956,560,0.815,561,0.815,562,1.381,563,0.815,564,0.956,565,1.176,566,0.956,567,1.176,568,0.956,569,0.956,570,0.956,571,0.956,572,1.176,573,0.956,574,1.176,575,0.956,576,1.176,577,0.956,609,1.62,641,1.381,658,0.956,689,0.815,691,2.998,699,1.624,713,1.624,718,1.624,739,1.624,740,2.97,741,4.048,742,2.97,743,3.486,744,2.97,745,2.97,746,2.97,747,2.97,748,2.97,749,2.97,750,2.97,751,2.057,752,2.057,753,2.057,754,2.057,755,2.057,756,2.057,757,2.057,758,2.057,759,2.057,760,2.057,761,2.057,762,2.057,763,2.057,764,2.057,765,2.057,766,2.97,767,2.97,768,2.057,769,2.057,770,2.057,771,2.057,772,2.057,773,2.057,774,2.057,775,2.057,776,2.057,777,2.057,778,2.057,779,2.057,780,2.057,781,2.057,782,2.057,783,2.057,784,2.057,785,2.057,786,3.486,787,2.057,788,2.057,789,3.486,790,2.057,791,2.057,792,2.057,793,2.057,794,2.057,795,2.057,796,2.057,797,2.057,798,2.057,799,2.057,800,2.057,801,2.057,802,2.057,803,2.057,804,2.057,805,2.057,806,2.057,807,2.057,808,2.057,809,2.057,810,2.057,811,2.057,812,2.057,813,2.057,814,2.057,815,2.057,816,2.057,817,2.057]]],"invertedIndex":[["",{"_index":16,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":85,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["0000029",{"_index":536,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":44,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["1).foreach((subarr",{"_index":467,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["1).map((rowdata",{"_index":246,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["1).map((subarr",{"_index":400,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["10",{"_index":90,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["17",{"_index":793,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1]?.trim",{"_index":203,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["2",{"_index":83,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["26",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2]?.trim",{"_index":199,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["3",{"_index":87,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["3).trim",{"_index":600,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["30",{"_index":788,"title":{},"body":{"miscellaneous/variables.html":{}}}],["4",{"_index":473,"title":{},"body":{"classes/OmapDataTransformer.html":{},"miscellaneous/enumerations.html":{}}}],["4).tostring",{"_index":478,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["5",{"_index":723,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["50",{"_index":787,"title":{},"body":{"miscellaneous/variables.html":{}}}],["5000",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["6",{"_index":725,"title":{},"body":{"miscellaneous/enumerations.html":{},"index.html":{}}}],["65",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["7",{"_index":49,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/enumerations.html":{}}}],["8",{"_index":728,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["9",{"_index":730,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["95",{"_index":785,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":143,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["_/gi",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_columnnumber",{"_index":58,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["_transformeddata",{"_index":380,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["_warnings",{"_index":379,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["acc",{"_index":472,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["acc[key",{"_index":470,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["accessors",{"_index":364,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["acknowledgements",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["actual",{"_index":393,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["add",{"_index":392,"title":{},"body":{"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["adding",{"_index":420,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["additionalinfo",{"_index":349,"title":{},"body":{"interfaces/LookupResponse.html":{}}}],["aliases",{"_index":734,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alphabetlength",{"_index":740,"title":{},"body":{"miscellaneous/variables.html":{}}}],["alternateorgan",{"_index":425,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["alternateorganuberon",{"_index":426,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["anatomical",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["anatomical_structures",{"_index":560,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["annotation",{"_index":711,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["api.functions",{"_index":376,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["api.model",{"_index":260,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["app",{"_index":742,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app.listen(port",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["array",{"_index":79,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["arrayindex",{"_index":88,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["arrayname",{"_index":64,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["arraynamemap",{"_index":26,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["arraynamemap[column[0",{"_index":65,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["arraynamemap[value[0].touppercase",{"_index":178,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["arraynametype",{"_index":27,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{}}}],["as/1",{"_index":403,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2,as/2/label,as/2/id,as/3,as/3/label,as/3/id,ct/1,ct/1/label,ct/1/id,bg/1,bg/1/label,bg/1/id",{"_index":806,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2,as/2/label,as/2/id,as/3,as/3/label,as/3/id,ct/1,ct/1/label,ct/1/id,bg/1,bg/1/label,bg/1/id,bp/1,bp/1/label,bp/1/id,bp/2,bp/2/label,bp/2/id,ftu,ref/1,ref/1/doi,ref/1/notes,ref/2,ref/2/doi,ref/2/notes",{"_index":805,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2,as/2/label,as/2/id,as/3,as/3/label,as/3/id,ct/2,ct/2/label,ct/2/id,bg/2,bg/2/label,bg/2/id",{"_index":807,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2,as/2/label,as/2/id,as/3.1,as/3.1/label,as/3.1/id,ct/3,ct/3/label,ct/3/id,bg/3,bg/3/label,bg/3/id",{"_index":808,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2.1,as/2.1/label,as/2/id,as/3.2,as/3.2/label,as/3.2/id,ct/2,ct/2/label,ct/2/id,bg/4,bg/4/label,bg/4/id",{"_index":810,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2.1,as/2.1/label,as/2/id,as/3.2,as/3.2/label,as/3.2/id,ct/3,ct/3/label,ct/3/id,bg/5,bg/5/label,bg/5/id",{"_index":811,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1,as/1/label,as/1/id,as/2.1,as/2/.1label,as/2/id,as/3.1,as/3.1/label,as/3.1/id,ct/4,ct/4/label,ct/4/id,bg/3,bg/3/label,bg/3/id",{"_index":809,"title":{},"body":{"miscellaneous/variables.html":{}}}],["as/1/id",{"_index":405,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["as/1/label",{"_index":404,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["as_as",{"_index":270,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["as_ct",{"_index":272,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["as_g",{"_index":286,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["as_p",{"_index":291,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["asas",{"_index":271,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["asct",{"_index":273,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["asct_header_first_column",{"_index":21,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["asctbconverted",{"_index":391,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["asctbconverted.push(...this.data.slice(0",{"_index":394,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["asctbdata",{"_index":1,"title":{"interfaces/ASCTBData.html":{}},"body":{"interfaces/ASCTBData.html":{}}}],["asctbdata.warnings",{"_index":230,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["asctbheader",{"_index":216,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["asgene",{"_index":287,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["asprotein",{"_index":292,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["author",{"_index":506,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["author_names",{"_index":501,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["author_orcids",{"_index":502,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["authors",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["avoid",{"_index":635,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["b",{"_index":789,"title":{},"body":{"miscellaneous/variables.html":{}}}],["b_type",{"_index":586,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bad",{"_index":816,"title":{},"body":{"miscellaneous/variables.html":{}}}],["badcolumn",{"_index":727,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["bf",{"_index":524,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bg",{"_index":564,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["bgene",{"_index":568,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["biomarkers",{"_index":609,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["biomarkers_gene",{"_index":565,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["biomarkers_lipids",{"_index":572,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["biomarkers_meta",{"_index":574,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["biomarkers_prot",{"_index":576,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["biomarkers_protein",{"_index":567,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["bl",{"_index":521,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["blank",{"_index":95,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["blank),\"references",{"_index":803,"title":{},"body":{"miscellaneous/variables.html":{}}}],["blipid",{"_index":571,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["bm",{"_index":266,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["bm_type",{"_index":516,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["bm_type.bf",{"_index":607,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bm_type.bl",{"_index":605,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bm_type.bm",{"_index":606,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bm_type.g",{"_index":591,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bm_type.p",{"_index":604,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bmetabolites",{"_index":573,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["bmtype",{"_index":314,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["body",{"_index":529,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["boolean",{"_index":17,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["bp",{"_index":566,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["bprotein",{"_index":569,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["bproteoform",{"_index":575,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["btype",{"_index":302,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["buffer",{"_index":648,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["build",{"_index":120,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["buildmetadata",{"_index":119,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["buildmetadata(metadatarows",{"_index":254,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["bytes",{"_index":661,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["callback",{"_index":643,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["case",{"_index":145,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["casting",{"_index":636,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["ccf:ccf_part_of",{"_index":702,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ccf:characterizes",{"_index":708,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ccf:ct_is_a",{"_index":706,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ccf:located_in",{"_index":704,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ccf:occurs_in",{"_index":710,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ccfproperty",{"_index":692,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["cell",{"_index":116,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["cell_types",{"_index":561,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cells",{"_index":96,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["character",{"_index":814,"title":{},"body":{"miscellaneous/variables.html":{}}}],["characterizes",{"_index":707,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["characters",{"_index":115,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["check",{"_index":189,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["checkmissingids",{"_index":188,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["checkmissingids(columns[index",{"_index":251,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["checksum",{"_index":663,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["cl",{"_index":211,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/LookupResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":293,"title":{"classes/GNode.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{}},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["classes",{"_index":334,"title":{},"body":{"classes/GNode.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"index.html":{}}}],["code",{"_index":81,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["codepointuppercasea",{"_index":744,"title":{},"body":{"miscellaneous/variables.html":{}}}],["col",{"_index":238,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["col0warnings",{"_index":176,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["col1warnings",{"_index":179,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["col2warnings",{"_index":182,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["colname",{"_index":110,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["column",{"_index":97,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["column.join",{"_index":98,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["column.length",{"_index":63,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["column[0",{"_index":67,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["column[2]?.tolowercase",{"_index":93,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["column[column.length",{"_index":193,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["columnblank",{"_index":174,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["columnindex",{"_index":163,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["columnindextoname(columnindex",{"_index":111,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["columnindextoname(index",{"_index":204,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["columns",{"_index":103,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["comparator",{"_index":296,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["comparatorid",{"_index":298,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["comparatorname",{"_index":297,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["conformant",{"_index":107,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["console.log(`listening",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["const",{"_index":45,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["const.ts",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["constants",{"_index":412,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["constructor",{"_index":299,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{}}}],["constructor(data",{"_index":366,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["constructor(id",{"_index":335,"title":{},"body":{"classes/GNode.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["constructor(name",{"_index":315,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["constructor(public",{"_index":610,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["constructor(rownumber",{"_index":665,"title":{},"body":{"classes/Row.html":{}}}],["copied",{"_index":631,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["covers",{"_index":784,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createmapofoldcolumnsandvalues",{"_index":463,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["createnewheaderrow",{"_index":397,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["createnotes(dataobject",{"_index":481,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["createobject",{"_index":28,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["createobject(name",{"_index":578,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["csv",{"_index":813,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ct",{"_index":265,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["ct/1",{"_index":817,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ct/1/id",{"_index":209,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["ct_bf",{"_index":284,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ct_bl",{"_index":280,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ct_bm",{"_index":282,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ct_ct",{"_index":274,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ct_g",{"_index":276,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ct_is_a",{"_index":705,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["ct_p",{"_index":278,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctct",{"_index":275,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctgene",{"_index":277,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctlipids",{"_index":281,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctmetabolites",{"_index":283,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctprotein",{"_index":279,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["ctproteoforms",{"_index":285,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["data",{"_index":9,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["data.hgnc_id",{"_index":454,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.hgnc_id.split",{"_index":433,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.notes",{"_index":450,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.organ",{"_index":451,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.organ_uberon",{"_index":452,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.rowno",{"_index":445,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.slice(0",{"_index":253,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["data.slice(headerrow",{"_index":245,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["data.target_name",{"_index":455,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.target_name.split",{"_index":435,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.uniprot_accession_number",{"_index":453,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data.uniprot_accession_number.split",{"_index":431,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["data[headerrow].map((col",{"_index":237,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["data_doi",{"_index":513,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["dataobject",{"_index":464,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["dataobject.foreach((data",{"_index":429,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["dataobject.foreach((obj",{"_index":484,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["dataobject.push(keyvaluepairs",{"_index":479,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["date",{"_index":514,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["deal",{"_index":102,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["decides",{"_index":407,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["deep",{"_index":795,"title":{},"body":{"miscellaneous/variables.html":{}}}],["default",{"_index":421,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":336,"title":{},"body":{"classes/GNode.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["delimeter",{"_index":22,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":350,"title":{},"body":{"interfaces/LookupResponse.html":{}}}],["disable",{"_index":69,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["doe",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["doi",{"_index":422,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["during",{"_index":128,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["edge_type",{"_index":269,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["edges",{"_index":333,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["elsewhere",{"_index":640,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["empty",{"_index":148,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["encoding",{"_index":646,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["entires",{"_index":440,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["entries",{"_index":485,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["enum",{"_index":263,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["enumerations",{"_index":690,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["equal",{"_index":444,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["err",{"_index":644,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["error(`header",{"_index":234,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["eslint",{"_index":68,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["eslint/no",{"_index":73,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["estimated",{"_index":782,"title":{},"body":{"miscellaneous/variables.html":{}}}],["excludedkeys",{"_index":482,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["excludedkeys.includes(key",{"_index":490,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["explicit",{"_index":74,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["export",{"_index":39,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["express",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extra",{"_index":447,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["extracted",{"_index":126,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["extralinks",{"_index":351,"title":{},"body":{"interfaces/LookupResponse.html":{}}}],["failure",{"_index":637,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["false",{"_index":231,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["fieldname",{"_index":91,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["fileupload",{"_index":634,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["filled",{"_index":147,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["filter(([key",{"_index":488,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["finalize",{"_index":611,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["findheaderindex",{"_index":375,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["findheaderindex(0",{"_index":236,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["findheaderindex(headerrow",{"_index":160,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["first",{"_index":235,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["firstcolumnname",{"_index":161,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["fixme",{"_index":100,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["fixontologyid",{"_index":35,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["fma",{"_index":321,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["formattedentries",{"_index":487,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["formattedentries.join('\\n",{"_index":492,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["found",{"_index":80,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["ftu",{"_index":562,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["ftu_types",{"_index":563,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["function",{"_index":40,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["g",{"_index":517,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["gedge",{"_index":256,"title":{"interfaces/GEdge.html":{}},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["gene",{"_index":518,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["general",{"_index":511,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["general_publications",{"_index":505,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["generated",{"_index":127,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["getheaderrow",{"_index":214,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["getters",{"_index":371,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["gettransformeddata",{"_index":369,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["getwarnings",{"_index":372,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["gid",{"_index":52,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["gnode",{"_index":294,"title":{"classes/GNode.html":{}},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["graphdata",{"_index":331,"title":{"interfaces/GraphData.html":{}},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["hasint",{"_index":596,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["hasneg",{"_index":595,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["haspos",{"_index":593,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["header",{"_index":166,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["header[0",{"_index":222,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["headerdata.foreach((value",{"_index":164,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["headerrow",{"_index":162,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["hgnc",{"_index":354,"title":{},"body":{"interfaces/LookupResponse.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["hgnc_id",{"_index":442,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["hgncids",{"_index":432,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["hgncids.length",{"_index":437,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["http/gi",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:${port",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://docs.google.com/spreadsheets/d/${sheetid}/export?format=csv&gid=${gid",{"_index":55,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["https://doi.org/10.48539/hbm467.lrkz.884",{"_index":526,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm495.qbsv.777",{"_index":543,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm568.rmzb.377",{"_index":540,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm577.sbhh.454",{"_index":532,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm674.djkv.876",{"_index":533,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm794.csbj.358",{"_index":537,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm868.xltm.922",{"_index":546,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["https://doi.org/10.48539/hbm972.whpw.455",{"_index":549,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["i.e",{"_index":168,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["id",{"_index":205,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["id)\",,,,,,,,,typology",{"_index":797,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ids",{"_index":191,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["ids)\",,,\"protein",{"_index":800,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ids)\",,,,,,ftu",{"_index":802,"title":{},"body":{"miscellaneous/variables.html":{}}}],["idvalue",{"_index":200,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["idvalue.startswith('cl",{"_index":210,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["import",{"_index":20,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["indexing",{"_index":475,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["information",{"_index":448,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["initializing",{"_index":390,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"interfaces/UploadedFile.html":{}},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"interfaces/UploadedFile.html":{},"index.html":{}}}],["intermediate",{"_index":558,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["intestine",{"_index":538,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["invalid",{"_index":114,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["invalidcharacter",{"_index":722,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invalidcharacterregex",{"_index":745,"title":{},"body":{"miscellaneous/variables.html":{}}}],["invalidcharacterregex.test(value",{"_index":109,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["invalidcsvfile",{"_index":719,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["invalidheader",{"_index":171,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/enumerations.html":{}}}],["isid",{"_index":194,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["islegacyomap",{"_index":381,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["islinkregex",{"_index":746,"title":{},"body":{"miscellaneous/variables.html":{}}}],["islinkregex.test(value",{"_index":108,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["isomap",{"_index":11,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["isvalid",{"_index":496,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["item",{"_index":219,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["item.trim",{"_index":158,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["item[0",{"_index":220,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["jane",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["joe",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["jsonld.functions.ts",{"_index":694,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["key",{"_index":121,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["key/value",{"_index":146,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["keyvaluepairs",{"_index":468,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["keyvaluepairs.rowno",{"_index":477,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["kidney",{"_index":541,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["known",{"_index":786,"title":{},"body":{"miscellaneous/variables.html":{}}}],["label",{"_index":208,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["labelvalue",{"_index":202,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["lastelement",{"_index":192,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["lastelement.tolowercase",{"_index":195,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["legacy",{"_index":367,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["legacy_omap_header_first_column",{"_index":23,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["legacyomapheader",{"_index":217,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["length",{"_index":167,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["level",{"_index":798,"title":{},"body":{"miscellaneous/variables.html":{}}}],["levels",{"_index":794,"title":{},"body":{"miscellaneous/variables.html":{}}}],["limit",{"_index":658,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":71,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["link",{"_index":352,"title":{},"body":{"interfaces/LookupResponse.html":{}}}],["links",{"_index":804,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lipids",{"_index":522,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["listed",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["liver",{"_index":544,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["lmha",{"_index":355,"title":{},"body":{"interfaces/LookupResponse.html":{},"miscellaneous/enumerations.html":{}}}],["located_in",{"_index":703,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["lookup.functions",{"_index":36,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["lookupresponse",{"_index":347,"title":{"interfaces/LookupResponse.html":{}},"body":{"interfaces/LookupResponse.html":{}}}],["lung",{"_index":550,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["lymph",{"_index":534,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["major",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["makeasctbdata(data",{"_index":221,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["makeasctbdatawork(data",{"_index":232,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["makeasctbdatawork(omaptransformer.transformeddata",{"_index":229,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["many",{"_index":104,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["map(([key",{"_index":491,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["map((s",{"_index":241,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["mapping",{"_index":149,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":255,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.max(uniprots.length",{"_index":461,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["maxbps",{"_index":460,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["maxproteins",{"_index":398,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["md5",{"_index":662,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["metabolites",{"_index":523,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["metadata",{"_index":12,"title":{"classes/Metadata.html":{}},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["metadata(name",{"_index":311,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["metadata[metadatakey",{"_index":156,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadataarrayfields",{"_index":29,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["metadataarrayfields.includes(metadatakey",{"_index":155,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadataidentifier",{"_index":141,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadataidentifier.tolowercase",{"_index":154,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatakey",{"_index":152,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatanamemap",{"_index":30,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["metadatanamemap[metadataidentifier",{"_index":153,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatarows",{"_index":124,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["metadatarows.reduce((metadata",{"_index":138,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatarows.splice(title_row_index",{"_index":134,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatavalue",{"_index":142,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatavalue.split(delimeter).map((item",{"_index":157,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["metadatavalue.trim",{"_index":159,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["methods",{"_index":495,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["mimetype",{"_index":647,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["miscellaneous",{"_index":689,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":150,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["missingctoranatomy",{"_index":724,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["missingheader",{"_index":721,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["mm/dd/yyyy",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["mm/dd/yyyy,,,last",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["models/api.model",{"_index":32,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["modified",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["modules",{"_index":732,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["move",{"_index":639,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["mv",{"_index":686,"title":{},"body":{"interfaces/UploadedFile.html":{}}}],["mv(path",{"_index":642,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["n",{"_index":449,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["name",{"_index":262,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["name(s",{"_index":507,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["name.endswith",{"_index":594,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["name.replace('protein",{"_index":592,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["name.slice(0",{"_index":597,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["namevalue",{"_index":197,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["ncb),,,\"gene",{"_index":799,"title":{},"body":{"miscellaneous/variables.html":{}}}],["need",{"_index":801,"title":{},"body":{"miscellaneous/variables.html":{}}}],["needed",{"_index":791,"title":{},"body":{"miscellaneous/variables.html":{}}}],["neg",{"_index":556,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["negative",{"_index":557,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["new",{"_index":224,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["newheaderrow",{"_index":402,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["newrow",{"_index":456,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["next",{"_index":70,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["node",{"_index":535,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["node_type",{"_index":264,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["nodes",{"_index":332,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["noidinct1",{"_index":729,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["non",{"_index":106,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["normalizecsvurl(url",{"_index":41,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["note",{"_index":577,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["notes",{"_index":446,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["null",{"_index":489,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["number",{"_index":59,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["number.isnan(parseint(value[1",{"_index":181,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["obj.notes",{"_index":493,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["object",{"_index":713,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["object.entries(obj",{"_index":486,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["objectarray",{"_index":75,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["objectarray.length",{"_index":84,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["objectarray.push(createobject(value",{"_index":86,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["objectfieldmap",{"_index":31,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["objectfieldmap.id",{"_index":196,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["objectfieldmap[column[2",{"_index":92,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["objectfieldmap[value[2",{"_index":184,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["occurs_in",{"_index":709,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["omap.functions",{"_index":38,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["omap_header_first_column",{"_index":24,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["omap_id",{"_index":559,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["omap_organ",{"_index":374,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["omap_organ.default",{"_index":418,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["omap_organ[this.metadata.data_doi",{"_index":417,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["omapdatatransformer",{"_index":37,"title":{"classes/OmapDataTransformer.html":{}},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["omapdatatransformer(data",{"_index":225,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["omapheader",{"_index":215,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["omaptransformer",{"_index":223,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["omaptransformer.warnings",{"_index":228,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["omapwarnings",{"_index":227,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["ontologycode",{"_index":353,"title":{},"body":{"interfaces/LookupResponse.html":{},"miscellaneous/enumerations.html":{}}}],["ontologyid",{"_index":300,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.includes",{"_index":319,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.split",{"_index":327,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.split(':')[1",{"_index":320,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.substring('uberon'.length",{"_index":323,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.substring(3",{"_index":318,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.tolowercase().startswith('fma",{"_index":317,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologyid.tolowercase().startswith('uberon",{"_index":322,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologytype",{"_index":313,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["ontologytypeid",{"_index":312,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["option",{"_index":651,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["optional",{"_index":10,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/GNode.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["orcid",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orcid(s",{"_index":508,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["organ",{"_index":414,"title":{},"body":{"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["organ.id",{"_index":459,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organ.name",{"_index":457,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organ.rdfs_label",{"_index":458,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organ_uberon'].every((column",{"_index":415,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organcolumnspresent",{"_index":413,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organlabelmissingwarningadded",{"_index":427,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organs",{"_index":410,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["organuberonmissingwarningadded",{"_index":428,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["originalarrayname",{"_index":66,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["out",{"_index":632,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["over",{"_index":656,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["overview",{"_index":731,"title":{"index.html":{}},"body":{"index.html":{}}}],["owl:annotationproperty",{"_index":712,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["owl:class",{"_index":715,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["owl:objectproperty",{"_index":714,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["owl:restriction",{"_index":717,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["owlproperty",{"_index":697,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["owltype",{"_index":698,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["p",{"_index":519,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["pairs",{"_index":132,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["pancreas",{"_index":547,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":123,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["parameters",{"_index":338,"title":{},"body":{"classes/GNode.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["parent",{"_index":295,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["parseint(column[1",{"_index":89,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["part_of",{"_index":701,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["partonomy",{"_index":792,"title":{},"body":{"miscellaneous/variables.html":{}}}],["path",{"_index":652,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["playground_csv",{"_index":747,"title":{},"body":{"miscellaneous/variables.html":{}}}],["port",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pos",{"_index":554,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["positive",{"_index":555,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["present",{"_index":423,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["private",{"_index":377,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["process",{"_index":129,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["process.env.port",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":645,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["properties",{"_index":8,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["protein",{"_index":520,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["protein_presence",{"_index":553,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["protein_presence.intermediate",{"_index":601,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["protein_presence.neg",{"_index":602,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["protein_presence.pos",{"_index":599,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["protein_presence.unknown",{"_index":603,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["proteinpresence",{"_index":587,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["proteoforms",{"_index":525,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{}}}],["provide",{"_index":796,"title":{},"body":{"miscellaneous/variables.html":{}}}],["public",{"_index":664,"title":{},"body":{"classes/Row.html":{}}}],["publication(s",{"_index":512,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["publications",{"_index":779,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pushed",{"_index":130,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["r",{"_index":267,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["raise",{"_index":144,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["rdfs",{"_index":207,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["rdfs_label",{"_index":528,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["readonly",{"_index":378,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["record",{"_index":18,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/LookupResponse.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":570,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["reference",{"_index":259,"title":{"classes/Reference.html":{}},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["reference(name",{"_index":582,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["references",{"_index":301,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["report.function.ts",{"_index":737,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["representation",{"_index":649,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["represents",{"_index":655,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["required",{"_index":212,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["restriction",{"_index":716,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["result",{"_index":137,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":244,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":54,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":131,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["reviewer",{"_index":510,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["reviewer(s",{"_index":509,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["reviewer_names",{"_index":503,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["reviewer_orcids",{"_index":504,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["revise",{"_index":790,"title":{},"body":{"miscellaneous/variables.html":{}}}],["root",{"_index":268,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["roughly",{"_index":783,"title":{},"body":{"miscellaneous/variables.html":{}}}],["row",{"_index":14,"title":{"classes/Row.html":{}},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["row(headerrow",{"_index":247,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["row.finalize",{"_index":252,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["row.rownumber",{"_index":99,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["row[arrayname",{"_index":76,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["rowdata",{"_index":139,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["rowdata.foreach((value",{"_index":248,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["rowdata[index",{"_index":198,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["rowindex",{"_index":117,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["rowno",{"_index":483,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["rownumber",{"_index":140,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["rows",{"_index":125,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{}}}],["s.isvalid",{"_index":614,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["s.trim",{"_index":242,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["server",{"_index":641,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["set",{"_index":61,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["setbiomarkerproperties",{"_index":531,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["setbiomarkerproperties(structuretype",{"_index":589,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["setdata(column",{"_index":57,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["setdata(columns[index",{"_index":250,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["sheetid",{"_index":50,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["shows",{"_index":289,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["showwarnings",{"_index":185,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["size",{"_index":657,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["skin",{"_index":527,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["split",{"_index":240,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["splitting",{"_index":169,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["spliturl",{"_index":46,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["spliturl.length",{"_index":48,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["spliturl[5",{"_index":51,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["spliturl[6].split('=')[1",{"_index":53,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["src/.../api.functions.ts",{"_index":741,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../api.model.ts",{"_index":691,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../graph",{"_index":693,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../graph.model.ts",{"_index":695,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../lookup.model.ts",{"_index":696,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../main.ts",{"_index":743,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../validation",{"_index":736,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../warnings.ts",{"_index":699,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["src/functions/api.functions.ts",{"_index":6,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["src/functions/graph",{"_index":700,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/functions/omap.functions.ts",{"_index":363,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["src/functions/omap.functions.ts:11",{"_index":368,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["src/functions/omap.functions.ts:148",{"_index":370,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["src/functions/omap.functions.ts:152",{"_index":373,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["src/functions/validation",{"_index":738,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/main.ts",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/models/api.model.ts",{"_index":494,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/models/api.model.ts:154",{"_index":499,"title":{},"body":{"classes/Reference.html":{}}}],["src/models/api.model.ts:155",{"_index":498,"title":{},"body":{"classes/Reference.html":{}}}],["src/models/api.model.ts:156",{"_index":497,"title":{},"body":{"classes/Reference.html":{}}}],["src/models/api.model.ts:162",{"_index":500,"title":{},"body":{"classes/Reference.html":{}}}],["src/models/api.model.ts:168",{"_index":681,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:169",{"_index":680,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:170",{"_index":683,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:171",{"_index":679,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:172",{"_index":682,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:173",{"_index":678,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:180",{"_index":685,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:215",{"_index":684,"title":{},"body":{"classes/Structure.html":{}}}],["src/models/api.model.ts:221",{"_index":667,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:222",{"_index":674,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:223",{"_index":668,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:224",{"_index":673,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:225",{"_index":669,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:226",{"_index":670,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:227",{"_index":671,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:228",{"_index":672,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:229",{"_index":675,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:230",{"_index":666,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:232",{"_index":676,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:234",{"_index":677,"title":{},"body":{"classes/Row.html":{}}}],["src/models/api.model.ts:261",{"_index":687,"title":{},"body":{"interfaces/UploadedFile.html":{}}}],["src/models/api.model.ts:262",{"_index":688,"title":{},"body":{"interfaces/UploadedFile.html":{}}}],["src/models/graph.model.ts",{"_index":257,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/enumerations.html":{}}}],["src/models/graph.model.ts:25",{"_index":343,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:26",{"_index":345,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:27",{"_index":346,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:28",{"_index":344,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:29",{"_index":340,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:30",{"_index":342,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:31",{"_index":341,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:32",{"_index":337,"title":{},"body":{"classes/GNode.html":{}}}],["src/models/graph.model.ts:56",{"_index":362,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:57",{"_index":361,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:58",{"_index":358,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:59",{"_index":359,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:60",{"_index":360,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:61",{"_index":357,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/graph.model.ts:62",{"_index":356,"title":{},"body":{"classes/Metadata.html":{}}}],["src/models/lookup.model.ts",{"_index":348,"title":{},"body":{"interfaces/LookupResponse.html":{},"miscellaneous/enumerations.html":{}}}],["src/utils/warnings.ts",{"_index":718,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["store",{"_index":122,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["string",{"_index":19,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["structure",{"_index":580,"title":{"classes/Structure.html":{}},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["structure(name",{"_index":583,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["structuretype",{"_index":579,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["strucures",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["subarr",{"_index":476,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["subarr[0].split(',').length",{"_index":401,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["subarr[i",{"_index":471,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["supported",{"_index":288,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["switch",{"_index":581,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["table",{"_index":411,"title":{},"body":{"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["tables",{"_index":105,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["take",{"_index":409,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["target",{"_index":258,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["target_name",{"_index":443,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["targetnames",{"_index":434,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["targetnames.length",{"_index":438,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["tempfilepath",{"_index":654,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["temporarily",{"_index":101,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["temporary",{"_index":653,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this._transformeddata",{"_index":387,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this._warnings",{"_index":386,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this._warnings.add('warning",{"_index":419,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.anatomical_structures",{"_index":612,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.anatomical_structures.filter((s",{"_index":613,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.b_type",{"_index":590,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers",{"_index":630,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_gene",{"_index":620,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_gene.filter((s",{"_index":621,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_lipids",{"_index":624,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_lipids.filter((s",{"_index":625,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_meta",{"_index":626,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_meta.filter((s",{"_index":627,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_prot",{"_index":628,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_prot.filter((s",{"_index":629,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_protein",{"_index":622,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.biomarkers_protein.filter((s",{"_index":623,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.bmtype",{"_index":329,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.cell_types",{"_index":615,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.cell_types.filter((s",{"_index":616,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.columns",{"_index":465,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.columns.includes(column",{"_index":416,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.columns.reduce((acc",{"_index":469,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.comparator",{"_index":306,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.comparatorid",{"_index":307,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.comparatorname",{"_index":308,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.createdata",{"_index":396,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.createmapofoldcolumnsandvalues",{"_index":406,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.createnewheaderrow",{"_index":395,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.createnotes(dataobject",{"_index":480,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.data",{"_index":383,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.data.slice(0",{"_index":462,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.data.slice(this.headerrow",{"_index":399,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.data[this.headerrow].map((col",{"_index":466,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.doi",{"_index":584,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.ftu_types",{"_index":617,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.ftu_types.filter((s",{"_index":618,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.getmetadata",{"_index":385,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.headerrow",{"_index":384,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.id",{"_index":303,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.islegacyomap",{"_index":382,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.label",{"_index":328,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.metadata",{"_index":310,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{}}}],["this.metadata.title",{"_index":424,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.name",{"_index":309,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.notes",{"_index":585,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.ontologyid",{"_index":316,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.ontologytype",{"_index":325,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.ontologytypeid",{"_index":326,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.parent",{"_index":304,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.proteinpresence",{"_index":598,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.rdfs_label",{"_index":608,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.references",{"_index":330,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.references.filter((s",{"_index":619,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.setbiomarkerproperties(structuretype",{"_index":588,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["this.transformomapdata",{"_index":388,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["this.type",{"_index":305,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["this.warnings.add",{"_index":439,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["throw",{"_index":233,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["title",{"_index":135,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["title_row_index",{"_index":25,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["titlerow",{"_index":133,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["titlerow.slice(0",{"_index":136,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["touppercase",{"_index":239,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["transformeddata",{"_index":365,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["transformomapdata",{"_index":389,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["trim",{"_index":94,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["true",{"_index":226,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["truncated",{"_index":659,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["tslint:disable:variable",{"_index":261,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{}}}],["two",{"_index":474,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["type",{"_index":15,"title":{},"body":{"interfaces/ASCTBData.html":{},"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":733,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["types/express",{"_index":633,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["typescript",{"_index":72,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["uberon",{"_index":324,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"interfaces/LookupResponse.html":{},"classes/Metadata.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["uberon/cl",{"_index":190,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["uberon:0000160",{"_index":539,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uberon:0001264",{"_index":548,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uberon:0002048",{"_index":551,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uberon:0002097",{"_index":530,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uberon:0002107",{"_index":545,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uberon:0002113",{"_index":542,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["undefined",{"_index":218,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uniprot_accession_number",{"_index":441,"title":{},"body":{"classes/OmapDataTransformer.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["uniprots",{"_index":430,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["uniprots.length",{"_index":436,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["unknown",{"_index":552,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["unmapped",{"_index":78,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["unmappeddata",{"_index":726,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["unmappedmetadata",{"_index":720,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["up",{"_index":290,"title":{},"body":{"interfaces/GEdge.html":{},"classes/GNode.html":{},"interfaces/GraphData.html":{},"classes/Metadata.html":{},"miscellaneous/variables.html":{}}}],["uploaded",{"_index":660,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["uploadedfile",{"_index":638,"title":{"interfaces/UploadedFile.html":{}},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["url",{"_index":56,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["url.indexof('export?format=csv",{"_index":43,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["url.split",{"_index":47,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["url.startswith('https://docs.google.com/spreadsheets/d",{"_index":42,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["usetempfiles",{"_index":650,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["utils/warnings",{"_index":34,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["v",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["validate",{"_index":165,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["validatedatacell(value",{"_index":249,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["validateheaderrow(columns",{"_index":243,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value",{"_index":60,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"classes/Row.html":{},"classes/Structure.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["value.join",{"_index":172,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value.join('').trim().length",{"_index":175,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value.length",{"_index":170,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value.trim",{"_index":201,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value[0].trim().length",{"_index":177,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value[1].trim().length",{"_index":180,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["value[2].trim().length",{"_index":183,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["variables",{"_index":739,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["venue",{"_index":781,"title":{},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":515,"title":{},"body":{"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{},"miscellaneous/variables.html":{}}}],["void",{"_index":62,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/Reference.html":{},"classes/Row.html":{},"classes/Structure.html":{},"interfaces/UploadedFile.html":{}}}],["warning",{"_index":113,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["warningcode",{"_index":33,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/enumerations.html":{}}}],["warningcode.badcolumn",{"_index":815,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warningcode.invalidcharacter",{"_index":118,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.invalidcsvfile",{"_index":812,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warningcode.invalidheader",{"_index":173,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.missingctoranatomy",{"_index":206,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.missingheader",{"_index":186,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.noidinct1",{"_index":213,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.unmappeddata",{"_index":82,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningcode.unmappedmetadata",{"_index":151,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warningdictionary",{"_index":735,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["warninglabels",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["warnings",{"_index":13,"title":{},"body":{"interfaces/ASCTBData.html":{},"classes/OmapDataTransformer.html":{},"miscellaneous/variables.html":{}}}],["warnings.add",{"_index":112,"title":{},"body":{"interfaces/ASCTBData.html":{},"miscellaneous/variables.html":{}}}],["warnings.add(`warning",{"_index":77,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["warnings.add(invalidheader",{"_index":187,"title":{},"body":{"interfaces/ASCTBData.html":{}}}],["whether",{"_index":408,"title":{},"body":{"classes/OmapDataTransformer.html":{}}}],["year",{"_index":780,"title":{},"body":{"miscellaneous/variables.html":{}}}],["yes",{"_index":339,"title":{},"body":{"classes/GNode.html":{},"classes/Metadata.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ASCTBData.html":{"url":"interfaces/ASCTBData.html","title":"interface - ASCTBData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ASCTBData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/functions/api.functions.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            isOmap\n                                        \n                                \n                                \n                                        \n                                            metadata\n                                        \n                                \n                                \n                                        \n                                            warnings\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:         Row[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Row[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        isOmap\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        isOmap:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        metadata\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        metadata:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        warnings\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        warnings:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import {\n  ASCT_HEADER_FIRST_COLUMN,\n  DELIMETER,\n  LEGACY_OMAP_HEADER_FIRST_COLUMN,\n  OMAP_HEADER_FIRST_COLUMN,\n  Row,\n  TITLE_ROW_INDEX,\n  arrayNameMap,\n  arrayNameType,\n  createObject,\n  metadataArrayFields,\n  metadataNameMap,\n  objectFieldMap,\n} from '../models/api.model';\nimport { WarningCode } from '../utils/warnings';\nimport { fixOntologyId } from './lookup.functions';\nimport { OmapDataTransformer } from './omap.functions';\n\nexport interface ASCTBData {\n  data: Row[];\n  metadata: Record;\n  warnings: string[];\n  isOmap?: boolean;\n}\n\nexport function normalizeCsvUrl(url: string): string {\n  if (url.startsWith('https://docs.google.com/spreadsheets/d/') && url.indexOf('export?format=csv') === -1) {\n    const splitUrl = url.split('/');\n    if (splitUrl.length === 7) {\n      const sheetId = splitUrl[5];\n      const gid = splitUrl[6].split('=')[1];\n      return `https://docs.google.com/spreadsheets/d/${sheetId}/export?format=csv&gid=${gid}`;\n    }\n  }\n  return url;\n}\n\nfunction setData(column: string[], _columnNumber: number, row: Row, value: string, warnings: Set): void {\n  if (column.length > 1) {\n    const arrayName: arrayNameType = arrayNameMap[column[0]];\n    const originalArrayName = column[0];\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const objectArray: any[] = row[arrayName] || [];\n\n    if (!arrayName) {\n      warnings.add(`WARNING: unmapped array found ${originalArrayName} (Code ${WarningCode.UnmappedData})`);\n    }\n\n    if (column.length === 2) {\n      if (objectArray.length === 0 && arrayName) {\n        row[arrayName] = objectArray;\n      }\n      objectArray.push(createObject(value, originalArrayName));\n    } else if (column.length === 3 && arrayName) {\n      let arrayIndex = parseInt(column[1], 10) - 1;\n      const fieldName = objectFieldMap[column[2]]; // || (column[2]?.toLowerCase() ?? '').trim();\n\n      if (arrayIndex >= 0 && fieldName) {\n        if (arrayIndex >= objectArray.length) {\n          warnings.add(`WARNING: blank cells likely found in column: ${column.join('/')}, row: ${row.rowNumber}`);\n        }\n        // FIXME: Temporarily deal with blank columns since so many tables are non-conformant\n        arrayIndex = objectArray.length - 1;\n        if (arrayIndex ): void {\n  if (!isLinkRegex.test(value) && invalidCharacterRegex.test(value)) {\n    const colName = columnIndexToName(columnIndex);\n    warnings.add(\n      `WARNING: Invalid characters in data cell at column: ${colName} row: ${\n        rowIndex + 1\n      } where data cell: ${value} (Code ${WarningCode.InvalidCharacter})`,\n    );\n  }\n}\n\n/*\n * buildMetadata - build metadata key value store\n * @param metadataRows = rows from metadata to be extracted\n * @param warnings = warnings generated during the process are pushed to this set\n * @returns = returns key value pairs of metadata\n */\nexport const buildMetadata = (metadataRows: string[][], warnings: Set): Record => {\n  const [titleRow] = metadataRows.splice(TITLE_ROW_INDEX, 1);\n  const [title] = titleRow.slice(0, 1);\n\n  const result: Record = {\n    title,\n  };\n\n  return metadataRows.reduce((metadata: Record, rowData: string[], rowNumber: number) => {\n    const [metadataIdentifier, metadataValue, ..._] = rowData;\n    /**\n     * Raise Warnings:\n     *    Case 1: IF the Metadata Key/Value is filled or empty\n     *    Case 2: IF the metadata key is not mapping with metadataNameMap\n     */\n    if (!metadataIdentifier) {\n      warnings.add(\n        `WARNING: Metadata Key missing found at Row: ${rowNumber + 3} (Code ${WarningCode.UnmappedMetadata})`,\n      );\n      return metadata;\n    } else if (!metadataValue) {\n      warnings.add(\n        `WARNING: Metadata Value missing found at Row: ${rowNumber + 3} (Code ${WarningCode.UnmappedMetadata})`,\n      );\n    }\n    let metadataKey = metadataNameMap[metadataIdentifier];\n    if (!metadataKey) {\n      metadataKey = metadataIdentifier.toLowerCase();\n      warnings.add(\n        `WARNING: unmapped metadata found ${metadataIdentifier} at Row: ${rowNumber + 3} (Code ${\n          WarningCode.UnmappedMetadata\n        })`,\n      );\n    }\n    if (metadataArrayFields.includes(metadataKey)) {\n      metadata[metadataKey] = metadataValue.split(DELIMETER).map((item) => item.trim());\n    } else {\n      metadata[metadataKey] = metadataValue.trim();\n    }\n    return metadata;\n  }, result);\n};\n\nexport function findHeaderIndex(headerRow: number, data: string[][], firstColumnName: string): number {\n  for (let i = headerRow; i ) {\n  let columnIndex = 0;\n  headerData.forEach((value) => {\n    /**\n     * Validate the Header of length 3: i.e after splitting header with (\"/\")\n     */\n    if (value.length === 3) {\n      const colName = columnIndexToName(columnIndex);\n      const invalidHeader = `WARNING: Invalid Header found at column: ${colName}, row: ${rowIndex} where Header Value: ${value.join(\n        '/',\n      )} (Code ${WarningCode.InvalidHeader})`;\n      const columnBlank = value.join('').trim().length === 0;\n      const col0Warnings = value[0].trim().length === 0 || !arrayNameMap[value[0].toUpperCase()];\n      const col1Warnings = value[1].trim().length === 0 || Number.isNaN(parseInt(value[1]));\n      const col2Warnings = value[2].trim().length === 0 || !objectFieldMap[value[2]];\n      const showWarnings = col0Warnings || col1Warnings || col2Warnings;\n\n      if (columnBlank) {\n        warnings.add(\n          `WARNING: Blank Header found at column: ${colName}, row: ${rowIndex} (Code ${WarningCode.MissingHeader})`,\n        );\n      } else if (showWarnings) {\n        warnings.add(invalidHeader);\n      }\n    }\n\n    /**\n     * Validate the Header of length 2: i.e after splitting header with (\"/\")\n     */\n    if (value.length === 2) {\n      const colName = columnIndexToName(columnIndex);\n      const invalidHeader = `WARNING: Invalid Header found at column: ${colName}, row: ${rowIndex} where Header Value: ${value.join(\n        '/',\n      )} (Code ${WarningCode.InvalidHeader})`;\n      const columnBlank = value.join('').trim().length === 0;\n      const col0Warnings = value[0].trim().length === 0 || !arrayNameMap[value[0].toUpperCase()];\n      const col1Warnings = value[1].trim().length === 0 || Number.isNaN(parseInt(value[1]));\n      const showWarnings = col0Warnings || col1Warnings;\n\n      if (columnBlank) {\n        warnings.add(\n          `WARNING: Blank Header found at column: ${colName}, row: ${rowIndex} (Code ${WarningCode.MissingHeader})`,\n        );\n      } else if (showWarnings) {\n        warnings.add(invalidHeader);\n      }\n    }\n    columnIndex = columnIndex + 1;\n  });\n}\nfunction checkMissingIds(\n  column: string[],\n  index: number,\n  row: Row,\n  value: string,\n  rowData: string[],\n  warnings: Set,\n) {\n  /**\n   * check for missing Uberon/CL IDs:\n   */\n  const lastElement = column[column.length - 1];\n  const isId = lastElement.toLowerCase() === objectFieldMap.ID;\n  if (isId) {\n    const nameValue = rowData[index - 2]?.trim() ?? '';\n    const idValue = value.trim();\n    const labelValue = rowData[index - 1]?.trim() ?? '';\n\n    if (nameValue) {\n      if (!idValue) {\n        const colName = columnIndexToName(index);\n        warnings.add(\n          `WARNING: Missing Uberon/CL ID at Column: ${colName}, Row: ${row.rowNumber + 1} (Code ${\n            WarningCode.MissingCTorAnatomy\n          })`,\n        );\n      } else if (!labelValue) {\n        const colName = columnIndexToName(index - 1);\n        warnings.add(\n          `WARNING: Missing RDFS Label for ID ${idValue} at Column: ${colName}, Row: ${row.rowNumber + 1} (Code ${\n            WarningCode.MissingCTorAnatomy\n          })`,\n        );\n      }\n      if (column.join('/') === 'CT/1/ID' && (!idValue || !idValue.startsWith('CL:'))) {\n        const colName = columnIndexToName(index);\n        warnings.add(\n          `WARNING: CT/1/ID is not a CL ID (required) at Column: ${colName}, Row: ${row.rowNumber + 1} (Code ${\n            WarningCode.NoIdInCT1\n          })`,\n        );\n      }\n    }\n  }\n}\n\nexport function getHeaderRow(\n  data: string[][],\n  omapHeader: string,\n  asctbHeader: string,\n  legacyOmapHeader: string,\n): string[] | undefined {\n  for (const item of data) {\n    if (item[0] === omapHeader) {\n      return item;\n    }\n    if (item[0] === asctbHeader) {\n      return item;\n    }\n    if (item[0] === legacyOmapHeader) {\n      return item;\n    }\n  }\n  return undefined;\n}\n\nexport function makeASCTBData(data: string[][]): ASCTBData | undefined {\n  const header = getHeaderRow(\n    data,\n    OMAP_HEADER_FIRST_COLUMN,\n    ASCT_HEADER_FIRST_COLUMN,\n    LEGACY_OMAP_HEADER_FIRST_COLUMN,\n  );\n\n  if (header[0] === LEGACY_OMAP_HEADER_FIRST_COLUMN) {\n    const omapTransformer = new OmapDataTransformer(data, true);\n    const omapWarnings = omapTransformer.warnings;\n    const asctbData = makeASCTBDataWork(omapTransformer.transformedData);\n    return {\n      ...asctbData,\n      warnings: [...asctbData.warnings, ...omapWarnings],\n      isOmap: true,\n    };\n  } else if (header[0] === OMAP_HEADER_FIRST_COLUMN) {\n    const omapTransformer = new OmapDataTransformer(data, false);\n    const omapWarnings = omapTransformer.warnings;\n    const asctbData = makeASCTBDataWork(omapTransformer.transformedData);\n    return {\n      ...asctbData,\n      warnings: [...asctbData.warnings, ...omapWarnings],\n      isOmap: true,\n    };\n  } else if (header[0] === ASCT_HEADER_FIRST_COLUMN) {\n    const asctbData = makeASCTBDataWork(data);\n    return { ...asctbData, isOmap: false };\n  } else {\n    throw new Error(`Header row, first column should be : ${ASCT_HEADER_FIRST_COLUMN} or ${OMAP_HEADER_FIRST_COLUMN}`);\n  }\n}\n\nexport function makeASCTBDataWork(data: string[][]): ASCTBData {\n  const headerRow = findHeaderIndex(0, data, ASCT_HEADER_FIRST_COLUMN);\n  const columns = data[headerRow].map((col: string) =>\n    col\n      .toUpperCase()\n      .split('/')\n      .map((s) => s.trim()),\n  );\n  const warnings: Set = new Set();\n\n  validateHeaderRow(columns, headerRow + 2, warnings);\n\n  const results = data.slice(headerRow + 1).map((rowData: string[], rowNumber) => {\n    const row: Row = new Row(headerRow + rowNumber + 2);\n    rowData.forEach((value, index) => {\n      if (index  1) {\n        validateDataCell(value, row.rowNumber, index, warnings);\n        setData(columns[index], index, row, value, warnings);\n        checkMissingIds(columns[index], index, row, value, rowData, warnings);\n      }\n    });\n    row.finalize();\n    return row;\n  });\n\n  // build metadata key value store.\n  const metadataRows = data.slice(0, headerRow);\n  const metadata = buildMetadata(metadataRows, warnings);\n\n  return {\n    data: results,\n    metadata: metadata,\n    warnings: [...warnings],\n  };\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GEdge.html":{"url":"interfaces/GEdge.html","title":"interface - GEdge","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GEdge\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/graph.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Reference } from './api.model';\n\n/* tslint:disable:variable-name */\nexport enum Node_type {\n  AS = 'AS',\n  CT = 'CT',\n  BM = 'BM',\n  R = 'root',\n}\n\nexport enum Edge_type {\n  AS_AS = 'ASAS',\n  AS_CT = 'ASCT',\n  CT_CT = 'CTCT',\n  CT_G = 'CTgene',\n  CT_P = 'CTprotein',\n  CT_BL = 'CTlipids',\n  CT_BM = 'CTmetabolites',\n  CT_BF = 'CTproteoforms',\n  AS_G = 'ASgene', // Not supported, but shows up in the data\n  AS_P = 'ASprotein', // Not supported, but shows up in the data\n}\n\nexport class GNode {\n  id: number;\n  parent: number;\n  type: string;\n  name: string;\n  comparator: string;\n  comparatorName: string;\n  comparatorId: string;\n  metadata: Metadata;\n\n  constructor(\n    id: number,\n    name: string,\n    parent: number,\n    ontologyId: string,\n    label: string,\n    type: string,\n    references: Reference[],\n    bType?: string,\n  ) {\n    this.id = id;\n    this.parent = parent;\n    this.type = type;\n    this.comparator = '';\n    this.comparatorId = '';\n    this.comparatorName = '';\n    this.name = name;\n    this.metadata = new Metadata(name, ontologyId, label, references, bType);\n  }\n}\n\nexport class Metadata {\n  ontologyTypeId: string;\n  ontologyType: string;\n  label: string;\n  name: string;\n  ontologyId: string;\n  bmType?: string;\n  references: Reference[];\n\n  constructor(name: string, ontologyId: string, label: string, references: Reference[], bmType?: string) {\n    this.name = name;\n    this.ontologyId = ontologyId;\n    if (ontologyId.toLowerCase().startsWith('fma')) {\n      ontologyId = ontologyId.substring(3);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'FMA:' + ontologyId;\n    } else if (ontologyId.toLowerCase().startsWith('uberon')) {\n      ontologyId = ontologyId.substring('uberon'.length);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'UBERON:' + ontologyId;\n    }\n    [this.ontologyType, this.ontologyTypeId] = ontologyId.split(':');\n    this.name = name;\n    this.label = label;\n    this.bmType = bmType;\n    this.references = references;\n  }\n}\n\nexport interface GEdge {\n  source: number;\n  target: number;\n}\n\nexport interface GraphData {\n  nodes: Array;\n  edges: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GNode.html":{"url":"classes/GNode.html","title":"class - GNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/graph.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                comparator\n                            \n                            \n                                comparatorId\n                            \n                            \n                                comparatorName\n                            \n                            \n                                id\n                            \n                            \n                                metadata\n                            \n                            \n                                name\n                            \n                            \n                                parent\n                            \n                            \n                                type\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: number, name: string, parent: number, ontologyId: string, label: string, type: string, references: Reference[], bType?: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/graph.model.ts:32\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        parent\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ontologyId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        type\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        references\n                                                  \n                                                        \n                                                                        Reference[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        comparator\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comparatorId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:31\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        comparatorName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metadata\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Metadata\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parent\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Reference } from './api.model';\n\n/* tslint:disable:variable-name */\nexport enum Node_type {\n  AS = 'AS',\n  CT = 'CT',\n  BM = 'BM',\n  R = 'root',\n}\n\nexport enum Edge_type {\n  AS_AS = 'ASAS',\n  AS_CT = 'ASCT',\n  CT_CT = 'CTCT',\n  CT_G = 'CTgene',\n  CT_P = 'CTprotein',\n  CT_BL = 'CTlipids',\n  CT_BM = 'CTmetabolites',\n  CT_BF = 'CTproteoforms',\n  AS_G = 'ASgene', // Not supported, but shows up in the data\n  AS_P = 'ASprotein', // Not supported, but shows up in the data\n}\n\nexport class GNode {\n  id: number;\n  parent: number;\n  type: string;\n  name: string;\n  comparator: string;\n  comparatorName: string;\n  comparatorId: string;\n  metadata: Metadata;\n\n  constructor(\n    id: number,\n    name: string,\n    parent: number,\n    ontologyId: string,\n    label: string,\n    type: string,\n    references: Reference[],\n    bType?: string,\n  ) {\n    this.id = id;\n    this.parent = parent;\n    this.type = type;\n    this.comparator = '';\n    this.comparatorId = '';\n    this.comparatorName = '';\n    this.name = name;\n    this.metadata = new Metadata(name, ontologyId, label, references, bType);\n  }\n}\n\nexport class Metadata {\n  ontologyTypeId: string;\n  ontologyType: string;\n  label: string;\n  name: string;\n  ontologyId: string;\n  bmType?: string;\n  references: Reference[];\n\n  constructor(name: string, ontologyId: string, label: string, references: Reference[], bmType?: string) {\n    this.name = name;\n    this.ontologyId = ontologyId;\n    if (ontologyId.toLowerCase().startsWith('fma')) {\n      ontologyId = ontologyId.substring(3);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'FMA:' + ontologyId;\n    } else if (ontologyId.toLowerCase().startsWith('uberon')) {\n      ontologyId = ontologyId.substring('uberon'.length);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'UBERON:' + ontologyId;\n    }\n    [this.ontologyType, this.ontologyTypeId] = ontologyId.split(':');\n    this.name = name;\n    this.label = label;\n    this.bmType = bmType;\n    this.references = references;\n  }\n}\n\nexport interface GEdge {\n  source: number;\n  target: number;\n}\n\nexport interface GraphData {\n  nodes: Array;\n  edges: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GraphData.html":{"url":"interfaces/GraphData.html","title":"interface - GraphData","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GraphData\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/graph.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            edges\n                                        \n                                \n                                \n                                        \n                                            nodes\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        edges\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        edges:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        nodes\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        nodes:         Array\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Array\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Reference } from './api.model';\n\n/* tslint:disable:variable-name */\nexport enum Node_type {\n  AS = 'AS',\n  CT = 'CT',\n  BM = 'BM',\n  R = 'root',\n}\n\nexport enum Edge_type {\n  AS_AS = 'ASAS',\n  AS_CT = 'ASCT',\n  CT_CT = 'CTCT',\n  CT_G = 'CTgene',\n  CT_P = 'CTprotein',\n  CT_BL = 'CTlipids',\n  CT_BM = 'CTmetabolites',\n  CT_BF = 'CTproteoforms',\n  AS_G = 'ASgene', // Not supported, but shows up in the data\n  AS_P = 'ASprotein', // Not supported, but shows up in the data\n}\n\nexport class GNode {\n  id: number;\n  parent: number;\n  type: string;\n  name: string;\n  comparator: string;\n  comparatorName: string;\n  comparatorId: string;\n  metadata: Metadata;\n\n  constructor(\n    id: number,\n    name: string,\n    parent: number,\n    ontologyId: string,\n    label: string,\n    type: string,\n    references: Reference[],\n    bType?: string,\n  ) {\n    this.id = id;\n    this.parent = parent;\n    this.type = type;\n    this.comparator = '';\n    this.comparatorId = '';\n    this.comparatorName = '';\n    this.name = name;\n    this.metadata = new Metadata(name, ontologyId, label, references, bType);\n  }\n}\n\nexport class Metadata {\n  ontologyTypeId: string;\n  ontologyType: string;\n  label: string;\n  name: string;\n  ontologyId: string;\n  bmType?: string;\n  references: Reference[];\n\n  constructor(name: string, ontologyId: string, label: string, references: Reference[], bmType?: string) {\n    this.name = name;\n    this.ontologyId = ontologyId;\n    if (ontologyId.toLowerCase().startsWith('fma')) {\n      ontologyId = ontologyId.substring(3);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'FMA:' + ontologyId;\n    } else if (ontologyId.toLowerCase().startsWith('uberon')) {\n      ontologyId = ontologyId.substring('uberon'.length);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'UBERON:' + ontologyId;\n    }\n    [this.ontologyType, this.ontologyTypeId] = ontologyId.split(':');\n    this.name = name;\n    this.label = label;\n    this.bmType = bmType;\n    this.references = references;\n  }\n}\n\nexport interface GEdge {\n  source: number;\n  target: number;\n}\n\nexport interface GraphData {\n  nodes: Array;\n  edges: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/LookupResponse.html":{"url":"interfaces/LookupResponse.html","title":"interface - LookupResponse","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  LookupResponse\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/lookup.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            additionalInfo\n                                        \n                                \n                                \n                                        \n                                            description\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            extraLinks\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            link\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        additionalInfo\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        additionalInfo:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        description\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        description:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraLinks\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraLinks:     Record\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Record\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        link\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        link:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface LookupResponse {\n  label: string;\n  description: string;\n  link: string;\n  additionalInfo?: string;\n  extraLinks?: Record;\n}\n\nexport enum OntologyCode {\n  UBERON = 'UBERON',\n  CL = 'CL',\n  FMA = 'FMA',\n  HGNC = 'HGNC',\n  LMHA = 'LMHA',\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Metadata.html":{"url":"classes/Metadata.html","title":"class - Metadata","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Metadata\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/graph.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                bmType\n                            \n                            \n                                label\n                            \n                            \n                                name\n                            \n                            \n                                ontologyId\n                            \n                            \n                                ontologyType\n                            \n                            \n                                ontologyTypeId\n                            \n                            \n                                references\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, ontologyId: string, label: string, references: Reference[], bmType?: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/graph.model.ts:62\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        ontologyId\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        label\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        references\n                                                  \n                                                        \n                                                                        Reference[]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        bmType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            Yes\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bmType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:61\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:58\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:59\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ontologyId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:60\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ontologyType\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ontologyTypeId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:56\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        references\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reference[]\n\n                    \n                \n                    \n                        \n                                Defined in src/models/graph.model.ts:62\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Reference } from './api.model';\n\n/* tslint:disable:variable-name */\nexport enum Node_type {\n  AS = 'AS',\n  CT = 'CT',\n  BM = 'BM',\n  R = 'root',\n}\n\nexport enum Edge_type {\n  AS_AS = 'ASAS',\n  AS_CT = 'ASCT',\n  CT_CT = 'CTCT',\n  CT_G = 'CTgene',\n  CT_P = 'CTprotein',\n  CT_BL = 'CTlipids',\n  CT_BM = 'CTmetabolites',\n  CT_BF = 'CTproteoforms',\n  AS_G = 'ASgene', // Not supported, but shows up in the data\n  AS_P = 'ASprotein', // Not supported, but shows up in the data\n}\n\nexport class GNode {\n  id: number;\n  parent: number;\n  type: string;\n  name: string;\n  comparator: string;\n  comparatorName: string;\n  comparatorId: string;\n  metadata: Metadata;\n\n  constructor(\n    id: number,\n    name: string,\n    parent: number,\n    ontologyId: string,\n    label: string,\n    type: string,\n    references: Reference[],\n    bType?: string,\n  ) {\n    this.id = id;\n    this.parent = parent;\n    this.type = type;\n    this.comparator = '';\n    this.comparatorId = '';\n    this.comparatorName = '';\n    this.name = name;\n    this.metadata = new Metadata(name, ontologyId, label, references, bType);\n  }\n}\n\nexport class Metadata {\n  ontologyTypeId: string;\n  ontologyType: string;\n  label: string;\n  name: string;\n  ontologyId: string;\n  bmType?: string;\n  references: Reference[];\n\n  constructor(name: string, ontologyId: string, label: string, references: Reference[], bmType?: string) {\n    this.name = name;\n    this.ontologyId = ontologyId;\n    if (ontologyId.toLowerCase().startsWith('fma')) {\n      ontologyId = ontologyId.substring(3);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'FMA:' + ontologyId;\n    } else if (ontologyId.toLowerCase().startsWith('uberon')) {\n      ontologyId = ontologyId.substring('uberon'.length);\n      if (ontologyId.includes(':')) {\n        ontologyId = ontologyId.split(':')[1];\n      }\n      ontologyId = 'UBERON:' + ontologyId;\n    }\n    [this.ontologyType, this.ontologyTypeId] = ontologyId.split(':');\n    this.name = name;\n    this.label = label;\n    this.bmType = bmType;\n    this.references = references;\n  }\n}\n\nexport interface GEdge {\n  source: number;\n  target: number;\n}\n\nexport interface GraphData {\n  nodes: Array;\n  edges: Array;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/OmapDataTransformer.html":{"url":"classes/OmapDataTransformer.html","title":"class - OmapDataTransformer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  OmapDataTransformer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/functions/omap.functions.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    transformedData\n                                \n                                \n                                    warnings\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(data: string[][], legacy)\n                    \n                \n                        \n                            \n                                Defined in src/functions/omap.functions.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        data\n                                                  \n                                                        \n                                                                    string[][]\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        legacy\n                                                  \n                                                        \n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        transformedData\n                    \n                \n\n                \n                    \n                        gettransformedData()\n                    \n                \n                            \n                                \n                                    Defined in src/functions/omap.functions.ts:148\n                                \n                            \n                    \n                        \n                                Getters\n\n\n                                \n                                    Returns :     [][]\n\n                                \n                        \n                    \n\n            \n        \n        \n            \n                \n                    \n                        \n                        warnings\n                    \n                \n\n                \n                    \n                        getwarnings()\n                    \n                \n                            \n                                \n                                    Defined in src/functions/omap.functions.ts:152\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import { LEGACY_OMAP_HEADER_FIRST_COLUMN, OMAP_HEADER_FIRST_COLUMN, OMAP_ORGAN } from '../models/api.model';\nimport { buildMetadata, findHeaderIndex } from './api.functions';\n\nexport class OmapDataTransformer {\n  private readonly data: string[][];\n  private readonly headerRow: number;\n  private readonly _warnings: Set;\n  private readonly metaData: Record;\n  private readonly _transformedData: string[][];\n  private readonly isLegacyOmap: boolean;\n  private columns: string[];\n\n  constructor(data: string[][], legacy = false) {\n    this.isLegacyOmap = legacy;\n    this.data = data;\n    this.headerRow = legacy\n      ? findHeaderIndex(0, this.data, LEGACY_OMAP_HEADER_FIRST_COLUMN)\n      : findHeaderIndex(0, this.data, OMAP_HEADER_FIRST_COLUMN);\n    this.metaData = this.getMetaData();\n    this._warnings = new Set();\n    this._transformedData = this.transformOmapData();\n  }\n\n  private transformOmapData(): string[][] {\n    // Initializing with the MetaData\n    const asctbConverted: string[][] = [];\n    // Add metadata and new header row and the actual data\n    asctbConverted.push(...this.data.slice(0, this.headerRow), this.createNewHeaderRow(), ...this.createData());\n    return asctbConverted;\n  }\n\n  private createNewHeaderRow(): string[] {\n    const maxProteins = this.data.slice(this.headerRow + 1).map((subArr) => subArr[0].split(',').length);\n    const newHeaderRow = ['AS/1', 'AS/1/LABEL', 'AS/1/ID'];\n    for (let i = 1; i [] = this.createMapOfOldColumnsAndValues();\n    // Decides whether to take organs from table or constants\n    const organColumnsPresent = ['organ', 'organ_uberon'].every((column) => this.columns.includes(column));\n    const organ = OMAP_ORGAN[this.metaData.data_doi as string] ?? OMAP_ORGAN.default;\n    if (!(this.isLegacyOmap || organColumnsPresent)) {\n      this._warnings.add('WARNING: Organ Columns Missing. Adding default Organ Columns');\n    }\n    if (this.isLegacyOmap && !OMAP_ORGAN[this.metaData.data_doi as string]) {\n      this._warnings.add('WARNING: DOI mapping not present; Adding default Organ Columns.');\n    }\n\n    const transformedData: string[][] = [];\n    const title = this.metaData.title;\n    const alternateOrgan = 'missing organ label';\n    const alternateOrganUberon = 'missing organ UBERON id';\n    let organLabelMissingWarningAdded = false;\n    let organUberonMissingWarningAdded = false;\n\n    dataObject.forEach((data) => {\n      const uniprots = data.uniprot_accession_number.split(', ');\n      const hgncIds = data.HGNC_ID.split(', ');\n      const targetNames = data.target_name.split(', ');\n      if (!(uniprots.length === hgncIds.length && hgncIds.length === targetNames.length)) {\n        this.warnings.add(\n          'WARNING: Number of entires in column uniprot_accession_number, HGNC_ID,' +\n            `target_name are not equal in row ${data.rowNo}. uniprot_accession_number: ${uniprots.length};` +\n            `HGNC_ID: ${hgncIds.length}; target_name: ${targetNames.length}`,\n        );\n      }\n      let notes = `Extra information in \"${title}\", Row ${data.rowNo} \\n`;\n      notes += data.notes;\n      if (!this.isLegacyOmap && !data.organ) {\n        data.organ = alternateOrgan;\n        if (!organLabelMissingWarningAdded) {\n          this._warnings.add('WARNING: Organ Label Missing.');\n          organLabelMissingWarningAdded = true;\n        }\n      }\n      if (!this.isLegacyOmap && !data.organ_uberon) {\n        data.organ_uberon = alternateOrganUberon;\n        if (!organUberonMissingWarningAdded) {\n          this._warnings.add('WARNING: Organ Uberon ID Missing.');\n          organUberonMissingWarningAdded = true;\n        }\n      }\n      if (data.uniprot_accession_number !== '' && data.HGNC_ID !== '' && data.target_name !== '') {\n        const newrow = this.isLegacyOmap\n          ? [organ.name, organ.rdfs_label, organ.id]\n          : [data.organ, data.organ, data.organ_uberon];\n        const maxBPs = Math.max(uniprots.length, hgncIds.length, targetNames.length);\n        for (let i = 0; i  {\n    const warnings = new Set();\n    const metadataRows = this.data.slice(0, this.headerRow);\n    return buildMetadata(metadataRows, warnings);\n  }\n\n  private createMapOfOldColumnsAndValues(): Record[] {\n    let dataObject: Record[] = [];\n    this.columns = this.data[this.headerRow].map((col) => col);\n\n    this.data.slice(this.headerRow + 1).forEach((subArr, index) => {\n      const keyValuePairs = this.columns.reduce((acc: Record, key, i) => {\n        acc[key] = subArr[i];\n        return acc;\n      }, {});\n      // 4 = Two blank rows + 1 for 0 indexing of headerrow + 1 for 0 indexing for subArr\n      keyValuePairs.rowNo = (index + this.headerRow + 4).toString();\n      dataObject.push(keyValuePairs);\n    });\n    dataObject = this.createNotes(dataObject);\n    return dataObject;\n  }\n\n  private createNotes(dataObject: Record[]): Record[] {\n    const excludedKeys = ['uniprot_accession_number', 'HGNC_ID', 'target_name', 'rowNo'];\n    dataObject.forEach((obj) => {\n      const entries = Object.entries(obj);\n      const formattedEntries = entries\n        .filter(([key, value]) => value !== undefined && value !== null && value !== '' && !excludedKeys.includes(key))\n        .map(([key, value]) => `**${key}:** ${value}`);\n      const result = `- ${formattedEntries.join('\\n- ')}`;\n      obj.notes = result;\n    });\n    return dataObject;\n  }\n\n  /** Getters */\n  get transformedData(): string[][] {\n    return this._transformedData;\n  }\n\n  get warnings(): Set {\n    return this._warnings;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Reference.html":{"url":"classes/Reference.html","title":"class - Reference","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Reference\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/api.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                doi\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                notes\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isValid\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(id: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/api.model.ts:156\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        id\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        doi\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:155\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:154\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:156\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isValid\n                        \n                    \n                \n            \n            \n                \nisValid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:162\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const DELIMETER = ';';\nexport const TITLE_ROW_INDEX = 0;\n\nexport const metadataArrayFields = [\n  'author_names',\n  'author_orcids',\n  'reviewer_names',\n  'reviewer_orcids',\n  'general_publications',\n];\nexport const metadataNameMap: Record = {\n  'Author Name(s):': 'author_names',\n  'Author ORCID(s):': 'author_orcids',\n  'Reviewer(s):': 'reviewer_names',\n  'Reviewer ORCID(s):': 'reviewer_orcids',\n  'General Publication(s):': 'general_publications',\n  'Data DOI:': 'data_doi',\n  'Date:': 'date',\n  'Version Number:': 'version',\n};\nexport enum BM_TYPE {\n  G = 'gene',\n  P = 'protein',\n  BL = 'lipids',\n  BM = 'metabolites',\n  BF = 'proteoforms',\n}\n\nexport const OMAP_ORGAN: Record = {\n  'https://doi.org/10.48539/HBM467.LRKZ.884': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM577.SBHH.454': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM674.DJKV.876': {\n    name: 'lymph node',\n    rdfs_label: 'lymph node',\n    id: 'UBERON: 0000029',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM794.CSBJ.358': {\n    name: 'intestine',\n    rdfs_label: 'intestine',\n    id: 'UBERON:0000160',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM568.RMZB.377': {\n    name: 'kidney',\n    rdfs_label: 'kidney',\n    id: 'UBERON:0002113',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM495.QBSV.777': {\n    name: 'liver',\n    rdfs_label: 'liver',\n    id: 'UBERON:0002107',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM868.XLTM.922': {\n    name: 'Pancreas',\n    rdfs_label: 'Pancreas',\n    id: 'UBERON:0001264',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM972.WHPW.455': {\n    name: 'Lung',\n    rdfs_label: 'Lung',\n    id: 'UBERON:0002048',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  default: {\n    name: 'unknown',\n    rdfs_label: 'unknown',\n    id: 'unknown',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n};\n\nexport enum PROTEIN_PRESENCE {\n  POS = 'Positive',\n  NEG = 'Negative',\n  UNKNOWN = 'Unknown',\n  INTERMEDIATE = 'Intermediate',\n}\n\nexport const ASCT_HEADER_FIRST_COLUMN = 'AS/1';\nexport const LEGACY_OMAP_HEADER_FIRST_COLUMN = 'uniprot_accession_number';\nexport const OMAP_HEADER_FIRST_COLUMN = 'omap_id';\n\nexport const arrayNameMap: Record = {\n  AS: 'anatomical_structures',\n  CT: 'cell_types',\n  FTU: 'ftu_types',\n  BG: 'biomarkers_gene',\n  BP: 'biomarkers_protein',\n  BGENE: 'biomarkers_gene',\n  BPROTEIN: 'biomarkers_protein',\n  REF: 'references',\n  BLIPID: 'biomarkers_lipids',\n  BMETABOLITES: 'biomarkers_meta',\n  BPROTEOFORM: 'biomarkers_prot',\n  BL: 'biomarkers_lipids',\n  BM: 'biomarkers_meta',\n  BF: 'biomarkers_prot',\n};\n\nexport type arrayNameType =\n  | 'anatomical_structures'\n  | 'cell_types'\n  | 'ftu_types'\n  | 'biomarkers_gene'\n  | 'biomarkers_protein'\n  | 'biomarkers_lipids'\n  | 'biomarkers_meta'\n  | 'biomarkers_prot'\n  | 'references';\n\nexport const objectFieldMap: Record = {\n  ID: 'id',\n  LABEL: 'rdfs_label',\n  DOI: 'doi',\n  NOTES: 'notes',\n  NOTE: 'notes',\n};\n\nexport function createObject(name: string, structureType: string): Structure | Reference {\n  switch (structureType) {\n    case 'REF':\n      return new Reference(name);\n    case 'AS':\n    default:\n      return new Structure(name, structureType);\n  }\n}\n\nexport class Reference {\n  id?: string;\n  doi?: string;\n  notes?: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.doi || !!this.notes;\n  }\n}\n\nexport class Structure {\n  name?: string;\n  id?: string = '';\n  rdfs_label?: string = '';\n  b_type?: BM_TYPE;\n  proteinPresence?: PROTEIN_PRESENCE;\n  notes?: string;\n\n  constructor(name: string, structureType: string) {\n    this.name = name;\n    this.setBiomarkerProperties(structureType, name);\n  }\n\n  setBiomarkerProperties(structureType: string, name: string): void {\n    if (structureType === 'BGENE' || structureType === 'BG') {\n      this.b_type = BM_TYPE.G;\n    }\n    if (structureType === 'BPROTEIN' || structureType === 'BP') {\n      name = this.name = name.replace('Protein', '').trim();\n      const hasPos = name.endsWith('+');\n      const hasNeg = name.endsWith('-');\n      const hasInt = name.endsWith('+/-');\n\n      if (hasPos) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.POS;\n      } else if (hasInt) {\n        this.name = name.slice(0, -3).trim();\n        this.proteinPresence = PROTEIN_PRESENCE.INTERMEDIATE;\n      } else if (hasNeg) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.NEG;\n      } else {\n        this.proteinPresence = PROTEIN_PRESENCE.UNKNOWN;\n      }\n      this.b_type = BM_TYPE.P;\n    }\n    if (structureType === 'BLIPID' || structureType === 'BL') {\n      this.b_type = BM_TYPE.BL;\n    }\n    if (structureType === 'BMETABOLITES' || structureType === 'BM') {\n      this.b_type = BM_TYPE.BM;\n    }\n    if (structureType === 'BPROTEOFORM' || structureType === 'BF') {\n      this.b_type = BM_TYPE.BF;\n    }\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.name || !!this.rdfs_label;\n  }\n}\n\nexport class Row {\n  anatomical_structures: Array = [];\n  cell_types: Array = [];\n  biomarkers: Array = [];\n  biomarkers_protein: Array = [];\n  biomarkers_gene: Array = [];\n  biomarkers_lipids: Array = [];\n  biomarkers_meta: Array = [];\n  biomarkers_prot: Array = [];\n  ftu_types: Array = [];\n  references: Reference[] = [];\n\n  constructor(public rowNumber: number) {}\n\n  finalize(): void {\n    this.anatomical_structures = this.anatomical_structures.filter((s) => s.isValid());\n    this.cell_types = this.cell_types.filter((s) => s.isValid());\n    this.ftu_types = this.ftu_types.filter((s) => s.isValid());\n    this.references = this.references.filter((s) => s.isValid());\n\n    this.biomarkers_gene = this.biomarkers_gene.filter((s) => s.isValid());\n    this.biomarkers_protein = this.biomarkers_protein.filter((s) => s.isValid());\n    this.biomarkers_lipids = this.biomarkers_lipids.filter((s) => s.isValid());\n    this.biomarkers_meta = this.biomarkers_meta.filter((s) => s.isValid());\n    this.biomarkers_prot = this.biomarkers_prot.filter((s) => s.isValid());\n\n    this.biomarkers = [\n      ...this.biomarkers_gene,\n      ...this.biomarkers_protein,\n      ...this.biomarkers_lipids,\n      ...this.biomarkers_meta,\n      ...this.biomarkers_prot,\n    ];\n  }\n}\n\n// Copied interface out of @types/express-fileupload to avoid type casting failure\nexport interface UploadedFile {\n  /** file name */\n  name: string;\n  /** A function to move the file elsewhere on your server */\n  mv(path: string, callback: (err: unknown) => void): void;\n  mv(path: string): Promise;\n  /** Encoding type of the file */\n  encoding: string;\n  /** The mimetype of your file */\n  mimetype: string;\n  /** A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true. */\n  data: Buffer;\n  /** A path to the temporary file in case useTempFiles option was set to true. */\n  tempFilePath: string;\n  /** A boolean that represents if the file is over the size limit */\n  truncated: boolean;\n  /** Uploaded size in bytes */\n  size: number;\n  /** MD5 checksum of the uploaded file */\n  md5: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Row.html":{"url":"classes/Row.html","title":"class - Row","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Row\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/api.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                anatomical_structures\n                            \n                            \n                                biomarkers\n                            \n                            \n                                biomarkers_gene\n                            \n                            \n                                biomarkers_lipids\n                            \n                            \n                                biomarkers_meta\n                            \n                            \n                                biomarkers_prot\n                            \n                            \n                                biomarkers_protein\n                            \n                            \n                                cell_types\n                            \n                            \n                                ftu_types\n                            \n                            \n                                references\n                            \n                            \n                                    Public\n                                rowNumber\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                finalize\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(rowNumber: number)\n                    \n                \n                        \n                            \n                                Defined in src/models/api.model.ts:230\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        rowNumber\n                                                  \n                                                        \n                                                                        number\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        anatomical_structures\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:221\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:223\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers_gene\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:225\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers_lipids\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:226\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers_meta\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:227\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers_prot\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:228\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        biomarkers_protein\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:224\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        cell_types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:222\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ftu_types\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Array\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:229\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        references\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Reference[]\n\n                    \n                \n                \n                    \n                        Default value : []\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:230\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Public\n                        rowNumber\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:232\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        finalize\n                        \n                    \n                \n            \n            \n                \nfinalize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:234\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const DELIMETER = ';';\nexport const TITLE_ROW_INDEX = 0;\n\nexport const metadataArrayFields = [\n  'author_names',\n  'author_orcids',\n  'reviewer_names',\n  'reviewer_orcids',\n  'general_publications',\n];\nexport const metadataNameMap: Record = {\n  'Author Name(s):': 'author_names',\n  'Author ORCID(s):': 'author_orcids',\n  'Reviewer(s):': 'reviewer_names',\n  'Reviewer ORCID(s):': 'reviewer_orcids',\n  'General Publication(s):': 'general_publications',\n  'Data DOI:': 'data_doi',\n  'Date:': 'date',\n  'Version Number:': 'version',\n};\nexport enum BM_TYPE {\n  G = 'gene',\n  P = 'protein',\n  BL = 'lipids',\n  BM = 'metabolites',\n  BF = 'proteoforms',\n}\n\nexport const OMAP_ORGAN: Record = {\n  'https://doi.org/10.48539/HBM467.LRKZ.884': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM577.SBHH.454': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM674.DJKV.876': {\n    name: 'lymph node',\n    rdfs_label: 'lymph node',\n    id: 'UBERON: 0000029',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM794.CSBJ.358': {\n    name: 'intestine',\n    rdfs_label: 'intestine',\n    id: 'UBERON:0000160',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM568.RMZB.377': {\n    name: 'kidney',\n    rdfs_label: 'kidney',\n    id: 'UBERON:0002113',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM495.QBSV.777': {\n    name: 'liver',\n    rdfs_label: 'liver',\n    id: 'UBERON:0002107',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM868.XLTM.922': {\n    name: 'Pancreas',\n    rdfs_label: 'Pancreas',\n    id: 'UBERON:0001264',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM972.WHPW.455': {\n    name: 'Lung',\n    rdfs_label: 'Lung',\n    id: 'UBERON:0002048',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  default: {\n    name: 'unknown',\n    rdfs_label: 'unknown',\n    id: 'unknown',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n};\n\nexport enum PROTEIN_PRESENCE {\n  POS = 'Positive',\n  NEG = 'Negative',\n  UNKNOWN = 'Unknown',\n  INTERMEDIATE = 'Intermediate',\n}\n\nexport const ASCT_HEADER_FIRST_COLUMN = 'AS/1';\nexport const LEGACY_OMAP_HEADER_FIRST_COLUMN = 'uniprot_accession_number';\nexport const OMAP_HEADER_FIRST_COLUMN = 'omap_id';\n\nexport const arrayNameMap: Record = {\n  AS: 'anatomical_structures',\n  CT: 'cell_types',\n  FTU: 'ftu_types',\n  BG: 'biomarkers_gene',\n  BP: 'biomarkers_protein',\n  BGENE: 'biomarkers_gene',\n  BPROTEIN: 'biomarkers_protein',\n  REF: 'references',\n  BLIPID: 'biomarkers_lipids',\n  BMETABOLITES: 'biomarkers_meta',\n  BPROTEOFORM: 'biomarkers_prot',\n  BL: 'biomarkers_lipids',\n  BM: 'biomarkers_meta',\n  BF: 'biomarkers_prot',\n};\n\nexport type arrayNameType =\n  | 'anatomical_structures'\n  | 'cell_types'\n  | 'ftu_types'\n  | 'biomarkers_gene'\n  | 'biomarkers_protein'\n  | 'biomarkers_lipids'\n  | 'biomarkers_meta'\n  | 'biomarkers_prot'\n  | 'references';\n\nexport const objectFieldMap: Record = {\n  ID: 'id',\n  LABEL: 'rdfs_label',\n  DOI: 'doi',\n  NOTES: 'notes',\n  NOTE: 'notes',\n};\n\nexport function createObject(name: string, structureType: string): Structure | Reference {\n  switch (structureType) {\n    case 'REF':\n      return new Reference(name);\n    case 'AS':\n    default:\n      return new Structure(name, structureType);\n  }\n}\n\nexport class Reference {\n  id?: string;\n  doi?: string;\n  notes?: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.doi || !!this.notes;\n  }\n}\n\nexport class Structure {\n  name?: string;\n  id?: string = '';\n  rdfs_label?: string = '';\n  b_type?: BM_TYPE;\n  proteinPresence?: PROTEIN_PRESENCE;\n  notes?: string;\n\n  constructor(name: string, structureType: string) {\n    this.name = name;\n    this.setBiomarkerProperties(structureType, name);\n  }\n\n  setBiomarkerProperties(structureType: string, name: string): void {\n    if (structureType === 'BGENE' || structureType === 'BG') {\n      this.b_type = BM_TYPE.G;\n    }\n    if (structureType === 'BPROTEIN' || structureType === 'BP') {\n      name = this.name = name.replace('Protein', '').trim();\n      const hasPos = name.endsWith('+');\n      const hasNeg = name.endsWith('-');\n      const hasInt = name.endsWith('+/-');\n\n      if (hasPos) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.POS;\n      } else if (hasInt) {\n        this.name = name.slice(0, -3).trim();\n        this.proteinPresence = PROTEIN_PRESENCE.INTERMEDIATE;\n      } else if (hasNeg) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.NEG;\n      } else {\n        this.proteinPresence = PROTEIN_PRESENCE.UNKNOWN;\n      }\n      this.b_type = BM_TYPE.P;\n    }\n    if (structureType === 'BLIPID' || structureType === 'BL') {\n      this.b_type = BM_TYPE.BL;\n    }\n    if (structureType === 'BMETABOLITES' || structureType === 'BM') {\n      this.b_type = BM_TYPE.BM;\n    }\n    if (structureType === 'BPROTEOFORM' || structureType === 'BF') {\n      this.b_type = BM_TYPE.BF;\n    }\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.name || !!this.rdfs_label;\n  }\n}\n\nexport class Row {\n  anatomical_structures: Array = [];\n  cell_types: Array = [];\n  biomarkers: Array = [];\n  biomarkers_protein: Array = [];\n  biomarkers_gene: Array = [];\n  biomarkers_lipids: Array = [];\n  biomarkers_meta: Array = [];\n  biomarkers_prot: Array = [];\n  ftu_types: Array = [];\n  references: Reference[] = [];\n\n  constructor(public rowNumber: number) {}\n\n  finalize(): void {\n    this.anatomical_structures = this.anatomical_structures.filter((s) => s.isValid());\n    this.cell_types = this.cell_types.filter((s) => s.isValid());\n    this.ftu_types = this.ftu_types.filter((s) => s.isValid());\n    this.references = this.references.filter((s) => s.isValid());\n\n    this.biomarkers_gene = this.biomarkers_gene.filter((s) => s.isValid());\n    this.biomarkers_protein = this.biomarkers_protein.filter((s) => s.isValid());\n    this.biomarkers_lipids = this.biomarkers_lipids.filter((s) => s.isValid());\n    this.biomarkers_meta = this.biomarkers_meta.filter((s) => s.isValid());\n    this.biomarkers_prot = this.biomarkers_prot.filter((s) => s.isValid());\n\n    this.biomarkers = [\n      ...this.biomarkers_gene,\n      ...this.biomarkers_protein,\n      ...this.biomarkers_lipids,\n      ...this.biomarkers_meta,\n      ...this.biomarkers_prot,\n    ];\n  }\n}\n\n// Copied interface out of @types/express-fileupload to avoid type casting failure\nexport interface UploadedFile {\n  /** file name */\n  name: string;\n  /** A function to move the file elsewhere on your server */\n  mv(path: string, callback: (err: unknown) => void): void;\n  mv(path: string): Promise;\n  /** Encoding type of the file */\n  encoding: string;\n  /** The mimetype of your file */\n  mimetype: string;\n  /** A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true. */\n  data: Buffer;\n  /** A path to the temporary file in case useTempFiles option was set to true. */\n  tempFilePath: string;\n  /** A boolean that represents if the file is over the size limit */\n  truncated: boolean;\n  /** Uploaded size in bytes */\n  size: number;\n  /** MD5 checksum of the uploaded file */\n  md5: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Structure.html":{"url":"classes/Structure.html","title":"class - Structure","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Structure\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/api.model.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                b_type\n                            \n                            \n                                    Optional\n                                id\n                            \n                            \n                                    Optional\n                                name\n                            \n                            \n                                    Optional\n                                notes\n                            \n                            \n                                    Optional\n                                proteinPresence\n                            \n                            \n                                    Optional\n                                rdfs_label\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                isValid\n                            \n                            \n                                setBiomarkerProperties\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(name: string, structureType: string)\n                    \n                \n                        \n                            \n                                Defined in src/models/api.model.ts:173\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        name\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        structureType\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        b_type\n                        \n                    \n                \n            \n                \n                    \n                        Type :         BM_TYPE\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:171\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:169\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:168\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        notes\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:173\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        proteinPresence\n                        \n                    \n                \n            \n                \n                    \n                        Type :         PROTEIN_PRESENCE\n\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:172\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        rdfs_label\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ''\n                    \n                \n                    \n                        \n                                Defined in src/models/api.model.ts:170\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        isValid\n                        \n                    \n                \n            \n            \n                \nisValid()\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:215\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         boolean\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setBiomarkerProperties\n                        \n                    \n                \n            \n            \n                \nsetBiomarkerProperties(structureType: string, name: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:180\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                structureType\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        export const DELIMETER = ';';\nexport const TITLE_ROW_INDEX = 0;\n\nexport const metadataArrayFields = [\n  'author_names',\n  'author_orcids',\n  'reviewer_names',\n  'reviewer_orcids',\n  'general_publications',\n];\nexport const metadataNameMap: Record = {\n  'Author Name(s):': 'author_names',\n  'Author ORCID(s):': 'author_orcids',\n  'Reviewer(s):': 'reviewer_names',\n  'Reviewer ORCID(s):': 'reviewer_orcids',\n  'General Publication(s):': 'general_publications',\n  'Data DOI:': 'data_doi',\n  'Date:': 'date',\n  'Version Number:': 'version',\n};\nexport enum BM_TYPE {\n  G = 'gene',\n  P = 'protein',\n  BL = 'lipids',\n  BM = 'metabolites',\n  BF = 'proteoforms',\n}\n\nexport const OMAP_ORGAN: Record = {\n  'https://doi.org/10.48539/HBM467.LRKZ.884': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM577.SBHH.454': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM674.DJKV.876': {\n    name: 'lymph node',\n    rdfs_label: 'lymph node',\n    id: 'UBERON: 0000029',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM794.CSBJ.358': {\n    name: 'intestine',\n    rdfs_label: 'intestine',\n    id: 'UBERON:0000160',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM568.RMZB.377': {\n    name: 'kidney',\n    rdfs_label: 'kidney',\n    id: 'UBERON:0002113',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM495.QBSV.777': {\n    name: 'liver',\n    rdfs_label: 'liver',\n    id: 'UBERON:0002107',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM868.XLTM.922': {\n    name: 'Pancreas',\n    rdfs_label: 'Pancreas',\n    id: 'UBERON:0001264',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM972.WHPW.455': {\n    name: 'Lung',\n    rdfs_label: 'Lung',\n    id: 'UBERON:0002048',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  default: {\n    name: 'unknown',\n    rdfs_label: 'unknown',\n    id: 'unknown',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n};\n\nexport enum PROTEIN_PRESENCE {\n  POS = 'Positive',\n  NEG = 'Negative',\n  UNKNOWN = 'Unknown',\n  INTERMEDIATE = 'Intermediate',\n}\n\nexport const ASCT_HEADER_FIRST_COLUMN = 'AS/1';\nexport const LEGACY_OMAP_HEADER_FIRST_COLUMN = 'uniprot_accession_number';\nexport const OMAP_HEADER_FIRST_COLUMN = 'omap_id';\n\nexport const arrayNameMap: Record = {\n  AS: 'anatomical_structures',\n  CT: 'cell_types',\n  FTU: 'ftu_types',\n  BG: 'biomarkers_gene',\n  BP: 'biomarkers_protein',\n  BGENE: 'biomarkers_gene',\n  BPROTEIN: 'biomarkers_protein',\n  REF: 'references',\n  BLIPID: 'biomarkers_lipids',\n  BMETABOLITES: 'biomarkers_meta',\n  BPROTEOFORM: 'biomarkers_prot',\n  BL: 'biomarkers_lipids',\n  BM: 'biomarkers_meta',\n  BF: 'biomarkers_prot',\n};\n\nexport type arrayNameType =\n  | 'anatomical_structures'\n  | 'cell_types'\n  | 'ftu_types'\n  | 'biomarkers_gene'\n  | 'biomarkers_protein'\n  | 'biomarkers_lipids'\n  | 'biomarkers_meta'\n  | 'biomarkers_prot'\n  | 'references';\n\nexport const objectFieldMap: Record = {\n  ID: 'id',\n  LABEL: 'rdfs_label',\n  DOI: 'doi',\n  NOTES: 'notes',\n  NOTE: 'notes',\n};\n\nexport function createObject(name: string, structureType: string): Structure | Reference {\n  switch (structureType) {\n    case 'REF':\n      return new Reference(name);\n    case 'AS':\n    default:\n      return new Structure(name, structureType);\n  }\n}\n\nexport class Reference {\n  id?: string;\n  doi?: string;\n  notes?: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.doi || !!this.notes;\n  }\n}\n\nexport class Structure {\n  name?: string;\n  id?: string = '';\n  rdfs_label?: string = '';\n  b_type?: BM_TYPE;\n  proteinPresence?: PROTEIN_PRESENCE;\n  notes?: string;\n\n  constructor(name: string, structureType: string) {\n    this.name = name;\n    this.setBiomarkerProperties(structureType, name);\n  }\n\n  setBiomarkerProperties(structureType: string, name: string): void {\n    if (structureType === 'BGENE' || structureType === 'BG') {\n      this.b_type = BM_TYPE.G;\n    }\n    if (structureType === 'BPROTEIN' || structureType === 'BP') {\n      name = this.name = name.replace('Protein', '').trim();\n      const hasPos = name.endsWith('+');\n      const hasNeg = name.endsWith('-');\n      const hasInt = name.endsWith('+/-');\n\n      if (hasPos) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.POS;\n      } else if (hasInt) {\n        this.name = name.slice(0, -3).trim();\n        this.proteinPresence = PROTEIN_PRESENCE.INTERMEDIATE;\n      } else if (hasNeg) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.NEG;\n      } else {\n        this.proteinPresence = PROTEIN_PRESENCE.UNKNOWN;\n      }\n      this.b_type = BM_TYPE.P;\n    }\n    if (structureType === 'BLIPID' || structureType === 'BL') {\n      this.b_type = BM_TYPE.BL;\n    }\n    if (structureType === 'BMETABOLITES' || structureType === 'BM') {\n      this.b_type = BM_TYPE.BM;\n    }\n    if (structureType === 'BPROTEOFORM' || structureType === 'BF') {\n      this.b_type = BM_TYPE.BF;\n    }\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.name || !!this.rdfs_label;\n  }\n}\n\nexport class Row {\n  anatomical_structures: Array = [];\n  cell_types: Array = [];\n  biomarkers: Array = [];\n  biomarkers_protein: Array = [];\n  biomarkers_gene: Array = [];\n  biomarkers_lipids: Array = [];\n  biomarkers_meta: Array = [];\n  biomarkers_prot: Array = [];\n  ftu_types: Array = [];\n  references: Reference[] = [];\n\n  constructor(public rowNumber: number) {}\n\n  finalize(): void {\n    this.anatomical_structures = this.anatomical_structures.filter((s) => s.isValid());\n    this.cell_types = this.cell_types.filter((s) => s.isValid());\n    this.ftu_types = this.ftu_types.filter((s) => s.isValid());\n    this.references = this.references.filter((s) => s.isValid());\n\n    this.biomarkers_gene = this.biomarkers_gene.filter((s) => s.isValid());\n    this.biomarkers_protein = this.biomarkers_protein.filter((s) => s.isValid());\n    this.biomarkers_lipids = this.biomarkers_lipids.filter((s) => s.isValid());\n    this.biomarkers_meta = this.biomarkers_meta.filter((s) => s.isValid());\n    this.biomarkers_prot = this.biomarkers_prot.filter((s) => s.isValid());\n\n    this.biomarkers = [\n      ...this.biomarkers_gene,\n      ...this.biomarkers_protein,\n      ...this.biomarkers_lipids,\n      ...this.biomarkers_meta,\n      ...this.biomarkers_prot,\n    ];\n  }\n}\n\n// Copied interface out of @types/express-fileupload to avoid type casting failure\nexport interface UploadedFile {\n  /** file name */\n  name: string;\n  /** A function to move the file elsewhere on your server */\n  mv(path: string, callback: (err: unknown) => void): void;\n  mv(path: string): Promise;\n  /** Encoding type of the file */\n  encoding: string;\n  /** The mimetype of your file */\n  mimetype: string;\n  /** A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true. */\n  data: Buffer;\n  /** A path to the temporary file in case useTempFiles option was set to true. */\n  tempFilePath: string;\n  /** A boolean that represents if the file is over the size limit */\n  truncated: boolean;\n  /** Uploaded size in bytes */\n  size: number;\n  /** MD5 checksum of the uploaded file */\n  md5: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/UploadedFile.html":{"url":"interfaces/UploadedFile.html","title":"interface - UploadedFile","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  UploadedFile\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/models/api.model.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            data\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            md5\n                                        \n                                \n                                \n                                        \n                                            mimetype\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                                \n                                        \n                                            tempFilePath\n                                        \n                                \n                                \n                                        \n                                            truncated\n                                        \n                                \n                            \n                        \n                    \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        mv\n                                    \n                                \n                                \n                                    \n                                        mv\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        mv\n                        \n                    \n                \n            \n            \n                \nmv(path: string, callback: (undefined) => void)\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:261\n                        \n                    \n\n\n            \n                \n                        A function to move the file elsewhere on your server\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                callback\n                                            \n                                                            function\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        mv\n                        \n                    \n                \n            \n            \n                \nmv(path: string)\n                \n            \n\n\n                    \n                        \n                            Defined in src/models/api.model.ts:262\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                path\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     Buffer\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Buffer\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Encoding type of the file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        md5\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        md5:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    MD5 checksum of the uploaded file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimetype\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimetype:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    The mimetype of your file\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    file name\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Uploaded size in bytes\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tempFilePath\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tempFilePath:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A path to the temporary file in case useTempFiles option was set to true.\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        truncated\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        truncated:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A boolean that represents if the file is over the size limit\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        export const DELIMETER = ';';\nexport const TITLE_ROW_INDEX = 0;\n\nexport const metadataArrayFields = [\n  'author_names',\n  'author_orcids',\n  'reviewer_names',\n  'reviewer_orcids',\n  'general_publications',\n];\nexport const metadataNameMap: Record = {\n  'Author Name(s):': 'author_names',\n  'Author ORCID(s):': 'author_orcids',\n  'Reviewer(s):': 'reviewer_names',\n  'Reviewer ORCID(s):': 'reviewer_orcids',\n  'General Publication(s):': 'general_publications',\n  'Data DOI:': 'data_doi',\n  'Date:': 'date',\n  'Version Number:': 'version',\n};\nexport enum BM_TYPE {\n  G = 'gene',\n  P = 'protein',\n  BL = 'lipids',\n  BM = 'metabolites',\n  BF = 'proteoforms',\n}\n\nexport const OMAP_ORGAN: Record = {\n  'https://doi.org/10.48539/HBM467.LRKZ.884': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM577.SBHH.454': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM674.DJKV.876': {\n    name: 'lymph node',\n    rdfs_label: 'lymph node',\n    id: 'UBERON: 0000029',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM794.CSBJ.358': {\n    name: 'intestine',\n    rdfs_label: 'intestine',\n    id: 'UBERON:0000160',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM568.RMZB.377': {\n    name: 'kidney',\n    rdfs_label: 'kidney',\n    id: 'UBERON:0002113',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM495.QBSV.777': {\n    name: 'liver',\n    rdfs_label: 'liver',\n    id: 'UBERON:0002107',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM868.XLTM.922': {\n    name: 'Pancreas',\n    rdfs_label: 'Pancreas',\n    id: 'UBERON:0001264',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM972.WHPW.455': {\n    name: 'Lung',\n    rdfs_label: 'Lung',\n    id: 'UBERON:0002048',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  default: {\n    name: 'unknown',\n    rdfs_label: 'unknown',\n    id: 'unknown',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n};\n\nexport enum PROTEIN_PRESENCE {\n  POS = 'Positive',\n  NEG = 'Negative',\n  UNKNOWN = 'Unknown',\n  INTERMEDIATE = 'Intermediate',\n}\n\nexport const ASCT_HEADER_FIRST_COLUMN = 'AS/1';\nexport const LEGACY_OMAP_HEADER_FIRST_COLUMN = 'uniprot_accession_number';\nexport const OMAP_HEADER_FIRST_COLUMN = 'omap_id';\n\nexport const arrayNameMap: Record = {\n  AS: 'anatomical_structures',\n  CT: 'cell_types',\n  FTU: 'ftu_types',\n  BG: 'biomarkers_gene',\n  BP: 'biomarkers_protein',\n  BGENE: 'biomarkers_gene',\n  BPROTEIN: 'biomarkers_protein',\n  REF: 'references',\n  BLIPID: 'biomarkers_lipids',\n  BMETABOLITES: 'biomarkers_meta',\n  BPROTEOFORM: 'biomarkers_prot',\n  BL: 'biomarkers_lipids',\n  BM: 'biomarkers_meta',\n  BF: 'biomarkers_prot',\n};\n\nexport type arrayNameType =\n  | 'anatomical_structures'\n  | 'cell_types'\n  | 'ftu_types'\n  | 'biomarkers_gene'\n  | 'biomarkers_protein'\n  | 'biomarkers_lipids'\n  | 'biomarkers_meta'\n  | 'biomarkers_prot'\n  | 'references';\n\nexport const objectFieldMap: Record = {\n  ID: 'id',\n  LABEL: 'rdfs_label',\n  DOI: 'doi',\n  NOTES: 'notes',\n  NOTE: 'notes',\n};\n\nexport function createObject(name: string, structureType: string): Structure | Reference {\n  switch (structureType) {\n    case 'REF':\n      return new Reference(name);\n    case 'AS':\n    default:\n      return new Structure(name, structureType);\n  }\n}\n\nexport class Reference {\n  id?: string;\n  doi?: string;\n  notes?: string;\n\n  constructor(id: string) {\n    this.id = id;\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.doi || !!this.notes;\n  }\n}\n\nexport class Structure {\n  name?: string;\n  id?: string = '';\n  rdfs_label?: string = '';\n  b_type?: BM_TYPE;\n  proteinPresence?: PROTEIN_PRESENCE;\n  notes?: string;\n\n  constructor(name: string, structureType: string) {\n    this.name = name;\n    this.setBiomarkerProperties(structureType, name);\n  }\n\n  setBiomarkerProperties(structureType: string, name: string): void {\n    if (structureType === 'BGENE' || structureType === 'BG') {\n      this.b_type = BM_TYPE.G;\n    }\n    if (structureType === 'BPROTEIN' || structureType === 'BP') {\n      name = this.name = name.replace('Protein', '').trim();\n      const hasPos = name.endsWith('+');\n      const hasNeg = name.endsWith('-');\n      const hasInt = name.endsWith('+/-');\n\n      if (hasPos) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.POS;\n      } else if (hasInt) {\n        this.name = name.slice(0, -3).trim();\n        this.proteinPresence = PROTEIN_PRESENCE.INTERMEDIATE;\n      } else if (hasNeg) {\n        this.name = name.slice(0, -1);\n        this.proteinPresence = PROTEIN_PRESENCE.NEG;\n      } else {\n        this.proteinPresence = PROTEIN_PRESENCE.UNKNOWN;\n      }\n      this.b_type = BM_TYPE.P;\n    }\n    if (structureType === 'BLIPID' || structureType === 'BL') {\n      this.b_type = BM_TYPE.BL;\n    }\n    if (structureType === 'BMETABOLITES' || structureType === 'BM') {\n      this.b_type = BM_TYPE.BM;\n    }\n    if (structureType === 'BPROTEOFORM' || structureType === 'BF') {\n      this.b_type = BM_TYPE.BF;\n    }\n  }\n\n  isValid(): boolean {\n    return !!this.id || !!this.name || !!this.rdfs_label;\n  }\n}\n\nexport class Row {\n  anatomical_structures: Array = [];\n  cell_types: Array = [];\n  biomarkers: Array = [];\n  biomarkers_protein: Array = [];\n  biomarkers_gene: Array = [];\n  biomarkers_lipids: Array = [];\n  biomarkers_meta: Array = [];\n  biomarkers_prot: Array = [];\n  ftu_types: Array = [];\n  references: Reference[] = [];\n\n  constructor(public rowNumber: number) {}\n\n  finalize(): void {\n    this.anatomical_structures = this.anatomical_structures.filter((s) => s.isValid());\n    this.cell_types = this.cell_types.filter((s) => s.isValid());\n    this.ftu_types = this.ftu_types.filter((s) => s.isValid());\n    this.references = this.references.filter((s) => s.isValid());\n\n    this.biomarkers_gene = this.biomarkers_gene.filter((s) => s.isValid());\n    this.biomarkers_protein = this.biomarkers_protein.filter((s) => s.isValid());\n    this.biomarkers_lipids = this.biomarkers_lipids.filter((s) => s.isValid());\n    this.biomarkers_meta = this.biomarkers_meta.filter((s) => s.isValid());\n    this.biomarkers_prot = this.biomarkers_prot.filter((s) => s.isValid());\n\n    this.biomarkers = [\n      ...this.biomarkers_gene,\n      ...this.biomarkers_protein,\n      ...this.biomarkers_lipids,\n      ...this.biomarkers_meta,\n      ...this.biomarkers_prot,\n    ];\n  }\n}\n\n// Copied interface out of @types/express-fileupload to avoid type casting failure\nexport interface UploadedFile {\n  /** file name */\n  name: string;\n  /** A function to move the file elsewhere on your server */\n  mv(path: string, callback: (err: unknown) => void): void;\n  mv(path: string): Promise;\n  /** Encoding type of the file */\n  encoding: string;\n  /** The mimetype of your file */\n  mimetype: string;\n  /** A buffer representation of your file, returns empty buffer in case useTempFiles option was set to true. */\n  data: Buffer;\n  /** A path to the temporary file in case useTempFiles option was set to true. */\n  tempFilePath: string;\n  /** A boolean that represents if the file is over the size limit */\n  truncated: boolean;\n  /** Uploaded size in bytes */\n  size: number;\n  /** MD5 checksum of the uploaded file */\n  md5: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BM_TYPE   (src/.../api.model.ts)\n                        \n                        \n                            CcfProperty   (src/.../graph-jsonld.functions.ts)\n                        \n                        \n                            Edge_type   (src/.../graph.model.ts)\n                        \n                        \n                            Node_type   (src/.../graph.model.ts)\n                        \n                        \n                            OntologyCode   (src/.../lookup.model.ts)\n                        \n                        \n                            OwlProperty   (src/.../graph-jsonld.functions.ts)\n                        \n                        \n                            OwlType   (src/.../graph-jsonld.functions.ts)\n                        \n                        \n                            PROTEIN_PRESENCE   (src/.../api.model.ts)\n                        \n                        \n                            WarningCode   (src/.../warnings.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/api.model.ts\n    \n        \n            \n                \n                    \n                        \n                        BM_TYPE\n                    \n                \n                        \n                            \n                                 G\n                            \n                        \n                        \n                            \n                                Value : gene\n                            \n                        \n                        \n                            \n                                 P\n                            \n                        \n                        \n                            \n                                Value : protein\n                            \n                        \n                        \n                            \n                                 BL\n                            \n                        \n                        \n                            \n                                Value : lipids\n                            \n                        \n                        \n                            \n                                 BM\n                            \n                        \n                        \n                            \n                                Value : metabolites\n                            \n                        \n                        \n                            \n                                 BF\n                            \n                        \n                        \n                            \n                                Value : proteoforms\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        PROTEIN_PRESENCE\n                    \n                \n                        \n                            \n                                 POS\n                            \n                        \n                        \n                            \n                                Value : Positive\n                            \n                        \n                        \n                            \n                                 NEG\n                            \n                        \n                        \n                            \n                                Value : Negative\n                            \n                        \n                        \n                            \n                                 UNKNOWN\n                            \n                        \n                        \n                            \n                                Value : Unknown\n                            \n                        \n                        \n                            \n                                 INTERMEDIATE\n                            \n                        \n                        \n                            \n                                Value : Intermediate\n                            \n                        \n            \n        \n\n    src/functions/graph-jsonld.functions.ts\n    \n        \n            \n                \n                    \n                        \n                        CcfProperty\n                    \n                \n                        \n                            \n                                 PART_OF\n                            \n                        \n                        \n                            \n                                Value : ccf:ccf_part_of\n                            \n                        \n                        \n                            \n                                 LOCATED_IN\n                            \n                        \n                        \n                            \n                                Value : ccf:located_in\n                            \n                        \n                        \n                            \n                                 CT_IS_A\n                            \n                        \n                        \n                            \n                                Value : ccf:ct_is_a\n                            \n                        \n                        \n                            \n                                 CHARACTERIZES\n                            \n                        \n                        \n                            \n                                Value : ccf:characterizes\n                            \n                        \n                        \n                            \n                                 OCCURS_IN\n                            \n                        \n                        \n                            \n                                Value : ccf:occurs_in\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        OwlProperty\n                    \n                \n                        \n                            \n                                 ANNOTATION\n                            \n                        \n                        \n                            \n                                Value : owl:AnnotationProperty\n                            \n                        \n                        \n                            \n                                 OBJECT\n                            \n                        \n                        \n                            \n                                Value : owl:ObjectProperty\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        OwlType\n                    \n                \n                        \n                            \n                                 CLASS\n                            \n                        \n                        \n                            \n                                Value : owl:Class\n                            \n                        \n                        \n                            \n                                 RESTRICTION\n                            \n                        \n                        \n                            \n                                Value : owl:Restriction\n                            \n                        \n            \n        \n\n    src/models/graph.model.ts\n    \n        \n            \n                \n                    \n                        \n                        Edge_type\n                    \n                \n                        \n                            \n                                 AS_AS\n                            \n                        \n                        \n                            \n                                Value : ASAS\n                            \n                        \n                        \n                            \n                                 AS_CT\n                            \n                        \n                        \n                            \n                                Value : ASCT\n                            \n                        \n                        \n                            \n                                 CT_CT\n                            \n                        \n                        \n                            \n                                Value : CTCT\n                            \n                        \n                        \n                            \n                                 CT_G\n                            \n                        \n                        \n                            \n                                Value : CTgene\n                            \n                        \n                        \n                            \n                                 CT_P\n                            \n                        \n                        \n                            \n                                Value : CTprotein\n                            \n                        \n                        \n                            \n                                 CT_BL\n                            \n                        \n                        \n                            \n                                Value : CTlipids\n                            \n                        \n                        \n                            \n                                 CT_BM\n                            \n                        \n                        \n                            \n                                Value : CTmetabolites\n                            \n                        \n                        \n                            \n                                 CT_BF\n                            \n                        \n                        \n                            \n                                Value : CTproteoforms\n                            \n                        \n                        \n                            \n                                 AS_G\n                            \n                        \n                        \n                            \n                                Value : ASgene\n                            \n                        \n                        \n                            \n                                 AS_P\n                            \n                        \n                        \n                            \n                                Value : ASprotein\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        Node_type\n                    \n                \n                        \n                            \n                                 AS\n                            \n                        \n                        \n                            \n                                Value : AS\n                            \n                        \n                        \n                            \n                                 CT\n                            \n                        \n                        \n                            \n                                Value : CT\n                            \n                        \n                        \n                            \n                                 BM\n                            \n                        \n                        \n                            \n                                Value : BM\n                            \n                        \n                        \n                            \n                                 R\n                            \n                        \n                        \n                            \n                                Value : root\n                            \n                        \n            \n        \n\n    src/models/lookup.model.ts\n    \n        \n            \n                \n                    \n                        \n                        OntologyCode\n                    \n                \n                        \n                            \n                                 UBERON\n                            \n                        \n                        \n                            \n                                Value : UBERON\n                            \n                        \n                        \n                            \n                                 CL\n                            \n                        \n                        \n                            \n                                Value : CL\n                            \n                        \n                        \n                            \n                                 FMA\n                            \n                        \n                        \n                            \n                                Value : FMA\n                            \n                        \n                        \n                            \n                                 HGNC\n                            \n                        \n                        \n                            \n                                Value : HGNC\n                            \n                        \n                        \n                            \n                                 LMHA\n                            \n                        \n                        \n                            \n                                Value : LMHA\n                            \n                        \n            \n        \n\n    src/utils/warnings.ts\n    \n        \n            \n                \n                    \n                        \n                        WarningCode\n                    \n                \n                        \n                            \n                                 InvalidCsvFile\n                            \n                        \n                        \n                            \n                                Value : 1\n                            \n                        \n                        \n                            \n                                 UnmappedMetadata\n                            \n                        \n                        \n                            \n                                Value : 2\n                            \n                        \n                        \n                            \n                                 InvalidHeader\n                            \n                        \n                        \n                            \n                                Value : 3\n                            \n                        \n                        \n                            \n                                 MissingHeader\n                            \n                        \n                        \n                            \n                                Value : 4\n                            \n                        \n                        \n                            \n                                 InvalidCharacter\n                            \n                        \n                        \n                            \n                                Value : 5\n                            \n                        \n                        \n                            \n                                 MissingCTorAnatomy\n                            \n                        \n                        \n                            \n                                Value : 6\n                            \n                        \n                        \n                            \n                                 UnmappedData\n                            \n                        \n                        \n                            \n                                Value : 7\n                            \n                        \n                        \n                            \n                                 BadColumn\n                            \n                        \n                        \n                            \n                                Value : 8\n                            \n                        \n                        \n                            \n                                 NoIdInCT1\n                            \n                        \n                        \n                            \n                                Value : 9\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    6 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    5 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            arrayNameType   (src/.../api.model.ts)\n                        \n                        \n                            WarningDictionary   (src/.../validation-report.function.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/models/api.model.ts\n    \n    \n        \n            \n                \n                    \n                    arrayNameType\n                \n            \n            \n                \n                        \"anatomical_structures\" | \"cell_types\" | \"ftu_types\" | \"biomarkers_gene\" | \"biomarkers_protein\" | \"biomarkers_lipids\" | \"biomarkers_meta\" | \"biomarkers_prot\" | \"references\"\n\n                \n            \n        \n    \n    src/functions/validation-report.function.ts\n    \n    \n        \n            \n                \n                    \n                    WarningDictionary\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            alphabetLength   (src/.../api.functions.ts)\n                        \n                        \n                            app   (src/.../main.ts)\n                        \n                        \n                            arrayNameMap   (src/.../api.model.ts)\n                        \n                        \n                            ASCT_HEADER_FIRST_COLUMN   (src/.../api.model.ts)\n                        \n                        \n                            buildMetadata   (src/.../api.functions.ts)\n                        \n                        \n                            codepointUppercaseA   (src/.../api.functions.ts)\n                        \n                        \n                            DELIMETER   (src/.../api.model.ts)\n                        \n                        \n                            invalidCharacterRegex   (src/.../api.functions.ts)\n                        \n                        \n                            isLinkRegex   (src/.../api.functions.ts)\n                        \n                        \n                            LEGACY_OMAP_HEADER_FIRST_COLUMN   (src/.../api.model.ts)\n                        \n                        \n                            metadataArrayFields   (src/.../api.model.ts)\n                        \n                        \n                            metadataNameMap   (src/.../api.model.ts)\n                        \n                        \n                            objectFieldMap   (src/.../api.model.ts)\n                        \n                        \n                            OMAP_HEADER_FIRST_COLUMN   (src/.../api.model.ts)\n                        \n                        \n                            OMAP_ORGAN   (src/.../api.model.ts)\n                        \n                        \n                            PLAYGROUND_CSV   (const.ts)\n                        \n                        \n                            port   (src/.../main.ts)\n                        \n                        \n                            server   (src/.../main.ts)\n                        \n                        \n                            TITLE_ROW_INDEX   (src/.../api.model.ts)\n                        \n                        \n                            WarningLabels   (src/.../warnings.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/functions/api.functions.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        alphabetLength\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 26\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        buildMetadata\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (metadataRows: string[][], warnings: Set): Record => {\n  const [titleRow] = metadataRows.splice(TITLE_ROW_INDEX, 1);\n  const [title] = titleRow.slice(0, 1);\n\n  const result: Record = {\n    title,\n  };\n\n  return metadataRows.reduce((metadata: Record, rowData: string[], rowNumber: number) => {\n    const [metadataIdentifier, metadataValue, ..._] = rowData;\n    /**\n     * Raise Warnings:\n     *    Case 1: IF the Metadata Key/Value is filled or empty\n     *    Case 2: IF the metadata key is not mapping with metadataNameMap\n     */\n    if (!metadataIdentifier) {\n      warnings.add(\n        `WARNING: Metadata Key missing found at Row: ${rowNumber + 3} (Code ${WarningCode.UnmappedMetadata})`,\n      );\n      return metadata;\n    } else if (!metadataValue) {\n      warnings.add(\n        `WARNING: Metadata Value missing found at Row: ${rowNumber + 3} (Code ${WarningCode.UnmappedMetadata})`,\n      );\n    }\n    let metadataKey = metadataNameMap[metadataIdentifier];\n    if (!metadataKey) {\n      metadataKey = metadataIdentifier.toLowerCase();\n      warnings.add(\n        `WARNING: unmapped metadata found ${metadataIdentifier} at Row: ${rowNumber + 3} (Code ${\n          WarningCode.UnmappedMetadata\n        })`,\n      );\n    }\n    if (metadataArrayFields.includes(metadataKey)) {\n      metadata[metadataKey] = metadataValue.split(DELIMETER).map((item) => item.trim());\n    } else {\n      metadata[metadataKey] = metadataValue.trim();\n    }\n    return metadata;\n  }, result);\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        codepointUppercaseA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 65\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        invalidCharacterRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /_/gi\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isLinkRegex\n                        \n                    \n                \n            \n                \n                    \n                        Default value : /^http/gi\n                    \n                \n\n\n        \n    \n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        app\n                        \n                    \n                \n            \n                \n                    \n                        Default value : express()\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        port\n                        \n                    \n                \n            \n                \n                    \n                        Default value : process.env.PORT || 5000\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        server\n                        \n                    \n                \n            \n                \n                    \n                        Default value : app.listen(port, () => {\n  console.log(`Listening at http://localhost:${port}`);\n})\n                    \n                \n\n\n        \n    \n\n    src/models/api.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        arrayNameMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  AS: 'anatomical_structures',\n  CT: 'cell_types',\n  FTU: 'ftu_types',\n  BG: 'biomarkers_gene',\n  BP: 'biomarkers_protein',\n  BGENE: 'biomarkers_gene',\n  BPROTEIN: 'biomarkers_protein',\n  REF: 'references',\n  BLIPID: 'biomarkers_lipids',\n  BMETABOLITES: 'biomarkers_meta',\n  BPROTEOFORM: 'biomarkers_prot',\n  BL: 'biomarkers_lipids',\n  BM: 'biomarkers_meta',\n  BF: 'biomarkers_prot',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ASCT_HEADER_FIRST_COLUMN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'AS/1'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DELIMETER\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : ';'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        LEGACY_OMAP_HEADER_FIRST_COLUMN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'uniprot_accession_number'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metadataArrayFields\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  'author_names',\n  'author_orcids',\n  'reviewer_names',\n  'reviewer_orcids',\n  'general_publications',\n]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        metadataNameMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  'Author Name(s):': 'author_names',\n  'Author ORCID(s):': 'author_orcids',\n  'Reviewer(s):': 'reviewer_names',\n  'Reviewer ORCID(s):': 'reviewer_orcids',\n  'General Publication(s):': 'general_publications',\n  'Data DOI:': 'data_doi',\n  'Date:': 'date',\n  'Version Number:': 'version',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        objectFieldMap\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  ID: 'id',\n  LABEL: 'rdfs_label',\n  DOI: 'doi',\n  NOTES: 'notes',\n  NOTE: 'notes',\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OMAP_HEADER_FIRST_COLUMN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'omap_id'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        OMAP_ORGAN\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Record\n\n                    \n                \n                \n                    \n                        Default value : {\n  'https://doi.org/10.48539/HBM467.LRKZ.884': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM577.SBHH.454': {\n    name: 'skin',\n    rdfs_label: 'skin of body',\n    id: 'UBERON:0002097',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM674.DJKV.876': {\n    name: 'lymph node',\n    rdfs_label: 'lymph node',\n    id: 'UBERON: 0000029',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM794.CSBJ.358': {\n    name: 'intestine',\n    rdfs_label: 'intestine',\n    id: 'UBERON:0000160',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM568.RMZB.377': {\n    name: 'kidney',\n    rdfs_label: 'kidney',\n    id: 'UBERON:0002113',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM495.QBSV.777': {\n    name: 'liver',\n    rdfs_label: 'liver',\n    id: 'UBERON:0002107',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM868.XLTM.922': {\n    name: 'Pancreas',\n    rdfs_label: 'Pancreas',\n    id: 'UBERON:0001264',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  'https://doi.org/10.48539/HBM972.WHPW.455': {\n    name: 'Lung',\n    rdfs_label: 'Lung',\n    id: 'UBERON:0002048',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n  default: {\n    name: 'unknown',\n    rdfs_label: 'unknown',\n    id: 'unknown',\n    setBiomarkerProperties: undefined,\n    isValid: undefined,\n  },\n}\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TITLE_ROW_INDEX\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Default value : 0\n                    \n                \n\n\n        \n    \n\n    const.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        PLAYGROUND_CSV\n                        \n                    \n                \n            \n                \n                    \n                        Default value : `\"Anatomical Strucures, Cell Types and Biomarkers Table  for *Organ Name*\",,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,\nAuthor: Joe Doe (add up to 3 authors with ORCID IDs),,,,,,,,,,,,,,,,,,,,,,,,,,,\n\"Reviewer: Jane Doe (no limit, will be listed in Acknowledgements)\",,,,,,,,,,,,,,,,,,,,,,,,,,,\nDate Started: MM/DD/YYYY,,,Last Modified: MM/DD/YYYY,,,,,,,,,,,,,,,,,,,,,,,,\nVersion Number: v 0.0.1,,,,,,,,,,,,,,,,,,,,,,,,,,,\n,,,,,,,,,,,,,,,,,,,,,,,,,,,\nMajor Publications: Authors (Year) Title. Venue.,,,,,,,,,,,,,,,,,,,,,,,,,,,\n\"It was estimated that roughly, this table covers about 95% of known AS, 50% of known CT, and 30% of known B. [revise as needed]\",,,,,,,,,,,,,,,,,,,,,,,,,,,\n\"Partonomy (some are 17 levels deep, provide RDFS LABEL, Uberon ID)\",,,,,,,,,Typology (1 level CL for NCB),,,\"Gene Biomarkers (many, HGNC IDs)\",,,\"Protein Biomarkers (many, need HGNC IDs)\",,,,,,FTU (1 if FTU or blank),\"References for AS, CT, and B but also for AS-CT and CT-B Links\",,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2,AS/2/LABEL,AS/2/ID,AS/3,AS/3/LABEL,AS/3/ID,CT/1,CT/1/LABEL,CT/1/ID,BG/1,BG/1/LABEL,BG/1/ID,BP/1,BP/1/LABEL,BP/1/ID,BP/2,BP/2/LABEL,BP/2/ID,FTU,REF/1,REF/1/DOI,REF/1/NOTES,REF/2,REF/2/DOI,REF/2/NOTES\nAS/1,AS/1/LABEL,AS/1/ID,AS/2,AS/2/LABEL,AS/2/ID,AS/3,AS/3/LABEL,AS/3/ID,CT/1,CT/1/LABEL,CT/1/ID,BG/1,BG/1/LABEL,BG/1/ID,,,,,,,,,,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2,AS/2/LABEL,AS/2/ID,AS/3,AS/3/LABEL,AS/3/ID,CT/2,CT/2/LABEL,CT/2/ID,BG/2,BG/2/LABEL,BG/2/ID,,,,,,,,,,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2,AS/2/LABEL,AS/2/ID,AS/3.1,AS/3.1/LABEL,AS/3.1/ID,CT/3,CT/3/LABEL,CT/3/ID,BG/3,BG/3/LABEL,BG/3/ID,,,,,,,,,,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2.1,AS/2/.1LABEL,AS/2/ID,AS/3.1,AS/3.1/LABEL,AS/3.1/ID,CT/4,CT/4/LABEL,CT/4/ID,BG/3,BG/3/LABEL,BG/3/ID,,,,,,,,,,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2.1,AS/2.1/LABEL,AS/2/ID,AS/3.2,AS/3.2/LABEL,AS/3.2/ID,CT/2,CT/2/LABEL,CT/2/ID,BG/4,BG/4/LABEL,BG/4/ID,,,,,,,,,,,,,\nAS/1,AS/1/LABEL,AS/1/ID,AS/2.1,AS/2.1/LABEL,AS/2/ID,AS/3.2,AS/3.2/LABEL,AS/3.2/ID,CT/3,CT/3/LABEL,CT/3/ID,BG/5,BG/5/LABEL,BG/5/ID,,,,,,,,,,,,,`\n                    \n                \n\n\n        \n    \n\n    src/utils/warnings.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        WarningLabels\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  [WarningCode.InvalidCsvFile]: 'Invalid CSV file?',\n  [WarningCode.UnmappedMetadata]: 'Unmapped Metadata found?',\n  [WarningCode.InvalidHeader]: 'Invalid Header found?',\n  [WarningCode.MissingHeader]: 'Missing Header Value found?',\n  [WarningCode.InvalidCharacter]: 'Invalid Character found?',\n  [WarningCode.MissingCTorAnatomy]: 'Missing Uberon or CL IDs?',\n  [WarningCode.UnmappedData]: 'Unmapped Data found?',\n  [WarningCode.BadColumn]: 'Bad Column found?',\n  [WarningCode.NoIdInCT1]: 'CT/1 has CL ID?',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
