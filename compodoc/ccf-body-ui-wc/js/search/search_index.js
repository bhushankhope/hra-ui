var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/components/AppComponent.html",[0,0.801,1,0.801]],["body/components/AppComponent.html",[0,1.06,1,1.169,2,1.322,3,0.395,4,0.395,5,1.098,6,1.769,7,1.365,8,1.098,9,0.395,10,1.365,11,1.365,12,1.322,13,1.322,14,1.729,15,0.81,16,1.06,17,2.007,18,2.38,19,2.007,20,2.007,21,0.228,22,1.088,23,1.196,24,2.624,25,0.76,26,1.842,27,1.568,28,2.007,29,1.568,30,1.568,31,1.568,32,1.088,33,1.365,34,0.76,35,2.38,36,1.729,37,1.568,38,1.729,39,1.682,40,2.602,41,0.74,42,0.079,43,1.291,44,0.629,45,0.608,46,1.615,47,1.991,48,1.769,49,1.769,50,1.769,51,2.38,52,1.769,53,2.007,54,2.007,55,1.615,56,1.769,57,1.915,58,1.915,59,1.615,60,1.769,61,2.007,62,1.769,63,2.007,64,2.007,65,0.847,66,0.899,67,1.729,68,1.365,69,0.395,70,0.307,71,0.894,72,0.74,73,0.74,74,1.365,75,0.899,76,1.098,77,1.365,78,0.899,79,1.365,80,1.098,81,1.365,82,0.581,83,0.608,84,0.74,85,0.74,86,0.727,87,0.74,88,0.395,89,1.169,90,1.729,91,1.098,92,0.899,93,1.098,94,1.169,95,1.615,96,1.365,97,1.365,98,1.365,99,1.365,100,2.007,101,1.365,102,1.365,103,0.899,104,1.365,105,2.25,106,1.365,107,1.098,108,1.098,109,1.365,110,2.796,111,1.365,112,2.796,113,1.365,114,2.796,115,1.365,116,2.007,117,2.38,118,2.924,119,2.007,120,2.112,121,1.365,122,1.365,123,1.365,124,1.365,125,1.365,126,1.769,127,2.602,128,1.769,129,0.899,130,2.007,131,2.007,132,1.365,133,2.624,134,1.365,135,1.365,136,0.608,137,0.899,138,1.365,139,1.365,140,0.042,141,0.042]],["title/modules/AppModule.html",[142,0.976,143,1.185]],["body/modules/AppModule.html",[1,1.484,3,0.601,4,0.601,9,0.601,15,0.601,23,0.752,39,1.126,42,0.078,65,0.982,69,0.601,70,0.467,82,0.601,88,0.601,92,1.367,94,0.924,124,2.075,125,2.075,129,1.367,136,1.484,137,1.367,140,0.057,141,0.057,142,1.126,143,2.306,144,1.126,145,2.075,146,2.972,147,2.075,148,2.682,149,2.075,150,2.075,151,2.075,152,2.075,153,1.807,154,2.158,155,2.075,156,2.691,157,2.682,158,2.075,159,3.853,160,2.691,161,1.67,162,2.682,163,3.477,164,4.073,165,2.682,166,2.691,167,2.691,168,3.477,169,2.691,170,2.075,171,3.477,172,1.67,173,1.367,174,2.691,175,2.075,176,2.691,177,2.075,178,2.691,179,3.477,180,2.691,181,2.691,182,2.691]],["title/components/AppWebComponent.html",[0,0.801,136,0.801]],["body/components/AppWebComponent.html",[0,1.164,1,0.719,2,1.723,3,0.467,4,0.467,5,1.822,7,1.614,8,1.299,9,0.467,11,1.614,12,1.491,13,1.491,14,1.867,15,0.896,16,1.164,21,0.269,23,0.947,25,0.92,28,2.264,29,1.723,30,1.723,31,1.723,32,0.875,34,0.821,37,1.867,38,1.867,39,1.723,41,0.875,42,0.078,43,1.418,44,0.73,45,0.719,47,2.094,65,0.865,66,1.063,67,1.867,69,0.467,70,0.363,71,1.262,72,0.875,73,0.875,82,0.656,83,0.719,85,1.418,86,1.121,87,1.418,88,0.467,89,1.164,129,1.063,130,2.264,131,2.264,132,1.614,133,2.834,134,1.614,135,1.614,136,1.262,137,1.723,138,1.614,139,1.614,140,0.048,141,0.048,173,2.137,183,2.61,184,1.299,185,2.264,186,2.615,187,2.935,188,2.264,189,2.935,190,2.092,191,2.104,192,2.092,193,2.092,194,2.092,195,2.092,196,2.092,197,2.834,198,1.614,199,1.614,200,0.875,201,1.063,202,1.822,203,1.614,204,1.299,205,1.299,206,1.822,207,1.614,208,1.614,209,1.063,210,1.614,211,1.614,212,1.822,213,1.614,214,1.299,215,1.614,216,1.614,217,1.614,218,1.614,219,1.614,220,1.614,221,1.614,222,1.614,223,1.299,224,1.614,225,1.299]],["title/injectables/DataSourceService.html",[226,1.185,227,1.448]],["body/injectables/DataSourceService.html",[3,0.263,4,0.812,8,1.701,9,0.263,15,0.534,16,0.405,21,0.152,22,0.795,23,0.329,25,0.672,26,0.966,27,0.966,32,0.493,34,0.612,39,1.626,41,1.415,42,0.079,43,1.415,44,0.696,45,1.162,65,0.755,69,0.263,70,0.205,75,0.599,76,0.731,78,0.599,82,0.263,84,0.493,86,0.667,88,0.263,89,0.941,90,1.214,91,0.731,93,0.731,94,0.821,95,0.731,103,0.599,105,0.731,140,0.068,141,0.031,158,1.466,161,2.57,162,1.466,177,0.909,200,0.493,201,0.599,204,0.731,206,1.179,209,1.975,226,0.966,227,1.179,228,0.731,229,2.452,230,2.007,231,0.731,232,3.215,233,1.9,234,3.887,235,2.608,236,1.842,237,1.9,238,1.9,239,2.741,240,1.9,241,2.741,242,1.9,243,2.741,244,1.9,245,1.9,246,1.9,247,1.178,248,1.9,249,1.9,250,1.9,251,1.9,252,3.535,253,1.178,254,1.9,255,2.741,256,3.215,257,3.731,258,3.731,259,2.809,260,4.101,261,1.9,262,1.178,263,2.741,264,2.741,265,2.741,266,1.178,267,2.741,268,1.9,269,1.178,270,2.741,271,1.178,272,1.9,273,1.178,274,0.909,275,1.178,276,1.9,277,1.9,278,1.178,279,1.466,280,1.9,281,1.9,282,1.178,283,1.9,284,1.466,285,1.178,286,1.9,287,2.479,288,2.608,289,1.178,290,1.9,291,1.9,292,1.9,293,1.178,294,1.842,295,1.9,296,1.178,297,0.909,298,0.731,299,1.178,300,1.466,301,1.178,302,1.9,303,1.9,304,1.9,305,1.178,306,0.909,307,1.178,308,0.909,309,0.909,310,0.909,311,1.466,312,0.909,313,0.909,314,0.909,315,1.178,316,1.178,317,1.178,318,0.909,319,0.909,320,1.178,321,1.178,322,1.178,323,2.389,324,1.178,325,1.178,326,1.178,327,1.178,328,1.178,329,0.909,330,1.178,331,1.178,332,1.178,333,3.007,334,3.634,335,3.634,336,1.178,337,3.634,338,1.178,339,1.178,340,1.178,341,1.178,342,1.178,343,1.178,344,1.178,345,1.178,346,1.178,347,1.9,348,0.909,349,1.178,350,1.9,351,1.9,352,1.178,353,0.909,354,1.466,355,1.466,356,1.466,357,1.466,358,1.9,359,1.178,360,1.178,361,1.178]],["title/injectables/FilteredSceneService.html",[36,1.185,226,1.185]],["body/injectables/FilteredSceneService.html",[3,0.335,4,0.699,9,0.335,15,0.513,16,0.515,21,0.193,22,0.96,23,1.262,25,0.754,26,2.167,27,1.419,32,0.96,33,1.155,34,0.699,36,1.167,39,1.64,41,0.627,42,0.079,43,0.627,44,0.26,45,0.515,46,1.425,57,2.373,58,2.373,59,1.425,65,0.922,69,0.335,70,0.26,71,0.789,72,0.627,73,0.627,75,0.761,78,0.761,80,2.483,82,0.335,84,0.627,85,1.168,86,0.419,87,1.168,88,0.335,89,1.075,90,1.883,94,1.374,107,0.93,108,1.425,140,0.037,141,0.037,154,0.93,175,1.155,209,1.992,226,1.167,227,1.942,228,0.93,230,0.761,252,1.771,259,1.425,274,1.771,279,1.155,284,1.155,287,1.155,297,2.746,298,1.733,306,1.155,308,1.155,309,1.155,314,1.155,318,1.771,329,2.746,348,1.155,354,1.771,355,1.771,356,1.771,357,1.771,362,4.001,363,1.498,364,2.792,365,2.792,366,4.226,367,1.498,368,1.498,369,2.296,370,3.13,371,2.296,372,2.792,373,1.498,374,2.296,375,2.296,376,2.296,377,2.296,378,2.296,379,2.153,380,2.296,381,1.498,382,2.296,383,2.296,384,2.296,385,3.13,386,1.498,387,2.296,388,2.296,389,1.498,390,2.296,391,1.498,392,2.296,393,2.296,394,2.296,395,2.296,396,2.296,397,2.296,398,1.498,399,2.296,400,1.498,401,1.155,402,1.498,403,1.498,404,1.155,405,1.155,406,1.155,407,1.498,408,1.155,409,1.498,410,1.155,411,1.498,412,1.498,413,1.498,414,1.498,415,1.498,416,1.498,417,2.296,418,2.296,419,2.296,420,2.296,421,2.296,422,1.498,423,1.498,424,1.498,425,1.498,426,1.498,427,1.498,428,1.498,429,1.498,430,1.498,431,1.498,432,1.498,433,1.498,434,2.792,435,1.498,436,3.13,437,1.498,438,1.498,439,1.498,440,1.498,441,1.498,442,1.498,443,1.498,444,2.296,445,1.498,446,1.498,447,1.498,448,1.498,449,1.498,450,1.498,451,1.498,452,1.498,453,1.498,454,1.498,455,2.296,456,1.498,457,1.498,458,1.498,459,1.498,460,1.498]],["title/interfaces/GlobalConfig.html",[83,0.801,84,0.976]],["body/interfaces/GlobalConfig.html",[0,1.008,1,0.719,3,0.467,4,0.467,9,0.467,10,1.614,12,1.063,13,1.063,14,1.063,15,0.656,16,0.719,17,1.614,18,1.614,19,1.614,20,1.614,21,0.269,22,1.228,23,1.175,24,2.264,25,0.865,26,1.723,27,1.063,29,1.063,30,1.063,31,1.063,32,0.875,34,0.656,35,1.614,36,1.491,37,1.063,38,1.491,42,0.079,44,0.589,45,1.378,46,1.299,47,1.867,51,2.264,53,1.614,54,1.614,55,1.299,59,1.299,61,1.614,63,1.614,64,1.614,65,0.896,66,1.063,67,1.867,68,1.614,69,0.467,70,0.363,71,1.262,72,0.875,73,0.875,74,1.614,75,1.063,76,1.299,77,1.614,78,1.063,79,1.614,80,1.299,81,1.614,82,0.656,83,0.719,84,1.228,85,1.537,86,1.121,87,1.537,88,0.467,89,1.262,90,1.867,91,1.299,92,1.063,93,1.299,94,1.262,95,1.822,96,1.614,97,1.614,98,1.614,99,1.614,100,2.264,101,1.614,102,1.614,103,1.063,104,1.614,105,2.402,106,1.614,107,1.299,108,1.299,109,1.614,110,2.985,111,1.614,112,2.985,113,1.614,114,2.985,115,1.614,116,2.264,117,2.615,118,3.095,119,2.264,120,2.281,121,1.614,122,1.614,123,1.614,140,0.048,141,0.048,461,1.299]],["title/interfaces/InputDataFormat.html",[83,0.801,191,1.448]],["body/interfaces/InputDataFormat.html",[0,1.143,2,1.278,3,0.562,4,0.562,5,1.561,9,0.562,12,1.278,13,1.278,14,1.278,15,0.833,16,0.864,21,0.324,22,1.392,23,1.042,25,0.922,29,1.278,30,1.278,31,1.278,34,0.743,37,1.691,38,1.691,42,0.078,44,0.647,47,2.016,65,0.922,66,1.278,67,2.016,69,0.562,70,0.437,71,1.456,72,1.052,73,1.052,82,0.743,83,0.864,85,1.052,86,1.185,87,1.052,88,0.562,89,1.281,136,0.864,137,1.278,140,0.054,141,0.054,173,1.278,183,1.561,184,1.561,185,1.94,186,2.566,188,1.94,191,2.314,197,3.06,198,1.94,199,1.94,200,1.052,201,1.278,202,2.561,203,3.06,204,1.561,205,1.561,206,2.065,207,1.94,208,1.94,209,1.278,210,1.94,211,1.94,212,2.065,213,1.94,214,1.561,215,1.94,216,1.94,217,1.94,218,1.94,219,1.94,220,1.94,221,1.94,222,1.94,223,1.561,224,1.94,225,1.561,461,1.561]],["title/modules/StoreModule.html",[142,0.976,153,0.976]],["body/modules/StoreModule.html",[3,0.659,4,0.659,9,0.659,15,0.659,25,0.659,34,0.824,42,0.078,65,0.988,69,0.659,70,0.64,82,0.824,88,0.659,94,1.014,140,0.06,141,0.06,142,1.235,144,1.235,153,1.543,157,2.277,165,2.845,172,1.832,200,1.235,201,1.5,353,2.845,401,2.277,462,2.277,463,2.952,464,2.952,465,2.952,466,2.952,467,4.023,468,2.952,469,2.952,470,2.277,471,2.277,472,2.277,473,2.952,474,2.952,475,2.952,476,2.952,477,2.952,478,2.952,479,2.952,480,2.952,481,2.952,482,2.952,483,2.952,484,2.952,485,2.952,486,2.952,487,2.952,488,2.952,489,2.952,490,2.952]],["title/miscellaneous/functions.html",[491,0.672,492,2.159]],["body/miscellaneous/functions.html",[21,0.357,25,0.619,41,1.821,42,0.076,43,1.821,44,0.739,45,1.495,71,0.952,140,0.058,141,0.058,161,2.702,173,1.801,183,1.72,184,2.199,202,2.702,205,1.72,225,2.199,229,1.72,230,1.408,231,2.199,259,2.556,288,3.176,298,2.702,310,2.137,311,2.733,312,2.137,313,2.137,408,2.733,410,2.733,491,0.952,492,2.137,493,3.543,494,2.137,495,3.543,496,2.733,497,3.543,498,3.543,499,3.907,500,2.771,501,2.137,502,2.771,503,2.781,504,3.543,505,2.771,506,3.543,507,2.771,508,2.771,509,2.771]],["title/index.html",[21,0.3,510,1.799]],["body/index.html",[1,1.453,2,1.682,42,0.073,92,1.682,120,2.721,129,1.682,136,1.453,140,0.064,141,0.064,142,1.385,143,2.354,144,1.385,145,2.554,146,2.554,147,2.554,148,2.554,149,2.554,150,2.554,151,2.554,152,2.554,153,1.77,154,2.455,155,2.554,228,2.055,461,2.055,510,2.554]],["title/modules.html",[144,1.323]],["body/modules.html",[42,0.068,140,0.068,141,0.068,143,1.836,144,1.511,153,1.511,170,2.787,511,3.613,512,3.613,513,4.164,514,3.613,515,3.613]],["title/miscellaneous/typealiases.html",[491,0.672,516,2.8]],["body/miscellaneous/typealiases.html",[21,0.45,42,0.07,44,0.607,140,0.067,141,0.067,229,2.17,230,1.777,231,2.536,235,3.152,294,2.697,300,2.697,491,1.201,494,2.697,496,2.697,501,2.697,503,2.536,517,3.497,518,4.462]],["title/miscellaneous/variables.html",[491,0.672,519,2.159]],["body/miscellaneous/variables.html",[21,0.287,34,0.498,42,0.078,44,0.741,55,2.457,57,2.65,58,2.65,70,0.387,86,0.979,103,1.132,140,0.05,141,0.05,172,1.383,200,1.813,212,1.383,214,1.383,223,2.175,236,2.703,319,2.703,379,2.365,404,2.365,405,2.365,406,2.365,462,1.718,470,1.718,471,1.718,472,2.365,491,0.765,503,1.383,519,1.718,520,2.228,521,2.228,522,2.228,523,3.776,524,2.228,525,2.228,526,3.959,527,3.505,528,3.505,529,4.092,530,3.505,531,3.505,532,3.505,533,3.505,534,3.505,535,3.505,536,3.505,537,3.505,538,4.092,539,3.505,540,3.505,541,3.505,542,3.505,543,3.505,544,3.505,545,3.505,546,3.505,547,3.505,548,3.505,549,3.505,550,3.505,551,3.505,552,2.228,553,2.228,554,3.776,555,2.228,556,2.228,557,3.505,558,2.228,559,2.228,560,2.228,561,2.228,562,2.228,563,2.228,564,2.228,565,2.228,566,2.228,567,2.228,568,2.228,569,2.228]]],"invertedIndex":[["",{"_index":42,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":105,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{}}}],["0.4",{"_index":122,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["1",{"_index":108,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["1.25",{"_index":117,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["10",{"_index":218,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["100",{"_index":127,"title":{},"body":{"components/AppComponent.html":{}}}],["1000",{"_index":118,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["1000}s",{"_index":360,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["173",{"_index":565,"title":{},"body":{"miscellaneous/variables.html":{}}}],["1wrjhn9fm6",{"_index":555,"title":{},"body":{"miscellaneous/variables.html":{}}}],["2",{"_index":120,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{},"index.html":{}}}],["2.2",{"_index":121,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["200",{"_index":98,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["229.5",{"_index":568,"title":{},"body":{"miscellaneous/variables.html":{}}}],["255",{"_index":566,"title":{},"body":{"miscellaneous/variables.html":{}}}],["47",{"_index":567,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_",{"_index":396,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["acceptableviewerdomains",{"_index":528,"title":{},"body":{"miscellaneous/variables.html":{}}}],["access",{"_index":421,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["actual_component",{"_index":139,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["aggregate",{"_index":254,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["aggregateresult",{"_index":293,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["aliases",{"_index":517,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":401,"title":{},"body":{"injectables/FilteredSceneService.html":{},"modules/StoreModule.html":{}}}],["angular/core",{"_index":69,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["angular/elements",{"_index":167,"title":{},"body":{"modules/AppModule.html":{}}}],["angular/platform",{"_index":169,"title":{},"body":{"modules/AppModule.html":{}}}],["api",{"_index":543,"title":{},"body":{"miscellaneous/variables.html":{}}}],["api/v1/ccf.owl.n3store.json",{"_index":533,"title":{},"body":{"miscellaneous/variables.html":{}}}],["app",{"_index":172,"title":{},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["app.component",{"_index":175,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilteredSceneService.html":{}}}],["app.component.html",{"_index":20,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["app.component.scss",{"_index":18,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["appcomponent",{"_index":1,"title":{"components/AppComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"index.html":{}}}],["appelement",{"_index":179,"title":{},"body":{"modules/AppModule.html":{}}}],["applied",{"_index":258,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["appmodule",{"_index":143,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"index.html":{},"modules.html":{}}}],["appwebcomponent",{"_index":136,"title":{"components/AppWebComponent.html":{}},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"index.html":{}}}],["async",{"_index":91,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{}}}],["available",{"_index":515,"title":{},"body":{"modules.html":{}}}],["await",{"_index":95,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{}}}],["b3dt7xpmrt",{"_index":561,"title":{},"body":{"miscellaneous/variables.html":{}}}],["backend",{"_index":233,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["basewebcomponent",{"_index":186,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["being",{"_index":476,"title":{},"body":{"modules/StoreModule.html":{}}}],["block",{"_index":284,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["block?.placement.target",{"_index":422,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["body",{"_index":124,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["bodyui",{"_index":24,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyui.bounds",{"_index":116,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyui.rotation",{"_index":104,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyui.rotationx",{"_index":106,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyui.scene?.find((node",{"_index":101,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyui.target",{"_index":119,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyuicomponent",{"_index":51,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["bodyuimodule",{"_index":171,"title":{},"body":{"modules/AppModule.html":{}}}],["boolean",{"_index":312,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":147,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["browse",{"_index":513,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":170,"title":{},"body":{"modules/AppModule.html":{},"modules.html":{}}}],["browsermodule",{"_index":168,"title":{},"body":{"modules/AppModule.html":{}}}],["ccf",{"_index":15,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["ccfcontexturl",{"_index":534,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ccfdatabase",{"_index":294,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/typealiases.html":{}}}],["ccfdatabaseoptions",{"_index":288,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["ccfowlurl",{"_index":531,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cdr",{"_index":37,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["cell",{"_index":263,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["changedetection",{"_index":12,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["changedetectionstrategy",{"_index":66,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["changedetectionstrategy.onpush",{"_index":13,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["changedetectorref",{"_index":38,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["choosescene(data",{"_index":413,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["class",{"_index":88,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["cluster_appmodule",{"_index":150,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_declarations",{"_index":152,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["cluster_appmodule_imports",{"_index":151,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["color",{"_index":503,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["combinelatest",{"_index":403,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["combinelatest([this.data",{"_index":392,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["combinelatest([this.organs",{"_index":369,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["combinelatest([this.scene",{"_index":374,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["comlink",{"_index":301,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["compareconfig",{"_index":493,"title":{},"body":{"miscellaneous/functions.html":{}}}],["compareconfig(previous",{"_index":310,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["compatibility",{"_index":484,"title":{},"body":{"modules/StoreModule.html":{}}}],["component",{"_index":0,"title":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["component.component",{"_index":174,"title":{},"body":{"modules/AppModule.html":{}}}],["component.component.ts",{"_index":184,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["component.component.ts:32",{"_index":192,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component.component.ts:33",{"_index":193,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component.component.ts:34",{"_index":194,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component.component.ts:36",{"_index":195,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component.component.ts:37",{"_index":196,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component.component.ts:38",{"_index":189,"title":{},"body":{"components/AppWebComponent.html":{}}}],["component_template",{"_index":134,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["components",{"_index":2,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"index.html":{}}}],["config",{"_index":323,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["configstate",{"_index":46,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["configstore",{"_index":190,"title":{},"body":{"components/AppWebComponent.html":{}}}],["configuration",{"_index":557,"title":{},"body":{"miscellaneous/variables.html":{}}}],["connectdatasource(source",{"_index":349,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["consider",{"_index":482,"title":{},"body":{"modules/StoreModule.html":{}}}],["console",{"_index":358,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["console.info(`loaded",{"_index":359,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["console.log(source",{"_index":361,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["const",{"_index":94,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"modules/StoreModule.html":{}}}],["constants",{"_index":407,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["constructor",{"_index":32,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["constructor(configstate",{"_index":33,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{}}}],["constructor(configstore",{"_index":188,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["constructor(globalconfig",{"_index":246,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["constructor(private",{"_index":178,"title":{},"body":{"modules/AppModule.html":{}}}],["context.jsonld",{"_index":537,"title":{},"body":{"miscellaneous/variables.html":{}}}],["core/services/filtered",{"_index":79,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["core/store/store.module",{"_index":176,"title":{},"body":{"modules/AppModule.html":{}}}],["counts",{"_index":265,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["createcustomelement",{"_index":166,"title":{},"body":{"modules/AppModule.html":{}}}],["createcustomelement(appwebcomponent",{"_index":180,"title":{},"body":{"modules/AppModule.html":{}}}],["createdatasource",{"_index":346,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["creates",{"_index":248,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["current",{"_index":311,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["currently",{"_index":257,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["customelements.define('ccf",{"_index":182,"title":{},"body":{"modules/AppModule.html":{}}}],["d.rui_location",{"_index":215,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["data",{"_index":25,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/functions.html":{}}}],["data?.map((obj",{"_index":415,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["database",{"_index":287,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["datasource",{"_index":235,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/typealiases.html":{}}}],["datasources",{"_index":319,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/variables.html":{}}}],["datasourceservice",{"_index":227,"title":{"injectables/DataSourceService.html":{}},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["date().gettime",{"_index":351,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getaggregateresults(filter",{"_index":338,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getcelltypetermoccurences(filter",{"_index":340,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getcelltypetreemodel",{"_index":342,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getontologytermoccurences(filter",{"_index":339,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getontologytreemodel",{"_index":341,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getreferenceorgans",{"_index":343,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getreferenceorganscene(organ",{"_index":345,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.getscene(filter",{"_index":344,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["db.gettissueblockresults(filter",{"_index":336,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["dboptions",{"_index":236,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/variables.html":{}}}],["declarations",{"_index":146,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["decorators",{"_index":52,"title":{},"body":{"components/AppComponent.html":{}}}],["default",{"_index":57,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["default_ccf_db_options",{"_index":295,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["defined",{"_index":39,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["dependencies",{"_index":145,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["description",{"_index":232,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["developmentmode",{"_index":481,"title":{},"body":{"modules/StoreModule.html":{}}}],["directive",{"_index":132,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["directives",{"_index":138,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["disable",{"_index":355,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["disabled",{"_index":490,"title":{},"body":{"modules/StoreModule.html":{}}}],["disabledbworker",{"_index":527,"title":{},"body":{"miscellaneous/variables.html":{}}}],["display",{"_index":280,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["distinctuntilchanged",{"_index":305,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["distinctuntilchanged(compareconfig",{"_index":324,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["dobootstrap",{"_index":163,"title":{},"body":{"modules/AppModule.html":{}}}],["dom",{"_index":7,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["element",{"_index":131,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["emitting",{"_index":260,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["entire",{"_index":471,"title":{},"body":{"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["entity",{"_index":504,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entity.owl#has_spatial_entity",{"_index":214,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/variables.html":{}}}],["entity.owl#sample",{"_index":213,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["environment",{"_index":200,"title":{},"body":{"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["environment.dboptions",{"_index":220,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["environment.production",{"_index":353,"title":{},"body":{"injectables/DataSourceService.html":{},"modules/StoreModule.html":{}}}],["environments/environment",{"_index":201,"title":{},"body":{"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["ernvz1q4ke",{"_index":559,"title":{},"body":{"miscellaneous/variables.html":{}}}],["eslint",{"_index":354,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["eslint/no",{"_index":418,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["eventemitter",{"_index":47,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["executionstrategy",{"_index":485,"title":{},"body":{"modules/StoreModule.html":{}}}],["export",{"_index":82,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["exports",{"_index":149,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["extends",{"_index":185,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["false",{"_index":103,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{},"miscellaneous/variables.html":{}}}],["female",{"_index":457,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["female_skin_url",{"_index":404,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["file",{"_index":9,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["filter",{"_index":252,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["filteredorgans",{"_index":364,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["filteredscene",{"_index":365,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["filteredsceneservice",{"_index":36,"title":{"injectables/FilteredSceneService.html":{}},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["filterscenenodes",{"_index":442,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["function",{"_index":204,"title":{},"body":{"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/InputDataFormat.html":{}}}],["functions",{"_index":492,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":554,"title":{},"body":{"miscellaneous/variables.html":{}}}],["genericglobalconfig",{"_index":198,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["getaggregateresults",{"_index":237,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getaggregateresults(filter",{"_index":251,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getcelltypetermoccurences",{"_index":238,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getcelltypetermoccurences(filter",{"_index":261,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getcelltypetreemodel",{"_index":239,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getneededreferenceorgans(referenceorgans",{"_index":451,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["getneededskins(organs",{"_index":454,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["getontologytermoccurences",{"_index":240,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getontologytermoccurences(filter",{"_index":268,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getontologytreemodel",{"_index":241,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getoption('highlightid",{"_index":383,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["getorganscene",{"_index":242,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getorganscene(organ",{"_index":272,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getreferenceorgans",{"_index":243,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getscene",{"_index":244,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["getscene(filter",{"_index":277,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["gettissueblockresults",{"_index":245,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["gettissueblockresults(filter",{"_index":281,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["globalconfig",{"_index":84,"title":{"interfaces/GlobalConfig.html":{}},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["globalconfig.getoption('data').pipe",{"_index":317,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["globalconfigstate",{"_index":34,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["globalthis['dboptions",{"_index":221,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["googleanalyticstoken",{"_index":551,"title":{},"body":{"miscellaneous/variables.html":{}}}],["graph",{"_index":514,"title":{},"body":{"modules.html":{}}}],["happy",{"_index":475,"title":{},"body":{"modules/StoreModule.html":{}}}],["haszoomingnode",{"_index":100,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["height",{"_index":126,"title":{},"body":{"components/AppComponent.html":{}}}],["highlight.operator",{"_index":409,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["highlight_yellow",{"_index":379,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["highlightid",{"_index":85,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["highlightifmatching",{"_index":495,"title":{},"body":{"miscellaneous/functions.html":{}}}],["highlightifmatching(entity",{"_index":502,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hightlight",{"_index":408,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["hightlight(id",{"_index":505,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hightlight(this.highlightid",{"_index":378,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["html",{"_index":130,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["http://purl.org/ccf/1.5/entity/${d.id",{"_index":211,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["http://purl.org/ccf/1.5/entity/${id",{"_index":385,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["http://purl.org/ccf/latest/ccf",{"_index":212,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/variables.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhfskin",{"_index":564,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://purl.org/ccf/latest/ccf.owl#vhmskin",{"_index":569,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://apps.humanatlas.io/hra",{"_index":532,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://assets.hubmapconsortium.org",{"_index":548,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf",{"_index":538,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://hubmapconsortium.github.io/ccf",{"_index":535,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://portal.hubmapconsortium.org",{"_index":529,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://portal.test.hubmapconsortium.org",{"_index":530,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://search.api.hubmapconsortium.org/v3/entities/search",{"_index":546,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://www.ngxs.io/advanced/options",{"_index":486,"title":{},"body":{"modules/StoreModule.html":{}}}],["hubmapassetsurl",{"_index":547,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hubmapdataservice",{"_index":541,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hubmapdataurl",{"_index":545,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hubmapportalurl",{"_index":544,"title":{},"body":{"miscellaneous/variables.html":{}}}],["hubmaptoken",{"_index":549,"title":{},"body":{"miscellaneous/variables.html":{}}}],["id",{"_index":202,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["implements",{"_index":177,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataSourceService.html":{}}}],["import",{"_index":65,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["imports",{"_index":157,"title":{},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{}}}],["index",{"_index":21,"title":{"index.html":{}},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["initialconfig",{"_index":219,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["initialdelay",{"_index":217,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["initialization",{"_index":290,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["injectable",{"_index":226,"title":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["injectables",{"_index":228,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"index.html":{}}}],["injector",{"_index":164,"title":{},"body":{"modules/AppModule.html":{}}}],["input",{"_index":197,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["inputdataformat",{"_index":191,"title":{"interfaces/InputDataFormat.html":{}},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["inputdataformat[]).map((d",{"_index":210,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["inputs",{"_index":187,"title":{},"body":{"components/AppWebComponent.html":{}}}],["instance",{"_index":249,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["interface",{"_index":83,"title":{"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["interfaces",{"_index":461,"title":{},"body":{"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"index.html":{}}}],["item",{"_index":438,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["item[spatial_entity_url].placement.target",{"_index":439,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["j9hwv9qpj4",{"_index":556,"title":{},"body":{"miscellaneous/variables.html":{}}}],["json.parse(data",{"_index":208,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["jsonld/jsonld",{"_index":72,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["jsonldobj",{"_index":71,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["last",{"_index":488,"title":{},"body":{"modules/StoreModule.html":{}}}],["lastvaluefrom",{"_index":74,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["lastvaluefrom(this.organs$.pipe(take(1",{"_index":99,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["legend",{"_index":129,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"index.html":{}}}],["line",{"_index":357,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["localstorage.getitem('hubmap_token",{"_index":550,"title":{},"body":{"miscellaneous/variables.html":{}}}],["logger",{"_index":487,"title":{},"body":{"modules/StoreModule.html":{}}}],["male",{"_index":459,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["male_skin_url",{"_index":405,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["map",{"_index":306,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["map(([nodes",{"_index":376,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["map(([organs",{"_index":371,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["map((config",{"_index":322,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["map((data",{"_index":318,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["map(selectorgan",{"_index":440,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["matching",{"_index":141,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["member",{"_index":420,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["metadata",{"_index":11,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["methods",{"_index":158,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataSourceService.html":{}}}],["miscellaneous",{"_index":491,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["model",{"_index":267,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["module",{"_index":142,"title":{"modules/AppModule.html":{},"modules/StoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{},"index.html":{}}}],["modules",{"_index":144,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{},"index.html":{},"modules.html":{}}}],["monotypeoperatorfunction",{"_index":506,"title":{},"body":{"miscellaneous/functions.html":{}}}],["name",{"_index":43,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["neededorgans",{"_index":446,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["neededorgans.has(node.reference_organ",{"_index":450,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["neededreferenceorgans",{"_index":443,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["neededskins",{"_index":444,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["never",{"_index":222,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["new",{"_index":89,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["next",{"_index":356,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["ngdobootstrap",{"_index":159,"title":{},"body":{"modules/AppModule.html":{}}}],["ngmodule",{"_index":165,"title":{},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{}}}],["ngondestroy",{"_index":331,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["ngxs/logger",{"_index":466,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxs/store",{"_index":469,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsdatapluginmodule",{"_index":463,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsdatapluginmodule.forroot",{"_index":479,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsloggerpluginmodule",{"_index":465,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsloggerpluginmodule.forroot",{"_index":489,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsmodule",{"_index":468,"title":{},"body":{"modules/StoreModule.html":{}}}],["ngxsmodule.forroot(root_states",{"_index":480,"title":{},"body":{"modules/StoreModule.html":{}}}],["node.reference_organ",{"_index":449,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["node.zoomtoonload",{"_index":102,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["nodes",{"_index":279,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["nodes.filter((node",{"_index":448,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["number",{"_index":518,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["obj[spatial_entity_url",{"_index":416,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["object",{"_index":223,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/variables.html":{}}}],["object.keys(config).length",{"_index":321,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["observable",{"_index":259,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["onclick",{"_index":29,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["ondestroy",{"_index":292,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["onmouseenter",{"_index":30,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["onmouseleave",{"_index":31,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["ontology",{"_index":270,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["ontology/ccf",{"_index":536,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ontologyterms",{"_index":431,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["ontologytreemodel",{"_index":296,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["optional",{"_index":45,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":291,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["organ",{"_index":274,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["organ.reference_organ",{"_index":432,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organ.sex",{"_index":434,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organs",{"_index":26,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["organs.find((temporgan",{"_index":427,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organs.foreach((organ",{"_index":456,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organs.has(organ.reference_organ",{"_index":453,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organs.length",{"_index":107,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["organs[0",{"_index":115,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["organurls",{"_index":414,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["organurls[0",{"_index":429,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["out",{"_index":155,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["output",{"_index":67,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["outputs",{"_index":28,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["overview",{"_index":510,"title":{"index.html":{}},"body":{"index.html":{}}}],["param",{"_index":333,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["parameters",{"_index":41,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["parse",{"_index":224,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["pipe(map((id",{"_index":384,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["placed",{"_index":477,"title":{},"body":{"modules/StoreModule.html":{}}}],["plugin",{"_index":467,"title":{},"body":{"modules/StoreModule.html":{}}}],["portal.hubmapconsortium.org",{"_index":553,"title":{},"body":{"miscellaneous/variables.html":{}}}],["previous",{"_index":313,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["private",{"_index":90,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["production",{"_index":526,"title":{},"body":{"miscellaneous/variables.html":{}}}],["promise",{"_index":93,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{}}}],["promise((resolve",{"_index":96,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["properties",{"_index":22,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["providedin",{"_index":314,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["providers",{"_index":148,"title":{},"body":{"modules/AppModule.html":{},"index.html":{}}}],["queries",{"_index":234,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["reason",{"_index":474,"title":{},"body":{"modules/StoreModule.html":{}}}],["reference",{"_index":276,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["referenceorgans",{"_index":366,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["referenceorgans.filter((organ",{"_index":452,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["remote",{"_index":300,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/typealiases.html":{}}}],["reset",{"_index":92,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"interfaces/GlobalConfig.html":{},"index.html":{}}}],["resource",{"_index":327,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["results",{"_index":140,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":209,"title":{},"body":{"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/InputDataFormat.html":{}}}],["returns",{"_index":161,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{}}}],["root",{"_index":16,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["root'},{'name",{"_index":135,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["root_states",{"_index":472,"title":{},"body":{"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["ru/common/typings",{"_index":402,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["ru/ngxs",{"_index":464,"title":{},"body":{"modules/StoreModule.html":{}}}],["rui_location",{"_index":203,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["rxfilter",{"_index":307,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["rxfilter((config",{"_index":320,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["rxjs",{"_index":75,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["rxjs/operators",{"_index":78,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["scene",{"_index":27,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["scene.service",{"_index":81,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["scene.service.ts",{"_index":363,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:18",{"_index":368,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:19",{"_index":400,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:20",{"_index":386,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:24",{"_index":391,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:26",{"_index":398,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:30",{"_index":389,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:35",{"_index":373,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:40",{"_index":381,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene.service.ts:45",{"_index":367,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["scene/filtered",{"_index":80,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["scenesource",{"_index":35,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["search",{"_index":542,"title":{},"body":{"miscellaneous/variables.html":{}}}],["selector",{"_index":14,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["selectorgan",{"_index":437,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["selectorgans(data",{"_index":435,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["service",{"_index":250,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["set",{"_index":436,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["set([...organs",{"_index":447,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["set(organs",{"_index":441,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["set(organurls",{"_index":424,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["settimeout(resolve",{"_index":97,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["setting",{"_index":483,"title":{},"body":{"modules/StoreModule.html":{}}}],["setzoomtoifmatching",{"_index":497,"title":{},"body":{"miscellaneous/functions.html":{}}}],["setzoomtoifmatching(entity",{"_index":508,"title":{},"body":{"miscellaneous/functions.html":{}}}],["sex",{"_index":433,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["shared",{"_index":70,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["shared/web",{"_index":199,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["sharereplay",{"_index":308,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["sharereplay(1",{"_index":329,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["skins",{"_index":455,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["skins.add(female_skin_url",{"_index":458,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["skins.add(male_skin_url",{"_index":460,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["source",{"_index":4,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"modules/StoreModule.html":{}}}],["source.connect(config",{"_index":352,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service",{"_index":412,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["source.service.ts",{"_index":231,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["source.service.ts:110",{"_index":262,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:122",{"_index":271,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:134",{"_index":266,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:146",{"_index":275,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:159",{"_index":278,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:166",{"_index":273,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:34",{"_index":285,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:36",{"_index":289,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:38",{"_index":247,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:71",{"_index":282,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:84",{"_index":253,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source.service.ts:97",{"_index":269,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["source/data",{"_index":230,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["spatial_entity_url",{"_index":406,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["spatialentity",{"_index":297,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["spatialscenenode",{"_index":298,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["spec",{"_index":73,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}],["src/.../app",{"_index":500,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../constants.ts",{"_index":523,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../data",{"_index":494,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../environment.prod.ts",{"_index":520,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.staging.ts",{"_index":521,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../environment.ts",{"_index":522,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../highlight.operator.ts",{"_index":496,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../store.module.ts",{"_index":524,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../zoom",{"_index":498,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/app/app",{"_index":183,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["src/app/app.component.ts",{"_index":10,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["src/app/app.component.ts:22",{"_index":56,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:24",{"_index":49,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:25",{"_index":50,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:26",{"_index":48,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:28",{"_index":60,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:29",{"_index":62,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.component.ts:30",{"_index":40,"title":{},"body":{"components/AppComponent.html":{}}}],["src/app/app.module.ts",{"_index":156,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/app.module.ts:18",{"_index":160,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app/core/constants.ts",{"_index":563,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app/core/highlight.operator.ts",{"_index":501,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/services/data",{"_index":229,"title":{},"body":{"injectables/DataSourceService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/app/core/services/filtered",{"_index":362,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["src/app/core/store/store.module.ts",{"_index":462,"title":{},"body":{"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["src/app/core/zoom",{"_index":507,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/environments/environment.prod.ts",{"_index":525,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/environments/environment.staging.ts",{"_index":558,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/environments/environment.ts",{"_index":560,"title":{},"body":{"miscellaneous/variables.html":{}}}],["start",{"_index":350,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["states",{"_index":470,"title":{},"body":{"modules/StoreModule.html":{},"miscellaneous/variables.html":{}}}],["static",{"_index":54,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["store",{"_index":478,"title":{},"body":{"modules/StoreModule.html":{}}}],["storemodule",{"_index":153,"title":{"modules/StoreModule.html":{}},"body":{"modules/AppModule.html":{},"modules/StoreModule.html":{},"index.html":{},"modules.html":{}}}],["strange",{"_index":473,"title":{},"body":{"modules/StoreModule.html":{}}}],["string",{"_index":86,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/variables.html":{}}}],["styles",{"_index":6,"title":{},"body":{"components/AppComponent.html":{}}}],["styleurls",{"_index":17,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["subscription",{"_index":302,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["subscriptions",{"_index":315,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["super(configstore",{"_index":216,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["support",{"_index":511,"title":{},"body":{"modules.html":{}}}],["svg",{"_index":512,"title":{},"body":{"modules.html":{}}}],["switchmap",{"_index":309,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["switchmap(([data",{"_index":395,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["switchmap((config",{"_index":325,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["switchmap((db",{"_index":335,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["take",{"_index":76,"title":{},"body":{"components/AppComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/GlobalConfig.html":{}}}],["take(1",{"_index":337,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["tap",{"_index":77,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["template",{"_index":5,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["templateurl",{"_index":19,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["temporgan['@id",{"_index":428,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["term",{"_index":264,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["testing",{"_index":562,"title":{},"body":{"miscellaneous/variables.html":{}}}],["this.cdr.detectchanges",{"_index":123,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["this.choosescene(data",{"_index":397,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.configstate",{"_index":382,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.configstate.getoption('data",{"_index":59,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{}}}],["this.configstate.getoption('data').pipe",{"_index":387,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.configstate.getoption('zoomtoid').pipe(map((id",{"_index":399,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.connectdatasource((resource",{"_index":328,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.createdatasource",{"_index":326,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.datasource",{"_index":316,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.datasource.pipe",{"_index":334,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.filterscenenodes(nodes",{"_index":377,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.getneededreferenceorgans(referenceorgans",{"_index":372,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.getneededskins(neededreferenceorgans",{"_index":445,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.injector",{"_index":181,"title":{},"body":{"modules/AppModule.html":{}}}],["this.organs",{"_index":375,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.referenceorgans",{"_index":393,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.referenceorgans$]).pipe",{"_index":370,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.reset",{"_index":64,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["this.scenesource.filteredorgans",{"_index":61,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["this.scenesource.filteredscene$.pipe(tap((_",{"_index":63,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["this.selectorgans(data",{"_index":388,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.source.datasource]).pipe",{"_index":394,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.source.getorganscene(organ.representation_of",{"_index":430,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.source.getreferenceorgans",{"_index":390,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.source.getscene",{"_index":426,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["this.subscriptions.add(this.datasource.subscribe",{"_index":330,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["this.subscriptions.unsubscribe",{"_index":332,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["tissue",{"_index":283,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["tissueblockresult",{"_index":299,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["to.operator",{"_index":411,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["to.operator.ts",{"_index":499,"title":{},"body":{"miscellaneous/functions.html":{}}}],["tojsonld",{"_index":225,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["tojsonld(data",{"_index":205,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["tree",{"_index":8,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{}}}],["true",{"_index":55,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":44,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":516,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":207,"title":{},"body":{"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["typescript",{"_index":417,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["ui",{"_index":125,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{}}}],["ui@1/assets/kpmp/data/rui_locations.jsonld",{"_index":539,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui@1/assets/sparc/data/rui_locations.jsonld",{"_index":540,"title":{},"body":{"miscellaneous/variables.html":{}}}],["undefined",{"_index":348,"title":{},"body":{"injectables/DataSourceService.html":{},"injectables/FilteredSceneService.html":{}}}],["underlying",{"_index":286,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["uniqueorganurls",{"_index":423,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["uniqueorganurls.size",{"_index":425,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["unknown",{"_index":206,"title":{},"body":{"components/AppWebComponent.html":{},"injectables/DataSourceService.html":{},"interfaces/InputDataFormat.html":{}}}],["unsafe",{"_index":419,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["unsubscribable",{"_index":303,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["unsubscribe",{"_index":347,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["using",{"_index":304,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["value",{"_index":58,"title":{},"body":{"components/AppComponent.html":{},"injectables/FilteredSceneService.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":255,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["var",{"_index":133,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{}}}],["variables",{"_index":519,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["viewchild",{"_index":68,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["viewchild('bodyui",{"_index":53,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["void",{"_index":162,"title":{},"body":{"modules/AppModule.html":{},"injectables/DataSourceService.html":{}}}],["wc",{"_index":137,"title":{},"body":{"components/AppComponent.html":{},"modules/AppModule.html":{},"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{}}}],["web",{"_index":173,"title":{},"body":{"modules/AppModule.html":{},"components/AppWebComponent.html":{},"interfaces/InputDataFormat.html":{},"miscellaneous/functions.html":{}}}],["width",{"_index":128,"title":{},"body":{"components/AppComponent.html":{}}}],["window.location.hostname",{"_index":552,"title":{},"body":{"miscellaneous/variables.html":{}}}],["x",{"_index":110,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["x_dimension",{"_index":109,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["y",{"_index":112,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["y_dimension",{"_index":111,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["yes",{"_index":256,"title":{},"body":{"injectables/DataSourceService.html":{}}}],["z",{"_index":114,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["z_dimension",{"_index":113,"title":{},"body":{"components/AppComponent.html":{},"interfaces/GlobalConfig.html":{}}}],["zoom",{"_index":154,"title":{},"body":{"modules/AppModule.html":{},"injectables/FilteredSceneService.html":{},"index.html":{}}}],["zoomto",{"_index":410,"title":{},"body":{"injectables/FilteredSceneService.html":{},"miscellaneous/functions.html":{}}}],["zoomto(id",{"_index":509,"title":{},"body":{"miscellaneous/functions.html":{}}}],["zoomto(this.zoomtoid",{"_index":380,"title":{},"body":{"injectables/FilteredSceneService.html":{}}}],["zoomtoid",{"_index":87,"title":{},"body":{"components/AppComponent.html":{},"components/AppWebComponent.html":{},"injectables/FilteredSceneService.html":{},"interfaces/GlobalConfig.html":{},"interfaces/InputDataFormat.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"components/AppComponent.html":{"url":"components/AppComponent.html","title":"component - AppComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            Template\n        \n        \n            Styles\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app.component.ts\n\n\n\n\n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-root\n            \n\n\n\n            \n                styleUrls\n                ./app.component.scss\n            \n\n\n\n            \n                templateUrl\n                ./app.component.html\n            \n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                    Readonly\n                                bodyUI\n                            \n                            \n                                    Readonly\n                                data$\n                            \n                            \n                                organs$\n                            \n                            \n                                scene$\n                            \n                        \n                    \n                \n\n\n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                            \n                                onMouseEnter\n                            \n                            \n                                onMouseLeave\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(configState: GlobalConfigState, sceneSource: FilteredSceneService, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/app.component.ts:30\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configState\n                                                  \n                                                        \n                                                                        GlobalConfigState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        sceneSource\n                                                  \n                                                        \n                                                                        FilteredSceneService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app.component.ts:26\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onMouseEnter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app.component.ts:24\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onMouseLeave\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app.component.ts:25\n                            \n                        \n            \n        \n\n\n\n\n    \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                            Readonly\n                        bodyUI\n                        \n                    \n                \n            \n                \n                    \n                        Type :     BodyUiComponent\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ViewChild('bodyUI', {static: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:22\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configState.getOption('data')\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:28\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        organs$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.sceneSource.filteredOrgans$\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        scene$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.sceneSource.filteredScene$.pipe(tap((_) => this.reset()))\n                    \n                \n                    \n                        \n                                Defined in src/app/app.component.ts:30\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { BodyUiComponent, GlobalConfigState } from 'ccf-shared';\nimport { JsonLdObj } from 'jsonld/jsonld-spec';\nimport { lastValueFrom } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { FilteredSceneService } from './core/services/filtered-scene/filtered-scene.service';\n\nexport interface GlobalConfig {\n  highlightID?: string;\n  zoomToID?: string;\n  data?: JsonLdObj[];\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ccf-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewChild('bodyUI', { static: true }) readonly bodyUI!: BodyUiComponent;\n\n  @Output() readonly onMouseEnter = new EventEmitter();\n  @Output() readonly onMouseLeave = new EventEmitter();\n  @Output() readonly onClick = new EventEmitter();\n\n  readonly data$ = this.configState.getOption('data');\n  organs$ = this.sceneSource.filteredOrgans$;\n  scene$ = this.sceneSource.filteredScene$.pipe(tap((_) => this.reset()));\n\n  constructor(\n    private readonly configState: GlobalConfigState,\n    private readonly sceneSource: FilteredSceneService,\n    private readonly cdr: ChangeDetectorRef,\n  ) {}\n\n  private async reset(): Promise {\n    const { bodyUI } = this;\n\n    await new Promise((resolve) => {\n      setTimeout(resolve, 200);\n    });\n    const organs = await lastValueFrom(this.organs$.pipe(take(1)));\n    const hasZoomingNode = !!bodyUI.scene?.find((node) => node.zoomToOnLoad) ?? false;\n\n    bodyUI.rotation = 0;\n    bodyUI.rotationX = 0;\n\n    if (!hasZoomingNode) {\n      if (organs && organs.length === 1) {\n        const { x_dimension: x, y_dimension: y, z_dimension: z } = organs[0];\n        bodyUI.bounds = {\n          x: (1.25 * x) / 1000,\n          y: (1.25 * y) / 1000,\n          z: (1.25 * z) / 1000,\n        };\n        bodyUI.target = [x / 1000 / 2, y / 1000 / 2, z / 1000 / 2];\n      } else {\n        bodyUI.bounds = { x: 2.2, y: 2, z: 0.4 };\n        bodyUI.target = [0, 0, 0];\n      }\n    }\n\n    this.cdr.detectChanges();\n  }\n}\n\n    \n\n    \n        \n\n\n    \n\n    \n                \n                    ./app.component.scss\n                \n                .body-ui {\n  height: 100%;\n  width: 100%;\n}\n\n    \n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'AppWebComponent', 'selector': 'ccf-root-wc'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_declarations\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppWebComponent\n\nAppWebComponent\n\nAppModule -->\n\nAppWebComponent->AppModule\n\n\n\n\n\nStoreModule\n\nStoreModule\n\nAppModule -->\n\nStoreModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Declarations\n                    \n                        \n                            AppComponent\n                        \n                        \n                            AppWebComponent\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            StoreModule\n                        \n                    \n                \n            \n        \n\n        \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        ngDoBootstrap\n                        \n                    \n                \n            \n            \n                \nngDoBootstrap()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/app.module.ts:18\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n\n    \n\n\n    \n        import { DoBootstrap, Injector, NgModule } from '@angular/core';\nimport { createCustomElement } from '@angular/elements';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { BodyUiModule } from 'ccf-shared';\nimport { AppWebComponent } from './app-web-component.component';\nimport { AppComponent } from './app.component';\nimport { StoreModule } from './core/store/store.module';\n\n@NgModule({\n  imports: [BrowserModule, StoreModule, BodyUiModule],\n  declarations: [AppComponent, AppWebComponent],\n  providers: [],\n})\nexport class AppModule implements DoBootstrap {\n  constructor(private readonly injector: Injector) {}\n\n  ngDoBootstrap(): void {\n    const appElement = createCustomElement(AppWebComponent, {\n      injector: this.injector,\n    });\n\n    customElements.define('ccf-body-ui-wc', appElement);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"components/AppWebComponent.html":{"url":"components/AppWebComponent.html","title":"component - AppWebComponent","body":"\n                   \n\n\n\n\n\n  Components\n  \n  AppWebComponent\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n        \n            DOM Tree\n        \n\n\n\n    \n    File\n\n\n    src/app/app-web-component.component.ts\n\n\n\n\n    \n        Extends\n    \n    \n                BaseWebComponent\n    \n\n\n\n\n    Metadata\n    \n        \n\n            \n                changeDetection\n                ChangeDetectionStrategy.OnPush\n            \n\n\n\n\n\n\n\n\n\n\n\n            \n                selector\n                ccf-root-wc\n            \n\n\n\n\n\n            \n                template\n                \n            \n\n\n\n\n\n\n\n\n\n        \n    \n\n\n    \n    Index\n    \n        \n\n\n                \n                    \n                        Inputs\n                    \n                \n                \n                    \n                        \n                            \n                                data\n                            \n                            \n                                highlightID\n                            \n                            \n                                zoomToID\n                            \n                        \n                    \n                \n\n                \n                    \n                        Outputs\n                    \n                \n                \n                    \n                        \n                            \n                                onClick\n                            \n                            \n                                onMouseEnter\n                            \n                            \n                                onMouseLeave\n                            \n                        \n                    \n                \n\n\n\n        \n    \n\n\n    \n    Constructor\n        \n            \n                \n                    \nconstructor(configStore: GlobalConfigState, cdr: ChangeDetectorRef)\n                    \n                \n                        \n                            \n                                Defined in src/app/app-web-component.component.ts:38\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configStore\n                                                  \n                                                        \n                                                                        GlobalConfigState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        cdr\n                                                  \n                                                        \n                                                                    ChangeDetectorRef\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n    \n    Inputs\n        \n            \n                \n                    \n                        \n                        data\n                    \n                \n                \n                    \n                        Type :         InputDataFormat[]\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:32\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        highlightID\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:33\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        zoomToID\n                    \n                \n                \n                    \n                        Type :         string\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:34\n                            \n                        \n            \n        \n\n    \n    Outputs\n        \n            \n                \n                    \n                        \n                        onClick\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:38\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onMouseEnter\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:36\n                            \n                        \n            \n        \n        \n            \n                \n                    \n                        \n                        onMouseLeave\n                    \n                \n                \n                    \n                        Type :     EventEmitter\n\n                    \n                \n                        \n                            \n                                    Defined in src/app/app-web-component.component.ts:37\n                            \n                        \n            \n        \n\n\n\n\n\n\n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { GlobalConfigState } from 'ccf-shared';\nimport { BaseWebComponent, GenericGlobalConfig } from 'ccf-shared/web-components';\nimport { JsonLdObj } from 'jsonld/jsonld-spec';\n\nimport { environment } from '../environments/environment';\n\nexport interface InputDataFormat {\n  id: string;\n  rui_location: JsonLdObj;\n}\n\nfunction toJsonLd(data: unknown): JsonLdObj[] {\n  if (typeof data === 'string') {\n    data = JSON.parse(data);\n  }\n  return (data as InputDataFormat[]).map((d) => ({\n    '@id': `http://purl.org/ccf/1.5/entity/${d.id}`,\n    '@type': 'http://purl.org/ccf/latest/ccf-entity.owl#Sample',\n    'http://purl.org/ccf/latest/ccf-entity.owl#has_spatial_entity': d.rui_location,\n  })) as unknown as JsonLdObj[];\n}\n\n@Component({\n  selector: 'ccf-root-wc',\n  template:\n    '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppWebComponent extends BaseWebComponent {\n  @Input() data!: InputDataFormat[];\n  @Input() highlightID!: string;\n  @Input() zoomToID!: string;\n\n  @Output() readonly onMouseEnter = new EventEmitter();\n  @Output() readonly onMouseLeave = new EventEmitter();\n  @Output() readonly onClick = new EventEmitter();\n\n  constructor(configStore: GlobalConfigState, cdr: ChangeDetectorRef) {\n    super(configStore, cdr, {\n      initialDelay: 10,\n\n      initialConfig: {\n        ...environment.dbOptions,\n        ...(globalThis['dbOptions' as never] as object),\n      },\n      parse: {\n        data: toJsonLd,\n      },\n    });\n  }\n}\n\n    \n\n\n\n    \n        \n        \n            \n                Legend\n            \n            \n                Html element\n            \n            \n                Component\n            \n            \n                Html element with directive\n            \n        \n    \n\n    \n\n\n\n\n\n\n        var COMPONENT_TEMPLATE = ''\n    var COMPONENTS = [{'name': 'AppComponent', 'selector': 'ccf-root'},{'name': 'AppWebComponent', 'selector': 'ccf-root-wc'}];\n    var DIRECTIVES = [];\n    var ACTUAL_COMPONENT = {'name': 'AppWebComponent'};\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/DataSourceService.html":{"url":"injectables/DataSourceService.html","title":"injectable - DataSourceService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  DataSourceService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/data-source/data-source.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Backend data queries.\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                dataSource\n                            \n                            \n                                dbOptions\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getAggregateResults\n                            \n                            \n                                getCellTypeTermOccurences\n                            \n                            \n                                getCellTypeTreeModel\n                            \n                            \n                                getOntologyTermOccurences\n                            \n                            \n                                getOntologyTreeModel\n                            \n                            \n                                getOrganScene\n                            \n                            \n                                getReferenceOrgans\n                            \n                            \n                                getScene\n                            \n                            \n                                getTissueBlockResults\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(globalConfig: GlobalConfigState)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/data-source/data-source.service.ts:38\n                            \n                        \n\n                \n                    \n                            Creates an instance of data source service.\n\n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        globalConfig\n                                                  \n                                                        \n                                                                        GlobalConfigState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getAggregateResults\n                        \n                    \n                \n            \n            \n                \ngetAggregateResults(filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:84\n                        \n                    \n\n\n            \n                \n                        Queries for aggregate values.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Currently applied filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCellTypeTermOccurences\n                        \n                    \n                \n            \n            \n                \ngetCellTypeTermOccurences(filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:110\n                        \n                    \n\n\n            \n                \n                        Queries for cell type term counts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Currently applied filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getCellTypeTreeModel\n                        \n                    \n                \n            \n            \n                \ngetCellTypeTreeModel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:134\n                        \n                    \n\n\n            \n                \n                        Get the cell type tree model.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOntologyTermOccurences\n                        \n                    \n                \n            \n            \n                \ngetOntologyTermOccurences(filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:97\n                        \n                    \n\n\n            \n                \n                        Queries for ontology term counts.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Currently applied filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable>\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOntologyTreeModel\n                        \n                    \n                \n            \n            \n                \ngetOntologyTreeModel()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:122\n                        \n                    \n\n\n            \n                \n                        Get the ontology tree model.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getOrganScene\n                        \n                    \n                \n            \n            \n                \ngetOrganScene(organ: string, filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:166\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                organ\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReferenceOrgans\n                        \n                    \n                \n            \n            \n                \ngetReferenceOrgans()\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:146\n                        \n                    \n\n\n            \n                \n                        Get the reference organs.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getScene\n                        \n                    \n                \n            \n            \n                \ngetScene(filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:159\n                        \n                    \n\n\n            \n                \n                        Queries for scene nodes to display.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Currently applied filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getTissueBlockResults\n                        \n                    \n                \n            \n            \n                \ngetTissueBlockResults(filter?: Filter)\n                \n            \n\n\n                    \n                        \n                            Defined in src/app/core/services/data-source/data-source.service.ts:71\n                        \n                    \n\n\n            \n                \n                        Queries for tissue block values.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                filter\n                                            \n                                                        Filter\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                            \n                                                    Currently applied filter.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An observable emitting the results.\n\n                            \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        dataSource\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Observable\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/data-source/data-source.service.ts:34\n                        \n                    \n\n            \n                \n                    The underlying database.\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        dbOptions\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CCFDatabaseOptions\n\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/data-source/data-source.service.ts:36\n                        \n                    \n\n            \n                \n                    Database initialization options.\n\n                \n            \n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, OnDestroy } from '@angular/core';\nimport {\n  AggregateResult,\n  CCFDatabase,\n  CCFDatabaseOptions,\n  DEFAULT_CCF_DB_OPTIONS,\n  Filter,\n  OntologyTreeModel,\n  SpatialEntity,\n  SpatialSceneNode,\n  TissueBlockResult,\n} from 'ccf-database';\nimport { GlobalConfigState } from 'ccf-shared';\nimport { Remote } from 'comlink';\nimport { Observable, Subscription, Unsubscribable, using } from 'rxjs';\nimport { distinctUntilChanged, map, filter as rxFilter, shareReplay, switchMap, take } from 'rxjs/operators';\n\nimport { environment } from '../../../../environments/environment';\n\ntype DataSource = Remote | CCFDatabase;\n\nfunction compareConfig(previous: CCFDatabaseOptions, current: CCFDatabaseOptions): boolean {\n  return previous === current;\n}\n\n/**\n * Backend data queries.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class DataSourceService implements OnDestroy {\n  /** The underlying database. */\n  dataSource: Observable;\n  /** Database initialization options. */\n  dbOptions!: CCFDatabaseOptions;\n\n  private readonly subscriptions = new Subscription();\n\n  /**\n   * Creates an instance of data source service.\n   */\n  constructor(globalConfig: GlobalConfigState) {\n    this.dataSource = globalConfig.getOption('data').pipe(\n      map((data) => ({ ...DEFAULT_CCF_DB_OPTIONS, dataSources: data })),\n      rxFilter((config) => Object.keys(config).length > 0),\n      map((config) => config as unknown as CCFDatabaseOptions),\n      distinctUntilChanged(compareConfig),\n      switchMap((config) =>\n        using(\n          () => this.createDataSource(),\n          (resource) => this.connectDataSource((resource as unknown as { source: DataSource }).source, config),\n        ),\n      ),\n      shareReplay(1),\n    );\n\n    this.subscriptions.add(this.dataSource.subscribe());\n  }\n\n  ngOnDestroy(): void {\n    this.subscriptions.unsubscribe();\n  }\n\n  /**\n   * Queries for tissue block values.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getTissueBlockResults(filter?: Filter): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getTissueBlockResults(filter)),\n      take(1),\n    );\n  }\n\n  /**\n   * Queries for aggregate values.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getAggregateResults(filter?: Filter): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getAggregateResults(filter)),\n      take(1),\n    );\n  }\n\n  /**\n   * Queries for ontology term counts.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getOntologyTermOccurences(filter?: Filter): Observable> {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getOntologyTermOccurences(filter)),\n      take(1),\n    );\n  }\n\n  /**\n   * Queries for cell type term counts.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getCellTypeTermOccurences(filter?: Filter): Observable> {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getCellTypeTermOccurences(filter)),\n      take(1),\n    );\n  }\n\n  /**\n   * Get the ontology tree model.\n   *\n   * @returns An observable emitting the results.\n   */\n  getOntologyTreeModel(): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getOntologyTreeModel()),\n      take(1),\n    );\n  }\n\n  /**\n   * Get the cell type tree model.\n   *\n   * @returns An observable emitting the results.\n   */\n  getCellTypeTreeModel(): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getCellTypeTreeModel()),\n      take(1),\n    );\n  }\n\n  /**\n   * Get the reference organs.\n   *\n   * @returns An observable emitting the results.\n   */\n  getReferenceOrgans(): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getReferenceOrgans()),\n      take(1),\n    );\n  }\n\n  /**\n   * Queries for scene nodes to display.\n   *\n   * @param [filter] Currently applied filter.\n   * @returns An observable emitting the results.\n   */\n  getScene(filter?: Filter): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getScene(filter)),\n      take(1),\n    );\n  }\n\n  getOrganScene(organ: string, filter?: Filter): Observable {\n    return this.dataSource.pipe(\n      switchMap((db) => db.getReferenceOrganScene(organ, filter)),\n      take(1),\n    );\n  }\n\n  private createDataSource(): { source: DataSource } & Unsubscribable {\n    const unsubscribe: () => void = () => undefined;\n    const source = new CCFDatabase();\n\n    return { source, unsubscribe };\n  }\n\n  private async connectDataSource(source: DataSource, config: CCFDatabaseOptions): Promise {\n    const start = new Date().getTime();\n\n    await source.connect(config, false);\n\n    if (!environment.production) {\n      // eslint-disable-next-line no-console\n      console.info(`Loaded CCF database in ${(new Date().getTime() - start) / 1000}s`);\n      // eslint-disable-next-line no-console\n      console.log(source);\n    }\n    return source;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FilteredSceneService.html":{"url":"injectables/FilteredSceneService.html","title":"injectable - FilteredSceneService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FilteredSceneService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/core/services/filtered-scene/filtered-scene.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Readonly\n                                data$\n                            \n                            \n                                    Readonly\n                                filteredOrgans$\n                            \n                            \n                                    Readonly\n                                filteredScene$\n                            \n                            \n                                    Readonly\n                                highlightID$\n                            \n                            \n                                    Readonly\n                                organs$\n                            \n                            \n                                    Readonly\n                                referenceOrgans$\n                            \n                            \n                                    Readonly\n                                scene$\n                            \n                            \n                                    Readonly\n                                zoomToID$\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configState: GlobalConfigState, source: DataSourceService)\n                    \n                \n                        \n                            \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:45\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configState\n                                                  \n                                                        \n                                                                        GlobalConfigState\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        source\n                                                  \n                                                        \n                                                                        DataSourceService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        data$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configState.getOption('data')\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        filteredOrgans$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : combineLatest([this.organs$, this.referenceOrgans$]).pipe(\n    map(([organs, referenceOrgans]) => this.getNeededReferenceOrgans(referenceOrgans, organs)),\n    shareReplay(1),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        filteredScene$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : combineLatest([this.scene$, this.organs$, this.referenceOrgans$]).pipe(\n    map(([nodes, organs, referenceOrgans]) => this.filterSceneNodes(nodes, organs, referenceOrgans)),\n    hightlight(this.highlightID$, HIGHLIGHT_YELLOW),\n    zoomTo(this.zoomToID$),\n    shareReplay(1),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        highlightID$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configState\n    .getOption('highlightID')\n    .pipe(map((id) => `http://purl.org/ccf/1.5/entity/${id}`))\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        organs$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configState.getOption('data').pipe(\n    map((data) => this.selectOrgans(data)),\n    shareReplay(1),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        referenceOrgans$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.source.getReferenceOrgans()\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        scene$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : combineLatest([this.data$, this.referenceOrgans$, this.source.dataSource]).pipe(\n    switchMap(([data, referenceOrgans, _]) => this.chooseScene(data, referenceOrgans)),\n  )\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        zoomToID$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.configState.getOption('zoomToID').pipe(map((id) => `http://purl.org/ccf/1.5/entity/${id}`))\n                    \n                \n                    \n                        \n                                Defined in src/app/core/services/filtered-scene/filtered-scene.service.ts:19\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Any } from '@angular-ru/common/typings';\nimport { Injectable } from '@angular/core';\nimport { Filter, SpatialEntity, SpatialSceneNode } from 'ccf-database';\nimport { GlobalConfigState } from 'ccf-shared';\nimport { JsonLdObj } from 'jsonld/jsonld-spec';\nimport { Observable, combineLatest, of } from 'rxjs';\nimport { map, shareReplay, switchMap } from 'rxjs/operators';\nimport { GlobalConfig } from '../../../app.component';\nimport { FEMALE_SKIN_URL, HIGHLIGHT_YELLOW, MALE_SKIN_URL, SPATIAL_ENTITY_URL } from '../../constants';\nimport { hightlight } from '../../highlight.operator';\nimport { zoomTo } from '../../zoom-to.operator';\nimport { DataSourceService } from '../data-source/data-source.service';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class FilteredSceneService {\n  readonly data$ = this.configState.getOption('data');\n  readonly zoomToID$ = this.configState.getOption('zoomToID').pipe(map((id) => `http://purl.org/ccf/1.5/entity/${id}`));\n  readonly highlightID$ = this.configState\n    .getOption('highlightID')\n    .pipe(map((id) => `http://purl.org/ccf/1.5/entity/${id}`));\n\n  readonly referenceOrgans$ = this.source.getReferenceOrgans();\n\n  readonly scene$ = combineLatest([this.data$, this.referenceOrgans$, this.source.dataSource]).pipe(\n    switchMap(([data, referenceOrgans, _]) => this.chooseScene(data, referenceOrgans)),\n  );\n\n  readonly organs$ = this.configState.getOption('data').pipe(\n    map((data) => this.selectOrgans(data)),\n    shareReplay(1),\n  );\n\n  readonly filteredOrgans$ = combineLatest([this.organs$, this.referenceOrgans$]).pipe(\n    map(([organs, referenceOrgans]) => this.getNeededReferenceOrgans(referenceOrgans, organs)),\n    shareReplay(1),\n  );\n\n  readonly filteredScene$ = combineLatest([this.scene$, this.organs$, this.referenceOrgans$]).pipe(\n    map(([nodes, organs, referenceOrgans]) => this.filterSceneNodes(nodes, organs, referenceOrgans)),\n    hightlight(this.highlightID$, HIGHLIGHT_YELLOW),\n    zoomTo(this.zoomToID$),\n    shareReplay(1),\n  );\n\n  constructor(\n    private readonly configState: GlobalConfigState,\n    private readonly source: DataSourceService,\n  ) {}\n\n  private chooseScene(data?: JsonLdObj[], organs?: SpatialEntity[]): Observable {\n    const organUrls =\n      data?.map((obj) => {\n        const block: Any = obj[SPATIAL_ENTITY_URL];\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        return block?.placement.target;\n      }) ?? [];\n    const uniqueOrganUrls = new Set(organUrls);\n\n    if (uniqueOrganUrls.size > 1) {\n      return this.source.getScene();\n    } else if (organs) {\n      const organ = organs.find((tempOrgan) => tempOrgan['@id'] === organUrls[0]);\n      if (organ) {\n        return this.source.getOrganScene(organ.representation_of ?? '', {\n          ontologyTerms: [organ.reference_organ],\n          sex: organ.sex,\n        } as Filter);\n      }\n    }\n    return of([]);\n  }\n\n  private selectOrgans(data: Any[] | undefined): Set {\n    const selectOrgan = (item: Any) =>\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      item[SPATIAL_ENTITY_URL].placement.target;\n\n    const organs = (data ?? []).map(selectOrgan);\n    return new Set(organs);\n  }\n\n  private filterSceneNodes(\n    nodes: SpatialSceneNode[],\n    organs: Set,\n    referenceOrgans: SpatialEntity[],\n  ): SpatialSceneNode[] {\n    const neededReferenceOrgans = this.getNeededReferenceOrgans(referenceOrgans, organs);\n    const neededSkins = this.getNeededSkins(neededReferenceOrgans);\n    const neededOrgans = new Set([...organs, ...neededSkins]);\n    return nodes.filter((node) => !node.reference_organ || neededOrgans.has(node.reference_organ));\n  }\n\n  private getNeededReferenceOrgans(referenceOrgans: SpatialEntity[], organs: Set): SpatialEntity[] {\n    return referenceOrgans.filter((organ) => organs.has(organ.reference_organ ?? ''));\n  }\n\n  private getNeededSkins(organs: SpatialEntity[]): string[] {\n    if (organs.length === 1) {\n      return [];\n    }\n\n    const skins = new Set();\n    organs.forEach((organ) => {\n      if (organ.sex === 'Female') {\n        skins.add(FEMALE_SKIN_URL);\n      } else if (organ.sex === 'Male') {\n        skins.add(MALE_SKIN_URL);\n      }\n    });\n\n    return [...skins];\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/GlobalConfig.html":{"url":"interfaces/GlobalConfig.html","title":"interface - GlobalConfig","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  GlobalConfig\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            data\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            highlightID\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoomToID\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        data\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        data:     JsonLdObj[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     JsonLdObj[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        highlightID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        highlightID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomToID\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoomToID:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Output, ViewChild } from '@angular/core';\nimport { BodyUiComponent, GlobalConfigState } from 'ccf-shared';\nimport { JsonLdObj } from 'jsonld/jsonld-spec';\nimport { lastValueFrom } from 'rxjs';\nimport { take, tap } from 'rxjs/operators';\nimport { FilteredSceneService } from './core/services/filtered-scene/filtered-scene.service';\n\nexport interface GlobalConfig {\n  highlightID?: string;\n  zoomToID?: string;\n  data?: JsonLdObj[];\n}\n\n@Component({\n  changeDetection: ChangeDetectionStrategy.OnPush,\n  selector: 'ccf-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent {\n  @ViewChild('bodyUI', { static: true }) readonly bodyUI!: BodyUiComponent;\n\n  @Output() readonly onMouseEnter = new EventEmitter();\n  @Output() readonly onMouseLeave = new EventEmitter();\n  @Output() readonly onClick = new EventEmitter();\n\n  readonly data$ = this.configState.getOption('data');\n  organs$ = this.sceneSource.filteredOrgans$;\n  scene$ = this.sceneSource.filteredScene$.pipe(tap((_) => this.reset()));\n\n  constructor(\n    private readonly configState: GlobalConfigState,\n    private readonly sceneSource: FilteredSceneService,\n    private readonly cdr: ChangeDetectorRef,\n  ) {}\n\n  private async reset(): Promise {\n    const { bodyUI } = this;\n\n    await new Promise((resolve) => {\n      setTimeout(resolve, 200);\n    });\n    const organs = await lastValueFrom(this.organs$.pipe(take(1)));\n    const hasZoomingNode = !!bodyUI.scene?.find((node) => node.zoomToOnLoad) ?? false;\n\n    bodyUI.rotation = 0;\n    bodyUI.rotationX = 0;\n\n    if (!hasZoomingNode) {\n      if (organs && organs.length === 1) {\n        const { x_dimension: x, y_dimension: y, z_dimension: z } = organs[0];\n        bodyUI.bounds = {\n          x: (1.25 * x) / 1000,\n          y: (1.25 * y) / 1000,\n          z: (1.25 * z) / 1000,\n        };\n        bodyUI.target = [x / 1000 / 2, y / 1000 / 2, z / 1000 / 2];\n      } else {\n        bodyUI.bounds = { x: 2.2, y: 2, z: 0.4 };\n        bodyUI.target = [0, 0, 0];\n      }\n    }\n\n    this.cdr.detectChanges();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/InputDataFormat.html":{"url":"interfaces/InputDataFormat.html","title":"interface - InputDataFormat","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  InputDataFormat\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app/app-web-component.component.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            rui_location\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rui_location\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rui_location:     JsonLdObj\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     JsonLdObj\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { ChangeDetectionStrategy, ChangeDetectorRef, Component, EventEmitter, Input, Output } from '@angular/core';\nimport { GlobalConfigState } from 'ccf-shared';\nimport { BaseWebComponent, GenericGlobalConfig } from 'ccf-shared/web-components';\nimport { JsonLdObj } from 'jsonld/jsonld-spec';\n\nimport { environment } from '../environments/environment';\n\nexport interface InputDataFormat {\n  id: string;\n  rui_location: JsonLdObj;\n}\n\nfunction toJsonLd(data: unknown): JsonLdObj[] {\n  if (typeof data === 'string') {\n    data = JSON.parse(data);\n  }\n  return (data as InputDataFormat[]).map((d) => ({\n    '@id': `http://purl.org/ccf/1.5/entity/${d.id}`,\n    '@type': 'http://purl.org/ccf/latest/ccf-entity.owl#Sample',\n    'http://purl.org/ccf/latest/ccf-entity.owl#has_spatial_entity': d.rui_location,\n  })) as unknown as JsonLdObj[];\n}\n\n@Component({\n  selector: 'ccf-root-wc',\n  template:\n    '',\n  changeDetection: ChangeDetectionStrategy.OnPush,\n})\nexport class AppWebComponent extends BaseWebComponent {\n  @Input() data!: InputDataFormat[];\n  @Input() highlightID!: string;\n  @Input() zoomToID!: string;\n\n  @Output() readonly onMouseEnter = new EventEmitter();\n  @Output() readonly onMouseLeave = new EventEmitter();\n  @Output() readonly onClick = new EventEmitter();\n\n  constructor(configStore: GlobalConfigState, cdr: ChangeDetectorRef) {\n    super(configStore, cdr, {\n      initialDelay: 10,\n\n      initialConfig: {\n        ...environment.dbOptions,\n        ...(globalThis['dbOptions' as never] as object),\n      },\n      parse: {\n        data: toJsonLd,\n      },\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/StoreModule.html":{"url":"modules/StoreModule.html","title":"module - StoreModule","body":"\n                   \n\n\n\n\n    Modules\n    StoreModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app/core/store/store.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgxsDataPluginModule } from '@angular-ru/ngxs';\nimport { NgModule } from '@angular/core';\nimport { NgxsLoggerPluginModule } from '@ngxs/logger-plugin';\nimport { NgxsModule } from '@ngxs/store';\nimport { GlobalConfigState } from 'ccf-shared';\n\nimport { environment } from '../../../environments/environment';\n\n/**\n * States shared across the entire app.\n */\nexport const ROOT_STATES = [GlobalConfigState];\n\n@NgModule({\n  imports: [\n    // For some strange reason the data plugin is not happy being placed after the store module!?\n    NgxsDataPluginModule.forRoot(),\n\n    NgxsModule.forRoot(ROOT_STATES, {\n      developmentMode: !environment.production,\n      // Consider setting compatibility and executionStrategy\n      // https://www.ngxs.io/advanced/options\n    }),\n\n    // Logger plugin must be last!\n    NgxsLoggerPluginModule.forRoot({\n      disabled: environment.production,\n    }),\n  ],\n})\nexport class StoreModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            compareConfig   (src/.../data-source.service.ts)\n                        \n                        \n                            highlightIfMatching   (src/.../highlight.operator.ts)\n                        \n                        \n                            hightlight   (src/.../highlight.operator.ts)\n                        \n                        \n                            setZoomToIfMatching   (src/.../zoom-to.operator.ts)\n                        \n                        \n                            toJsonLd   (src/.../app-web-component.component.ts)\n                        \n                        \n                            zoomTo   (src/.../zoom-to.operator.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/services/data-source/data-source.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        compareConfig\n                        \n                    \n                \n            \n            \n                \ncompareConfig(previous: CCFDatabaseOptions, current: CCFDatabaseOptions)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                previous\n                                            \n                                                        CCFDatabaseOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                current\n                                            \n                                                        CCFDatabaseOptions\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/core/highlight.operator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        highlightIfMatching\n                        \n                    \n                \n            \n            \n                \nhighlightIfMatching(entity: SpatialSceneNode, id, color: Color)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        SpatialSceneNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                color\n                                            \n                                                            Color\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SpatialSceneNode\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        hightlight\n                        \n                    \n                \n            \n            \n                \nhightlight(id: Observable, color: Color)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                color\n                                            \n                                                            Color\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     MonoTypeOperatorFunction\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/core/zoom-to.operator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setZoomToIfMatching\n                        \n                    \n                \n            \n            \n                \nsetZoomToIfMatching(entity: SpatialSceneNode, id)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                entity\n                                            \n                                                        SpatialSceneNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                id\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SpatialSceneNode\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomTo\n                        \n                    \n                \n            \n            \n                \nzoomTo(id: Observable)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                        Observable\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     MonoTypeOperatorFunction\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/app/app-web-component.component.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        toJsonLd\n                        \n                    \n                \n            \n            \n                \ntoJsonLd(data)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     JsonLdObj[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"overview - index","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_declarations\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAppComponent\n\nAppComponent\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAppComponent->AppModule\n\n\n\n\n\nAppWebComponent\n\nAppWebComponent\n\nAppModule -->\n\nAppWebComponent->AppModule\n\n\n\n\n\nStoreModule\n\nStoreModule\n\nAppModule -->\n\nStoreModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        2 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    2 Components\n                \n            \n        \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        StoreModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Color   (src/.../highlight.operator.ts)\n                        \n                        \n                            DataSource   (src/.../data-source.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/app/core/highlight.operator.ts\n    \n    \n        \n            \n                \n                    \n                    Color\n                \n            \n            \n                \n                        [number, number, number, number]\n\n                \n            \n        \n    \n    src/app/core/services/data-source/data-source.service.ts\n    \n    \n        \n            \n                \n                    \n                    DataSource\n                \n            \n            \n                \n                        Remote | CCFDatabase\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            environment   (src/.../environment.prod.ts)\n                        \n                        \n                            environment   (src/.../environment.staging.ts)\n                        \n                        \n                            environment   (src/.../environment.ts)\n                        \n                        \n                            FEMALE_SKIN_URL   (src/.../constants.ts)\n                        \n                        \n                            HIGHLIGHT_YELLOW   (src/.../constants.ts)\n                        \n                        \n                            MALE_SKIN_URL   (src/.../constants.ts)\n                        \n                        \n                            ROOT_STATES   (src/.../store.module.ts)\n                        \n                        \n                            SPATIAL_ENTITY_URL   (src/.../constants.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/environments/environment.prod.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  disableDbWorker: true,\n  acceptableViewerDomains: ['https://portal.hubmapconsortium.org', 'https://portal.test.hubmapconsortium.org'],\n  dbOptions: {\n    ccfOwlUrl: 'https://apps.humanatlas.io/hra-api/v1/ccf.owl.n3store.json',\n    ccfContextUrl: 'https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld',\n    dataSources: [\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/kpmp/data/rui_locations.jsonld',\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/sparc/data/rui_locations.jsonld',\n    ],\n    hubmapDataService: 'search-api',\n    hubmapPortalUrl: 'https://portal.hubmapconsortium.org/',\n    hubmapDataUrl: 'https://search.api.hubmapconsortium.org/v3/entities/search',\n    hubmapAssetsUrl: 'https://assets.hubmapconsortium.org',\n    hubmapToken: localStorage.getItem('HUBMAP_TOKEN') ?? '',\n  },\n  googleAnalyticsToken: window.location.hostname === 'portal.hubmapconsortium.org' ? 'G-1WRJHN9FM6' : 'G-J9HWV9QPJ4',\n}\n                    \n                \n\n            \n                \n                    Production environment configuration.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.staging.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: true,\n  disableDbWorker: true,\n  acceptableViewerDomains: ['https://portal.hubmapconsortium.org', 'https://portal.test.hubmapconsortium.org'],\n  dbOptions: {\n    ccfOwlUrl: 'https://apps.humanatlas.io/hra-api/v1/ccf.owl.n3store.json',\n    ccfContextUrl: 'https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld',\n    dataSources: [\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/kpmp/data/rui_locations.jsonld',\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/sparc/data/rui_locations.jsonld',\n    ],\n    hubmapDataService: 'search-api',\n    hubmapPortalUrl: 'https://portal.hubmapconsortium.org/',\n    hubmapDataUrl: 'https://search.api.hubmapconsortium.org/v3/entities/search',\n    hubmapAssetsUrl: 'https://assets.hubmapconsortium.org',\n    hubmapToken: localStorage.getItem('HUBMAP_TOKEN') ?? '',\n  },\n  googleAnalyticsToken: 'G-ERNVZ1Q4KE',\n}\n                    \n                \n\n            \n                \n                    Production environment configuration.\n\n                \n            \n\n        \n    \n\n    src/environments/environment.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        environment\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  production: false,\n  disableDbWorker: true,\n  acceptableViewerDomains: ['https://portal.hubmapconsortium.org', 'https://portal.test.hubmapconsortium.org'],\n  dbOptions: {\n    ccfOwlUrl: 'https://apps.humanatlas.io/hra-api/v1/ccf.owl.n3store.json',\n    ccfContextUrl: 'https://hubmapconsortium.github.io/ccf-ontology/ccf-context.jsonld',\n    dataSources: [\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/kpmp/data/rui_locations.jsonld',\n      'https://cdn.jsdelivr.net/gh/hubmapconsortium/ccf-ui@1/assets/sparc/data/rui_locations.jsonld',\n    ],\n    hubmapDataService: 'search-api',\n    hubmapPortalUrl: 'https://portal.hubmapconsortium.org/',\n    hubmapDataUrl: 'https://search.api.hubmapconsortium.org/v3/entities/search',\n    hubmapAssetsUrl: 'https://assets.hubmapconsortium.org',\n    hubmapToken: localStorage.getItem('HUBMAP_TOKEN') ?? '',\n  },\n  googleAnalyticsToken: 'G-B3DT7XPMRT',\n}\n                    \n                \n\n            \n                \n                    Testing environment configuration.\n\n                \n            \n\n        \n    \n\n    src/app/core/constants.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        FEMALE_SKIN_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://purl.org/ccf/latest/ccf.owl#VHFSkin'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        HIGHLIGHT_YELLOW\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Color\n\n                    \n                \n                \n                    \n                        Default value : [173, 255, 47, 229.5]\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MALE_SKIN_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://purl.org/ccf/latest/ccf.owl#VHMSkin'\n                    \n                \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SPATIAL_ENTITY_URL\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'http://purl.org/ccf/latest/ccf-entity.owl#has_spatial_entity'\n                    \n                \n\n\n        \n    \n\n    src/app/core/store/store.module.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ROOT_STATES\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [GlobalConfigState]\n                    \n                \n\n            \n                \n                    States shared across the entire app.\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
