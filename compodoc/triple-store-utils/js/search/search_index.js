var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/QuadReader.html",[0,1.046,1,1.419]],["body/interfaces/QuadReader.html",[0,0.387,1,0.886,2,0.735,3,0.735,4,0.735,5,0.653,6,0.653,7,1.298,8,0.387,9,0.284,10,1.239,11,1.348,12,1.239,13,1.653,14,1.505,15,1.505,16,1.505,17,0.735,18,0.735,19,0.525,20,0.122,21,0.387,22,0.653,23,0.525,24,0.886,25,1.505,26,1.148,27,2.428,28,0.886,29,0.735,30,1.348,31,0.735,32,0.735,33,1.348,34,1.239,35,0.735,36,0.735,37,1.885,38,1.606,39,0.735,40,1.11,41,1.239,42,0.735,43,0.735,44,1.632,45,1.632,46,0.735,47,0.735,48,0.735,49,1.344,50,2.551,51,0.735,52,0.735,53,0.735,54,0.525,55,1.584,56,0.525,57,2.428,58,2.655,59,1.885,60,0.735,61,0.886,62,1.348,63,1.348,64,2.282,65,0.886,66,0.525,67,1.736,68,1.148,69,0.525,70,0.525,71,0.735,72,0.735,73,2.891,74,0.735,75,1.606,76,0.735,77,0.735,78,0.735,79,0.735,80,0.735,81,0.735,82,0.735,83,0.735,84,0.525,85,0.525,86,0.525,87,0.735,88,0.735,89,0.735,90,0.735,91,0.735,92,0.735,93,0.735,94,0.735,95,1.885,96,1.606,97,1.606,98,2.148,99,1.606,100,2.428,101,1.606,102,1.606,103,1.606,104,1.606,105,0.735,106,1.239,107,0.735,108,1.239,109,0.886,110,2.183,111,1.148,112,0.886,113,1.348,114,1.148,115,0.653,116,0.653,117,1.239,118,0.525,119,1.239,120,1.885,121,1.239,122,1.239,123,0.735,124,1.239,125,0.735,126,0.735,127,0.735,128,0.735,129,0.735,130,0.735,131,0.525,132,0.735,133,0.735,134,0.525,135,1.239,136,1.239,137,1.239,138,1.239,139,1.239,140,0.735,141,0.735,142,0.735,143,0.735,144,0.735,145,0.735,146,0.735,147,0.735,148,0.735,149,1.606,150,0.735,151,0.735,152,0.735,153,0.735,154,0.735,155,0.525,156,0.886,157,0.735,158,0.735,159,0.735,160,0.735,161,0.735,162,0.735,163,0.04,164,0.04]],["title/dependencies.html",[165,1.21,166,1.693]],["body/dependencies.html",[20,0.119,33,1.894,40,1.396,163,0.101,164,0.101,166,2.265,167,2.649,168,2.649,169,2.649,170,2.649,171,2.265,172,2.649,173,2.649,174,2.649,175,2.649,176,2.649]],["title/miscellaneous/functions.html",[177,0.655,178,1.693]],["body/miscellaneous/functions.html",[5,0.662,6,0.662,7,1.417,8,1.679,9,0.486,11,1.361,13,1.639,14,1.361,15,1.836,16,1.361,19,2.223,20,0.112,21,1.639,22,1.455,23,2.223,24,1.361,25,2.223,26,0.897,28,0.897,30,1.361,40,1.213,44,1.645,45,1.973,49,0.662,55,1.679,61,1.361,62,1.836,63,1.836,65,0.897,66,0.897,67,2.223,68,1.836,69,0.897,70,0.897,84,0.897,85,0.897,86,0.897,98,2.277,109,1.645,110,2.486,111,1.645,112,1.645,113,1.836,114,1.836,115,1.213,116,1.213,118,1.361,131,1.361,134,0.897,155,0.897,156,1.361,163,0.061,164,0.061,177,0.486,178,0.897,179,1.904,180,2.223,181,1.904,182,1.904,183,1.904,184,1.904,185,1.255,186,2.301,187,1.255,188,2.76,189,1.255,190,1.255,191,1.255,192,1.255,193,1.255]],["title/index.html",[9,0.655,194,1.693,195,1.693]],["body/index.html",[5,1.005,7,1.323,20,0.082,21,1.005,49,1.005,115,1.005,116,1.005,163,0.082,164,0.082,171,1.364,196,1.907,197,2.571,198,1.907,199,2.908,200,2.908,201,1.364,202,1.907,203,1.907,204,3.112,205,3.347,206,2.908,207,2.908,208,3.249,209,3.347,210,3.421,211,2.571,212,1.907,213,1.907,214,1.907,215,1.907,216,1.907,217,1.907,218,3.249,219,1.907,220,1.907,221,2.571,222,1.907,223,1.907,224,1.907,225,2.571,226,1.907,227,1.907,228,1.907,229,1.907,230,1.907,231,1.907,232,2.571,233,2.571,234,1.907,235,1.907,236,1.907,237,1.907,238,1.907,239,2.908,240,1.907,241,1.907,242,1.907,243,1.907]],["title/modules.html",[244,1.888]],["body/modules.html",[20,0.107,163,0.107,164,0.107,244,2.089]],["title/overview.html",[245,1.888]],["body/overview.html",[0,1.525,20,0.106,163,0.106,164,0.106,245,2.068,246,2.893]],["title/properties.html",[165,1.21,247,1.693]],["body/properties.html",[20,0.112,163,0.106,164,0.106,201,2.057,247,2.057,248,2.878]],["title/miscellaneous/typealiases.html",[177,0.655,249,2.369]],["body/miscellaneous/typealiases.html",[6,1.423,7,1.24,8,1.689,9,1.044,13,1.689,20,0.113,22,1.423,54,1.93,55,1.423,56,1.93,163,0.102,164,0.102,177,1.044,180,1.93,250,2.699]]],"invertedIndex":[["",{"_index":20,"title":{},"body":{"interfaces/QuadReader.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["0",{"_index":89,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["0.0.1",{"_index":248,"title":{},"body":{"properties.html":{}}}],["1",{"_index":246,"title":{},"body":{"overview.html":{}}}],["1.8.1",{"_index":174,"title":{},"body":{"dependencies.html":{}}}],["2.0.0",{"_index":168,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":173,"title":{},"body":{"dependencies.html":{}}}],["6.6.6",{"_index":176,"title":{},"body":{"dependencies.html":{}}}],["9.1.1",{"_index":171,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["_factory",{"_index":162,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["accepts",{"_index":112,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["add",{"_index":115,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["added",{"_index":116,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["addjsonldtostore",{"_index":179,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addjsonldtostore(uri",{"_index":185,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addn3tostore",{"_index":131,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["addn3tostore(uri",{"_index":189,"title":{},"body":{"miscellaneous/functions.html":{}}}],["addrdfxmltostore",{"_index":118,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["addrdfxmltostore(uri",{"_index":190,"title":{},"body":{"miscellaneous/functions.html":{}}}],["adds",{"_index":109,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["aliases",{"_index":250,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular",{"_index":199,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":217,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":170,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":172,"title":{},"body":{"dependencies.html":{}}}],["arr",{"_index":84,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["arr.length",{"_index":88,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["array",{"_index":63,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["arraytostream",{"_index":181,"title":{},"body":{"miscellaneous/functions.html":{}}}],["arraytostream(arr",{"_index":86,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["artifacts",{"_index":219,"title":{},"body":{"index.html":{}}}],["async",{"_index":117,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["await",{"_index":100,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["before",{"_index":147,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["build",{"_index":218,"title":{},"body":{"index.html":{}}}],["building",{"_index":224,"title":{},"body":{"index.html":{}}}],["causes",{"_index":144,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["cd",{"_index":227,"title":{},"body":{"index.html":{}}}],["check",{"_index":241,"title":{},"body":{"index.html":{}}}],["chunk",{"_index":77,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["chunks",{"_index":74,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["chunks.push(chunk",{"_index":78,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["cli",{"_index":200,"title":{},"body":{"index.html":{}}}],["code",{"_index":202,"title":{},"body":{"index.html":{}}}],["completes",{"_index":69,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["component",{"_index":207,"title":{},"body":{"index.html":{}}}],["compute",{"_index":145,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["const",{"_index":73,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["convention",{"_index":160,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["data",{"_index":110,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["datafactory",{"_index":37,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["default",{"_index":216,"title":{},"body":{"index.html":{}}}],["defined",{"_index":17,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["delete",{"_index":152,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["dependencies",{"_index":166,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":188,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deserializen3store",{"_index":182,"title":{},"body":{"miscellaneous/functions.html":{}}}],["deserializen3store(serializedstore",{"_index":155,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":212,"title":{},"body":{"index.html":{}}}],["directory",{"_index":222,"title":{},"body":{"index.html":{}}}],["disable",{"_index":136,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["dist",{"_index":221,"title":{},"body":{"index.html":{}}}],["dist/triple",{"_index":228,"title":{},"body":{"index.html":{}}}],["don't",{"_index":214,"title":{},"body":{"index.html":{}}}],["emitting",{"_index":85,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["err",{"_index":82,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["eslint",{"_index":135,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["eslint/naming",{"_index":159,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["eslint/no",{"_index":140,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["eventemitter",{"_index":30,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["events",{"_index":31,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["execute",{"_index":235,"title":{},"body":{"index.html":{}}}],["export",{"_index":57,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["expressions",{"_index":142,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["factory",{"_index":156,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["fetch(uri",{"_index":101,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["folder",{"_index":226,"title":{},"body":{"index.html":{}}}],["follow",{"_index":103,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["forget",{"_index":215,"title":{},"body":{"index.html":{}}}],["format",{"_index":132,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["formatted",{"_index":113,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["function",{"_index":50,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["functions",{"_index":178,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":238,"title":{},"body":{"index.html":{}}}],["generate",{"_index":206,"title":{},"body":{"index.html":{}}}],["generated",{"_index":198,"title":{},"body":{"index.html":{}}}],["generator",{"_index":26,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["getting",{"_index":194,"title":{"index.html":{}},"body":{}}],["go",{"_index":225,"title":{},"body":{"index.html":{}}}],["graph",{"_index":16,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["help",{"_index":239,"title":{},"body":{"index.html":{}}}],["import",{"_index":27,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["index",{"_index":9,"title":{"index.html":{}},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["input",{"_index":66,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["interface",{"_index":0,"title":{"interfaces/QuadReader.html":{}},"body":{"interfaces/QuadReader.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["json",{"_index":186,"title":{},"body":{"miscellaneous/functions.html":{}}}],["json.parse(serializedstore",{"_index":158,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["json.stringify(storedata",{"_index":154,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["jsonld",{"_index":33,"title":{},"body":{"interfaces/QuadReader.html":{},"dependencies.html":{}}}],["jsonld/jsonld",{"_index":35,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["jsonlddata",{"_index":95,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["karma",{"_index":237,"title":{},"body":{"index.html":{}}}],["ld",{"_index":187,"title":{},"body":{"miscellaneous/functions.html":{}}}],["length",{"_index":87,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["library",{"_index":197,"title":{},"body":{"index.html":{}}}],["line",{"_index":138,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["load",{"_index":114,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["matching",{"_index":164,"title":{},"body":{"interfaces/QuadReader.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["methods",{"_index":10,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["miscellaneous",{"_index":177,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["modules",{"_index":244,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":240,"title":{},"body":{"index.html":{}}}],["n3",{"_index":40,"title":{},"body":{"interfaces/QuadReader.html":{},"dependencies.html":{},"miscellaneous/functions.html":{}}}],["name",{"_index":21,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["new",{"_index":49,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["next",{"_index":137,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["ng",{"_index":205,"title":{},"body":{"index.html":{}}}],["note",{"_index":213,"title":{},"body":{"index.html":{}}}],["npm",{"_index":229,"title":{},"body":{"index.html":{}}}],["null",{"_index":56,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/typealiases.html":{}}}],["object",{"_index":15,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["object.assign",{"_index":150,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["object.assign(store",{"_index":161,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["objectmode",{"_index":90,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["on('data",{"_index":76,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["once('end",{"_index":79,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["once('error",{"_index":81,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["optional",{"_index":23,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["oterm",{"_index":13,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["out",{"_index":242,"title":{},"body":{"index.html":{}}}],["overview",{"_index":245,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":165,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":64,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["parameters",{"_index":19,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["parse(data",{"_index":133,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["parser",{"_index":38,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["peer",{"_index":169,"title":{},"body":{"dependencies.html":{}}}],["predicate",{"_index":14,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["project",{"_index":208,"title":{},"body":{"index.html":{}}}],["promise",{"_index":67,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["promise((resolve",{"_index":71,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["promise>((resolve",{"_index":125,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["properties",{"_index":247,"title":{"properties.html":{}},"body":{"properties.html":{}}}],["publish",{"_index":230,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":223,"title":{},"body":{"index.html":{}}}],["quad",{"_index":39,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["quadreader",{"_index":1,"title":{"interfaces/QuadReader.html":{}},"body":{"interfaces/QuadReader.html":{}}}],["quadreader).readquads(subject",{"_index":60,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["quads",{"_index":106,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["rdf",{"_index":28,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["rdf.datafactory",{"_index":157,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["rdf.sink",{"_index":119,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["rdf.term",{"_index":54,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/typealiases.html":{}}}],["rdfjs/types",{"_index":29,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["rdfxml",{"_index":42,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["rdfxmlparser",{"_index":41,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["read",{"_index":92,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["readable",{"_index":44,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["readme",{"_index":243,"title":{},"body":{"index.html":{}}}],["readquads",{"_index":11,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["readquads(store",{"_index":193,"title":{},"body":{"miscellaneous/functions.html":{}}}],["readquads(subject",{"_index":12,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["readstream",{"_index":65,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["record",{"_index":151,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["redirect",{"_index":102,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["reject",{"_index":72,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["reject(err",{"_index":83,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["resolve(chunks",{"_index":80,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["resolve(store",{"_index":127,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["resolves",{"_index":68,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["response",{"_index":99,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["response.json",{"_index":105,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["response.ok",{"_index":104,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["response.text",{"_index":122,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["result",{"_index":124,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["results",{"_index":163,"title":{},"body":{"interfaces/QuadReader.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{}}}],["return",{"_index":58,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["returns",{"_index":25,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["run",{"_index":204,"title":{},"body":{"index.html":{}}}],["running",{"_index":231,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":175,"title":{},"body":{"dependencies.html":{}}}],["scaffolding",{"_index":203,"title":{},"body":{"index.html":{}}}],["serialize",{"_index":148,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["serializedstore",{"_index":191,"title":{},"body":{"miscellaneous/functions.html":{}}}],["serializen3store",{"_index":183,"title":{},"body":{"miscellaneous/functions.html":{}}}],["serializen3store(store",{"_index":134,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["size",{"_index":146,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["solution",{"_index":47,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["spec",{"_index":36,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["src/.../triple",{"_index":180,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/triple",{"_index":6,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["started",{"_index":195,"title":{"index.html":{}},"body":{}}],["store",{"_index":7,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/typealiases.html":{}}}],["store.import(arraytostream(quads",{"_index":108,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["store.import(xmlparser",{"_index":128,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["store.size",{"_index":143,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["stored",{"_index":220,"title":{},"body":{"index.html":{}}}],["storedata",{"_index":149,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["storedata['_factory",{"_index":153,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["stream",{"_index":45,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["streaming",{"_index":43,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["streamtoarray",{"_index":184,"title":{},"body":{"miscellaneous/functions.html":{}}}],["streamtoarray(readstream",{"_index":70,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["string",{"_index":55,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["subject",{"_index":24,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["t",{"_index":75,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["temporary",{"_index":46,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["test",{"_index":234,"title":{},"body":{"index.html":{}}}],["tests",{"_index":233,"title":{},"body":{"index.html":{}}}],["this.push(i",{"_index":94,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["tordf",{"_index":32,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["tordf(jsonlddata",{"_index":107,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["triple",{"_index":209,"title":{},"body":{"index.html":{}}}],["triplestoreutils",{"_index":196,"title":{},"body":{"index.html":{}}}],["true",{"_index":91,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["tslib",{"_index":167,"title":{},"body":{"dependencies.html":{}}}],["turns",{"_index":61,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["type",{"_index":22,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":249,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":97,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["types",{"_index":52,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["typescript",{"_index":139,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["undefined",{"_index":96,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["unit",{"_index":232,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":59,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["until",{"_index":51,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["unused",{"_index":141,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["updated",{"_index":53,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["uri",{"_index":98,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["uri?.startswith('http",{"_index":121,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["url",{"_index":34,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["use",{"_index":211,"title":{},"body":{"index.html":{}}}],["using",{"_index":48,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["utils",{"_index":210,"title":{},"body":{"index.html":{}}}],["utils.ts",{"_index":8,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["utils.ts:12",{"_index":18,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["values",{"_index":62,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["version",{"_index":201,"title":{},"body":{"index.html":{},"properties.html":{}}}],["via",{"_index":236,"title":{},"body":{"index.html":{}}}],["void",{"_index":93,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["xml",{"_index":111,"title":{},"body":{"interfaces/QuadReader.html":{},"miscellaneous/functions.html":{}}}],["xmldata",{"_index":120,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["xmlparser",{"_index":123,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["xmlparser.end",{"_index":130,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["xmlparser.once('end",{"_index":126,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["xmlparser.write(xmldata",{"_index":129,"title":{},"body":{"interfaces/QuadReader.html":{}}}],["yes",{"_index":192,"title":{},"body":{"miscellaneous/functions.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/QuadReader.html":{"url":"interfaces/QuadReader.html","title":"interface - QuadReader","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  QuadReader\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/triple-store-utils.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Methods\n                        \n                    \n                    \n                        \n                            \n                                \n                                    \n                                        readQuads\n                                    \n                                \n                            \n                        \n                    \n                \n            \n        \n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        readQuads\n                        \n                    \n                \n            \n            \n                \nreadQuads(subject: OTerm, predicate: OTerm, object: OTerm, graph: OTerm)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/triple-store-utils.ts:12\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                subject\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                predicate\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                graph\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Generator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import * as rdf from '@rdfjs/types';\nimport { EventEmitter } from 'events';\nimport { toRDF } from 'jsonld';\nimport { JsonLd, Url } from 'jsonld/jsonld-spec';\nimport { DataFactory, Parser, Quad, Store } from 'n3';\nimport { RdfXmlParser } from 'rdfxml-streaming-parser';\nimport { Readable } from 'readable-stream';\n\n// Temporary solution for using the new readQuads function on Store until the @types are updated\ntype OTerm = rdf.Term | string | null;\ninterface QuadReader {\n  readQuads(subject: OTerm, predicate: OTerm, object: OTerm, graph: OTerm): Generator;\n}\n\nexport function readQuads(\n  store: Store,\n  subject: OTerm,\n  predicate: OTerm,\n  object: OTerm,\n  graph: OTerm,\n): Generator {\n  return (store as unknown as QuadReader).readQuads(subject, predicate, object, graph);\n}\n\n/**\n * Turns a stream of values into an array.\n *\n * @param readStream The input stream.\n * @returns A promise that resolves to an array of values when the stream completes.\n */\nexport function streamToArray(readStream: EventEmitter): Promise {\n  return new Promise((resolve, reject) => {\n    const chunks: T[] = [];\n    readStream\n      .on('data', (chunk: T) => {\n        chunks.push(chunk);\n      })\n      .once('end', () => {\n        resolve(chunks);\n      })\n      .once('error', (err) => {\n        reject(err);\n      });\n  });\n}\n\n/**\n * Turns an array into a readable stream.\n *\n * @param arr The values.\n * @returns A new readable stream emitting the values from the array.\n */\nexport function arrayToStream(arr: T[]): Readable {\n  const length = arr.length;\n  let i = 0;\n\n  return new Readable({\n    objectMode: true,\n    read(): void {\n      this.push(i ,\n): Promise> {\n  let jsonLdData: JsonLd | undefined;\n  if (typeof uri === 'string') {\n    const response = await fetch(uri, { redirect: 'follow' });\n    if (response.ok) {\n      jsonLdData = (await response.json()) as JsonLd;\n    }\n  } else {\n    jsonLdData = uri;\n  }\n\n  if (jsonLdData) {\n    const quads = (await toRDF(jsonLdData)) as unknown[];\n    store.import(arrayToStream(quads) as unknown as EventEmitter);\n  }\n  return store;\n}\n\n/**\n * Adds data from rdf xml to the store.\n * Accepts either a xml-formatted string or a uri to load data from.\n *\n * @param uri A data uri or an xml-formatted string to load data from.\n * @param store The store to add data to\n * @returns A promise that resolves when the data has been added.\n */\nexport async function addRdfXmlToStore(\n  uri: string,\n  store: rdf.Sink,\n): Promise> {\n  let xmlData: string | undefined;\n  if (typeof uri === 'string' && uri?.startsWith('http')) {\n    const response = await fetch(uri, { redirect: 'follow' });\n    if (response.ok) {\n      xmlData = await response.text();\n    }\n  } else {\n    xmlData = uri;\n  }\n\n  if (xmlData) {\n    const xmlParser = new RdfXmlParser({ dataFactory: DataFactory });\n    const result = new Promise>((resolve) => {\n      xmlParser.once('end', () => resolve(store));\n    });\n\n    store.import(xmlParser);\n    xmlParser.write(xmlData);\n    xmlParser.end();\n    return result;\n  } else {\n    return store;\n  }\n}\n\n/**\n * Adds data from an n3 file to the store.\n * Accepts either a n3-formatted string or a uri to load data from.\n *\n * @param uri A data uri or an n3-formatted string.\n * @param store The store to add data to.\n * @returns A promise that resolves when the data has been added.\n */\nexport async function addN3ToStore(\n  uri: string | Url,\n  store: rdf.Sink,\n): Promise> {\n  let data: string | undefined;\n  if (typeof uri === 'string' && uri?.startsWith('http')) {\n    const response = await fetch(uri, { redirect: 'follow' });\n    if (response.ok) {\n      data = await response.text();\n    }\n  } else {\n    data = uri;\n  }\n  if (data) {\n    const quads = new Parser({ format: 'n3' }).parse(data);\n    store.import(arrayToStream(quads) as unknown as EventEmitter);\n  }\n  return store;\n}\n\nexport function serializeN3Store(store: Store): string {\n  // eslint-disable-next-line @typescript-eslint/no-unused-expressions\n  store.size; // this causes the store to compute the size before we serialize it\n  const storeData = Object.assign({} as Record, store);\n  delete storeData['_factory'];\n  return JSON.stringify(storeData);\n}\n\nexport function deserializeN3Store(serializedStore: string, factory?: rdf.DataFactory): Store {\n  const storeData = JSON.parse(serializedStore);\n  const store = new Store();\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  Object.assign(store, storeData, { _factory: factory ?? DataFactory });\n  return store;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.1.1\n        \n            @angular/core : ^9.1.1\n        \n            jsonld : ^4.0.1\n        \n            n3 : ^1.8.1\n        \n            rxjs : ~6.6.6\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            addJsonLdToStore   (src/.../triple-store-utils.ts)\n                        \n                        \n                            addN3ToStore   (src/.../triple-store-utils.ts)\n                        \n                        \n                            addRdfXmlToStore   (src/.../triple-store-utils.ts)\n                        \n                        \n                            arrayToStream   (src/.../triple-store-utils.ts)\n                        \n                        \n                            deserializeN3Store   (src/.../triple-store-utils.ts)\n                        \n                        \n                            readQuads   (src/.../triple-store-utils.ts)\n                        \n                        \n                            serializeN3Store   (src/.../triple-store-utils.ts)\n                        \n                        \n                            streamToArray   (src/.../triple-store-utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/triple-store-utils.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        addJsonLdToStore\n                        \n                    \n                \n            \n            \n                \naddJsonLdToStore(uri, store)\n                \n            \n\n\n\n\n            \n                \n                        Adds data from json ld to the store.\nAccepts either a json object or a uri to load data from.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uri\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A data uri or a json object.\n\n                                            \n                                        \n                                        \n                                                store\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The store to add data to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves when the data has been added.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addN3ToStore\n                        \n                    \n                \n            \n            \n                \naddN3ToStore(uri, store)\n                \n            \n\n\n\n\n            \n                \n                        Adds data from an n3 file to the store.\nAccepts either a n3-formatted string or a uri to load data from.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uri\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A data uri or an n3-formatted string.\n\n                                            \n                                        \n                                        \n                                                store\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The store to add data to.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves when the data has been added.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        addRdfXmlToStore\n                        \n                    \n                \n            \n            \n                \naddRdfXmlToStore(uri: string, store)\n                \n            \n\n\n\n\n            \n                \n                        Adds data from rdf xml to the store.\nAccepts either a xml-formatted string or a uri to load data from.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                uri\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    A data uri or an xml-formatted string to load data from.\n\n                                            \n                                        \n                                        \n                                                store\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The store to add data to\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise>\n\n                        \n                            \n                                A promise that resolves when the data has been added.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        arrayToStream\n                        \n                    \n                \n            \n            \n                \narrayToStream(arr)\n                \n            \n\n\n\n\n            \n                \n                        Turns an array into a readable stream.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                arr\n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The values.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Readable\n\n                        \n                            \n                                A new readable stream emitting the values from the array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deserializeN3Store\n                        \n                    \n                \n            \n            \n                \ndeserializeN3Store(serializedStore: string, factory?)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                serializedStore\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                factory\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Store\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        readQuads\n                        \n                    \n                \n            \n            \n                \nreadQuads(store: Store, subject: OTerm, predicate: OTerm, object: OTerm, graph: OTerm)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                store\n                                            \n                                                        Store\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                subject\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                predicate\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                object\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                graph\n                                            \n                                                            OTerm\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Generator\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        serializeN3Store\n                        \n                    \n                \n            \n            \n                \nserializeN3Store(store: Store)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                store\n                                            \n                                                        Store\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        streamToArray\n                        \n                    \n                \n            \n            \n                \nstreamToArray(readStream: EventEmitter)\n                \n            \n\n\n\n\n            \n                \n                        Turns a stream of values into an array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                readStream\n                                            \n                                                        EventEmitter\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The input stream.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                A promise that resolves to an array of values when the stream completes.\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nTripleStoreUtils\nThis library was generated with Angular CLI version 9.1.1.\nCode scaffolding\nRun ng generate component component-name --project triple-store-utils to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module --project triple-store-utils.\n\nNote: Don't forget to add --project triple-store-utils or else it will be added to the default project in your angular.json file.\n\nBuild\nRun ng build triple-store-utils to build the project. The build artifacts will be stored in the dist/ directory.\nPublishing\nAfter building your library with ng build triple-store-utils, go to the dist folder cd dist/triple-store-utils and run npm publish.\nRunning unit tests\nRun ng test triple-store-utils to execute the unit tests via Karma.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            OTerm   (src/.../triple-store-utils.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/triple-store-utils.ts\n    \n    \n        \n            \n                \n                    \n                    OTerm\n                \n            \n            \n                \n                        rdf.Term | string | null\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
