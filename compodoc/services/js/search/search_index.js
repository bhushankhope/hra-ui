var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/injectables/ContactImplService.html",[0,0.022,1,1.98]],["body/injectables/ContactImplService.html",[0,0.036,1,3.601,2,0.952,3,0.634,4,0.542,5,0.542,6,3.75,7,0.542,8,3.184,9,2.137,10,4.617,11,4.617,12,4.617,13,3.184,14,4.617,15,1.684,16,2.417,17,0.375,18,1.326,19,3.601,20,2.759,21,2.736,22,1.736,23,1.077,24,3.048,25,2.759,26,1.495,27,4.617,28,2.622,29,4.617,30,3.184,31,4.617,32,1.367,33,0.047,34,1.215,35,0.634,36,1.367,37,0.732,38,0.976,39,3.184,40,0.845,41,0.542,42,3.048,43,0.634,44,1.215,45,1.215,46,0.634,47,0.634,48,1.736,49,1.367,50,3.75,51,3.75,52,3.75,53,3.75,54,3.75,55,3.75,56,3.75,57,3.75,58,3.75,59,0.037,60,0.037]],["title/interfaces/ContactMessage.html",[21,1.505,61,0.93]],["body/interfaces/ContactMessage.html",[0,0.035,3,0.615,4,0.526,5,0.526,7,0.526,13,3.125,16,2.097,17,0.364,20,2.174,21,2.707,26,1.178,28,2.955,30,3.889,33,0.047,35,0.834,37,0.71,38,0.963,39,2.509,40,0.766,41,0.526,43,0.615,46,0.766,47,0.766,59,0.036,60,0.036,61,1.598,62,2.174,63,2.957,64,3.683,65,4.584,66,2.375,67,1.814,68,4.404,69,3.737,70,4.404,71,4.404,72,2.284,73,2.957,74,2.509,75,0.924,76,2.957]],["title/injectables/ContactService.html",[0,0.022,16,1.329]],["body/injectables/ContactService.html",[0,0.035,2,0.943,3,0.628,4,0.537,5,0.537,7,0.537,13,2.563,16,2.409,17,0.372,18,1.319,19,3.166,20,2.744,21,2.854,23,1.067,26,1.487,28,2.802,30,3.589,32,1.355,33,0.047,34,1.203,35,0.628,36,1.355,37,0.972,38,1.044,39,3.166,40,0.776,41,0.537,43,0.628,46,0.776,47,0.842,59,0.037,60,0.037,61,1.487,63,3.021,64,3.021,65,4.23,67,1.614,68,4.05,69,3.436,70,4.05,71,4.05,72,2.521,73,3.732,74,3.166,75,1.166,76,3.732,77,3.716]],["title/interfaces/ExtendedTissue.html",[61,0.93,78,1.98]],["body/interfaces/ExtendedTissue.html",[0,0.026,3,0.391,4,0.335,5,0.658,7,0.335,15,1.431,17,0.232,33,0.048,35,0.77,38,0.653,40,0.802,41,0.335,43,0.391,44,0.75,45,1.083,46,0.565,47,0.391,48,1.072,49,1.661,59,0.027,60,0.027,61,0.75,62,1.384,66,1.752,67,1.699,75,1.157,78,2.306,79,0.845,80,0.845,81,1.384,82,2.718,83,1.439,84,2.109,85,2.718,86,2.718,87,2.718,88,1.622,89,1.816,90,1.699,91,1.384,92,1.214,93,1.384,94,2.344,95,1.883,96,1.219,97,1.598,98,1.219,99,1.072,100,2.306,101,1.548,102,1.566,103,1.752,104,2.306,105,1.763,106,1.61,107,1.883,108,1.883,109,1.883,110,2.567,111,2.722,112,1.548,113,1.998,114,2.718,115,1.883,116,2.718,117,1.883,118,2.718,119,1.883,120,1.883,121,1.816,122,1.214,123,1.883,124,3.573,125,1.214,126,2.028,127,1.219,128,0.665,129,1.214,130,1.214,131,1.598,132,3.049,133,2.319,134,2.306,135,2.962,136,3.273,137,2.706,138,3.822,139,3.822,140,3.822,141,2.706,142,2.306,143,1.598,144,1.598,145,2.962,146,2.306,147,3.141,148,2.962,149,2.962,150,2.306,151,2.962,152,1.598,153,1.598,154,2.306,155,1.598,156,2.306,157,2.706,158,2.306,159,1.598,160,1.598,161,2.306,162,2.306,163,1.598,164,1.598,165,1.598,166,2.306,167,2.306,168,1.598,169,1.598,170,1.598,171,2.962,172,1.598,173,1.598,174,1.598,175,1.598,176,2.306,177,2.306,178,2.306,179,2.306,180,2.706,181,2.306,182,1.598,183,1.598,184,2.306,185,1.598,186,1.598,187,1.598,188,2.706,189,2.306,190,2.306,191,1.598,192,2.706,193,2.306,194,1.598,195,2.706,196,1.752,197,1.598,198,1.883,199,0.951,200,1.883]],["title/interfaces/FtuDataImplEndpoints.html",[61,0.93,201,1.98]],["body/interfaces/FtuDataImplEndpoints.html",[0,0.016,3,0.211,4,0.445,5,0.717,7,0.445,8,0.861,9,0.957,15,0.455,17,0.125,25,2.195,26,1.19,33,0.048,34,0.857,35,0.798,37,0.935,38,0.921,40,0.688,41,0.181,43,0.211,44,0.67,45,0.857,46,0.52,47,0.211,48,1.7,49,1.986,59,0.033,60,0.017,61,0.404,62,0.746,66,1.084,67,1.367,75,1.133,83,1.249,84,1.578,88,1.647,89,0.957,90,1.571,91,0.746,92,0.654,93,0.746,96,0.754,98,2.029,99,0.578,101,1.578,102,1.769,103,1.084,105,1.086,106,2.16,112,0.957,121,1.578,122,0.654,125,0.654,126,1.122,127,0.754,128,1.518,130,1.387,133,1.578,199,0.849,201,1.825,202,0.513,203,0.455,204,0.654,205,2.351,206,1.681,207,1.825,208,1.681,209,2.431,210,2.132,211,2.389,212,2.11,213,3.706,214,2.682,215,1.586,216,1.612,217,1.015,218,1.015,219,1.015,220,1.015,221,1.015,222,2.151,223,1.015,224,1.015,225,1.015,226,1.015,227,2.195,228,1.236,229,0.861,230,1.8,231,2.038,232,1.786,233,1.387,234,0.746,235,0.957,236,0.746,237,0.861,238,1.426,239,0.746,240,0.861,241,0.861,242,2.533,243,0.861,244,0.861,245,0.861,246,0.861,247,0.861,248,0.746,249,0.861,250,0.861,251,0.861,252,0.861,253,0.861,254,2.037,255,0.861,256,2.212,257,3.307,258,0.746,259,1.426,260,1.015,261,1.825,262,1.015,263,0.861,264,2.037,265,1.825,266,2.522,267,1.426,268,2.99,269,1.825,270,1.426,271,0.861,272,1.825,273,2.932,274,1.825,275,2.121,276,2.121,277,0.861,278,1.426,279,2.533,280,1.426,281,0.861,282,0.861,283,1.578,284,0.861,285,0.861,286,0.861,287,0.861,288,0.861,289,0.861,290,1.825,291,0.957,292,0.957,293,1.426,294,0.861,295,0.861,296,0.861,297,1.838,298,1.426,299,1.426,300,0.861,301,0.861,302,2.121,303,0.861,304,0.861,305,0.861,306,0.861,307,1.015,308,1.015,309,1.015,310,0.861,311,1.426,312,1.084,313,0.578,314,0.861,315,1.015,316,1.015,317,1.015,318,1.015,319,1.015,320,1.236,321,1.015,322,1.015,323,0.861,324,1.015,325,2.151,326,1.015,327,1.681,328,3.838,329,2.151,330,1.015,331,1.015,332,1.015,333,1.015,334,2.151,335,1.015,336,1.681,337,1.681,338,1.681,339,2.151,340,1.681,341,0.849,342,2.533,343,1.015,344,2.151,345,3.43,346,1.015,347,0.746,348,0.861,349,2.962,350,2.91,351,0.746,352,1.015,353,1.015,354,1.015,355,1.015,356,1.015,357,1.015,358,0.861,359,0.746,360,0.861,361,2.501,362,2.151,363,1.015,364,1.015,365,0.578,366,0.861,367,1.015,368,1.015,369,1.015,370,0.746,371,0.746,372,1.015,373,1.015,374,0.746,375,1.236,376,0.861,377,1.015,378,1.015,379,1.015,380,1.015,381,1.015,382,1.015,383,1.681,384,2.121,385,2.151,386,1.015,387,1.015,388,1.015,389,1.015,390,1.015,391,1.015,392,1.015,393,1.015,394,1.015,395,1.015,396,1.015,397,1.015,398,1.015,399,1.015,400,1.015,401,1.015,402,1.015,403,1.015,404,1.015,405,1.015,406,1.015,407,1.015,408,1.015,409,1.015,410,1.015,411,1.015,412,2.151,413,1.015,414,1.015,415,3.162,416,1.015,417,1.015,418,1.015,419,1.015,420,1.015,421,1.015,422,1.015,423,1.015,424,0.861,425,2.151,426,1.015,427,1.681,428,1.015,429,1.681,430,1.015,431,1.015,432,1.015,433,1.015,434,2.151,435,1.015,436,2.151,437,0.861,438,0.861,439,1.015,440,1.015,441,0.746,442,1.015,443,1.015,444,1.015,445,1.015,446,1.015,447,1.681,448,1.015,449,1.015,450,1.681,451,1.015,452,1.015,453,1.015,454,1.015,455,1.015,456,1.015,457,1.015,458,1.015,459,1.015,460,1.015,461,1.015,462,2.151,463,1.015,464,1.015,465,1.015,466,1.581,467,2.151,468,1.681,469,1.015,470,2.037,471,1.681,472,1.015,473,0.578,474,0.746,475,0.746,476,0.578,477,1.015,478,1.015,479,1.681,480,1.015,481,1.015,482,1.015,483,1.015,484,1.015,485,1.015,486,1.015,487,1.015,488,1.015,489,1.015,490,2.151,491,1.015,492,1.015,493,1.015,494,1.015]],["title/injectables/FtuDataImplService.html",[0,0.022,320,1.716]],["body/injectables/FtuDataImplService.html",[0,0.015,2,0.296,3,0.197,4,0.364,5,0.68,7,0.594,8,1.346,9,1.166,15,0.712,17,0.117,18,0.561,22,1.643,23,1.019,25,2.666,26,1.445,32,1.196,33,0.048,34,1.28,35,0.795,36,1.196,37,0.979,38,1.011,40,0.668,41,0.168,43,0.197,44,0.632,45,0.816,46,0.498,47,0.197,48,1.643,49,1.969,59,0.032,60,0.016,61,0.377,67,1.331,75,1.107,83,1.307,84,1.519,88,1.523,89,0.904,90,1.544,91,0.696,92,0.611,93,0.696,96,0.712,98,2.066,99,0.539,101,1.519,102,1.739,103,1.023,105,1.034,106,2.19,112,0.904,121,1.519,122,0.611,125,0.611,126,1.196,127,1.074,128,1.502,130,1.32,133,1.519,199,1.457,201,1.346,202,0.478,203,0.425,204,0.611,205,2.032,206,0.947,207,1.346,208,0.947,209,1.761,210,1.719,211,2.072,212,1.83,213,3.214,214,2.032,215,1.374,216,1.32,217,0.947,218,0.947,219,0.947,220,0.947,221,0.947,222,2.048,223,0.947,224,0.947,225,0.947,226,0.947,227,2.121,228,1.167,229,0.804,230,1.902,231,2.154,232,1.976,233,1.32,234,0.696,235,1.902,236,0.696,237,0.804,238,1.346,239,0.696,240,0.804,241,0.804,242,2.448,243,0.804,244,0.804,245,0.804,246,0.804,247,0.804,248,0.696,249,0.804,250,0.804,251,0.804,252,0.804,253,0.804,254,1.961,255,0.804,256,2.154,257,3.214,258,0.696,259,1.346,260,0.947,261,1.737,262,0.947,263,0.804,264,1.961,265,1.737,266,2.456,267,1.346,268,2.945,269,1.737,270,1.346,271,0.804,272,1.737,273,3.078,274,1.737,275,2.032,276,2.032,277,0.804,278,1.346,279,2.448,280,1.346,281,0.804,282,0.804,283,1.519,284,0.804,285,0.804,286,0.804,287,0.804,288,0.804,289,0.804,290,1.737,291,0.904,292,0.904,293,1.346,294,0.804,295,0.804,296,0.804,297,2.121,298,1.346,299,1.346,300,0.804,301,0.804,302,2.032,303,0.804,304,0.804,305,0.804,306,0.804,307,0.947,308,0.947,309,0.947,310,0.804,311,1.346,312,1.023,313,0.539,314,0.804,315,0.947,316,0.947,317,0.947,318,0.947,319,0.947,320,1.761,321,1.587,322,1.587,323,1.346,324,1.587,325,2.048,326,0.947,327,1.587,328,3.765,329,2.048,330,0.947,331,0.947,332,0.947,333,0.947,334,2.048,335,0.947,336,1.587,337,1.587,338,1.587,339,2.048,340,1.587,341,1.034,342,3.077,343,0.947,344,2.048,345,3.341,346,0.947,347,1.761,348,1.346,349,2.916,350,3.194,351,1.167,352,0.947,353,0.947,354,0.947,355,0.947,356,0.947,357,0.947,358,0.804,359,1.761,360,1.346,361,2.395,362,2.048,363,0.947,364,0.947,365,1.364,366,1.346,367,0.947,368,0.947,369,0.947,370,1.761,371,1.167,372,0.947,373,0.947,374,1.761,375,1.761,376,1.346,377,0.947,378,0.947,379,0.947,380,0.947,381,0.947,382,0.947,383,1.587,384,2.032,385,2.048,386,0.947,387,0.947,388,0.947,389,0.947,390,0.947,391,0.947,392,0.947,393,0.947,394,0.947,395,0.947,396,0.947,397,0.947,398,0.947,399,0.947,400,0.947,401,0.947,402,0.947,403,0.947,404,0.947,405,0.947,406,0.947,407,0.947,408,0.947,409,0.947,410,0.947,411,0.947,412,2.048,413,0.947,414,0.947,415,3.064,416,0.947,417,0.947,418,0.947,419,0.947,420,0.947,421,0.947,422,0.947,423,0.947,424,0.804,425,2.048,426,0.947,427,1.587,428,0.947,429,1.587,430,0.947,431,0.947,432,0.947,433,0.947,434,2.048,435,0.947,436,2.048,437,0.804,438,0.804,439,0.947,440,0.947,441,0.696,442,0.947,443,0.947,444,0.947,445,0.947,446,0.947,447,1.587,448,0.947,449,0.947,450,1.587,451,0.947,452,0.947,453,0.947,454,0.947,455,0.947,456,0.947,457,0.947,458,0.947,459,0.947,460,0.947,461,0.947,462,2.048,463,0.947,464,0.947,465,0.947,466,1.505,467,2.048,468,1.587,469,0.947,470,1.961,471,1.587,472,0.947,473,0.539,474,0.696,475,0.696,476,0.539,477,0.947,478,0.947,479,1.587,480,0.947,481,0.947,482,0.947,483,0.947,484,0.947,485,0.947,486,0.947,487,0.947,488,0.947,489,0.947,490,2.048,491,0.947,492,0.947,493,0.947,494,0.947,495,1.165,496,1.165,497,1.165,498,1.165,499,1.165,500,1.165]],["title/injectables/FtuDataService.html",[0,0.022,235,1.329]],["body/injectables/FtuDataService.html",[0,0.031,2,0.749,3,0.498,4,0.645,5,0.645,7,0.69,9,1.831,17,0.295,18,1.136,23,1.471,26,1.545,32,1.814,33,0.047,34,1.611,35,0.841,36,1.814,37,1.079,38,1.112,40,0.806,41,0.426,43,0.498,46,0.498,47,0.498,59,0.032,60,0.032,72,2.636,74,3.29,83,1.37,88,1.446,96,1.075,98,2.106,99,1.365,126,1.628,128,1.37,199,1.958,202,2.147,203,1.907,212,1.831,215,1.442,216,2.5,230,1.365,231,1.546,232,2.339,233,1.546,234,1.762,235,1.831,341,1.958,347,2.364,349,2.973,351,2.364,359,2.364,360,2.728,365,1.831,366,2.728,370,2.364,371,2.364,374,2.364,376,2.728,501,2.949,502,3.216,503,3.956,504,3.956,505,2.949,506,5.317,507,2.949,508,4.77,509,2.949,510,2.949,511,2.949,512,2.949]],["title/modules/HraServiceModule.html",[513,2.334,514,1.98]],["body/modules/HraServiceModule.html",[1,3.297,3,0.671,4,0.574,5,0.574,16,2.213,33,0.047,40,0.935,41,0.574,43,0.671,46,0.671,47,0.671,59,0.038,60,0.038,126,1.87,203,1.743,209,2.373,210,2.081,211,2.081,212,1.838,215,1.448,235,2.213,236,2.373,239,2.857,320,2.857,514,3.297,515,2.738,516,3.971,517,4.781,518,3.971,519,3.971,520,3.971,521,3.228,522,4.17,523,4.781,524,3.971,525,3.971,526,3.971,527,4.781,528,3.971,529,3.971]],["title/injectables/MockContactService.html",[0,0.022,530,2.334]],["body/injectables/MockContactService.html",[0,0.036,2,0.969,3,0.645,4,0.551,5,0.551,7,0.551,15,1.701,16,2.537,17,0.382,18,1.34,19,3.218,20,2.788,21,2.873,22,1.766,23,1.096,24,3.101,28,2.642,32,1.391,33,0.047,34,1.236,35,0.852,36,1.391,37,0.745,38,0.984,40,0.852,41,0.551,42,3.101,43,0.645,44,1.236,45,1.236,46,0.645,47,0.91,59,0.038,60,0.038,69,3.218,75,1.185,106,1.566,127,1.701,196,2.445,375,2.788,530,3.793,531,3.815,532,3.793,533,4.666,534,4.666,535,4.666,536,4.666,537,3.815,538,3.815,539,3.815,540,3.815]],["title/injectables/MockFtuDataService.html",[0,0.022,541,2.334]],["body/injectables/MockFtuDataService.html",[0,0.024,2,0.542,3,0.361,4,0.455,5,0.309,7,0.541,15,1.149,17,0.214,18,1.187,22,2.135,23,1.325,25,3.178,26,1.69,32,1.607,33,0.048,34,1.428,35,0.745,36,1.607,37,1.018,38,1.087,40,0.806,41,0.309,43,0.361,44,0.692,45,0.692,46,0.361,47,0.806,48,2.135,49,1.149,59,0.025,60,0.025,80,0.779,83,1.37,88,1.494,90,1.02,96,0.779,98,2.085,99,0.988,102,1.88,105,1.293,106,2.24,121,2.267,126,1.149,127,1.903,128,1.481,129,1.119,132,1.883,196,1.651,199,1.893,202,0.877,203,0.779,212,0.988,215,0.779,216,1.119,230,2.135,231,2.31,232,2.31,233,1.119,234,1.276,235,2.387,236,1.276,248,1.276,266,1.276,273,3.224,291,0.988,292,0.988,297,1.883,312,2.787,341,1.293,342,3.506,347,2.47,348,2.173,349,2.634,350,3.29,351,1.883,359,2.47,365,1.913,370,2.47,371,1.883,374,2.47,375,2.47,441,1.276,466,1.276,470,1.276,473,0.988,474,1.276,475,1.276,476,0.988,522,2.561,532,2.561,541,2.561,542,1.736,543,3.151,544,3.151,545,3.151,546,2.135,547,3.744,548,2.135,549,3.151,550,2.135,551,2.135,552,3.151,553,2.135,554,2.135,555,1.473,556,0.988,557,2.135,558,1.736,559,2.561,560,2.561,561,2.561,562,2.561,563,2.561,564,2.561,565,2.561,566,2.561,567,2.561,568,3.98,569,3.75,570,3.75,571,2.561,572,2.561,573,2.561,574,2.561,575,2.561,576,2.561,577,2.561,578,2.561,579,2.561,580,1.736,581,1.736,582,1.736,583,1.736,584,1.736,585,3.043,586,2.561,587,1.736,588,2.561,589,1.736,590,1.736,591,2.135,592,2.135,593,2.135,594,2.135]],["title/injectables/MockTissueFtuService.html",[0,0.022,595,2.334]],["body/injectables/MockTissueFtuService.html",[0,0.027,2,0.619,3,0.412,4,0.352,5,0.352,7,0.352,15,1.264,17,0.244,18,0.996,22,1.605,23,0.996,26,1.424,33,0.047,37,0.677,38,0.907,40,0.785,41,0.352,43,0.412,44,0.789,45,0.789,46,0.586,47,0.412,49,1.264,59,0.028,60,0.028,67,1.564,72,1.605,75,0.619,79,0.889,80,0.889,83,0.996,90,1.123,92,1.277,102,1.884,103,1.817,106,1.805,127,0.889,128,1.334,129,1.277,196,2.53,215,2.069,283,2.15,291,1.605,292,1.605,313,1.128,365,2.035,473,2.626,476,1.605,555,1.681,556,1.128,558,1.981,595,2.819,596,1.681,597,3.426,598,3.925,599,2.437,600,2.437,601,2.437,602,2.072,603,2.437,604,1.681,605,1.981,606,2.072,607,1.981,608,1.981,609,2.437,610,1.981,611,1.981,612,1.981,613,2.819,614,2.819,615,2.819,616,2.819,617,2.784,618,3.204,619,3.426,620,1.681,621,1.981,622,1.981,623,1.981,624,3.75,625,3.281,626,3.281,627,4.127,628,2.391,629,3.281,630,4.309,631,3.562,632,2.819,633,3.574,634,3.574,635,4.515,636,3.925,637,3.776,638,1.981,639,2.819,640,3.281,641,3.776,642,4.199,643,1.981,644,2.819,645,1.981,646,1.981,647,1.981,648,3.574,649,1.981,650,2.819,651,1.981,652,3.281,653,3.574,654,1.981,655,1.981,656,2.819,657,2.819,658,3.281,659,1.981,660,1.981,661,1.981,662,1.981,663,1.981,664,1.981,665,1.981,666,1.981,667,1.981,668,1.981,669,1.981,670,3.925,671,3.776,672,3.776,673,1.981,674,1.981,675,1.981,676,1.981,677,1.981,678,2.819,679,1.981,680,1.981,681,1.981,682,2.437,683,2.437]],["title/injectables/MockTissueLibraryService.html",[0,0.022,197,1.98]],["body/injectables/MockTissueLibraryService.html",[0,0.026,2,0.593,3,0.395,4,0.338,5,0.623,7,0.338,15,1.437,17,0.234,18,0.966,22,1.082,23,0.671,33,0.048,35,0.395,37,0.456,38,0.769,40,0.804,41,0.338,43,0.395,44,0.757,45,1.09,46,0.569,47,0.395,48,1.082,49,1.667,59,0.027,60,0.027,61,0.757,67,1.656,75,0.854,78,1.611,79,0.852,80,0.852,81,1.396,82,1.899,83,1.367,84,1.557,86,1.899,87,1.899,88,1.589,89,1.557,90,1.681,91,1.396,92,1.225,93,1.396,94,2.845,95,1.899,96,1.227,97,1.611,98,1.227,99,1.082,100,2.32,101,1.557,102,1.573,103,1.763,104,2.32,105,1.77,106,1.618,107,1.899,108,1.899,109,1.899,110,2.577,111,2.731,112,1.557,113,2.01,114,2.735,115,1.899,116,2.735,117,1.899,118,2.735,119,1.899,120,1.899,121,1.825,122,1.225,123,1.899,124,3.58,125,1.225,126,2.031,127,1.437,128,0.671,129,1.225,130,1.225,131,1.611,132,3.056,133,2.324,134,2.32,135,2.974,136,3.283,137,2.719,138,3.826,139,3.826,140,3.826,141,2.719,142,2.32,143,1.611,144,1.611,145,2.974,146,2.32,147,3.152,148,2.974,149,2.974,150,2.32,151,2.974,152,1.611,153,1.611,154,2.32,155,1.611,156,2.32,157,2.719,158,2.32,159,1.611,160,1.611,161,2.32,162,2.32,163,1.611,164,1.611,165,1.611,166,2.32,167,2.32,168,1.611,169,1.611,170,1.611,171,2.974,172,1.611,173,1.611,174,1.611,175,1.611,176,2.32,177,2.32,178,2.32,179,2.32,180,2.719,181,2.32,182,1.611,183,1.611,184,2.32,185,1.611,186,1.611,187,1.611,188,2.719,189,2.32,190,2.32,191,1.611,192,2.719,193,2.32,194,1.611,195,2.719,196,2.26,197,2.32,198,2.735,199,1.77,200,1.899,684,2.337]],["title/injectables/TissueFtuService.html",[0,0.022,597,1.98]],["body/injectables/TissueFtuService.html",[0,0.035,2,0.942,3,0.627,4,0.536,5,0.663,7,0.536,9,2.123,17,0.371,18,1.317,23,1.317,26,1.486,32,1.353,33,0.047,34,1.202,35,0.775,36,1.353,37,0.895,38,1.043,40,0.841,41,0.536,43,0.627,46,0.841,47,0.627,49,1.353,59,0.037,60,0.037,72,2.632,75,0.942,79,1.815,84,1.717,90,1.202,128,1.317,227,2.217,228,2.217,254,2.217,264,2.741,268,2.741,283,2.123,313,1.717,365,2.123,556,2.305,597,3.163,598,4.228,602,2.217,606,3.194,620,3.587,685,2.559,686,5.201,687,4.587,688,3.71,689,3.71,690,3.016,691,3.71]],["title/injectables/TissueLibraryService.html",[0,0.022,94,1.716]],["body/injectables/TissueLibraryService.html",[0,0.037,2,1.025,3,0.682,4,0.584,5,0.584,7,0.584,9,2.235,17,0.404,18,1.387,23,1.159,33,0.047,37,0.788,38,1.008,40,0.873,41,0.584,43,0.682,46,0.682,47,0.682,59,0.039,60,0.039,72,2.478,79,1.761,80,1.761,83,1.572,94,2.885,96,1.472,97,2.784,199,2.197,341,2.197,502,3.925,692,4.037,693,4.037,694,4.828,695,4.828]],["title/dependencies.html",[696,1.962,697,2.375]],["body/dependencies.html",[33,0.045,41,0.646,59,0.041,60,0.041,697,3.533,698,4.467,699,4.467,700,4.467,701,4.467,702,5.124]],["title/miscellaneous/functions.html",[703,1.117,704,2.799]],["body/miscellaneous/functions.html",[7,0.479,17,0.332,32,1.962,33,0.046,34,1.784,35,0.91,36,1.962,37,1.033,59,0.034,60,0.034,67,1.89,75,0.842,79,1.558,80,1.209,81,2.825,88,1.743,89,1.978,90,1.074,100,2.946,101,1.978,102,1.724,104,2.286,105,2.049,110,1.981,111,2.553,112,1.978,113,1.981,128,0.952,133,1.535,202,1.361,203,1.209,204,2.477,209,2.553,229,2.946,283,1.535,291,1.978,292,1.978,303,2.286,304,2.286,305,2.286,306,2.286,310,2.286,311,2.946,312,1.737,313,1.978,314,2.286,358,2.286,476,1.978,556,1.535,596,3.26,602,1.981,604,2.286,605,2.695,606,1.981,607,2.695,608,2.695,610,2.695,611,2.695,612,3.473,613,2.695,614,3.473,615,3.473,616,3.473,617,3.648,618,2.946,619,2.946,703,1.535,704,2.695,705,4.272,706,2.946,707,3.443,708,4.272,709,4.272,710,2.286,711,4.272,712,3.315,713,3.315,714,2.695,715,3.315,716,3.315,717,2.286,718,4.272,719,3.315]],["title/index.html",[17,0.242,720,2.414,721,2.414]],["body/index.html",[33,0.041,59,0.041,60,0.041,323,3.526,341,1.827,604,3.069,722,5.113,723,4.451,724,5.113,725,4.451,726,5.113,727,4.451,728,4.451]],["title/modules.html",[515,2.679]],["body/modules.html",[33,0.042,59,0.042,60,0.042,256,2.372,514,3.121,515,3.121,729,4.525,730,4.525]],["title/overview.html",[731,3.158]],["body/overview.html",[2,1.122,33,0.041,59,0.041,60,0.041,62,2.64,513,4.139,521,3.592,624,3.047,628,3.047,631,3.047,697,3.047,731,3.592,732,4.418,733,4.418,734,4.418,735,4.418,736,5.091,737,4.418,738,4.418]],["title/properties.html",[66,1.805,696,1.962]],["body/properties.html",[33,0.044,59,0.042,60,0.042,66,2.376,739,4.534,740,4.534]],["title/miscellaneous/typealiases.html",[703,1.117,741,3.444]],["body/miscellaneous/typealiases.html",[17,0.357,33,0.036,35,0.964,59,0.036,60,0.036,79,1.632,80,1.301,83,1.589,85,2.901,88,1.662,96,1.871,98,1.632,202,1.838,203,1.632,204,2.926,210,2.346,211,2.346,215,1.784,230,2.264,231,2.564,232,2.564,233,2.564,253,3.087,254,3.465,255,3.087,256,2.346,258,2.675,259,3.087,261,3.087,473,2.264,556,1.652,602,2.675,685,3.087,703,1.652,706,3.982,707,3.374,710,3.087,717,2.461,742,3.568,743,4.57,744,4.892,745,3.977,746,2.901]],["title/miscellaneous/variables.html",[703,1.117,747,2.799]],["body/miscellaneous/variables.html",[4,0.185,5,0.568,7,0.185,17,0.128,28,1.41,33,0.047,35,0.741,44,0.414,45,1.011,59,0.017,60,0.017,67,1.011,75,1.265,79,1.138,80,0.769,81,1.607,83,1.365,84,1.245,88,1.203,89,1.245,90,1.487,98,1.887,101,0.976,102,1.926,105,0.865,110,0.764,111,1.865,112,0.976,113,0.764,121,2.125,122,0.67,124,3.1,125,1.105,126,1.862,127,1.138,128,1.319,129,1.105,130,1.41,131,0.882,132,2.686,133,1.901,134,1.454,135,2.152,136,2.562,137,1.855,138,3.467,139,3.467,140,3.467,141,1.855,142,1.454,143,0.882,144,0.882,145,2.152,146,1.454,147,2.381,148,2.152,149,2.152,150,1.454,151,2.152,152,0.882,153,0.882,154,1.454,155,0.882,156,1.454,157,1.855,158,1.454,159,0.882,160,0.882,161,1.454,162,1.454,163,0.882,164,0.882,165,0.882,166,1.454,167,1.454,168,0.882,169,0.882,170,0.882,171,2.152,172,0.882,173,0.882,174,0.882,175,0.882,176,1.454,177,1.454,178,1.454,179,1.454,180,1.855,181,1.454,182,0.882,183,0.882,184,1.454,185,0.882,186,0.882,187,0.882,188,1.855,189,1.454,190,1.454,191,0.882,192,1.855,193,1.454,194,0.882,195,1.855,202,1.104,203,0.981,204,2.298,205,0.882,207,0.882,210,1.41,211,1.41,212,0.976,214,0.882,215,1.942,216,0.67,227,2.063,228,2.744,230,0.592,237,0.882,238,0.882,239,1.26,240,0.882,241,0.882,242,1.454,243,0.882,244,1.454,245,0.882,246,0.882,247,0.882,248,0.764,249,0.882,250,0.882,251,0.882,252,0.882,256,1.41,258,1.607,263,1.454,264,2.977,265,1.855,266,1.865,267,1.454,268,3.237,269,0.882,270,0.882,271,0.882,272,0.882,273,2.454,274,0.882,275,0.882,276,0.882,277,0.882,278,1.855,279,1.855,280,1.855,281,0.882,282,0.882,283,1.598,284,0.882,285,0.882,286,0.882,287,0.882,288,0.882,289,0.882,290,1.855,291,1.901,292,1.901,293,1.454,294,0.882,295,0.882,296,0.882,297,1.26,298,0.882,299,1.454,300,0.882,301,0.882,302,1.454,312,2.525,313,0.592,341,0.865,384,3.1,424,1.855,437,0.882,438,0.882,441,1.26,466,1.26,470,1.26,473,2.466,474,0.764,475,0.764,476,0.976,542,2.187,555,1.454,556,0.976,559,1.714,560,1.714,561,1.714,562,1.714,563,1.714,564,1.714,565,1.714,566,1.714,567,1.714,568,3.339,569,3.02,570,3.02,571,1.714,572,1.714,573,1.714,574,1.714,575,1.714,576,1.714,577,1.714,578,1.714,579,1.714,580,1.039,581,1.039,582,1.714,583,1.039,584,1.039,585,2.187,586,1.714,587,1.039,588,1.714,589,1.039,590,1.039,596,1.855,606,1.26,617,0.882,618,1.855,619,3.791,620,0.882,621,1.714,622,1.039,623,1.039,624,3.364,625,2.187,626,2.187,627,3.339,628,1.454,629,2.187,630,3.654,631,2.936,632,1.714,633,2.537,634,2.537,635,4.05,636,3.02,637,2.806,638,1.039,639,1.714,640,2.187,641,2.806,642,3.46,643,1.039,644,1.714,645,1.039,646,1.039,647,1.039,648,2.537,649,1.039,650,1.714,651,1.039,652,2.187,653,2.537,654,1.039,655,1.039,656,1.714,657,1.714,658,2.187,659,1.039,660,1.039,661,1.039,662,1.039,663,1.039,664,1.039,665,1.039,666,1.039,667,1.039,668,1.039,669,1.039,670,3.02,671,2.806,672,2.806,673,1.039,674,1.039,675,1.039,676,1.039,677,1.039,678,1.714,679,1.039,680,1.039,681,1.039,685,1.454,690,1.714,703,0.592,706,3.608,707,2.71,710,1.454,714,4.403,717,0.882,743,3.917,745,2.187,746,1.039,747,1.039,748,2.69,749,2.108,750,2.108,751,2.69,752,2.69,753,2.69,754,2.69,755,3.121,756,1.278,757,1.278,758,1.278,759,1.278,760,1.278,761,2.69,762,2.108,763,2.108,764,1.278,765,2.69,766,1.278,767,2.69,768,2.108,769,1.278,770,1.278,771,2.108,772,2.108,773,1.278,774,2.108,775,1.278,776,2.108,777,1.278,778,1.278]]],"invertedIndex":[["",{"_index":33,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":424,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":740,"title":{},"body":{"properties.html":{}}}],["0.1",{"_index":642,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.2",{"_index":634,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.3",{"_index":635,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.4",{"_index":648,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.5",{"_index":641,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.7",{"_index":656,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["0.9",{"_index":678,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["1",{"_index":624,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["1).touppercase",{"_index":308,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["1.0",{"_index":629,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["10",{"_index":628,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["101",{"_index":651,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["11",{"_index":640,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["12",{"_index":669,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["124",{"_index":659,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["13",{"_index":672,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["15",{"_index":638,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["15.1.0",{"_index":702,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":630,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":699,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":680,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["2000",{"_index":645,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["21",{"_index":663,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["230",{"_index":654,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["244",{"_index":660,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["3",{"_index":631,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["332",{"_index":647,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":644,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["45",{"_index":670,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":633,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["57",{"_index":667,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":650,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["601",{"_index":655,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["675",{"_index":665,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["7",{"_index":653,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["8",{"_index":658,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["9",{"_index":662,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["_",{"_index":109,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["_blank",{"_index":54,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["_iri",{"_index":547,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["abstract",{"_index":72,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/FtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["acc",{"_index":116,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["acc.concat(items",{"_index":463,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["accepts",{"_index":69,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["acinus",{"_index":178,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["acinus.svg",{"_index":179,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["ai",{"_index":252,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["aliases",{"_index":742,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["alveolus",{"_index":159,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["alveolus.svg",{"_index":160,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["anchor",{"_index":50,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["anchor.click",{"_index":57,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["anchor.href",{"_index":55,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["anchor.remove",{"_index":58,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["anchor.target",{"_index":53,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["ancillary",{"_index":563,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["angular",{"_index":8,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["angular/common",{"_index":701,"title":{},"body":{"dependencies.html":{}}}],["angular/common/http",{"_index":218,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["angular/core",{"_index":41,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{}}}],["application/pdf",{"_index":251,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["argument",{"_index":76,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["around",{"_index":574,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["array",{"_index":273,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["ascending",{"_index":145,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["assets/temp/2d",{"_index":525,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["assets/temp/ftu",{"_index":527,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["available",{"_index":729,"title":{},"body":{"modules.html":{}}}],["base",{"_index":89,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["base/root",{"_index":301,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["base_id",{"_index":124,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["base_iri",{"_index":302,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["based",{"_index":419,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["basehref",{"_index":209,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{},"miscellaneous/functions.html":{}}}],["between",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bid",{"_index":615,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["biomarker",{"_index":473,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["biomarker.array",{"_index":757,"title":{},"body":{"miscellaneous/variables.html":{}}}],["biomarker1",{"_index":627,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker2",{"_index":636,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker3",{"_index":637,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker4",{"_index":673,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker5",{"_index":674,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker6",{"_index":675,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker7",{"_index":676,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker8",{"_index":677,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["biomarker_type",{"_index":282,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["biomarkers",{"_index":470,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["biomarkerspresent",{"_index":453,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["biomarkerspresent.has(defaultlabel",{"_index":482,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["blabel",{"_index":616,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["bootstrap",{"_index":734,"title":{},"body":{"overview.html":{}}}],["bronchial",{"_index":161,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["browse",{"_index":730,"title":{},"body":{"modules.html":{}}}],["cache",{"_index":340,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cache.has(url",{"_index":397,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cache.set(url",{"_index":406,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cachediri",{"_index":339,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["capitalize",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["capitalize(defaultlabel",{"_index":483,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["capitalize(str",{"_index":306,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["capitalize(summarygroup.biomarker_type",{"_index":480,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["capitalizes",{"_index":303,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["case",{"_index":311,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["cell",{"_index":215,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell.array",{"_index":756,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cell_id",{"_index":284,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_label",{"_index":285,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_source",{"_index":279,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_source_item",{"_index":278,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_source_item.extend",{"_index":281,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_summaries",{"_index":280,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["cell_summaries).pipe",{"_index":367,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cell_summary",{"_index":258,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cell_summary['@graph",{"_index":446,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cell_summary['@graph'][number]['summary'][number",{"_index":448,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cell_summary_data",{"_index":582,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["cell_summary_row",{"_index":748,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cell_summary_row.array",{"_index":758,"title":{},"body":{"miscellaneous/variables.html":{}}}],["cells",{"_index":466,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["cellsourceitem",{"_index":255,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/typealiases.html":{}}}],["cellsummary",{"_index":230,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["cellsummary.push",{"_index":479,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["cellsummaryrow",{"_index":744,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["character",{"_index":305,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["child",{"_index":486,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["childlabel",{"_index":117,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["childnodes",{"_index":114,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["children",{"_index":112,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["children.reduce",{"_index":115,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["childurl",{"_index":118,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["cid",{"_index":613,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["clabel",{"_index":614,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["class",{"_index":47,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["clickable",{"_index":296,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["client",{"_index":326,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["clinical",{"_index":565,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["codebook",{"_index":567,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["collecting",{"_index":147,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["collectiong",{"_index":155,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["console",{"_index":536,"title":{},"body":{"injectables/MockContactService.html":{}}}],["console.log('message",{"_index":537,"title":{},"body":{"injectables/MockContactService.html":{}}}],["const",{"_index":49,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{}}}],["constant",{"_index":237,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["constructcellsummaries",{"_index":443,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["constructcellsummaries(data",{"_index":445,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["constructs",{"_index":484,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["constructtissuelibrary(items",{"_index":487,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["contact",{"_index":13,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["contact.service",{"_index":42,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/MockContactService.html":{}}}],["contact/contact.impl",{"_index":518,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["contact/contact.service",{"_index":519,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["contactimplservice",{"_index":1,"title":{"injectables/ContactImplService.html":{}},"body":{"injectables/ContactImplService.html":{},"modules/HraServiceModule.html":{}}}],["contactmessage",{"_index":21,"title":{"interfaces/ContactMessage.html":{}},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["contactservice",{"_index":16,"title":{"injectables/ContactService.html":{}},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{}}}],["contactservice:11",{"_index":24,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/MockContactService.html":{}}}],["content",{"_index":539,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contents",{"_index":535,"title":{},"body":{"injectables/MockContactService.html":{}}}],["converts",{"_index":310,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["corpuscle",{"_index":143,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["corpuscle.svg",{"_index":144,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["cortical",{"_index":146,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["count",{"_index":291,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["count.optional",{"_index":759,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count_integer_error",{"_index":749,"title":{},"body":{"miscellaneous/variables.html":{}}}],["count_range_error",{"_index":750,"title":{},"body":{"miscellaneous/variables.html":{}}}],["counts",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["create",{"_index":100,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{}}}],["createcell",{"_index":612,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["createcell('cell1",{"_index":626,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell10",{"_index":664,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell11",{"_index":666,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell12",{"_index":668,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell13",{"_index":671,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell2",{"_index":632,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell3",{"_index":639,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell4",{"_index":643,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell5",{"_index":646,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell6",{"_index":649,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell7",{"_index":652,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell8",{"_index":657,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell('cell9",{"_index":661,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["createcell(cid",{"_index":713,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createlinkid",{"_index":91,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["createlinkid('ftu",{"_index":122,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["createnodeid",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{}}}],["createnodeid(label",{"_index":104,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{}}}],["creates",{"_index":295,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["creating",{"_index":611,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["crypt",{"_index":167,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["currently",{"_index":533,"title":{},"body":{"injectables/MockContactService.html":{}}}],["data",{"_index":128,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data.foreach((summarygroup",{"_index":458,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["data.impl",{"_index":520,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["data.impl.ts",{"_index":204,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data.mock.ts",{"_index":542,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["data.model",{"_index":234,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["data.model.ts",{"_index":743,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data.service",{"_index":236,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{}}}],["data.service.ts",{"_index":501,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:19",{"_index":512,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:25",{"_index":510,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:30",{"_index":509,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:36",{"_index":505,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:42",{"_index":507,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data.service.ts:48",{"_index":511,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["data/ftu",{"_index":203,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["data['@graph'].filter",{"_index":422,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["data['@graph'].find",{"_index":417,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["data_file_reference",{"_index":751,"title":{},"body":{"miscellaneous/variables.html":{}}}],["data_sources",{"_index":277,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["datafilereference",{"_index":231,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/typealiases.html":{}}}],["dataset",{"_index":569,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["dataset_count",{"_index":293,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["datasets",{"_index":210,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["datasets).pipe",{"_index":377,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["datasets.jsonld",{"_index":529,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["datasets['@graph'][number]['data_sources",{"_index":262,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["datasources",{"_index":261,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/typealiases.html":{}}}],["declarations",{"_index":733,"title":{},"body":{"overview.html":{}}}],["default",{"_index":714,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["defaultbiomarkerlables",{"_index":449,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["defaultbiomarkerlables.foreach((defaultlabel",{"_index":481,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["defined",{"_index":23,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["definenode",{"_index":111,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["definenode('large",{"_index":165,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["definenode('liver",{"_index":187,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["definenode('prostate",{"_index":191,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["definenode('thymus",{"_index":194,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["definenode(childlabel",{"_index":119,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["definenode(label",{"_index":715,"title":{},"body":{"miscellaneous/functions.html":{}}}],["defines",{"_index":64,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["dependencies",{"_index":697,"title":{"dependencies.html":{}},"body":{"dependencies.html":{},"overview.html":{}}}],["dermal",{"_index":181,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["descending",{"_index":134,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["description",{"_index":7,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["different",{"_index":241,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["document.body.appendchild(anchor",{"_index":52,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["document.createelement('a",{"_index":51,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["duct",{"_index":148,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["duct.svg",{"_index":149,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["dummy",{"_index":559,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["each",{"_index":432,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["element",{"_index":298,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["email",{"_index":30,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["emails",{"_index":12,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["emits",{"_index":342,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{}}}],["empty",{"_index":375,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{}}}],["endpoint",{"_index":213,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["endpoints",{"_index":205,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["endpoints[endpoint",{"_index":393,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entered",{"_index":70,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["entire",{"_index":695,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["entries",{"_index":625,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["entry.biomarker.id",{"_index":588,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.biomarker.label",{"_index":589,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.cell.id",{"_index":586,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.cell.label",{"_index":587,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.cell_id",{"_index":468,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.cell_label",{"_index":469,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.count",{"_index":474,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.dataset_count",{"_index":478,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.gene_id",{"_index":471,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.gene_label",{"_index":472,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.mean_expression",{"_index":477,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["entry.meanexpression",{"_index":590,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["entry.percentage",{"_index":475,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["epidermal",{"_index":184,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["equal",{"_index":763,"title":{},"body":{"miscellaneous/variables.html":{}}}],["error",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["example",{"_index":579,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["execute",{"_index":728,"title":{},"body":{"index.html":{}}}],["expandgenes",{"_index":456,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["export",{"_index":46,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["exports",{"_index":735,"title":{},"body":{"overview.html":{}}}],["extended",{"_index":82,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["extendedtissue",{"_index":78,"title":{"interfaces/ExtendedTissue.html":{}},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["extends",{"_index":15,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["extract",{"_index":580,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["extracted",{"_index":388,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["extremely",{"_index":571,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["factory",{"_index":246,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["fetch",{"_index":686,"title":{},"body":{"injectables/TissueFtuService.html":{}}}],["fetchdata",{"_index":389,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["fetched",{"_index":418,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["fetching",{"_index":444,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["fetchs",{"_index":380,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["field",{"_index":420,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["file",{"_index":5,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["file_format",{"_index":272,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["fileformatmapping",{"_index":334,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["fileformatmapping['image/svg+xml",{"_index":428,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["files",{"_index":327,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["files.find",{"_index":430,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["findcellsummaries(data",{"_index":421,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["findgraphitem(data",{"_index":416,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["findillustrationurl(files",{"_index":426,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["finds",{"_index":412,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["first",{"_index":304,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["firstvaluefrom",{"_index":221,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["firstvaluefrom(resp",{"_index":407,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["format",{"_index":266,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["formated",{"_index":386,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["formates",{"_index":425,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["formats",{"_index":242,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["formats[file_format",{"_index":440,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["forming",{"_index":485,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["from(cache.get(url",{"_index":408,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["ftu",{"_index":126,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["ftu.mock",{"_index":557,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftu.mock.ts",{"_index":596,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ftu.service",{"_index":603,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["ftu.service.ts",{"_index":685,"title":{},"body":{"injectables/TissueFtuService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ftu.service.ts:19",{"_index":689,"title":{},"body":{"injectables/TissueFtuService.html":{}}}],["ftu.service.ts:22",{"_index":688,"title":{},"body":{"injectables/TissueFtuService.html":{}}}],["ftu/2d",{"_index":140,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["ftu/tissue",{"_index":556,"title":{},"body":{"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["ftu_data_impl_endpoints",{"_index":239,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{},"miscellaneous/variables.html":{}}}],["ftu_data_impl_file_format_mapping",{"_index":244,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["ftudataimplendpoints",{"_index":201,"title":{"interfaces/FtuDataImplEndpoints.html":{}},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["ftudataimplservice",{"_index":320,"title":{"injectables/FtuDataImplService.html":{}},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{}}}],["ftudataservice",{"_index":235,"title":{"injectables/FtuDataService.html":{}},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{}}}],["ftudataservice:107",{"_index":551,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftudataservice:116",{"_index":550,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftudataservice:125",{"_index":546,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftudataservice:133",{"_index":548,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftudataservice:146",{"_index":553,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["ftudataservice:166",{"_index":500,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:177",{"_index":498,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:191",{"_index":497,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:203",{"_index":495,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:215",{"_index":496,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:227",{"_index":499,"title":{},"body":{"injectables/FtuDataImplService.html":{}}}],["ftudataservice:99",{"_index":554,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["function",{"_index":103,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["functional",{"_index":322,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["functions",{"_index":704,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["g",{"_index":108,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["gene",{"_index":450,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["gene_id",{"_index":287,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["gene_label",{"_index":288,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["generated",{"_index":723,"title":{},"body":{"index.html":{}}}],["genes",{"_index":286,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["getcellsummaries",{"_index":365,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{}}}],["getcellsummaries(_iri",{"_index":545,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["getcellsummaries(id",{"_index":687,"title":{},"body":{"injectables/TissueFtuService.html":{}}}],["getcellsummaries(iri",{"_index":366,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{}}}],["getdatafilereferences",{"_index":370,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getdatafilereferences(iri",{"_index":371,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getillustrationmapping",{"_index":359,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getillustrationmapping(_iri",{"_index":549,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["getillustrationmapping(iri",{"_index":360,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{}}}],["getillustrationurl",{"_index":347,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getillustrationurl(iri",{"_index":351,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getreferenceorgans",{"_index":598,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{}}}],["gets",{"_index":506,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["getsourcereferences",{"_index":374,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["getsourcereferences(_iri",{"_index":552,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["getsourcereferences(iri",{"_index":376,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{}}}],["getting",{"_index":720,"title":{"index.html":{}},"body":{}}],["gettissuelibrary",{"_index":199,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["given",{"_index":348,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{}}}],["gland",{"_index":163,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["gland.svg",{"_index":164,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["glandular",{"_index":193,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["google.com",{"_index":568,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["graph",{"_index":256,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["greater",{"_index":762,"title":{},"body":{"miscellaneous/variables.html":{}}}],["groupid",{"_index":437,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["handles",{"_index":10,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["handling",{"_index":321,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["having",{"_index":214,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["helper",{"_index":610,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["henle",{"_index":137,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["henle.svg",{"_index":141,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["here",{"_index":578,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["hra",{"_index":92,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["hraservicemodule",{"_index":514,"title":{"modules/HraServiceModule.html":{}},"body":{"modules/HraServiceModule.html":{},"modules.html":{}}}],["href",{"_index":718,"title":{},"body":{"miscellaneous/functions.html":{}}}],["hrt",{"_index":566,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["http",{"_index":325,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["http.get(url",{"_index":403,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["httpclient",{"_index":217,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["https://hubmapconsortium.github.io/ccf",{"_index":138,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["https://purl.humanatlas.io/2d",{"_index":125,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":90,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["id_item",{"_index":263,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["id_item.extend",{"_index":267,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["iditem",{"_index":253,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/typealiases.html":{}}}],["illusrationfiles",{"_index":259,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/typealiases.html":{}}}],["illustration",{"_index":350,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{}}}],["illustration_files",{"_index":271,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["illustration_mapping_item",{"_index":752,"title":{},"body":{"miscellaneous/variables.html":{}}}],["illustrationmappingitem",{"_index":232,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/typealiases.html":{}}}],["illustrations",{"_index":211,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"modules/HraServiceModule.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["illustrations).pipe",{"_index":344,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["illustrations.jsonld",{"_index":526,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["illustrations['@graph",{"_index":488,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["illustrations['@graph'][number]['illustration_files",{"_index":260,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["image/png",{"_index":249,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["image/svg+xml",{"_index":247,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["implementation",{"_index":196,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["import",{"_index":40,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["inclusive",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["index",{"_index":17,"title":{"index.html":{}},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["inherited",{"_index":22,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["inject",{"_index":219,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["inject(ftu_data_impl_endpoints",{"_index":332,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["inject(ftu_data_impl_file_format_mapping",{"_index":335,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["inject(httpclient",{"_index":330,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["injectable",{"_index":0,"title":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["injectables",{"_index":2,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"overview.html":{}}}],["injecting",{"_index":206,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["injection",{"_index":333,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["injectiontoken",{"_index":220,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["injectiontoken>('endpoints",{"_index":240,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["injectiontoken>('mapping",{"_index":245,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["injector",{"_index":331,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["inner",{"_index":150,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["input",{"_index":207,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["inside",{"_index":413,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["integer",{"_index":761,"title":{},"body":{"miscellaneous/variables.html":{}}}],["intercalated",{"_index":176,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["interface",{"_index":61,"title":{"interfaces/ContactMessage.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["interfaces",{"_index":62,"title":{},"body":{"interfaces/ContactMessage.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"overview.html":{}}}],["intestine",{"_index":166,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["iri",{"_index":98,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["iri).data_sources",{"_index":378,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["iri).illustration_files",{"_index":372,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["iri).mapping",{"_index":363,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["iri.array().default",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["islates",{"_index":172,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["islets",{"_index":174,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["isreferenceorgan",{"_index":709,"title":{},"body":{"miscellaneous/functions.html":{}}}],["isreferenceorgan(obj",{"_index":607,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["item",{"_index":415,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["item.length",{"_index":423,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["items",{"_index":462,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["join",{"_index":319,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["json",{"_index":401,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["json.stringify(message",{"_index":540,"title":{},"body":{"injectables/MockContactService.html":{}}}],["keyof",{"_index":390,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["kidney",{"_index":132,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["l.slice(1",{"_index":318,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["l[0].touppercase",{"_index":317,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["label",{"_index":102,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["langerhans",{"_index":173,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["langerhans.svg",{"_index":175,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["large",{"_index":169,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["last",{"_index":337,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["legend",{"_index":732,"title":{},"body":{"overview.html":{}}}],["library",{"_index":341,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/TissueLibraryService.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["library.mock",{"_index":558,"title":{},"body":{"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{}}}],["library.mock.ts",{"_index":81,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["library.model",{"_index":97,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["library.model.ts",{"_index":745,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["library.service",{"_index":95,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["library.service.ts",{"_index":692,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["library.service.ts:9",{"_index":693,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["library/tissue",{"_index":80,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["lieberkuhn",{"_index":168,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["lieberkuhn.svg",{"_index":170,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["line",{"_index":576,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":121,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["lipid",{"_index":452,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["literal",{"_index":85,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"miscellaneous/typealiases.html":{}}}],["liver",{"_index":188,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["loading",{"_index":502,"title":{},"body":{"injectables/FtuDataService.html":{},"injectables/TissueLibraryService.html":{}}}],["loads",{"_index":694,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["lobule",{"_index":189,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["lobule.svg",{"_index":190,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["logs",{"_index":534,"title":{},"body":{"injectables/MockContactService.html":{}}}],["long",{"_index":572,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["loop",{"_index":136,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["lung",{"_index":157,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["mailto:${message.email}?subject=${message.subject}&body=${message.message",{"_index":56,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["map",{"_index":222,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["map(([url",{"_index":357,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["map((data",{"_index":345,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["map((endpoints",{"_index":392,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["map((l",{"_index":316,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["mapping",{"_index":274,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["mappings",{"_index":434,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["matching",{"_index":60,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mean_expression",{"_index":289,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["meanexpression",{"_index":476,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["medicine",{"_index":561,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["medullary",{"_index":151,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":28,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":618,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["method",{"_index":26,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{}}}],["methods",{"_index":18,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["miscellaneous",{"_index":703,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":127,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["mock_reference_organs",{"_index":621,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["mock_summaries",{"_index":555,"title":{},"body":{"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["mock_tissue_data",{"_index":129,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["mock_tissue_data.nodes[iri].object.file",{"_index":593,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["mockcontactservice",{"_index":530,"title":{"injectables/MockContactService.html":{}},"body":{"injectables/MockContactService.html":{}}}],["mockftudataservice",{"_index":541,"title":{"injectables/MockFtuDataService.html":{}},"body":{"injectables/MockFtuDataService.html":{}}}],["mocktissueftuservice",{"_index":595,"title":{"injectables/MockTissueFtuService.html":{}},"body":{"injectables/MockTissueFtuService.html":{}}}],["mocktissuelibraryservice",{"_index":197,"title":{"injectables/MockTissueLibraryService.html":{}},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["modal",{"_index":14,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["module",{"_index":513,"title":{"modules/HraServiceModule.html":{}},"body":{"overview.html":{}}}],["modules",{"_index":515,"title":{"modules.html":{}},"body":{"modules/HraServiceModule.html":{},"modules.html":{}}}],["name",{"_index":34,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["needed",{"_index":387,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["negative",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["nephron",{"_index":152,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["nephron.svg",{"_index":153,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["nestedsummaries",{"_index":459,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["nestedsummaries)[number",{"_index":465,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["nestedsummaries.reduce((acc",{"_index":461,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["new",{"_index":101,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["next",{"_index":575,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["ngmodule",{"_index":517,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["node",{"_index":110,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":130,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["nodes[id",{"_index":493,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["nodes[parentid",{"_index":491,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["nodes[parentid]?.children.push(id",{"_index":494,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["non",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["number",{"_index":617,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":724,"title":{},"body":{"index.html":{}}}],["obeservable",{"_index":508,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["obj",{"_index":608,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["obj['object']['file",{"_index":609,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["object",{"_index":75,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["object.assign",{"_index":131,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["object.keys(childnodes",{"_index":123,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["object.values(mock_summaries).map((summary",{"_index":583,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["object.values(mock_tissue_data.nodes).filter(isreferenceorgan",{"_index":622,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["objecy",{"_index":86,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["observable",{"_index":38,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["of(cell_summary_data",{"_index":592,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["of(mock_reference_organs",{"_index":682,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["of(mock_summaries",{"_index":683,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["of(mock_tissue_data",{"_index":200,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["of(mock_tissue_data.nodes[iri].object.file",{"_index":591,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["of(sourcereferences",{"_index":594,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["om",{"_index":581,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["ontologyid",{"_index":438,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["open",{"_index":433,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["operations",{"_index":324,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["optional",{"_index":36,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["opts",{"_index":398,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["opts).pipe(map((data",{"_index":404,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["organ",{"_index":313,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["organ_id",{"_index":269,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["organ_label",{"_index":270,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["organs",{"_index":620,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["out",{"_index":738,"title":{},"body":{"overview.html":{}}}],["outer",{"_index":154,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["override",{"_index":48,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["overrides",{"_index":25,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{}}}],["overview",{"_index":731,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owner",{"_index":570,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["package",{"_index":696,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["pancreas",{"_index":171,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["pancreatic",{"_index":177,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["papilla",{"_index":182,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["papilla.svg",{"_index":183,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["param",{"_index":349,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{}}}],["parameters",{"_index":32,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["params",{"_index":399,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["parent",{"_index":105,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["parentid",{"_index":490,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["parent}${label.replace",{"_index":107,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["parses",{"_index":382,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["path",{"_index":208,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["peer",{"_index":700,"title":{},"body":{"dependencies.html":{}}}],["percentage",{"_index":292,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["percentage_range_error",{"_index":753,"title":{},"body":{"miscellaneous/variables.html":{}}}],["percentage_range_error).lte(1",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["pipe",{"_index":355,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["pipe(map((data",{"_index":353,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["png",{"_index":250,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["precision",{"_index":560,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["private",{"_index":328,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["project",{"_index":562,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["promise",{"_index":409,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["properties",{"_index":66,"title":{"properties.html":{}},"body":{"interfaces/ContactMessage.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"properties.html":{}}}],["prostate",{"_index":192,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["protein",{"_index":451,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["provide",{"_index":522,"title":{},"body":{"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{}}}],["providedin",{"_index":44,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["providers",{"_index":521,"title":{},"body":{"modules/HraServiceModule.html":{},"overview.html":{}}}],["provides",{"_index":300,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["pulmonary",{"_index":158,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["purposes",{"_index":544,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["read",{"_index":238,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["reading",{"_index":381,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["readonly",{"_index":329,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["received",{"_index":538,"title":{},"body":{"injectables/MockContactService.html":{}}}],["recipient",{"_index":31,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["record",{"_index":113,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["ref",{"_index":429,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["ref.url",{"_index":431,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["reference",{"_index":606,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["reference_organ",{"_index":690,"title":{},"body":{"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["referenceorgan",{"_index":602,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["references",{"_index":216,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["reflecting",{"_index":265,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["related",{"_index":503,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["releases/v1.3/2d",{"_index":139,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["renal",{"_index":142,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["representation_of",{"_index":84,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["representing",{"_index":73,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":532,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{}}}],["requested",{"_index":383,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["reset",{"_index":737,"title":{},"body":{"overview.html":{}}}],["resp",{"_index":402,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["responsetype",{"_index":400,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["results",{"_index":59,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results.push",{"_index":436,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["retrived",{"_index":338,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["return",{"_index":106,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["returns",{"_index":37,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/functions.html":{}}}],["ridge",{"_index":185,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["ridge.svg",{"_index":186,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["root",{"_index":45,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":727,"title":{},"body":{"index.html":{}}}],["running",{"_index":725,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":43,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["same",{"_index":746,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["schema",{"_index":384,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["schema.parse(data",{"_index":405,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["see",{"_index":577,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["send",{"_index":27,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["sending",{"_index":11,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["sendmessage",{"_index":19,"title":{},"body":{"injectables/ContactImplService.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["sendmessage(message",{"_index":20,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["service",{"_index":9,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{}}}],["services",{"_index":722,"title":{},"body":{"index.html":{}}}],["set(data.map((summary",{"_index":454,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["seturl",{"_index":229,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["seturl(url",{"_index":358,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["shared/common.model",{"_index":99,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["sharereplay",{"_index":223,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["sharereplay(1",{"_index":411,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["single",{"_index":504,"title":{},"body":{"injectables/FtuDataService.html":{}}}],["skin",{"_index":180,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["source",{"_index":4,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["source_reference",{"_index":754,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sourcereference",{"_index":233,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/typealiases.html":{}}}],["sourcereferences",{"_index":441,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["split",{"_index":315,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["src/.../common.model.ts",{"_index":710,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ftu",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.impl.ts",{"_index":6,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["src/lib/contact/contact.mock.ts",{"_index":531,"title":{},"body":{"injectables/MockContactService.html":{}}}],["src/lib/contact/contact.service.ts",{"_index":63,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["src/lib/contact/contact.service.ts:18",{"_index":77,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/lib/ftu",{"_index":202,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/service.module.ts",{"_index":516,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["src/lib/shared/common.model.ts",{"_index":717,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/tissue",{"_index":79,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":721,"title":{"index.html":{}},"body":{}}],["stoe",{"_index":87,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["stores",{"_index":336,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["str",{"_index":712,"title":{},"body":{"miscellaneous/functions.html":{}}}],["str.slice(0",{"_index":307,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["str.slice(1",{"_index":309,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["string",{"_index":67,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["study",{"_index":564,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":65,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["submucosal",{"_index":162,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["summaries",{"_index":212,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"modules/HraServiceModule.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["summaries.jsonld",{"_index":528,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["summary",{"_index":283,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["summary.biomarker_type.tolowercase",{"_index":455,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["summary.entries.map((entry",{"_index":585,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["summary.genes.map((gene",{"_index":457,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["summary.label",{"_index":584,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["summary.map((entry",{"_index":467,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["summary1",{"_index":623,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["summary2",{"_index":679,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["summary3",{"_index":681,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["summarygroup.summary.map(expandgenes",{"_index":460,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["summaryitem",{"_index":447,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["supported",{"_index":243,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["svg",{"_index":248,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["svg_group_id",{"_index":276,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["svg_id",{"_index":275,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["svgformat",{"_index":427,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["switchmap",{"_index":224,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["switchmap((url",{"_index":394,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["synonymlabels",{"_index":120,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["t",{"_index":257,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["tag",{"_index":414,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["take",{"_index":225,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["take(1",{"_index":410,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["takes",{"_index":74,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/FtuDataService.html":{}}}],["template",{"_index":385,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["test",{"_index":604,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["testing",{"_index":543,"title":{},"body":{"injectables/MockFtuDataService.html":{}}}],["tests",{"_index":726,"title":{},"body":{"index.html":{}}}],["thick",{"_index":156,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["thin",{"_index":135,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["this.cache",{"_index":396,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.cachediri",{"_index":395,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.constructcellsummaries(data",{"_index":369,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.constructtissuelibrary(data['@graph",{"_index":346,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.endpoints.pipe",{"_index":391,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.fetchdata(iri",{"_index":361,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.fetchdata(undefined",{"_index":343,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.findcellsummaries(data",{"_index":368,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.findgraphitem(data",{"_index":362,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.findillustrationurl(data",{"_index":354,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.getdatafilereferences(iri",{"_index":352,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.todatafilereferences(data",{"_index":373,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.toillustrationmapping(data",{"_index":364,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["this.tosourcereferences(data",{"_index":379,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["thymus",{"_index":195,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["tissue",{"_index":83,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueFtuService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tissue_library",{"_index":755,"title":{},"body":{"miscellaneous/variables.html":{}}}],["tissue_link",{"_index":299,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["tissueftuservice",{"_index":597,"title":{"injectables/TissueFtuService.html":{}},"body":{"injectables/MockTissueFtuService.html":{},"injectables/TissueFtuService.html":{}}}],["tissueftuservice:94",{"_index":600,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["tissueftuservice:99",{"_index":599,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["tissuelibrary",{"_index":96,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibrary['nodes",{"_index":489,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["tissuelibraryservice",{"_index":94,"title":{"injectables/TissueLibraryService.html":{}},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["tissuelibraryservice.gettissuelibrary",{"_index":198,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"injectables/MockTissueLibraryService.html":{}}}],["tissuelibraryservice:165",{"_index":684,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["title",{"_index":312,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["titlecase",{"_index":711,"title":{},"body":{"miscellaneous/functions.html":{}}}],["titlecase(name",{"_index":314,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/functions.html":{}}}],["titlecase(organ_label",{"_index":492,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["todatafilereferences(data",{"_index":439,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["toillustrationmapping",{"_index":435,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["tosourcereferences(data",{"_index":442,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["tree",{"_index":297,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["tslib",{"_index":698,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":35,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockContactService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":741,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeof",{"_index":464,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["ui/cdk/state",{"_index":93,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["ui/utils/types",{"_index":601,"title":{},"body":{"injectables/MockTissueFtuService.html":{}}}],["undefined",{"_index":133,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["unit",{"_index":323,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"index.html":{}}}],["unknown",{"_index":691,"title":{},"body":{"injectables/TissueFtuService.html":{}}}],["updated",{"_index":719,"title":{},"body":{"miscellaneous/functions.html":{}}}],["url",{"_index":88,"title":{},"body":{"interfaces/ExtendedTissue.html":{},"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/FtuDataService.html":{},"injectables/MockFtuDataService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["url.brand('iri",{"_index":777,"title":{},"body":{"miscellaneous/variables.html":{}}}],["useexisting",{"_index":523,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["user",{"_index":71,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["usevalue",{"_index":524,"title":{},"body":{"modules/HraServiceModule.html":{}}}],["value",{"_index":619,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":68,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["variables",{"_index":747,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":739,"title":{},"body":{"properties.html":{}}}],["via",{"_index":29,"title":{},"body":{"injectables/ContactImplService.html":{}}}],["void",{"_index":39,"title":{},"body":{"injectables/ContactImplService.html":{},"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["whether",{"_index":605,"title":{},"body":{"injectables/MockTissueFtuService.html":{},"miscellaneous/functions.html":{}}}],["withlatestfrom",{"_index":226,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["withlatestfrom(this.endpoints",{"_index":356,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{}}}],["wraps",{"_index":573,"title":{},"body":{"injectables/MockFtuDataService.html":{},"miscellaneous/variables.html":{}}}],["yes",{"_index":716,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z",{"_index":227,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["z.infer",{"_index":254,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/typealiases.html":{}}}],["z.number",{"_index":290,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["z.number().gte(0",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().int(count_integer_error).nonnegative(count_range_error",{"_index":760,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.number().optional",{"_index":294,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"miscellaneous/variables.html":{}}}],["z.object",{"_index":264,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["z.record(iri",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string",{"_index":268,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["z.string().optional",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().url",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["z.string().url().brand('url",{"_index":778,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zero",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["zod",{"_index":228,"title":{},"body":{"interfaces/FtuDataImplEndpoints.html":{},"injectables/FtuDataImplService.html":{},"injectables/TissueFtuService.html":{},"miscellaneous/variables.html":{}}}],["zoom",{"_index":736,"title":{},"body":{"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"injectables/ContactImplService.html":{"url":"injectables/ContactImplService.html","title":"injectable - ContactImplService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactImplService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.impl.ts\n        \n\n\n            \n                Description\n            \n            \n                ContactImplService - Angular service that handles sending emails from the contact modal\n\n            \n\n            \n                Extends\n            \n            \n                            ContactService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(message: ContactMessage)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ContactService\n\n                        \n                    \n                    \n                        \n                                Defined in         ContactService:11\n\n                        \n                    \n\n\n            \n                \n                        Overrides the sendMessage method to send message via email to the recipient\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            ContactMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { ContactMessage, ContactService } from './contact.service';\nimport { Observable } from 'rxjs';\n\n/** ContactImplService - Angular service that handles sending emails from the contact modal */\n@Injectable({\n  providedIn: 'root',\n})\nexport class ContactImplService extends ContactService {\n  /** Overrides the sendMessage method to send message via email to the recipient */\n  override sendMessage(message: ContactMessage): Observable | void {\n    const anchor = document.createElement('a');\n    document.body.appendChild(anchor);\n    anchor.target = '_blank';\n    anchor.href = `mailto:${message.email}?subject=${message.subject}&body=${message.message}`;\n    anchor.click();\n    anchor.remove();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ContactMessage.html":{"url":"interfaces/ContactMessage.html","title":"interface - ContactMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ContactMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A interface contact which defines email, subject, and the message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable email which accepts the email entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable message which accepts the message entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable subject which accepts the subject entered by user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable | void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class representing a ContactService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                        \n                    sendMessage(message: ContactMessage)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/contact/contact.service.ts:18\n                        \n                    \n\n\n            \n                \n                        This method takes a ContactMessage object as an argument and returns an Observable\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            ContactMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable | void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable | void;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ExtendedTissue.html":{"url":"interfaces/ExtendedTissue.html","title":"interface - ExtendedTissue","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ExtendedTissue\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                Extended tissue\n\n            \n\n            \n                Extends\n            \n            \n                            Tissue\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            object\n                                        \n                                \n                                \n                                        \n                                            representation_of\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:     literal type\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Objecy to stoe the file URL\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        representation_of\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        representation_of:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Base Id\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { createLinkId } from '@hra-ui/cdk/state';\nimport { Observable, of } from 'rxjs';\nimport { TissueLibraryService } from './tissue-library.service';\nimport { Tissue, TissueLibrary } from './tissue-library.model';\nimport { Iri, Url } from '../shared/common.model';\n\n/**\n * Extended tissue\n */\ninterface ExtendedTissue extends Tissue {\n  /** Base Id */\n  representation_of: string;\n  /** Objecy to stoe the file URL */\n  object: {\n    file: Url;\n  };\n}\n\n/** Create a new id from a label */\nfunction createNodeId(label: string, parent: string): string {\n  return `${parent}${label.replace(/ /g, '_')}/`;\n}\n\n/** Create a new node */\nfunction defineNode(\n  label: string,\n  parent: string,\n  url?: string,\n  ...children: [label: string, url: string][]\n): Record {\n  const id = createNodeId(label, parent);\n  const childNodes = children.reduce(\n    (acc, [childLabel, childUrl]) => ({\n      ...acc,\n      ...defineNode(childLabel, id, childUrl),\n    }),\n    {},\n  );\n  const node = {\n    '@type': '',\n    '@id': id,\n    id,\n    parent,\n    label,\n    synonymLabels: [],\n    link: url && createLinkId('FTU'),\n    representation_of: id,\n    object: {\n      file: url,\n    },\n    children: Object.keys(childNodes),\n  };\n\n  return { [id]: node, ...childNodes };\n}\n\n/** Base node id */\nconst BASE_ID = 'https://purl.humanatlas.io/2d-ftu/';\n\n/** Mock tissue data */\nexport const MOCK_TISSUE_DATA = {\n  root: BASE_ID as Iri,\n  nodes: Object.assign(\n    {},\n    defineNode(\n      'Kidney',\n      BASE_ID,\n      undefined,\n      [\n        'Descending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-descending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Renal Corpuscle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-renal-corpuscle.svg',\n      ],\n      [\n        'Ascending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-ascending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Cortical Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-cortical-collecting-duct.svg',\n      ],\n      [\n        'Inner Medullary Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-inner-medullary-collecting-duct.svg',\n      ],\n      ['Nephron', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-nephron.svg'],\n      [\n        'Outer Medullary Collectiong Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-outer-medullary-collecting-duct.svg',\n      ],\n      [\n        'Thick Ascending Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-thick-ascending-loop-of-henle.svg',\n      ],\n    ),\n    defineNode(\n      'Lung',\n      BASE_ID,\n      undefined,\n      [\n        'Pulmonary Alveolus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-pulmonary-alveolus.svg',\n      ],\n      [\n        'Bronchial Submucosal Gland',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-bronchial-submucosal-gland.svg',\n      ],\n    ),\n    defineNode('Large Intestine', BASE_ID, undefined, [\n      'Crypt Lieberkuhn',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-large-intestine-crypt-lieberkuhn.svg',\n    ]),\n    defineNode(\n      'Pancreas',\n      BASE_ID,\n      undefined,\n      [\n        'Islates Langerhans',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-islets-langerhans.svg',\n      ],\n      [\n        'Intercalated Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-intercalated-duct.svg',\n      ],\n      [\n        'Pancreatic Acinus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-pancreatic-acinus.svg',\n      ],\n    ),\n    defineNode(\n      'Skin',\n      BASE_ID,\n      undefined,\n      ['Dermal Papilla', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-dermal-papilla.svg'],\n      [\n        'Epidermal Ridge',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-epidermal-ridge.svg',\n      ],\n    ),\n    defineNode('Liver', BASE_ID, undefined, [\n      'Liver Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-liver-liver-lobule.svg',\n    ]),\n    defineNode('Prostate', BASE_ID, undefined, [\n      'Prostate Glandular Acinus',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-prostate-prostate-glandular-acinus.svg',\n    ]),\n    defineNode('Thymus', BASE_ID, undefined, [\n      'Thymus Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-thymus-thymus-lobule.svg',\n    ]),\n  ) as Record,\n};\n\n/** Mock implementation of {@link TissueLibraryService} */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockTissueLibraryService extends TissueLibraryService {\n  /** Implementation of {@link TissueLibraryService.getTissueLibrary} */\n  override getTissueLibrary(): Observable {\n    return of(MOCK_TISSUE_DATA as TissueLibrary);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FtuDataImplEndpoints.html":{"url":"interfaces/FtuDataImplEndpoints.html","title":"interface - FtuDataImplEndpoints","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FtuDataImplEndpoints\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ftu-data/ftu-data.impl.ts\n        \n\n\n            \n                Description\n            \n            \n                Endpoints for Injecting input path\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            baseHref\n                                        \n                                \n                                \n                                        \n                                            datasets\n                                        \n                                \n                                \n                                        \n                                            illustrations\n                                        \n                                \n                                \n                                        \n                                            summaries\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        baseHref\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        baseHref:         Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Url\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Endpoint for baseHref\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        datasets\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        datasets:         Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Url\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Endpoint for File having Cell Source References data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        illustrations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        illustrations:         Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Url\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Endpoint for File having Cell illustrations data\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        summaries\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        summaries:         Url\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Url\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    Endpoint for File having Cell Summaries data\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, InjectionToken } from '@angular/core';\nimport { createLinkId } from '@hra-ui/cdk/state';\nimport { firstValueFrom, from, map, Observable, shareReplay, switchMap, take, withLatestFrom } from 'rxjs';\nimport { z } from 'zod';\n\nimport { IRI, Iri, setUrl, Url } from '../shared/common.model';\nimport {\n  CellSummary,\n  DataFileReference,\n  IllustrationMappingItem,\n  SourceReference,\n  TissueLibrary,\n} from './ftu-data.model';\nimport { FtuDataService } from './ftu-data.service';\n\n/** Endpoints for Injecting input path */\nexport interface FtuDataImplEndpoints {\n  /** Endpoint for File having Cell illustrations data */\n  illustrations: Url;\n  /** Endpoint for File having Cell Summaries data */\n  summaries: Url;\n  /** Endpoint for File having Cell Source References data */\n  datasets: Url;\n  /** Endpoint for baseHref */\n  baseHref: Url;\n}\n/** Constant  to read the endpoints */\nexport const FTU_DATA_IMPL_ENDPOINTS = new InjectionToken>('Endpoints');\n\n/** Input to different file formats supported */\nexport const FTU_DATA_IMPL_FILE_FORMAT_MAPPING = new InjectionToken>('Mapping of file formats', {\n  providedIn: 'root',\n  factory: () => ({\n    'image/svg+xml': 'svg',\n    'image/png': 'png',\n    'application/pdf': 'ai',\n  }),\n});\n\ntype IdItem = z.infer;\ntype CellSourceItem = z.infer;\ntype Graph = { '@graph': T[] };\ntype Illustrations = z.infer;\ntype Datasets = z.infer;\ntype Cell_Summary = z.infer;\ntype IllusrationFiles = Illustrations['@graph'][number]['illustration_files'];\ntype dataSources = Datasets['@graph'][number]['data_sources'];\n\n/** Base ID Object */\nconst ID_ITEM = z.object({\n  '@id': IRI,\n});\n\n/** ILLUSTRATIONS Object reflecting the format in the file*/\nconst ILLUSTRATIONS = z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    label: z.string(),\n    organ_id: z.string(),\n    organ_label: z.string(),\n    representation_of: z.string(),\n    illustration_files: z\n      .object({\n        file: z.string(),\n        file_format: z.string(),\n      })\n      .array(),\n    mapping: z\n      .object({\n        svg_id: z.string(),\n        svg_group_id: z.string(),\n        label: z.string(),\n        representation_of: z.string(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** DATASETS Object reflecting the format in the file*/\nconst DATASETS = z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    data_sources: z\n      .object({\n        label: z.string(),\n        description: z.string(),\n        link: z.string(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** Base CELL_SOURCE_ITEM Object  having cell_source */\nconst CELL_SOURCE_ITEM = z.object({\n  cell_source: IRI,\n});\n\n/** CELL_SUMMARIES zod Object reflecting the format in the file*/\nconst CELL_SUMMARIES = z.object({\n  '@graph': CELL_SOURCE_ITEM.extend({\n    cell_source: IRI,\n    biomarker_type: z.string(),\n    summary: z\n      .object({\n        cell_id: z.string(),\n        cell_label: z.string(),\n        genes: z\n          .object({\n            '@type': z.string(),\n            gene_id: z.string(),\n            gene_label: z.string(),\n            mean_expression: z.number(),\n          })\n          .array(),\n        count: z.number(),\n        percentage: z.number(),\n        dataset_count: z.number().optional(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** Creates clickable link for the tissue tree element */\nconst TISSUE_LINK = createLinkId('FTU');\n\n/** Provides Base/root url for the tissue tree */\nconst BASE_IRI = 'https://purl.humanatlas.io/2d-ftu/' as Iri;\n\n/** Capitalizes the first character */\nfunction capitalize(str: string): string {\n  return str.slice(0, 1).toUpperCase() + str.slice(1);\n}\n\n/** Converts case to title case for organ name */\nfunction titleCase(name: string) {\n  return name\n    .split(' ')\n    .map((l: string) => l[0].toUpperCase() + l.slice(1))\n    .join(' ');\n}\n\n/**\n * FtuDataImplService - Angular service for handling FTU (Functional Tissue Unit) data operations.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FtuDataImplService extends FtuDataService {\n  /** http client to read files */\n  private readonly http = inject(HttpClient);\n\n  /** Endpoints injector to the service */\n  private readonly endpoints = inject(FTU_DATA_IMPL_ENDPOINTS);\n  /** Endpoint injection for file formats */\n  private readonly fileFormatMapping = inject(FTU_DATA_IMPL_FILE_FORMAT_MAPPING);\n  /** Stores the last retrived Tissue Iri */\n  private cachedIri?: Iri;\n  /** Stores the last retrived data for tissue */\n  private cache = new Map>();\n\n  /**\n  Overrides the getTissueLibrary method to return a data for the tissue Library tree.\n  @returns An Observable that emits the tissue Tree data.\n  */\n  override getTissueLibrary(): Observable {\n    return this.fetchData(undefined, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.constructTissueLibrary(data['@graph'])),\n    );\n  }\n\n  /**\n  Overrides the getIllustrationUrl method to return a mock URL for the given Iri.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits the mock URL.\n  */\n  override getIllustrationUrl(iri: Iri): Observable {\n    return this.getDataFileReferences(iri)\n      .pipe(map((data) => this.findIllustrationUrl(data)))\n      .pipe(\n        withLatestFrom(this.endpoints),\n        map(([url, { baseHref }]) => setUrl(url, baseHref)),\n      );\n  }\n\n  /**\n  Overrides the getIllustrationMapping method to return an IllustrationMappingItem array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an IllustrationMappingItem array.\n  */\n  override getIllustrationMapping(iri: Iri): Observable {\n    return this.fetchData(iri, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.findGraphItem(data, iri).mapping),\n      map((data) => (data ? this.toIllustrationMapping(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getCellSummaries method to return an CellSummary array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an CellSummary array.\n  */\n  override getCellSummaries(iri: Iri): Observable {\n    return this.fetchData(iri, 'summaries', CELL_SUMMARIES).pipe(\n      map((data) => this.findCellSummaries(data, iri)),\n      map((data) => (data ? this.constructCellSummaries(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getDataFileReferences method to return an DataFileReference array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an DataFileReference array.\n  */\n  override getDataFileReferences(iri: Iri): Observable {\n    return this.fetchData(iri, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.findGraphItem(data, iri).illustration_files),\n      map((data) => (data ? this.toDataFileReferences(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getSourceReferences method to return an empty array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an empty array.\n  */\n  override getSourceReferences(iri: Iri): Observable {\n    return this.fetchData(iri, 'datasets', DATASETS).pipe(\n      map((data) => this.findGraphItem(data, iri).data_sources),\n      map((data) => (data ? this.toSourceReferences(data) : [])),\n    );\n  }\n\n  /**\n   * Fetchs data after reading the file and parses with the requested schema\n   * @template T : Schema to be formated\n   * @param iri : Tissue iri\n   * @param endpoint : Endpoint name\n   * @param schema :  Format needed to be extracted\n   * @returns data\n   */\n  private fetchData(\n    iri: Iri | undefined,\n    endpoint: keyof FtuDataImplEndpoints,\n    schema: T,\n  ): Observable> {\n    return this.endpoints.pipe(\n      map((endpoints) => endpoints[endpoint]),\n      switchMap((url) => {\n        const { http, cachedIri, cache } = this;\n        if (iri !== undefined && iri !== cachedIri) {\n          this.cachedIri = iri;\n          this.cache = new Map();\n        }\n        if (!cache.has(url)) {\n          const opts = { params: { id: iri ?? '' }, responseType: 'json' as const };\n          const resp = http.get(url, opts).pipe(map((data) => schema.parse(data)));\n          cache.set(url, firstValueFrom(resp));\n        }\n        return from(cache.get(url) as Promise>);\n      }),\n      take(1),\n      shareReplay(1),\n    );\n  }\n\n  /**\n   * Finds object inside the @graph tag for the requested id element\n   * @template T\n   * @param data\n   * @param iri\n   * @returns graph item\n   */\n  private findGraphItem(data: Graph, iri: Iri): T {\n    const item = data['@graph'].find(({ '@id': id }) => id === iri);\n    if (item === undefined) {\n      return {} as T;\n    }\n    return item;\n  }\n\n  /**\n   * Finds cell summaries from fetched Data based on cell_source field\n   * @template T\n   * @param data\n   * @param iri\n   * @returns cell summaries\n   */\n  private findCellSummaries(data: Graph, iri: Iri): T[] {\n    const item = data['@graph'].filter(({ cell_source }) => cell_source === iri);\n    if (item === undefined || item.length == 0) {\n      return [];\n    }\n    return item;\n  }\n\n  /**\n   * Finds illustration url and formates it to Url\n   * @param files\n   * @returns illustration url\n   */\n  private findIllustrationUrl(files: DataFileReference[]): string {\n    const { fileFormatMapping } = this;\n    const svgFormat = fileFormatMapping['image/svg+xml'];\n    const ref = files.find(({ format }) => format === svgFormat);\n    if (ref === undefined) {\n      return '' as Url;\n    }\n    return ref.url;\n  }\n\n  /**\n   * To illustration mapping for each tissue open\n   * @param mappings\n   * @returns illustration mapping\n   */\n  private toIllustrationMapping(\n    mappings: { label: string; svg_id: string; svg_group_id: string; representation_of: string }[],\n  ): IllustrationMappingItem[] {\n    const results: IllustrationMappingItem[] = [];\n    for (const { label, svg_id, svg_group_id, representation_of } of mappings) {\n      results.push({\n        label,\n        id: svg_id,\n        groupId: svg_group_id,\n        ontologyId: representation_of,\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Formates data to array of DataFileReference format\n   * @param data\n   * @returns data file references\n   */\n  private toDataFileReferences(data: IllusrationFiles): DataFileReference[] {\n    const { fileFormatMapping: formats } = this;\n    const results: DataFileReference[] = [];\n    for (const { file, file_format } of data) {\n      if (file_format in formats) {\n        results.push({ format: formats[file_format], url: file });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Formats data from 'dataSources' to 'SourceReferences'[] format\n   * @param data\n   * @returns source references\n   */\n  private toSourceReferences(data: dataSources): SourceReference[] {\n    const results: SourceReference[] = [];\n    for (const { label, link, description } of data) {\n      results.push({ label, link, title: description });\n    }\n    return results;\n  }\n\n  /**\n   * constructCellSummaries : Formates Cell Summary after fetching the data\n   * @param data\n   * @returns\n   */\n  private constructCellSummaries(data: Cell_Summary['@graph']): CellSummary[] {\n    type SummaryItem = Cell_Summary['@graph'][number]['summary'][number];\n    const cellSummary: CellSummary[] = [];\n    const defaultBiomarkerLables = ['gene', 'protein', 'lipid'];\n    const biomarkersPresent = new Set(data.map((summary) => summary.biomarker_type.toLowerCase()));\n    const expandGenes = (summary: SummaryItem) =>\n      summary.genes.map((gene) => ({\n        ...summary,\n        ...gene,\n      }));\n\n    data.forEach((summaryGroup) => {\n      const nestedSummaries = summaryGroup.summary.map(expandGenes);\n      const summary = nestedSummaries.reduce((acc, items) => acc.concat(items), [] as (typeof nestedSummaries)[number]);\n\n      const cells = summary.map((entry) => ({\n        id: entry.cell_id as Iri,\n        label: entry.cell_label,\n      }));\n\n      const biomarkers = summary.map((entry) => ({\n        id: entry.gene_id as Iri,\n        label: entry.gene_label,\n      }));\n\n      const summaries = summary.map((entry) => ({\n        cell: entry.cell_id as Iri,\n        biomarker: entry.gene_id as Iri,\n        count: entry.count,\n        percentage: entry.percentage,\n        meanExpression: entry.mean_expression,\n        dataset_count: entry.dataset_count,\n      }));\n\n      cellSummary.push({\n        label: `${capitalize(summaryGroup.biomarker_type)} Biomarkers`,\n        cells,\n        biomarkers,\n        summaries,\n      });\n    });\n\n    defaultBiomarkerLables.forEach((defaultLabel) => {\n      if (!biomarkersPresent.has(defaultLabel)) {\n        cellSummary.push({\n          label: `${capitalize(defaultLabel)} Biomarkers`,\n          cells: [],\n          biomarkers: [],\n          summaries: [],\n        });\n      }\n    });\n    return cellSummary;\n  }\n\n  /**\n   * Constructs tissue library ,forming parent and child nodes\n   * @param items\n   * @returns\n   */\n  private constructTissueLibrary(items: Illustrations['@graph']): TissueLibrary {\n    const nodes: TissueLibrary['nodes'] = {};\n    for (const { '@id': id, label, organ_id, organ_label } of items) {\n      const parentId = (BASE_IRI + organ_id) as Iri;\n      nodes[parentId] ??= { id: parentId, label: titleCase(organ_label), parent: BASE_IRI, children: [] };\n      nodes[id] = { id, label: label, parent: parentId, children: [], link: TISSUE_LINK };\n      nodes[parentId]?.children.push(id);\n    }\n    return { root: BASE_IRI, nodes };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FtuDataImplService.html":{"url":"injectables/FtuDataImplService.html","title":"injectable - FtuDataImplService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FtuDataImplService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ftu-data/ftu-data.impl.ts\n        \n\n\n            \n                Description\n            \n            \n                FtuDataImplService - Angular service for handling FTU (Functional Tissue Unit) data operations.\n\n            \n\n            \n                Extends\n            \n            \n                            FtuDataService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getCellSummaries\n                            \n                            \n                                    \n                                getDataFileReferences\n                            \n                            \n                                    \n                                getIllustrationMapping\n                            \n                            \n                                    \n                                getIllustrationUrl\n                            \n                            \n                                    \n                                getSourceReferences\n                            \n                            \n                                    \n                                getTissueLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCellSummaries\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCellSummaries(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:203\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getCellSummaries method to return an CellSummary array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits an CellSummary array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDataFileReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDataFileReferences(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:215\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getDataFileReferences method to return an DataFileReference array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an DataFileReference array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIllustrationMapping\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationMapping(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:191\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getIllustrationMapping method to return an IllustrationMappingItem array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an IllustrationMappingItem array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIllustrationUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationUrl(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:177\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getIllustrationUrl method to return a mock URL for the given Iri.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits the mock URL.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSourceReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSourceReferences(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:227\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getSourceReferences method to return an empty array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an empty array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTissueLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTissueLibrary()\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:166\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getTissueLibrary method to return a data for the tissue Library tree.\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits the tissue Tree data.\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpClient } from '@angular/common/http';\nimport { inject, Injectable, InjectionToken } from '@angular/core';\nimport { createLinkId } from '@hra-ui/cdk/state';\nimport { firstValueFrom, from, map, Observable, shareReplay, switchMap, take, withLatestFrom } from 'rxjs';\nimport { z } from 'zod';\n\nimport { IRI, Iri, setUrl, Url } from '../shared/common.model';\nimport {\n  CellSummary,\n  DataFileReference,\n  IllustrationMappingItem,\n  SourceReference,\n  TissueLibrary,\n} from './ftu-data.model';\nimport { FtuDataService } from './ftu-data.service';\n\n/** Endpoints for Injecting input path */\nexport interface FtuDataImplEndpoints {\n  /** Endpoint for File having Cell illustrations data */\n  illustrations: Url;\n  /** Endpoint for File having Cell Summaries data */\n  summaries: Url;\n  /** Endpoint for File having Cell Source References data */\n  datasets: Url;\n  /** Endpoint for baseHref */\n  baseHref: Url;\n}\n/** Constant  to read the endpoints */\nexport const FTU_DATA_IMPL_ENDPOINTS = new InjectionToken>('Endpoints');\n\n/** Input to different file formats supported */\nexport const FTU_DATA_IMPL_FILE_FORMAT_MAPPING = new InjectionToken>('Mapping of file formats', {\n  providedIn: 'root',\n  factory: () => ({\n    'image/svg+xml': 'svg',\n    'image/png': 'png',\n    'application/pdf': 'ai',\n  }),\n});\n\ntype IdItem = z.infer;\ntype CellSourceItem = z.infer;\ntype Graph = { '@graph': T[] };\ntype Illustrations = z.infer;\ntype Datasets = z.infer;\ntype Cell_Summary = z.infer;\ntype IllusrationFiles = Illustrations['@graph'][number]['illustration_files'];\ntype dataSources = Datasets['@graph'][number]['data_sources'];\n\n/** Base ID Object */\nconst ID_ITEM = z.object({\n  '@id': IRI,\n});\n\n/** ILLUSTRATIONS Object reflecting the format in the file*/\nconst ILLUSTRATIONS = z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    label: z.string(),\n    organ_id: z.string(),\n    organ_label: z.string(),\n    representation_of: z.string(),\n    illustration_files: z\n      .object({\n        file: z.string(),\n        file_format: z.string(),\n      })\n      .array(),\n    mapping: z\n      .object({\n        svg_id: z.string(),\n        svg_group_id: z.string(),\n        label: z.string(),\n        representation_of: z.string(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** DATASETS Object reflecting the format in the file*/\nconst DATASETS = z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    data_sources: z\n      .object({\n        label: z.string(),\n        description: z.string(),\n        link: z.string(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** Base CELL_SOURCE_ITEM Object  having cell_source */\nconst CELL_SOURCE_ITEM = z.object({\n  cell_source: IRI,\n});\n\n/** CELL_SUMMARIES zod Object reflecting the format in the file*/\nconst CELL_SUMMARIES = z.object({\n  '@graph': CELL_SOURCE_ITEM.extend({\n    cell_source: IRI,\n    biomarker_type: z.string(),\n    summary: z\n      .object({\n        cell_id: z.string(),\n        cell_label: z.string(),\n        genes: z\n          .object({\n            '@type': z.string(),\n            gene_id: z.string(),\n            gene_label: z.string(),\n            mean_expression: z.number(),\n          })\n          .array(),\n        count: z.number(),\n        percentage: z.number(),\n        dataset_count: z.number().optional(),\n      })\n      .array(),\n  }).array(),\n});\n\n/** Creates clickable link for the tissue tree element */\nconst TISSUE_LINK = createLinkId('FTU');\n\n/** Provides Base/root url for the tissue tree */\nconst BASE_IRI = 'https://purl.humanatlas.io/2d-ftu/' as Iri;\n\n/** Capitalizes the first character */\nfunction capitalize(str: string): string {\n  return str.slice(0, 1).toUpperCase() + str.slice(1);\n}\n\n/** Converts case to title case for organ name */\nfunction titleCase(name: string) {\n  return name\n    .split(' ')\n    .map((l: string) => l[0].toUpperCase() + l.slice(1))\n    .join(' ');\n}\n\n/**\n * FtuDataImplService - Angular service for handling FTU (Functional Tissue Unit) data operations.\n */\n@Injectable({\n  providedIn: 'root',\n})\nexport class FtuDataImplService extends FtuDataService {\n  /** http client to read files */\n  private readonly http = inject(HttpClient);\n\n  /** Endpoints injector to the service */\n  private readonly endpoints = inject(FTU_DATA_IMPL_ENDPOINTS);\n  /** Endpoint injection for file formats */\n  private readonly fileFormatMapping = inject(FTU_DATA_IMPL_FILE_FORMAT_MAPPING);\n  /** Stores the last retrived Tissue Iri */\n  private cachedIri?: Iri;\n  /** Stores the last retrived data for tissue */\n  private cache = new Map>();\n\n  /**\n  Overrides the getTissueLibrary method to return a data for the tissue Library tree.\n  @returns An Observable that emits the tissue Tree data.\n  */\n  override getTissueLibrary(): Observable {\n    return this.fetchData(undefined, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.constructTissueLibrary(data['@graph'])),\n    );\n  }\n\n  /**\n  Overrides the getIllustrationUrl method to return a mock URL for the given Iri.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits the mock URL.\n  */\n  override getIllustrationUrl(iri: Iri): Observable {\n    return this.getDataFileReferences(iri)\n      .pipe(map((data) => this.findIllustrationUrl(data)))\n      .pipe(\n        withLatestFrom(this.endpoints),\n        map(([url, { baseHref }]) => setUrl(url, baseHref)),\n      );\n  }\n\n  /**\n  Overrides the getIllustrationMapping method to return an IllustrationMappingItem array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an IllustrationMappingItem array.\n  */\n  override getIllustrationMapping(iri: Iri): Observable {\n    return this.fetchData(iri, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.findGraphItem(data, iri).mapping),\n      map((data) => (data ? this.toIllustrationMapping(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getCellSummaries method to return an CellSummary array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an CellSummary array.\n  */\n  override getCellSummaries(iri: Iri): Observable {\n    return this.fetchData(iri, 'summaries', CELL_SUMMARIES).pipe(\n      map((data) => this.findCellSummaries(data, iri)),\n      map((data) => (data ? this.constructCellSummaries(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getDataFileReferences method to return an DataFileReference array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an DataFileReference array.\n  */\n  override getDataFileReferences(iri: Iri): Observable {\n    return this.fetchData(iri, 'illustrations', ILLUSTRATIONS).pipe(\n      map((data) => this.findGraphItem(data, iri).illustration_files),\n      map((data) => (data ? this.toDataFileReferences(data) : [])),\n    );\n  }\n\n  /**\n  Overrides the getSourceReferences method to return an empty array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an empty array.\n  */\n  override getSourceReferences(iri: Iri): Observable {\n    return this.fetchData(iri, 'datasets', DATASETS).pipe(\n      map((data) => this.findGraphItem(data, iri).data_sources),\n      map((data) => (data ? this.toSourceReferences(data) : [])),\n    );\n  }\n\n  /**\n   * Fetchs data after reading the file and parses with the requested schema\n   * @template T : Schema to be formated\n   * @param iri : Tissue iri\n   * @param endpoint : Endpoint name\n   * @param schema :  Format needed to be extracted\n   * @returns data\n   */\n  private fetchData(\n    iri: Iri | undefined,\n    endpoint: keyof FtuDataImplEndpoints,\n    schema: T,\n  ): Observable> {\n    return this.endpoints.pipe(\n      map((endpoints) => endpoints[endpoint]),\n      switchMap((url) => {\n        const { http, cachedIri, cache } = this;\n        if (iri !== undefined && iri !== cachedIri) {\n          this.cachedIri = iri;\n          this.cache = new Map();\n        }\n        if (!cache.has(url)) {\n          const opts = { params: { id: iri ?? '' }, responseType: 'json' as const };\n          const resp = http.get(url, opts).pipe(map((data) => schema.parse(data)));\n          cache.set(url, firstValueFrom(resp));\n        }\n        return from(cache.get(url) as Promise>);\n      }),\n      take(1),\n      shareReplay(1),\n    );\n  }\n\n  /**\n   * Finds object inside the @graph tag for the requested id element\n   * @template T\n   * @param data\n   * @param iri\n   * @returns graph item\n   */\n  private findGraphItem(data: Graph, iri: Iri): T {\n    const item = data['@graph'].find(({ '@id': id }) => id === iri);\n    if (item === undefined) {\n      return {} as T;\n    }\n    return item;\n  }\n\n  /**\n   * Finds cell summaries from fetched Data based on cell_source field\n   * @template T\n   * @param data\n   * @param iri\n   * @returns cell summaries\n   */\n  private findCellSummaries(data: Graph, iri: Iri): T[] {\n    const item = data['@graph'].filter(({ cell_source }) => cell_source === iri);\n    if (item === undefined || item.length == 0) {\n      return [];\n    }\n    return item;\n  }\n\n  /**\n   * Finds illustration url and formates it to Url\n   * @param files\n   * @returns illustration url\n   */\n  private findIllustrationUrl(files: DataFileReference[]): string {\n    const { fileFormatMapping } = this;\n    const svgFormat = fileFormatMapping['image/svg+xml'];\n    const ref = files.find(({ format }) => format === svgFormat);\n    if (ref === undefined) {\n      return '' as Url;\n    }\n    return ref.url;\n  }\n\n  /**\n   * To illustration mapping for each tissue open\n   * @param mappings\n   * @returns illustration mapping\n   */\n  private toIllustrationMapping(\n    mappings: { label: string; svg_id: string; svg_group_id: string; representation_of: string }[],\n  ): IllustrationMappingItem[] {\n    const results: IllustrationMappingItem[] = [];\n    for (const { label, svg_id, svg_group_id, representation_of } of mappings) {\n      results.push({\n        label,\n        id: svg_id,\n        groupId: svg_group_id,\n        ontologyId: representation_of,\n      });\n    }\n\n    return results;\n  }\n\n  /**\n   * Formates data to array of DataFileReference format\n   * @param data\n   * @returns data file references\n   */\n  private toDataFileReferences(data: IllusrationFiles): DataFileReference[] {\n    const { fileFormatMapping: formats } = this;\n    const results: DataFileReference[] = [];\n    for (const { file, file_format } of data) {\n      if (file_format in formats) {\n        results.push({ format: formats[file_format], url: file });\n      }\n    }\n\n    return results;\n  }\n\n  /**\n   * Formats data from 'dataSources' to 'SourceReferences'[] format\n   * @param data\n   * @returns source references\n   */\n  private toSourceReferences(data: dataSources): SourceReference[] {\n    const results: SourceReference[] = [];\n    for (const { label, link, description } of data) {\n      results.push({ label, link, title: description });\n    }\n    return results;\n  }\n\n  /**\n   * constructCellSummaries : Formates Cell Summary after fetching the data\n   * @param data\n   * @returns\n   */\n  private constructCellSummaries(data: Cell_Summary['@graph']): CellSummary[] {\n    type SummaryItem = Cell_Summary['@graph'][number]['summary'][number];\n    const cellSummary: CellSummary[] = [];\n    const defaultBiomarkerLables = ['gene', 'protein', 'lipid'];\n    const biomarkersPresent = new Set(data.map((summary) => summary.biomarker_type.toLowerCase()));\n    const expandGenes = (summary: SummaryItem) =>\n      summary.genes.map((gene) => ({\n        ...summary,\n        ...gene,\n      }));\n\n    data.forEach((summaryGroup) => {\n      const nestedSummaries = summaryGroup.summary.map(expandGenes);\n      const summary = nestedSummaries.reduce((acc, items) => acc.concat(items), [] as (typeof nestedSummaries)[number]);\n\n      const cells = summary.map((entry) => ({\n        id: entry.cell_id as Iri,\n        label: entry.cell_label,\n      }));\n\n      const biomarkers = summary.map((entry) => ({\n        id: entry.gene_id as Iri,\n        label: entry.gene_label,\n      }));\n\n      const summaries = summary.map((entry) => ({\n        cell: entry.cell_id as Iri,\n        biomarker: entry.gene_id as Iri,\n        count: entry.count,\n        percentage: entry.percentage,\n        meanExpression: entry.mean_expression,\n        dataset_count: entry.dataset_count,\n      }));\n\n      cellSummary.push({\n        label: `${capitalize(summaryGroup.biomarker_type)} Biomarkers`,\n        cells,\n        biomarkers,\n        summaries,\n      });\n    });\n\n    defaultBiomarkerLables.forEach((defaultLabel) => {\n      if (!biomarkersPresent.has(defaultLabel)) {\n        cellSummary.push({\n          label: `${capitalize(defaultLabel)} Biomarkers`,\n          cells: [],\n          biomarkers: [],\n          summaries: [],\n        });\n      }\n    });\n    return cellSummary;\n  }\n\n  /**\n   * Constructs tissue library ,forming parent and child nodes\n   * @param items\n   * @returns\n   */\n  private constructTissueLibrary(items: Illustrations['@graph']): TissueLibrary {\n    const nodes: TissueLibrary['nodes'] = {};\n    for (const { '@id': id, label, organ_id, organ_label } of items) {\n      const parentId = (BASE_IRI + organ_id) as Iri;\n      nodes[parentId] ??= { id: parentId, label: titleCase(organ_label), parent: BASE_IRI, children: [] };\n      nodes[id] = { id, label: label, parent: parentId, children: [], link: TISSUE_LINK };\n      nodes[parentId]?.children.push(id);\n    }\n    return { root: BASE_IRI, nodes };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/FtuDataService.html":{"url":"injectables/FtuDataService.html","title":"injectable - FtuDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  FtuDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ftu-data/ftu-data.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for loading all data related to a single ftu\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getCellSummaries\n                            \n                            \n                                    Abstract\n                                getDataFileReferences\n                            \n                            \n                                    Abstract\n                                getIllustrationMapping\n                            \n                            \n                                    Abstract\n                                getIllustrationUrl\n                            \n                            \n                                    Abstract\n                                getSourceReferences\n                            \n                            \n                                    Abstract\n                                getTissueLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getCellSummaries\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCellSummaries(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:36\n                        \n                    \n\n\n            \n                \n                        Gets the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    and\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                observable of cell summaries\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getDataFileReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDataFileReferences(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:42\n                        \n                    \n\n\n            \n                \n                        Gets the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                obeservable of data file references\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getIllustrationMapping\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationMapping(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:30\n                        \n                    \n\n\n            \n                \n                        This method takes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    and\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                observable of IllustrationMappingItem\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getIllustrationUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationUrl(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:25\n                        \n                    \n\n\n            \n                \n                        This method takes\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    and\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                an observable url\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getSourceReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSourceReferences(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:48\n                        \n                    \n\n\n            \n                \n                        Gets the\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                obeservable of source references\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getTissueLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTissueLibrary()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/ftu-data/ftu-data.service.ts:19\n                        \n                    \n\n\n            \n                \n                        Gets tissue library\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                tissue library\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { Iri, Url } from '../shared/common.model';\nimport {\n  CellSummary,\n  DataFileReference,\n  IllustrationMappingItem,\n  SourceReference,\n  TissueLibrary,\n} from './ftu-data.model';\n\n/** Service for loading all data related to a single ftu */\n@Injectable()\nexport abstract class FtuDataService {\n  /**\n   * Gets tissue library\n   * @returns tissue library\n   */\n  abstract getTissueLibrary(): Observable;\n\n  /**\n   * This method takes\n   * @param iri and @returns an observable url\n   */\n  abstract getIllustrationUrl(iri: Iri): Observable;\n  /**\n   * This method takes\n   * @param iri and @returns observable of IllustrationMappingItem\n   */\n  abstract getIllustrationMapping(iri: Iri): Observable;\n  /**\n   * Gets the\n   * @param iri and\n   * @returns observable of cell summaries\n   */\n  abstract getCellSummaries(iri: Iri): Observable;\n  /**\n   * Gets the\n   * @param iri\n   * @returns obeservable of data file references\n   */\n  abstract getDataFileReferences(iri: Iri): Observable;\n  /**\n   * Gets the\n   * @param iri\n   * @returns obeservable of source references\n   */\n  abstract getSourceReferences(iri: Iri): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/HraServiceModule.html":{"url":"modules/HraServiceModule.html","title":"module - HraServiceModule","body":"\n                   \n\n\n\n\n    Modules\n    HraServiceModule\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/lib/service.module.ts\n        \n\n\n\n\n\n        \n            \n            \n        \n\n\n    \n\n\n    \n        import { NgModule } from '@angular/core';\nimport { ContactImplService } from './contact/contact.impl';\nimport { ContactService } from './contact/contact.service';\nimport { FTU_DATA_IMPL_ENDPOINTS, FtuDataImplService } from './ftu-data/ftu-data.impl';\nimport { FtuDataService } from './ftu-data/ftu-data.service';\nimport { of } from 'rxjs';\n\n@NgModule({\n  providers: [\n    {\n      provide: ContactService,\n      useExisting: ContactImplService,\n    },\n    {\n      provide: FtuDataService,\n      useExisting: FtuDataImplService,\n    },\n    {\n      provide: FTU_DATA_IMPL_ENDPOINTS,\n      useValue: of({\n        illustrations: 'assets/TEMP/2d-ftu-illustrations.jsonld',\n        summaries: 'assets/TEMP/ftu-cell-summaries.jsonld',\n        datasets: 'assets/TEMP/ftu-datasets.jsonld',\n        baseHref: '',\n      }),\n    },\n  ],\n})\nexport class HraServiceModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockContactService.html":{"url":"injectables/MockContactService.html","title":"injectable - MockContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                This class represents mock implementation of the ContactService class.\n\n            \n\n            \n                Extends\n            \n            \n                            ContactService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(message: ContactMessage)\n                \n            \n\n\n                    \n                        \n                            Inherited from         ContactService\n\n                        \n                    \n                    \n                        \n                                Defined in         ContactService:11\n\n                        \n                    \n\n\n            \n                \n                        It accepts an object of type ContactMessage and currently logs the message contents on the console.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                message\n                                            \n                                                            ContactMessage\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ContactMessage, ContactService } from './contact.service';\n\n/** This class represents mock implementation of the ContactService class. */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockContactService extends ContactService {\n  /** It accepts an object of type ContactMessage and currently logs the message contents on the console. */\n  sendMessage(message: ContactMessage): Observable {\n    console.log('Message received. Content: ' + JSON.stringify(message));\n    return EMPTY;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockFtuDataService.html":{"url":"injectables/MockFtuDataService.html","title":"injectable - MockFtuDataService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockFtuDataService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/ftu-data/ftu-data.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                This class represents a mock implementation of the FtuDataService class.\nIt overrides the methods from the parent class to provide mock data for testing purposes.\n\n            \n\n            \n                Extends\n            \n            \n                            FtuDataService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getCellSummaries\n                            \n                            \n                                    \n                                getDataFileReferences\n                            \n                            \n                                    \n                                getIllustrationMapping\n                            \n                            \n                                    \n                                getIllustrationUrl\n                            \n                            \n                                    \n                                getSourceReferences\n                            \n                            \n                                    \n                                getTissueLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getCellSummaries\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCellSummaries(_iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:125\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getCellSummaries method to return an CellSummary array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable\n\n                        \n                            \n                                An Observable that emits an CellSummary array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getDataFileReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getDataFileReferences(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:133\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getDataFileReferences method to return an DataFileReference array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an DataFileReference array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIllustrationMapping\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationMapping(_iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:116\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getIllustrationMapping method to return an IllustrationMappingItem array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an IllustrationMappingItem array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getIllustrationUrl\n                        \n                    \n                \n            \n            \n                \n                        \n                    getIllustrationUrl(iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:107\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getIllustrationUrl method to return a mock URL for the given Iri.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    The Iri of the illustration.\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits the mock URL.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getSourceReferences\n                        \n                    \n                \n            \n            \n                \n                        \n                    getSourceReferences(_iri: Iri)\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:146\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getSourceReferences method to return an empty array.\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                _iri\n                                            \n                                                            Iri\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Observable\n\n                        \n                            \n                                An Observable that emits an empty array.\n\n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTissueLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTissueLibrary()\n                \n            \n\n\n                    \n                        \n                            Inherited from         FtuDataService\n\n                        \n                    \n                    \n                        \n                                Defined in         FtuDataService:99\n\n                        \n                    \n\n\n            \n                \n                        Overrides the getTissueLibrary method to return a mock data for the tissue tree\n\n\n                        \n                            Returns :     Observable\n\n                        \n                            \n                                tissue library\n\n                            \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { Iri, Url } from '../shared/common.model';\nimport { MOCK_SUMMARIES } from '../tissue-ftu/tissue-ftu.mock';\nimport { MOCK_TISSUE_DATA } from '../tissue-library/tissue-library.mock';\nimport {\n  CellSummary,\n  DataFileReference,\n  IllustrationMappingItem,\n  SourceReference,\n  TissueLibrary,\n} from './ftu-data.model';\nimport { FtuDataService } from './ftu-data.service';\n\n/**\n * Dummy data for Source References\n */\nconst sourceReferences = [\n  {\n    title: 'Kidney Precision Medicine Project',\n    label: 'Ancillary Study Data, Clinical Data, HRT Codebook',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title:\n      '[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]',\n    label:\n      '',\n    link: 'google.com',\n  },\n  {\n    title: 'Kidney Precision Medicine Project',\n    label: 'Ancillary Study Data, Clinical Data, HRT Codebook',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title:\n      '[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]',\n    label:\n      '',\n    link: 'google.com',\n  },\n];\n\n/**\n * Dummy data extract om Mock Data of tissue mock\n */\nconst CELL_SUMMARY_DATA: CellSummary[] = Object.values(MOCK_SUMMARIES).map((summary) => ({\n  label: summary.label,\n  cells: summary.entries.map((entry) => ({\n    id: entry.cell.id as Iri,\n    label: entry.cell.label,\n  })),\n  biomarkers: summary.entries.map((entry) => ({\n    id: entry.biomarker.id as Iri,\n    label: entry.biomarker.label,\n  })),\n  summaries: summary.entries.map((entry) => ({\n    cell: entry.cell.id as Iri,\n    biomarker: entry.biomarker.id as Iri,\n    count: entry.count,\n    percentage: entry.percentage,\n    meanExpression: entry.meanExpression,\n  })),\n}));\n\n/**\nThis class represents a mock implementation of the FtuDataService class.\nIt overrides the methods from the parent class to provide mock data for testing purposes.\n*/\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockFtuDataService extends FtuDataService {\n  /**\n   * Overrides the getTissueLibrary method to return a mock data for the tissue tree\n   * @returns tissue library\n   */\n  override getTissueLibrary(): Observable {\n    return of();\n  }\n  /**\n  Overrides the getIllustrationUrl method to return a mock URL for the given Iri.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits the mock URL.\n  */\n  override getIllustrationUrl(iri: Iri): Observable {\n    return of(MOCK_TISSUE_DATA.nodes[iri].object.file);\n  }\n\n  /**\n  Overrides the getIllustrationMapping method to return an IllustrationMappingItem array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an IllustrationMappingItem array.\n  */\n  override getIllustrationMapping(_iri: Iri): Observable {\n    return of([]);\n  }\n\n  /**\n  Overrides the getCellSummaries method to return an CellSummary array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an CellSummary array.\n  */\n  override getCellSummaries(_iri: Iri): Observable {\n    return of(CELL_SUMMARY_DATA);\n  }\n  /**\n  Overrides the getDataFileReferences method to return an DataFileReference array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an DataFileReference array.\n  */\n  override getDataFileReferences(iri: Iri): Observable {\n    return of([\n      {\n        format: 'svg',\n        url: MOCK_TISSUE_DATA.nodes[iri].object.file,\n      },\n    ]);\n  }\n  /**\n  Overrides the getSourceReferences method to return an empty array.\n  @param iri The Iri of the illustration.\n  @returns An Observable that emits an empty array.\n  */\n  override getSourceReferences(_iri: Iri): Observable {\n    return of(sourceReferences);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockTissueFtuService.html":{"url":"injectables/MockTissueFtuService.html","title":"injectable - MockTissueFtuService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockTissueFtuService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-ftu/tissue-ftu.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                Implementation of TissueFtuService\n\n            \n\n            \n                Extends\n            \n            \n                            TissueFtuService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getCellSummaries\n                            \n                            \n                                getReferenceOrgans\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getCellSummaries\n                        \n                    \n                \n            \n            \n                \ngetCellSummaries()\n                \n            \n\n\n                    \n                        \n                            Inherited from         TissueFtuService\n\n                        \n                    \n                    \n                        \n                                Defined in         TissueFtuService:99\n\n                        \n                    \n\n\n            \n                \n                        Implementation of abstract method\n\n\n                        \n                            Returns :     Observable<>\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        getReferenceOrgans\n                        \n                    \n                \n            \n            \n                \ngetReferenceOrgans()\n                \n            \n\n\n                    \n                        \n                            Inherited from         TissueFtuService\n\n                        \n                    \n                    \n                        \n                                Defined in         TissueFtuService:94\n\n                        \n                    \n\n\n            \n                \n                        Implementation of getReferenceOrgans method\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Any } from '@hra-ui/utils/types';\nimport { Observable, of } from 'rxjs';\nimport { MOCK_TISSUE_DATA } from '../tissue-library/tissue-library.mock';\nimport { ReferenceOrgan, TissueFtuService } from './tissue-ftu.service';\n\n/** Test whether an object is a reference organ */\nfunction isReferenceOrgan(obj: Any): obj is ReferenceOrgan {\n  return !!obj['object']['file'];\n}\n\n/** Helper for creating summary data */\nfunction createCell(\n  cid: string,\n  clabel: string,\n  bid: string,\n  blabel: string,\n  count: number,\n  percentage: number,\n  meanExpression: number,\n  metadata: { label: string; value: string }[][] = [],\n) {\n  return {\n    cell: {\n      id: cid,\n      label: clabel,\n    },\n    biomarker: {\n      id: bid,\n      label: blabel,\n    },\n    count,\n    percentage,\n    meanExpression,\n    metadata,\n  };\n}\n\n/** Reference organs */\nconst MOCK_REFERENCE_ORGANS = Object.values(MOCK_TISSUE_DATA.nodes).filter(isReferenceOrgan);\n\n/** Mock summary data */\nexport const MOCK_SUMMARIES = {\n  summary1: {\n    label: 'Summary 1',\n    entries: [\n      createCell('cell1', 'Cell 1', 'biomarker1', 'Biomarker 1', 10, 1.0, 1.0, [\n        [\n          { label: 'metadata 1', value: 'value of data' },\n          { label: 'metadata 2', value: 'value of data' },\n        ],\n        [{ label: 'metadata 3', value: 'value of data' }],\n      ]),\n      createCell('cell2', 'Cell 2', 'biomarker1', 'Biomarker 1', 5, 0.2, 0.3),\n      createCell('cell2', 'Cell 2', 'biomarker2', 'Biomarker 2', 5, 0.2, 0.3),\n      createCell('cell1', 'Cell 1', 'biomarker3', 'Biomarker 3', 15, 0.2, 0.3),\n      createCell('cell3', 'Cell 3', 'biomarker1', 'Biomarker 1', 11, 0.3, 0.5),\n      createCell('cell3', 'Cell 3', 'biomarker3', 'Biomarker 3', 11, 0.1, 0.3),\n      createCell('cell4', 'Cell 4', 'biomarker1', 'Biomarker 1', 2000, 0.1, 1.0),\n      createCell('cell5', 'Cell 5', 'biomarker1', 'Biomarker 1', 332, 0.4, 0.3),\n      createCell('cell6', 'Cell 6', 'biomarker3', 'Biomarker 3', 101, 0.2, 0.1),\n      createCell('cell7', 'Cell 7', 'biomarker1', 'Biomarker 1', 2, 0.5, 0.3),\n      createCell('cell7', 'Cell 7', 'biomarker2', 'Biomarker 2', 230, 0.4, 0.3),\n      createCell('cell7', 'Cell 7', 'biomarker3', 'Biomarker 3', 601, 0.7, 0.3),\n      createCell('cell8', 'Cell 8', 'biomarker1', 'Biomarker 1', 124, 0.5, 0.5),\n      createCell('cell8', 'Cell 8', 'biomarker2', 'Biomarker 2', 244, 0.3, 0.3),\n      createCell('cell9', 'Cell 9', 'biomarker1', 'Biomarker 1', 21, 0.4, 0.3),\n      createCell('cell10', 'Cell 10', 'biomarker2', 'Biomarker 2', 675, 0.5, 0.3),\n      createCell('cell11', 'Cell 11', 'biomarker3', 'Biomarker 3', 57, 0.3, 0.3),\n      createCell('cell12', 'Cell 12', 'biomarker2', 'Biomarker 2', 45, 0.1, 0.7),\n      createCell('cell13', 'Cell 13', 'biomarker4', 'Biomarker 4', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker5', 'Biomarker 5', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker6', 'Biomarker 6', 45, 0.1, 0.4),\n      createCell('cell13', 'Cell 13', 'biomarker7', 'Biomarker 7', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker8', 'Biomarker 8', 45, 0.1, 0.9),\n    ],\n  },\n  summary2: {\n    label: 'Summary 2',\n    entries: [createCell('cell1', 'Cell 1', 'biomarker2', 'Biomarker 2', 20, 1, 0.9)],\n  },\n  summary3: {\n    label: 'Summary 3',\n    entries: [],\n  },\n};\n\n/** Implementation of TissueFtuService */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockTissueFtuService extends TissueFtuService {\n  /** Implementation of getReferenceOrgans method */\n  getReferenceOrgans(): Observable {\n    return of(MOCK_REFERENCE_ORGANS);\n  }\n\n  /** Implementation of abstract method */\n  getCellSummaries(): Observable {\n    return of(MOCK_SUMMARIES);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockTissueLibraryService.html":{"url":"injectables/MockTissueLibraryService.html","title":"injectable - MockTissueLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockTissueLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                Mock implementation of TissueLibraryService\n\n            \n\n            \n                Extends\n            \n            \n                            TissueLibraryService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getTissueLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getTissueLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTissueLibrary()\n                \n            \n\n\n                    \n                        \n                            Inherited from         TissueLibraryService\n\n                        \n                    \n                    \n                        \n                                Defined in         TissueLibraryService:165\n\n                        \n                    \n\n\n            \n                \n                        Implementation of TissueLibraryService.getTissueLibrary\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { createLinkId } from '@hra-ui/cdk/state';\nimport { Observable, of } from 'rxjs';\nimport { TissueLibraryService } from './tissue-library.service';\nimport { Tissue, TissueLibrary } from './tissue-library.model';\nimport { Iri, Url } from '../shared/common.model';\n\n/**\n * Extended tissue\n */\ninterface ExtendedTissue extends Tissue {\n  /** Base Id */\n  representation_of: string;\n  /** Objecy to stoe the file URL */\n  object: {\n    file: Url;\n  };\n}\n\n/** Create a new id from a label */\nfunction createNodeId(label: string, parent: string): string {\n  return `${parent}${label.replace(/ /g, '_')}/`;\n}\n\n/** Create a new node */\nfunction defineNode(\n  label: string,\n  parent: string,\n  url?: string,\n  ...children: [label: string, url: string][]\n): Record {\n  const id = createNodeId(label, parent);\n  const childNodes = children.reduce(\n    (acc, [childLabel, childUrl]) => ({\n      ...acc,\n      ...defineNode(childLabel, id, childUrl),\n    }),\n    {},\n  );\n  const node = {\n    '@type': '',\n    '@id': id,\n    id,\n    parent,\n    label,\n    synonymLabels: [],\n    link: url && createLinkId('FTU'),\n    representation_of: id,\n    object: {\n      file: url,\n    },\n    children: Object.keys(childNodes),\n  };\n\n  return { [id]: node, ...childNodes };\n}\n\n/** Base node id */\nconst BASE_ID = 'https://purl.humanatlas.io/2d-ftu/';\n\n/** Mock tissue data */\nexport const MOCK_TISSUE_DATA = {\n  root: BASE_ID as Iri,\n  nodes: Object.assign(\n    {},\n    defineNode(\n      'Kidney',\n      BASE_ID,\n      undefined,\n      [\n        'Descending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-descending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Renal Corpuscle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-renal-corpuscle.svg',\n      ],\n      [\n        'Ascending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-ascending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Cortical Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-cortical-collecting-duct.svg',\n      ],\n      [\n        'Inner Medullary Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-inner-medullary-collecting-duct.svg',\n      ],\n      ['Nephron', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-nephron.svg'],\n      [\n        'Outer Medullary Collectiong Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-outer-medullary-collecting-duct.svg',\n      ],\n      [\n        'Thick Ascending Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-thick-ascending-loop-of-henle.svg',\n      ],\n    ),\n    defineNode(\n      'Lung',\n      BASE_ID,\n      undefined,\n      [\n        'Pulmonary Alveolus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-pulmonary-alveolus.svg',\n      ],\n      [\n        'Bronchial Submucosal Gland',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-bronchial-submucosal-gland.svg',\n      ],\n    ),\n    defineNode('Large Intestine', BASE_ID, undefined, [\n      'Crypt Lieberkuhn',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-large-intestine-crypt-lieberkuhn.svg',\n    ]),\n    defineNode(\n      'Pancreas',\n      BASE_ID,\n      undefined,\n      [\n        'Islates Langerhans',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-islets-langerhans.svg',\n      ],\n      [\n        'Intercalated Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-intercalated-duct.svg',\n      ],\n      [\n        'Pancreatic Acinus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-pancreatic-acinus.svg',\n      ],\n    ),\n    defineNode(\n      'Skin',\n      BASE_ID,\n      undefined,\n      ['Dermal Papilla', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-dermal-papilla.svg'],\n      [\n        'Epidermal Ridge',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-epidermal-ridge.svg',\n      ],\n    ),\n    defineNode('Liver', BASE_ID, undefined, [\n      'Liver Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-liver-liver-lobule.svg',\n    ]),\n    defineNode('Prostate', BASE_ID, undefined, [\n      'Prostate Glandular Acinus',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-prostate-prostate-glandular-acinus.svg',\n    ]),\n    defineNode('Thymus', BASE_ID, undefined, [\n      'Thymus Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-thymus-thymus-lobule.svg',\n    ]),\n  ) as Record,\n};\n\n/** Mock implementation of {@link TissueLibraryService} */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockTissueLibraryService extends TissueLibraryService {\n  /** Implementation of {@link TissueLibraryService.getTissueLibrary} */\n  override getTissueLibrary(): Observable {\n    return of(MOCK_TISSUE_DATA as TissueLibrary);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueFtuService.html":{"url":"injectables/TissueFtuService.html","title":"injectable - TissueFtuService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueFtuService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-ftu/tissue-ftu.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Abstract Service to fetch reference organs\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getCellSummaries\n                            \n                            \n                                    Abstract\n                                getReferenceOrgans\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getCellSummaries\n                        \n                    \n                \n            \n            \n                \n                        \n                    getCellSummaries(id)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/tissue-ftu/tissue-ftu.service.ts:22\n                        \n                    \n\n\n            \n                \n                        Get summary data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Observable<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getReferenceOrgans\n                        \n                    \n                \n            \n            \n                \n                        \n                    getReferenceOrgans()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/tissue-ftu/tissue-ftu.service.ts:19\n                        \n                    \n\n\n            \n                \n                        abstract Method to fetch reference organs\n\n\n                        \n                            Returns :         Observable\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { z } from 'zod';\n\nexport type ReferenceOrgan = z.infer;\n\n/** Reference organ type */\nexport const REFERENCE_ORGAN = z.object({\n  representation_of: z.string(),\n  object: z.object({\n    file: z.string(),\n  }),\n});\n\n/** Abstract Service to fetch reference organs */\n@Injectable()\nexport abstract class TissueFtuService {\n  /** abstract Method to fetch reference organs */\n  abstract getReferenceOrgans(): Observable;\n\n  /** Get summary data */\n  abstract getCellSummaries(id: unknown): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryService.html":{"url":"injectables/TissueLibraryService.html","title":"injectable - TissueLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Service for loading the tissue library\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getTissueLibrary\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            Abstract\n                        getTissueLibrary\n                        \n                    \n                \n            \n            \n                \n                        \n                    getTissueLibrary()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/tissue-library/tissue-library.service.ts:9\n                        \n                    \n\n\n            \n                \n                        Loads the entire tissue library\n\n\n                        \n                            Returns :     Observable\n\n                        \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { TissueLibrary } from './tissue-library.model';\n\n/** Service for loading the tissue library */\n@Injectable()\nexport abstract class TissueLibraryService {\n  /** Loads the entire tissue library */\n  abstract getTissueLibrary(): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            capitalize   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            createCell   (src/.../tissue-ftu.mock.ts)\n                        \n                        \n                            createNodeId   (src/.../tissue-library.mock.ts)\n                        \n                        \n                            defineNode   (src/.../tissue-library.mock.ts)\n                        \n                        \n                            isReferenceOrgan   (src/.../tissue-ftu.mock.ts)\n                        \n                        \n                            setUrl   (src/.../common.model.ts)\n                        \n                        \n                            titleCase   (src/.../ftu-data.impl.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ftu-data/ftu-data.impl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        capitalize\n                        \n                    \n                \n            \n            \n                \ncapitalize(str: string)\n                \n            \n\n\n\n\n            \n                \n                        Capitalizes the first character\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                str\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        titleCase\n                        \n                    \n                \n            \n            \n                \ntitleCase(name: string)\n                \n            \n\n\n\n\n            \n                \n                        Converts case to title case for organ name\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                name\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    src/lib/tissue-ftu/tissue-ftu.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createCell\n                        \n                    \n                \n            \n            \n                \ncreateCell(cid: string, clabel: string, bid: string, blabel: string, count: number, percentage: number, meanExpression: number, metadata)\n                \n            \n\n\n\n\n            \n                \n                        Helper for creating summary data\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                cid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                clabel\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                bid\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                blabel\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                count\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                percentage\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                meanExpression\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                metadata\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                        \n                                    \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isReferenceOrgan\n                        \n                    \n                \n            \n            \n                \nisReferenceOrgan(obj: Any)\n                \n            \n\n\n\n\n            \n                \n                        Test whether an object is a reference organ\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                obj\n                                            \n                                                            Any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         ReferenceOrgan\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        createNodeId\n                        \n                    \n                \n            \n            \n                \ncreateNodeId(label: string, parent: string)\n                \n            \n\n\n\n\n            \n                \n                        Create a new id from a label\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         string\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        defineNode\n                        \n                    \n                \n            \n            \n                \ndefineNode(label: string, parent: string, url?: string, ...children: undefined)\n                \n            \n\n\n\n\n            \n                \n                        Create a new node\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                label\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                parent\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                children\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Record\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/shared/common.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        setUrl\n                        \n                    \n                \n            \n            \n                \nsetUrl(url: string, baseHref: string)\n                \n            \n\n\n\n\n            \n                \n                        Returns url with base href value\n\n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                                Description\n                                        \n                                    \n                                    \n                                        \n                                                url\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    url\n\n                                            \n                                        \n                                        \n                                                baseHref\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                            \n                                                    base href\n\n                                            \n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Url\n\n                        \n                            \n                                updated url\n\n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nservices\nThis library was generated with Nx.\nRunning unit tests\nRun nx test services to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        HraServiceModule\n                    \n                    \n                                \n                                    No graph available.\n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        1 Module\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    10 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    3 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Biomarker   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Cell   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Cell_Summary   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            CellSourceItem   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            CellSummary   (src/.../ftu-data.model.ts)\n                        \n                        \n                            CellSummaryRow   (src/.../ftu-data.model.ts)\n                        \n                        \n                            DataFileReference   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Datasets   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            dataSources   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            Graph   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            IdItem   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            IllusrationFiles   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            IllustrationMappingItem   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Illustrations   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            Iri   (src/.../common.model.ts)\n                        \n                        \n                            ReferenceOrgan   (src/.../tissue-ftu.service.ts)\n                        \n                        \n                            SourceReference   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Tissue   (src/.../ftu-data.model.ts)\n                        \n                        \n                            Tissue   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TissueLibrary   (src/.../ftu-data.model.ts)\n                        \n                        \n                            TissueLibrary   (src/.../tissue-library.model.ts)\n                        \n                        \n                            Url   (src/.../common.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/ftu-data/ftu-data.model.ts\n    \n    \n        \n            \n                \n                    \n                    Biomarker\n                \n            \n            \n                \n                    Type for a Biomarker\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Cell\n                \n            \n            \n                \n                    Type for a cell\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummary\n                \n            \n            \n                \n                    Type for a CellSummary\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSummaryRow\n                \n            \n            \n                \n                    Type for a CellSummaryRow\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    DataFileReference\n                \n            \n            \n                \n                    Type for a DataFileReference\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IllustrationMappingItem\n                \n            \n            \n                \n                    Type for a IllustrationMappingItem\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    SourceReference\n                \n            \n            \n                \n                    Type for a SourceReference\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Tissue\n                \n            \n            \n                \n                    Type for Tissue\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibrary\n                \n            \n            \n                \n                    Type for Tissue\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/ftu-data/ftu-data.impl.ts\n    \n    \n        \n            \n                \n                    \n                    Cell_Summary\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    CellSourceItem\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Datasets\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    dataSources\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Graph\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IdItem\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    IllusrationFiles\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Illustrations\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/shared/common.model.ts\n    \n    \n        \n            \n                \n                    \n                    Iri\n                \n            \n            \n                \n                    Same as an Url\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    Url\n                \n            \n            \n                \n                    Any url\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/tissue-ftu/tissue-ftu.service.ts\n    \n    \n        \n            \n                \n                    \n                    ReferenceOrgan\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    src/lib/tissue-library/tissue-library.model.ts\n    \n    \n        \n            \n                \n                    \n                    Tissue\n                \n            \n            \n                \n                    Type for Tissue\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    TissueLibrary\n                \n            \n            \n                \n                    Type for Tissue\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            BASE_ID   (src/.../tissue-library.mock.ts)\n                        \n                        \n                            BASE_IRI   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            BIOMARKER   (src/.../ftu-data.model.ts)\n                        \n                        \n                            CELL   (src/.../ftu-data.model.ts)\n                        \n                        \n                            CELL_SOURCE_ITEM   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            CELL_SUMMARIES   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            CELL_SUMMARY   (src/.../ftu-data.model.ts)\n                        \n                        \n                            CELL_SUMMARY_DATA   (src/.../ftu-data.mock.ts)\n                        \n                        \n                            CELL_SUMMARY_ROW   (src/.../ftu-data.model.ts)\n                        \n                        \n                            COUNT   (src/.../ftu-data.model.ts)\n                        \n                        \n                            COUNT_INTEGER_ERROR   (src/.../ftu-data.model.ts)\n                        \n                        \n                            COUNT_RANGE_ERROR   (src/.../ftu-data.model.ts)\n                        \n                        \n                            DATA_FILE_REFERENCE   (src/.../ftu-data.model.ts)\n                        \n                        \n                            DATASETS   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            FTU_DATA_IMPL_ENDPOINTS   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            FTU_DATA_IMPL_FILE_FORMAT_MAPPING   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            ID_ITEM   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            ILLUSTRATION_MAPPING_ITEM   (src/.../ftu-data.model.ts)\n                        \n                        \n                            ILLUSTRATIONS   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            IRI   (src/.../common.model.ts)\n                        \n                        \n                            MOCK_REFERENCE_ORGANS   (src/.../tissue-ftu.mock.ts)\n                        \n                        \n                            MOCK_SUMMARIES   (src/.../tissue-ftu.mock.ts)\n                        \n                        \n                            MOCK_TISSUE_DATA   (src/.../tissue-library.mock.ts)\n                        \n                        \n                            PERCENTAGE   (src/.../ftu-data.model.ts)\n                        \n                        \n                            PERCENTAGE_RANGE_ERROR   (src/.../ftu-data.model.ts)\n                        \n                        \n                            REFERENCE_ORGAN   (src/.../tissue-ftu.service.ts)\n                        \n                        \n                            SOURCE_REFERENCE   (src/.../ftu-data.model.ts)\n                        \n                        \n                            sourceReferences   (src/.../ftu-data.mock.ts)\n                        \n                        \n                            TISSUE   (src/.../ftu-data.model.ts)\n                        \n                        \n                            TISSUE   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TISSUE_LIBRARY   (src/.../ftu-data.model.ts)\n                        \n                        \n                            TISSUE_LIBRARY   (src/.../tissue-library.model.ts)\n                        \n                        \n                            TISSUE_LINK   (src/.../ftu-data.impl.ts)\n                        \n                        \n                            URL   (src/.../common.model.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/tissue-library/tissue-library.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_ID\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'https://purl.humanatlas.io/2d-ftu/'\n                    \n                \n\n            \n                \n                    Base node id\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MOCK_TISSUE_DATA\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  root: BASE_ID as Iri,\n  nodes: Object.assign(\n    {},\n    defineNode(\n      'Kidney',\n      BASE_ID,\n      undefined,\n      [\n        'Descending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-descending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Renal Corpuscle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-renal-corpuscle.svg',\n      ],\n      [\n        'Ascending Thin Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-ascending-thin-loop-of-henle.svg',\n      ],\n      [\n        'Cortical Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-cortical-collecting-duct.svg',\n      ],\n      [\n        'Inner Medullary Collecting Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-inner-medullary-collecting-duct.svg',\n      ],\n      ['Nephron', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-nephron.svg'],\n      [\n        'Outer Medullary Collectiong Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-outer-medullary-collecting-duct.svg',\n      ],\n      [\n        'Thick Ascending Loop of Henle',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-kidney-thick-ascending-loop-of-henle.svg',\n      ],\n    ),\n    defineNode(\n      'Lung',\n      BASE_ID,\n      undefined,\n      [\n        'Pulmonary Alveolus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-pulmonary-alveolus.svg',\n      ],\n      [\n        'Bronchial Submucosal Gland',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-lung-bronchial-submucosal-gland.svg',\n      ],\n    ),\n    defineNode('Large Intestine', BASE_ID, undefined, [\n      'Crypt Lieberkuhn',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-large-intestine-crypt-lieberkuhn.svg',\n    ]),\n    defineNode(\n      'Pancreas',\n      BASE_ID,\n      undefined,\n      [\n        'Islates Langerhans',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-islets-langerhans.svg',\n      ],\n      [\n        'Intercalated Duct',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-intercalated-duct.svg',\n      ],\n      [\n        'Pancreatic Acinus',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-pancreas-pancreatic-acinus.svg',\n      ],\n    ),\n    defineNode(\n      'Skin',\n      BASE_ID,\n      undefined,\n      ['Dermal Papilla', 'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-dermal-papilla.svg'],\n      [\n        'Epidermal Ridge',\n        'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-skin-epidermal-ridge.svg',\n      ],\n    ),\n    defineNode('Liver', BASE_ID, undefined, [\n      'Liver Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-liver-liver-lobule.svg',\n    ]),\n    defineNode('Prostate', BASE_ID, undefined, [\n      'Prostate Glandular Acinus',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-prostate-prostate-glandular-acinus.svg',\n    ]),\n    defineNode('Thymus', BASE_ID, undefined, [\n      'Thymus Lobule',\n      'https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-thymus-thymus-lobule.svg',\n    ]),\n  ) as Record,\n}\n                    \n                \n\n            \n                \n                    Mock tissue data\n\n                \n            \n\n        \n    \n\n    src/lib/ftu-data/ftu-data.impl.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BASE_IRI\n                        \n                    \n                \n            \n                \n                    \n                        Default value : 'https://purl.humanatlas.io/2d-ftu/' as Iri\n                    \n                \n\n            \n                \n                    Provides Base/root url for the tissue tree\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SOURCE_ITEM\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell_source: IRI,\n})\n                    \n                \n\n            \n                \n                    Base CELL_SOURCE_ITEM Object  having cell_source\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARIES\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  '@graph': CELL_SOURCE_ITEM.extend({\n    cell_source: IRI,\n    biomarker_type: z.string(),\n    summary: z\n      .object({\n        cell_id: z.string(),\n        cell_label: z.string(),\n        genes: z\n          .object({\n            '@type': z.string(),\n            gene_id: z.string(),\n            gene_label: z.string(),\n            mean_expression: z.number(),\n          })\n          .array(),\n        count: z.number(),\n        percentage: z.number(),\n        dataset_count: z.number().optional(),\n      })\n      .array(),\n  }).array(),\n})\n                    \n                \n\n            \n                \n                    CELL_SUMMARIES zod Object reflecting the format in the file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATASETS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    data_sources: z\n      .object({\n        label: z.string(),\n        description: z.string(),\n        link: z.string(),\n      })\n      .array(),\n  }).array(),\n})\n                    \n                \n\n            \n                \n                    DATASETS Object reflecting the format in the file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FTU_DATA_IMPL_ENDPOINTS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('Endpoints')\n                    \n                \n\n            \n                \n                    Constant  to read the endpoints\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        FTU_DATA_IMPL_FILE_FORMAT_MAPPING\n                        \n                    \n                \n            \n                \n                    \n                        Default value : new InjectionToken>('Mapping of file formats', {\n  providedIn: 'root',\n  factory: () => ({\n    'image/svg+xml': 'svg',\n    'image/png': 'png',\n    'application/pdf': 'ai',\n  }),\n})\n                    \n                \n\n            \n                \n                    Input to different file formats supported\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ID_ITEM\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  '@id': IRI,\n})\n                    \n                \n\n            \n                \n                    Base ID Object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ILLUSTRATIONS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  '@graph': ID_ITEM.extend({\n    '@id': IRI,\n    label: z.string(),\n    organ_id: z.string(),\n    organ_label: z.string(),\n    representation_of: z.string(),\n    illustration_files: z\n      .object({\n        file: z.string(),\n        file_format: z.string(),\n      })\n      .array(),\n    mapping: z\n      .object({\n        svg_id: z.string(),\n        svg_group_id: z.string(),\n        label: z.string(),\n        representation_of: z.string(),\n      })\n      .array(),\n  }).array(),\n})\n                    \n                \n\n            \n                \n                    ILLUSTRATIONS Object reflecting the format in the file\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TISSUE_LINK\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createLinkId('FTU')\n                    \n                \n\n            \n                \n                    Creates clickable link for the tissue tree element\n\n                \n            \n\n        \n    \n\n    src/lib/ftu-data/ftu-data.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        BIOMARKER\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: IRI,\n  label: z.string(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a BIOMARKER\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: IRI,\n  label: z.string(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a cell object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  label: z.string(),\n  cells: CELL.array(),\n  biomarkers: BIOMARKER.array(),\n  summaries: CELL_SUMMARY_ROW.array(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a CELL_SUMMARY\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_ROW\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  cell: IRI,\n  biomarker: IRI,\n  count: COUNT,\n  percentage: PERCENTAGE,\n  meanExpression: PERCENTAGE,\n  dataset_count: COUNT.optional(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a CELL_SUMMARY_ROW\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        COUNT\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.number().int(COUNT_INTEGER_ERROR).nonnegative(COUNT_RANGE_ERROR)\n                    \n                \n\n            \n                \n                    A integer greater than or equal to zero\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        COUNT_INTEGER_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Count must be an integer'\n                    \n                \n\n            \n                \n                    Error message for non integer counts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        COUNT_RANGE_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Count must be greater than or equal to 0'\n                    \n                \n\n            \n                \n                    Error message for negative counts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        DATA_FILE_REFERENCE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  format: z.string(),\n  url: z.string(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a DATA_FILE_REFERENCE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ILLUSTRATION_MAPPING_ITEM\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: z.string(),\n  groupId: z.string(),\n  label: z.string(),\n  ontologyId: z.string(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a ILLUSTRATION_MAPPING_ITEM\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PERCENTAGE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.number().gte(0, PERCENTAGE_RANGE_ERROR).lte(1, PERCENTAGE_RANGE_ERROR)\n                    \n                \n\n            \n                \n                    A number between 0 and 1 inclusive\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        PERCENTAGE_RANGE_ERROR\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'Percentage must be between 0 and 1 (inclusive)'\n                    \n                \n\n            \n                \n                    Error message for negative counts\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        SOURCE_REFERENCE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  title: z.string(),\n  label: z.string(),\n  link: z.string().url(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a SOURCE_REFERENCE\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TISSUE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: IRI,\n  label: z.string(),\n  parent: IRI,\n  children: IRI.array().default([]),\n  link: z.string().optional(),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a tissue object\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TISSUE_LIBRARY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  root: IRI,\n  nodes: z.record(IRI, TISSUE),\n})\n                    \n                \n\n            \n                \n                    Zod Schema for a tissue library object\n\n                \n            \n\n        \n    \n\n    src/lib/ftu-data/ftu-data.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CELL_SUMMARY_DATA\n                        \n                    \n                \n            \n                \n                    \n                        Type :     CellSummary[]\n\n                    \n                \n                \n                    \n                        Default value : Object.values(MOCK_SUMMARIES).map((summary) => ({\n  label: summary.label,\n  cells: summary.entries.map((entry) => ({\n    id: entry.cell.id as Iri,\n    label: entry.cell.label,\n  })),\n  biomarkers: summary.entries.map((entry) => ({\n    id: entry.biomarker.id as Iri,\n    label: entry.biomarker.label,\n  })),\n  summaries: summary.entries.map((entry) => ({\n    cell: entry.cell.id as Iri,\n    biomarker: entry.biomarker.id as Iri,\n    count: entry.count,\n    percentage: entry.percentage,\n    meanExpression: entry.meanExpression,\n  })),\n}))\n                    \n                \n\n            \n                \n                    Dummy data extract om Mock Data of tissue mock\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        sourceReferences\n                        \n                    \n                \n            \n                \n                    \n                        Type :     []\n\n                    \n                \n                \n                    \n                        Default value : [\n  {\n    title: 'Kidney Precision Medicine Project',\n    label: 'Ancillary Study Data, Clinical Data, HRT Codebook',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title:\n      '[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]',\n    label:\n      '',\n    link: 'google.com',\n  },\n  {\n    title: 'Kidney Precision Medicine Project',\n    label: 'Ancillary Study Data, Clinical Data, HRT Codebook',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title: '[Dataset Owner Title]',\n    label: '',\n    link: 'google.com',\n  },\n  {\n    title:\n      '[Dataset Owner Title but extremely long and wraps around to the next line as you can see here in this example]',\n    label:\n      '',\n    link: 'google.com',\n  },\n]\n                    \n                \n\n            \n                \n                    Dummy data for Source References\n\n                \n            \n\n        \n    \n\n    src/lib/shared/common.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IRI\n                        \n                    \n                \n            \n                \n                    \n                        Default value : URL.brand('IRI')\n                    \n                \n\n            \n                \n                    Same as an URL\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        URL\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.string().url().brand('URL')\n                    \n                \n\n            \n                \n                    Any url\n\n                \n            \n\n        \n    \n\n    src/lib/tissue-ftu/tissue-ftu.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MOCK_REFERENCE_ORGANS\n                        \n                    \n                \n            \n                \n                    \n                        Default value : Object.values(MOCK_TISSUE_DATA.nodes).filter(isReferenceOrgan)\n                    \n                \n\n            \n                \n                    Reference organs\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        MOCK_SUMMARIES\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  summary1: {\n    label: 'Summary 1',\n    entries: [\n      createCell('cell1', 'Cell 1', 'biomarker1', 'Biomarker 1', 10, 1.0, 1.0, [\n        [\n          { label: 'metadata 1', value: 'value of data' },\n          { label: 'metadata 2', value: 'value of data' },\n        ],\n        [{ label: 'metadata 3', value: 'value of data' }],\n      ]),\n      createCell('cell2', 'Cell 2', 'biomarker1', 'Biomarker 1', 5, 0.2, 0.3),\n      createCell('cell2', 'Cell 2', 'biomarker2', 'Biomarker 2', 5, 0.2, 0.3),\n      createCell('cell1', 'Cell 1', 'biomarker3', 'Biomarker 3', 15, 0.2, 0.3),\n      createCell('cell3', 'Cell 3', 'biomarker1', 'Biomarker 1', 11, 0.3, 0.5),\n      createCell('cell3', 'Cell 3', 'biomarker3', 'Biomarker 3', 11, 0.1, 0.3),\n      createCell('cell4', 'Cell 4', 'biomarker1', 'Biomarker 1', 2000, 0.1, 1.0),\n      createCell('cell5', 'Cell 5', 'biomarker1', 'Biomarker 1', 332, 0.4, 0.3),\n      createCell('cell6', 'Cell 6', 'biomarker3', 'Biomarker 3', 101, 0.2, 0.1),\n      createCell('cell7', 'Cell 7', 'biomarker1', 'Biomarker 1', 2, 0.5, 0.3),\n      createCell('cell7', 'Cell 7', 'biomarker2', 'Biomarker 2', 230, 0.4, 0.3),\n      createCell('cell7', 'Cell 7', 'biomarker3', 'Biomarker 3', 601, 0.7, 0.3),\n      createCell('cell8', 'Cell 8', 'biomarker1', 'Biomarker 1', 124, 0.5, 0.5),\n      createCell('cell8', 'Cell 8', 'biomarker2', 'Biomarker 2', 244, 0.3, 0.3),\n      createCell('cell9', 'Cell 9', 'biomarker1', 'Biomarker 1', 21, 0.4, 0.3),\n      createCell('cell10', 'Cell 10', 'biomarker2', 'Biomarker 2', 675, 0.5, 0.3),\n      createCell('cell11', 'Cell 11', 'biomarker3', 'Biomarker 3', 57, 0.3, 0.3),\n      createCell('cell12', 'Cell 12', 'biomarker2', 'Biomarker 2', 45, 0.1, 0.7),\n      createCell('cell13', 'Cell 13', 'biomarker4', 'Biomarker 4', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker5', 'Biomarker 5', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker6', 'Biomarker 6', 45, 0.1, 0.4),\n      createCell('cell13', 'Cell 13', 'biomarker7', 'Biomarker 7', 45, 0.1, 0.3),\n      createCell('cell13', 'Cell 13', 'biomarker8', 'Biomarker 8', 45, 0.1, 0.9),\n    ],\n  },\n  summary2: {\n    label: 'Summary 2',\n    entries: [createCell('cell1', 'Cell 1', 'biomarker2', 'Biomarker 2', 20, 1, 0.9)],\n  },\n  summary3: {\n    label: 'Summary 3',\n    entries: [],\n  },\n}\n                    \n                \n\n            \n                \n                    Mock summary data\n\n                \n            \n\n        \n    \n\n    src/lib/tissue-ftu/tissue-ftu.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        REFERENCE_ORGAN\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  representation_of: z.string(),\n  object: z.object({\n    file: z.string(),\n  }),\n})\n                    \n                \n\n            \n                \n                    Reference organ type\n\n                \n            \n\n        \n    \n\n    src/lib/tissue-library/tissue-library.model.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        TISSUE\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  id: IRI,\n  label: z.string(),\n  parent: IRI,\n  children: IRI.array().default([]),\n})\n                    \n                \n\n            \n                \n                    zod Schema Object for a Tissue\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TISSUE_LIBRARY\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  root: IRI,\n  nodes: z.record(IRI, TISSUE),\n})\n                    \n                \n\n            \n                \n                    zod Schema Object for a Tissue Library\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
