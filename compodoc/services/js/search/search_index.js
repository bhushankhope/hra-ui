var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ContactMessage.html",[0,1.141,1,1.141]],["body/interfaces/ContactMessage.html",[0,1.422,1,1.576,2,1.626,3,0.648,4,0.648,5,0.648,6,1.241,7,0.648,8,1.849,9,1.19,10,3.042,11,3.042,12,2.421,13,0.32,14,1.472,15,1.923,16,0.738,17,0.08,18,2.747,19,2.186,20,2.747,21,2.747,22,0.965,23,0.352,24,0.522,25,1.153,26,0.648,27,0.965,28,1.759,29,0.965,30,0.799,31,1.19,32,0.988,33,1.241,34,0.988,35,1.241,36,0.648,37,0.988,38,0.044,39,0.044]],["title/injectables/ContactService.html",[23,0.337,31,1.141]],["body/injectables/ContactService.html",[0,1.249,1,1.81,3,0.691,4,0.691,5,0.691,6,1.325,7,0.691,8,1.325,9,0.853,10,2.529,11,2.529,12,2.143,13,0.342,15,1.478,16,0.442,17,0.08,18,2.297,19,1.828,20,2.297,21,2.297,22,1.013,23,0.369,24,0.557,25,1.405,26,0.691,27,1.013,28,2.239,29,1.199,30,1.249,31,1.627,32,1.545,33,1.941,34,1.545,35,1.941,36,1.199,37,1.545,38,0.046,39,0.046,40,0.691,41,1.249,42,1.941,43,0.853,44,1.736,45,1.325,46,1.325,47,1.325]],["title/injectables/MockContactService.html",[23,0.337,48,1.774]],["body/injectables/MockContactService.html",[1,1.846,3,0.732,4,0.732,5,0.732,7,0.732,12,1.888,13,0.361,16,0.792,17,0.08,19,1.61,22,1.238,23,0.385,24,0.59,25,1.238,26,0.732,27,0.732,29,1.437,31,1.846,34,1.61,36,0.732,37,1.61,38,0.048,39,0.048,40,0.732,41,1.302,42,2.023,43,0.902,45,1.402,46,1.402,47,1.402,48,2.023,49,1.837,50,2.649,51,1.61,52,2.023,53,2.023,54,1.402,55,1.837,56,2.649,57,2.649,58,2.649,59,2.649,60,2.649,61,1.837,62,1.402,63,0.902,64,1.837,65,1.837,66,1.837,67,1.837,68,1.402]],["title/injectables/MockTissueLibraryService.html",[23,0.337,69,1.774]],["body/injectables/MockTissueLibraryService.html",[3,0.6,4,0.6,5,0.6,7,0.6,13,0.296,16,0.704,17,0.081,22,1.102,23,0.332,24,0.483,25,1.102,26,0.6,27,0.6,29,0.6,36,0.6,38,0.042,39,0.042,40,0.6,41,1.124,43,0.74,51,1.68,52,2.357,53,1.746,54,1.15,62,1.15,63,1.124,68,1.15,69,1.746,70,0.74,71,0.74,72,1.15,73,2.124,74,2.357,75,1.506,76,2.287,77,0.915,78,0.915,79,1.124,80,1.506,81,0.74,82,1.15,83,1.15,84,1.15,85,1.15,86,0.915,87,2.111,88,2.111,89,2.124,90,1.68,91,1.68,92,2.111,93,1.39,94,1.68,95,2.669,96,1.746,97,1.746,98,1.68,99,2.111,100,0.915,101,1.15,102,1.15,103,2.357,104,2.287,105,1.506]],["title/injectables/TissueLibraryService.html",[23,0.337,73,1.412]],["body/injectables/TissueLibraryService.html",[3,0.621,4,0.621,5,0.621,7,0.621,9,1.153,13,0.306,15,0.765,16,0.858,17,0.081,22,1.124,23,0.341,24,0.5,25,1.342,26,0.621,27,1.251,28,2.152,29,1.124,30,1.387,32,1.426,36,1.124,38,0.043,39,0.043,40,0.621,41,1.153,43,0.765,63,1.153,70,1.153,71,1.153,73,1.909,74,2.398,77,0.947,78,1.909,79,0.765,81,0.765,82,1.791,86,1.426,89,1.715,90,1.426,91,1.426,94,1.426,98,1.426,106,0.947,107,1.558,108,1.558,109,1.558,110,1.189,111,1.426,112,1.189,113,1.189,114,1.189,115,1.189,116,1.189,117,1.189,118,1.189,119,2.703,120,1.189,121,1.189,122,1.189,123,1.791,124,1.189,125,1.791,126,1.189,127,1.189,128,1.189]],["title/dependencies.html",[129,1.5,130,2.123]],["body/dependencies.html",[17,0.078,24,1.011,38,0.069,39,0.069,130,2.892,131,3.149,132,3.149,133,3.149,134,3.149,135,3.788]],["title/index.html",[13,0.387,136,1.965,137,1.965]],["body/index.html",[17,0.068,38,0.068,39,0.068,138,3.753,139,3.102,140,3.102,141,3.753,142,3.102,143,3.753,144,3.753,145,3.102,146,3.102,147,3.102]],["title/modules.html",[148,2.382]],["body/modules.html",[17,0.072,38,0.072,39,0.072,148,2.626]],["title/overview.html",[149,2.382]],["body/overview.html",[0,1.635,17,0.071,38,0.071,39,0.071,40,1.326,93,2.022,100,2.022,149,2.541]],["title/properties.html",[14,1.69,129,1.5]],["body/properties.html",[14,2.039,17,0.076,38,0.071,39,0.071,150,3.355,151,3.355]],["title/miscellaneous/typealiases.html",[152,0.966,153,2.781]],["body/miscellaneous/typealiases.html",[13,0.592,16,0.939,17,0.067,38,0.067,39,0.067,70,1.479,71,1.479,78,2.42,79,1.479,81,1.479,106,2.239,110,2.298,111,1.829,112,2.298,152,1.479,154,3.01,155,2.298]],["title/miscellaneous/variables.html",[152,0.966,156,2.123]],["body/miscellaneous/variables.html",[9,1.136,13,0.301,15,0.751,16,0.793,17,0.079,30,0.751,38,0.042,39,0.042,51,0.929,63,1.371,70,1.136,71,1.136,72,1.766,77,1.406,79,0.751,81,0.751,83,1.766,84,1.167,85,1.167,86,1.696,87,2.13,88,2.13,89,2.339,90,2.031,91,2.031,92,2.13,93,1.406,94,2.031,95,2.684,96,1.766,97,1.766,98,2.031,99,2.13,100,0.929,101,1.167,102,1.167,103,2.375,106,1.696,111,0.929,113,1.167,114,1.167,115,1.167,116,1.167,117,1.167,118,1.167,119,2.788,120,1.167,121,1.167,122,1.167,123,1.766,124,1.167,125,1.766,126,1.167,127,1.167,128,1.167,152,0.751,155,2.13,156,1.167,157,2.79,158,2.79]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0.0.1",{"_index":151,"title":{},"body":{"properties.html":{}}}],["1",{"_index":93,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["15.1.0",{"_index":135,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":96,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["2.3.0",{"_index":132,"title":{},"body":{"dependencies.html":{}}}],["3",{"_index":97,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["4",{"_index":100,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["5",{"_index":101,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["6",{"_index":102,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["abstract",{"_index":28,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/TissueLibraryService.html":{}}}],["accepted",{"_index":120,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["accepts",{"_index":19,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["aliases",{"_index":154,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["angular/common",{"_index":134,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{}}}],["argument",{"_index":35,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["children",{"_index":98,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["class",{"_index":29,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["console",{"_index":59,"title":{},"body":{"injectables/MockContactService.html":{}}}],["console.log('message",{"_index":64,"title":{},"body":{"injectables/MockContactService.html":{}}}],["const",{"_index":82,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["contact",{"_index":8,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["contact.service",{"_index":61,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contactmessage",{"_index":1,"title":{"interfaces/ContactMessage.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["contactservice",{"_index":31,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["contactservice:11",{"_index":55,"title":{},"body":{"injectables/MockContactService.html":{}}}],["content",{"_index":66,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contents",{"_index":58,"title":{},"body":{"injectables/MockContactService.html":{}}}],["currently",{"_index":56,"title":{},"body":{"injectables/MockContactService.html":{}}}],["data",{"_index":81,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["default",{"_index":157,"title":{},"body":{"miscellaneous/variables.html":{}}}],["defined",{"_index":43,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["defines",{"_index":9,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["dependencies",{"_index":130,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["email",{"_index":10,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["empty",{"_index":60,"title":{},"body":{"injectables/MockContactService.html":{}}}],["ensures",{"_index":114,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["entered",{"_index":20,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["execute",{"_index":147,"title":{},"body":{"index.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["extends",{"_index":53,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["generated",{"_index":140,"title":{},"body":{"index.html":{}}}],["getting",{"_index":136,"title":{"index.html":{}},"body":{}}],["gettissues",{"_index":74,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["http://example.com/node1",{"_index":87,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["http://example.com/node2",{"_index":99,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["http://example.com/node3",{"_index":103,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["http://example.com/root",{"_index":85,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["id",{"_index":89,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["implementation",{"_index":52,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["infered",{"_index":110,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["inherited",{"_index":54,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["injectable",{"_index":23,"title":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"overview.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ContactMessage.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ContactMessage.html":{}}}],["iri",{"_index":119,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["iri.array",{"_index":128,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["iri.or(z.literal",{"_index":126,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["json.stringify(message",{"_index":67,"title":{},"body":{"injectables/MockContactService.html":{}}}],["label",{"_index":91,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["library",{"_index":139,"title":{},"body":{"index.html":{}}}],["library.mock.ts",{"_index":72,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["library.service",{"_index":80,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["library.service.ts",{"_index":106,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["library.service.ts:39",{"_index":107,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["library/tissue",{"_index":71,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["link",{"_index":104,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["logs",{"_index":57,"title":{},"body":{"injectables/MockContactService.html":{}}}],["marked",{"_index":118,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["matching",{"_index":39,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["method",{"_index":32,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/TissueLibraryService.html":{}}}],["methods",{"_index":41,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["miscellaneous",{"_index":152,"title":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mock",{"_index":51,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["mock_tissue_data",{"_index":83,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["mockcontactservice",{"_index":48,"title":{"injectables/MockContactService.html":{}},"body":{"injectables/MockContactService.html":{}}}],["mocktissuelibraryservice",{"_index":69,"title":{"injectables/MockTissueLibraryService.html":{}},"body":{"injectables/MockTissueLibraryService.html":{}}}],["modules",{"_index":148,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":46,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["node",{"_index":92,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["nodes",{"_index":86,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["nx",{"_index":141,"title":{},"body":{"index.html":{}}}],["object",{"_index":34,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["observable",{"_index":25,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["of(mock_tissue_data",{"_index":105,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["optional",{"_index":47,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["overview",{"_index":149,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":129,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":45,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["parent",{"_index":90,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["peer",{"_index":133,"title":{},"body":{"dependencies.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ContactMessage.html":{},"properties.html":{}}}],["providedin",{"_index":62,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["received",{"_index":65,"title":{},"body":{"injectables/MockContactService.html":{}}}],["representing",{"_index":30,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["represents",{"_index":50,"title":{},"body":{"injectables/MockContactService.html":{}}}],["results",{"_index":38,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":68,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{}}}],["returns",{"_index":36,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["root",{"_index":63,"title":{},"body":{"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["roottype",{"_index":88,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["run",{"_index":145,"title":{},"body":{"index.html":{}}}],["running",{"_index":142,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":26,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["schema",{"_index":111,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["sendmessage",{"_index":42,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["sendmessage(message",{"_index":37,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["services",{"_index":138,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["specifically",{"_index":117,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["src/.../tissue",{"_index":155,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/lib/contact/contact.mock.ts",{"_index":49,"title":{},"body":{"injectables/MockContactService.html":{}}}],["src/lib/contact/contact.service.ts",{"_index":6,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["src/lib/contact/contact.service.ts:18",{"_index":44,"title":{},"body":{"injectables/ContactService.html":{}}}],["src/lib/tissue",{"_index":70,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["started",{"_index":137,"title":{"index.html":{}},"body":{}}],["string",{"_index":15,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["subject",{"_index":11,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["synonym",{"_index":95,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["synonymlabels",{"_index":94,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["takes",{"_index":33,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["test",{"_index":146,"title":{},"body":{"index.html":{}}}],["tests",{"_index":144,"title":{},"body":{"index.html":{}}}],["tissue",{"_index":79,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["tissue_data_schema",{"_index":77,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["tissue_data_schema.parse",{"_index":84,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["tissuedata",{"_index":78,"title":{},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{}}}],["tissuelibraryservice",{"_index":73,"title":{"injectables/TissueLibraryService.html":{}},"body":{"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{}}}],["tissuelibraryservice.gettissues",{"_index":76,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["tissuelibraryservice:45",{"_index":75,"title":{},"body":{"injectables/MockTissueLibraryService.html":{}}}],["tslib",{"_index":131,"title":{},"body":{"dependencies.html":{}}}],["turn",{"_index":122,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"injectables/MockTissueLibraryService.html":{},"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":153,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["unit",{"_index":143,"title":{},"body":{"index.html":{}}}],["urls",{"_index":116,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["user",{"_index":21,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["valid",{"_index":115,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["validator",{"_index":113,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["value",{"_index":158,"title":{},"body":{"miscellaneous/variables.html":{}}}],["variable",{"_index":18,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["variables",{"_index":156,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":150,"title":{},"body":{"properties.html":{}}}],["z",{"_index":108,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}],["z.infer",{"_index":112,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/typealiases.html":{}}}],["z.object",{"_index":123,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["z.record",{"_index":124,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["z.string",{"_index":125,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["z.string().array",{"_index":127,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["z.string().url().brand('iri",{"_index":121,"title":{},"body":{"injectables/TissueLibraryService.html":{},"miscellaneous/variables.html":{}}}],["zod",{"_index":109,"title":{},"body":{"injectables/TissueLibraryService.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ContactMessage.html":{"url":"interfaces/ContactMessage.html","title":"interface - ContactMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ContactMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A interface contact which defines email, subject, and the message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable email which accepts the email entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable message which accepts the message entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable subject which accepts the subject entered by user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class representing a ContactService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: ContactMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/contact/contact.service.ts:18\n                \n            \n\n\n            \n                \n                    This method takes a ContactMessage object as an argument and returns an Observable\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                ContactMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockContactService.html":{"url":"injectables/MockContactService.html","title":"injectable - MockContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                This class represents mock implementation of the ContactService class.\n\n            \n\n            \n                Extends\n            \n            \n                        ContactService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(message: ContactMessage)\n                \n            \n\n\n            \n                \n                    Inherited from         ContactService\n\n                \n            \n            \n                \n                        Defined in         ContactService:11\n\n                \n            \n\n\n            \n                \n                    It accepts an object of type ContactMessage and currently logs the message contents on the console.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                ContactMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ContactMessage, ContactService } from './contact.service';\n\n/** This class represents mock implementation of the ContactService class. */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockContactService extends ContactService {\n  /** It accepts an object of type ContactMessage and currently logs the message contents on the console. */\n  sendMessage(message: ContactMessage): Observable {\n    console.log('Message received. Content: ' + JSON.stringify(message));\n    return EMPTY;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockTissueLibraryService.html":{"url":"injectables/MockTissueLibraryService.html","title":"injectable - MockTissueLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockTissueLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                Mock implementation of TissueLibraryService\n\n            \n\n            \n                Extends\n            \n            \n                        TissueLibraryService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getTissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getTissues\n                        \n                    \n                \n            \n            \n                \ngetTissues()\n                \n            \n\n\n            \n                \n                    Inherited from         TissueLibraryService\n\n                \n            \n            \n                \n                        Defined in         TissueLibraryService:45\n\n                \n            \n\n\n            \n                \n                    Implementation of TissueLibraryService.getTissues\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { TISSUE_DATA_SCHEMA, TissueData, TissueLibraryService } from './tissue-library.service';\n\n/** Mock tissue data */\nconst MOCK_TISSUE_DATA = TISSUE_DATA_SCHEMA.parse({\n  root: 'http://example.com/root',\n  nodes: {\n    'http://example.com/node1': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node1',\n      id: 'http://example.com/node1',\n      parent: '',\n      label: 'Node 1',\n      synonymLabels: ['Synonym 1', 'Synonym 2', 'Synonym 3'],\n      children: [],\n    },\n    'http://example.com/node2': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node2',\n      id: 'http://example.com/node2',\n      parent: '',\n      label: 'Node 2',\n      synonymLabels: ['Synonym 4', 'Synonym 5', 'Synonym 6'],\n      children: ['http://example.com/node3'],\n    },\n    'http://example.com/node3': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node3',\n      id: 'http://example.com/node3',\n      parent: '',\n      label: 'Node 3',\n      synonymLabels: [],\n      children: [],\n    },\n  },\n});\n\n/** Mock implementation of {@link TissueLibraryService} */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockTissueLibraryService extends TissueLibraryService {\n  /** Implementation of {@link TissueLibraryService.getTissues} */\n  getTissues(): Observable {\n    return of(MOCK_TISSUE_DATA);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TissueLibraryService.html":{"url":"injectables/TissueLibraryService.html","title":"injectable - TissueLibraryService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TissueLibraryService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/tissue-library/tissue-library.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class representing a TissueLibraryService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                getTissues\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        getTissues\n                        \n                    \n                \n            \n            \n                \n                    \n                    getTissues()\n                \n            \n\n\n            \n                \n                    Defined in src/lib/tissue-library/tissue-library.service.ts:39\n                \n            \n\n\n            \n                \n                    This method returns an Observable of the type of TissueData\n\n\n                    \n                        Returns :         Observable\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { z } from 'zod';\n\n/**\n * A type of TissueData which is infered from the Tissue Data Schema\n */\nexport type TissueData = z.infer;\n\n/**\n * A validator that ensures string representing valid URLS, specifically marked as IRI are accepted\n */\nexport const IRI = z.string().url().brand('IRI');\n\n/**\n * A Schema which defines the root and its nodes\n * which in turn defines id, parent, label, synonymLabels and children\n */\nexport const TISSUE_DATA_SCHEMA = z.object({\n  root: IRI,\n  nodes: z.record(\n    IRI,\n    z.object({\n      '@type': z.string(),\n      '@id': IRI,\n      id: IRI,\n      parent: IRI.or(z.literal('')),\n      label: z.string(),\n      synonymLabels: z.string().array(),\n      children: IRI.array(),\n    })\n  ),\n});\n\n/** An abstract class representing a TissueLibraryService*/\n@Injectable()\nexport abstract class TissueLibraryService {\n  /** This method returns an Observable of the type of TissueData */\n  abstract getTissues(): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nservices\nThis library was generated with Nx.\nRunning unit tests\nRun nx test services to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    4 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TissueData   (src/.../tissue-library.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/tissue-library/tissue-library.service.ts\n    \n    \n        \n            \n                \n                    \n                    TissueData\n                \n            \n            \n                \n                    A type of TissueData which is infered from the Tissue Data Schema\n\n                \n            \n            \n                \n                        z.infer<>\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            IRI   (src/.../tissue-library.service.ts)\n                        \n                        \n                            MOCK_TISSUE_DATA   (src/.../tissue-library.mock.ts)\n                        \n                        \n                            TISSUE_DATA_SCHEMA   (src/.../tissue-library.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/tissue-library/tissue-library.service.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IRI\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.string().url().brand('IRI')\n                    \n                \n\n            \n                \n                    A validator that ensures string representing valid URLS, specifically marked as IRI are accepted\n\n                \n            \n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        TISSUE_DATA_SCHEMA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : z.object({\n  root: IRI,\n  nodes: z.record(\n    IRI,\n    z.object({\n      '@type': z.string(),\n      '@id': IRI,\n      id: IRI,\n      parent: IRI.or(z.literal('')),\n      label: z.string(),\n      synonymLabels: z.string().array(),\n      children: IRI.array(),\n    })\n  ),\n})\n                    \n                \n\n            \n                \n                    A Schema which defines the root and its nodes\nwhich in turn defines id, parent, label, synonymLabels and children\n\n                \n            \n\n        \n    \n\n    src/lib/tissue-library/tissue-library.mock.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MOCK_TISSUE_DATA\n                        \n                    \n                \n            \n                \n                    \n                        Default value : TISSUE_DATA_SCHEMA.parse({\n  root: 'http://example.com/root',\n  nodes: {\n    'http://example.com/node1': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node1',\n      id: 'http://example.com/node1',\n      parent: '',\n      label: 'Node 1',\n      synonymLabels: ['Synonym 1', 'Synonym 2', 'Synonym 3'],\n      children: [],\n    },\n    'http://example.com/node2': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node2',\n      id: 'http://example.com/node2',\n      parent: '',\n      label: 'Node 2',\n      synonymLabels: ['Synonym 4', 'Synonym 5', 'Synonym 6'],\n      children: ['http://example.com/node3'],\n    },\n    'http://example.com/node3': {\n      '@type': 'RootType',\n      '@id': 'http://example.com/node3',\n      id: 'http://example.com/node3',\n      parent: '',\n      label: 'Node 3',\n      synonymLabels: [],\n      children: [],\n    },\n  },\n})\n                    \n                \n\n            \n                \n                    Mock tissue data\n\n                \n            \n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
