var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/interfaces/ContactMessage.html",[0,0.741,1,0.741]],["body/interfaces/ContactMessage.html",[0,0.819,1,0.926,2,1.099,3,0.579,4,0.579,5,0.579,6,0.786,7,0.579,8,1.229,9,1.229,10,2.239,11,2.239,12,1.651,13,0.425,14,0.906,15,2.189,16,1.116,17,0.114,18,1.969,19,1.452,20,1.969,21,1.969,22,0.906,23,0.473,24,0.425,25,1.116,26,0.579,27,0.906,28,1.514,29,0.906,30,0.786,31,0.665,32,0.786,33,0.786,34,0.579,35,0.786,36,0.579,37,0.579,38,0.055,39,0.055]],["title/injectables/ContactService.html",[23,0.526,31,0.741]],["body/injectables/ContactService.html",[0,0.705,1,1.099,3,0.625,4,0.625,5,0.625,6,0.848,7,0.625,8,0.848,9,0.848,10,1.782,11,1.782,12,1.418,13,0.459,15,1.588,16,0.625,17,0.115,18,1.588,19,1.171,20,1.588,21,1.588,22,0.961,23,0.501,24,0.459,25,1.418,26,0.625,27,0.961,28,2.031,29,1.171,30,1.303,31,0.964,32,1.303,33,1.303,34,0.961,35,1.303,36,1.171,37,0.961,38,0.058,39,0.058,40,0.625,41,1.303,42,1.303,43,0.848,44,1.186,45,0.848,46,0.848,47,0.848]],["title/injectables/MockContactService.html",[23,0.526,48,1.369]],["body/injectables/MockContactService.html",[1,1.128,3,0.668,4,0.668,5,0.668,7,0.668,12,1.219,13,0.49,16,1.219,17,0.114,19,1.011,22,1.219,23,0.527,24,0.49,25,1.219,26,0.668,27,0.668,29,1.461,31,1.128,34,1.011,36,0.668,37,1.011,38,0.061,39,0.061,40,0.668,41,1.371,42,1.371,43,0.905,45,0.905,46,0.905,47,0.905,48,1.371,49,1.267,50,1.917,51,1.917,52,1.917,53,1.917,54,1.267,55,1.267,56,1.917,57,1.917,58,1.917,59,1.917,60,1.917,61,1.267,62,1.267,63,1.267,64,1.267,65,1.267,66,1.267,67,1.267,68,1.267]],["title/dependencies.html",[69,1.156,70,1.64]],["body/dependencies.html",[17,0.112,24,0.957,38,0.097,39,0.097,70,2.173,71,2.473,72,2.473,73,2.473,74,2.473,75,3.039]],["title/index.html",[13,0.626,76,1.618,77,1.618]],["body/index.html",[17,0.096,38,0.096,39,0.096,78,3.002,79,2.423,80,2.423,81,3.002,82,2.423,83,3.002,84,3.002,85,2.423,86,2.423,87,2.423]],["title/modules.html",[88,1.843]],["body/modules.html",[17,0.104,38,0.104,39,0.104,88,1.993]],["title/overview.html",[89,1.843]],["body/overview.html",[0,1.031,17,0.101,38,0.101,39,0.101,40,1.404,89,1.905,90,2.664,91,2.664]],["title/properties.html",[14,1.209,69,1.156]],["body/properties.html",[14,1.42,17,0.109,38,0.102,39,0.102,92,2.694,93,2.694]]],"invertedIndex":[["",{"_index":17,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0.0.1",{"_index":93,"title":{},"body":{"properties.html":{}}}],["1",{"_index":91,"title":{},"body":{"overview.html":{}}}],["15.1.0",{"_index":75,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":90,"title":{},"body":{"overview.html":{}}}],["2.3.0",{"_index":72,"title":{},"body":{"dependencies.html":{}}}],["abstract",{"_index":28,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["accepts",{"_index":19,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["angular/common",{"_index":74,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":24,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"dependencies.html":{}}}],["argument",{"_index":35,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["class",{"_index":29,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["console",{"_index":59,"title":{},"body":{"injectables/MockContactService.html":{}}}],["console.log('message",{"_index":64,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contact",{"_index":8,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["contact.service",{"_index":61,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contactmessage",{"_index":1,"title":{"interfaces/ContactMessage.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["contactservice",{"_index":31,"title":{"injectables/ContactService.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["contactservice:11",{"_index":55,"title":{},"body":{"injectables/MockContactService.html":{}}}],["content",{"_index":66,"title":{},"body":{"injectables/MockContactService.html":{}}}],["contents",{"_index":58,"title":{},"body":{"injectables/MockContactService.html":{}}}],["currently",{"_index":56,"title":{},"body":{"injectables/MockContactService.html":{}}}],["defined",{"_index":43,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["defines",{"_index":9,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["dependencies",{"_index":70,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["description",{"_index":7,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["email",{"_index":10,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["empty",{"_index":60,"title":{},"body":{"injectables/MockContactService.html":{}}}],["entered",{"_index":20,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["execute",{"_index":87,"title":{},"body":{"index.html":{}}}],["export",{"_index":27,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["extends",{"_index":53,"title":{},"body":{"injectables/MockContactService.html":{}}}],["file",{"_index":5,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["generated",{"_index":80,"title":{},"body":{"index.html":{}}}],["getting",{"_index":76,"title":{"index.html":{}},"body":{}}],["implementation",{"_index":52,"title":{},"body":{"injectables/MockContactService.html":{}}}],["import",{"_index":22,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["index",{"_index":13,"title":{"index.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["info",{"_index":3,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["inherited",{"_index":54,"title":{},"body":{"injectables/MockContactService.html":{}}}],["injectable",{"_index":23,"title":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["injectables",{"_index":40,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"overview.html":{}}}],["interface",{"_index":0,"title":{"interfaces/ContactMessage.html":{}},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"overview.html":{}}}],["interfaces",{"_index":2,"title":{},"body":{"interfaces/ContactMessage.html":{}}}],["json.stringify(message",{"_index":67,"title":{},"body":{"injectables/MockContactService.html":{}}}],["library",{"_index":79,"title":{},"body":{"index.html":{}}}],["logs",{"_index":57,"title":{},"body":{"injectables/MockContactService.html":{}}}],["matching",{"_index":39,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["message",{"_index":12,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["method",{"_index":32,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["methods",{"_index":41,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["mock",{"_index":51,"title":{},"body":{"injectables/MockContactService.html":{}}}],["mockcontactservice",{"_index":48,"title":{"injectables/MockContactService.html":{}},"body":{"injectables/MockContactService.html":{}}}],["modules",{"_index":88,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["name",{"_index":46,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["nx",{"_index":81,"title":{},"body":{"index.html":{}}}],["object",{"_index":34,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["observable",{"_index":25,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["optional",{"_index":47,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["overview",{"_index":89,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":69,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":45,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["peer",{"_index":73,"title":{},"body":{"dependencies.html":{}}}],["properties",{"_index":14,"title":{"properties.html":{}},"body":{"interfaces/ContactMessage.html":{},"properties.html":{}}}],["providedin",{"_index":62,"title":{},"body":{"injectables/MockContactService.html":{}}}],["received",{"_index":65,"title":{},"body":{"injectables/MockContactService.html":{}}}],["representing",{"_index":30,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["represents",{"_index":50,"title":{},"body":{"injectables/MockContactService.html":{}}}],["results",{"_index":38,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{},"dependencies.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":68,"title":{},"body":{"injectables/MockContactService.html":{}}}],["returns",{"_index":36,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["root",{"_index":63,"title":{},"body":{"injectables/MockContactService.html":{}}}],["run",{"_index":85,"title":{},"body":{"index.html":{}}}],["running",{"_index":82,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":26,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["sendmessage",{"_index":42,"title":{},"body":{"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["sendmessage(message",{"_index":37,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["services",{"_index":78,"title":{},"body":{"index.html":{}}}],["source",{"_index":4,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["src/lib/contact/contact.mock.ts",{"_index":49,"title":{},"body":{"injectables/MockContactService.html":{}}}],["src/lib/contact/contact.service.ts",{"_index":6,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["src/lib/contact/contact.service.ts:18",{"_index":44,"title":{},"body":{"injectables/ContactService.html":{}}}],["started",{"_index":77,"title":{"index.html":{}},"body":{}}],["string",{"_index":15,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["subject",{"_index":11,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["takes",{"_index":33,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["test",{"_index":86,"title":{},"body":{"index.html":{}}}],["tests",{"_index":84,"title":{},"body":{"index.html":{}}}],["tslib",{"_index":71,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":16,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{},"injectables/MockContactService.html":{}}}],["unit",{"_index":83,"title":{},"body":{"index.html":{}}}],["user",{"_index":21,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["variable",{"_index":18,"title":{},"body":{"interfaces/ContactMessage.html":{},"injectables/ContactService.html":{}}}],["version",{"_index":92,"title":{},"body":{"properties.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"interfaces/ContactMessage.html":{"url":"interfaces/ContactMessage.html","title":"interface - ContactMessage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ContactMessage\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                A interface contact which defines email, subject, and the message.\n\n            \n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            email\n                                        \n                                \n                                \n                                        \n                                            message\n                                        \n                                \n                                \n                                        \n                                            subject\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable email which accepts the email entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        message\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        message:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable message which accepts the message entered by user\n\n                                \n                            \n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        subject\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        subject:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                            \n                                \n                                    A variable subject which accepts the subject entered by user\n\n                                \n                            \n                        \n                    \n            \n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ContactService.html":{"url":"injectables/ContactService.html","title":"injectable - ContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.service.ts\n        \n\n\n            \n                Description\n            \n            \n                An abstract class representing a ContactService\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Abstract\n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Abstract\n                        sendMessage\n                        \n                    \n                \n            \n            \n                \n                    \n                    sendMessage(message: ContactMessage)\n                \n            \n\n\n            \n                \n                    Defined in src/lib/contact/contact.service.ts:18\n                \n            \n\n\n            \n                \n                    This method takes a ContactMessage object as an argument and returns an Observable\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                ContactMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\n\n/** A interface contact which defines email, subject, and the message. */\nexport interface ContactMessage {\n  /** A variable email which accepts the email entered by user */\n  email: string;\n  /** A variable subject which accepts the subject entered by user */\n  subject: string;\n  /** A variable message which accepts the message entered by user */\n  message: string;\n}\n\n/** An abstract class representing a ContactService */\n@Injectable()\nexport abstract class ContactService {\n  /** This method takes a ContactMessage object as an argument and returns an Observable  */\n  abstract sendMessage(message: ContactMessage): Observable;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MockContactService.html":{"url":"injectables/MockContactService.html","title":"injectable - MockContactService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  MockContactService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/contact/contact.mock.ts\n        \n\n\n            \n                Description\n            \n            \n                This class represents mock implementation of the ContactService class.\n\n            \n\n            \n                Extends\n            \n            \n                        ContactService\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                sendMessage\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        sendMessage\n                        \n                    \n                \n            \n            \n                \nsendMessage(message: ContactMessage)\n                \n            \n\n\n            \n                \n                    Inherited from         ContactService\n\n                \n            \n            \n                \n                        Defined in         ContactService:11\n\n                \n            \n\n\n            \n                \n                    It accepts an object of type ContactMessage and currently logs the message contents on the console.\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    message\n                                    \n                                                ContactMessage\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Observable\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@angular/core';\nimport { EMPTY, Observable } from 'rxjs';\nimport { ContactMessage, ContactService } from './contact.service';\n\n/** This class represents mock implementation of the ContactService class. */\n@Injectable({\n  providedIn: 'root',\n})\nexport class MockContactService extends ContactService {\n  /** It accepts an object of type ContactMessage and currently logs the message contents on the console. */\n  sendMessage(message: ContactMessage): Observable {\n    console.log('Message received. Content: ' + JSON.stringify(message));\n    return EMPTY;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.3.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^15.1.0\n        \n            @angular/core : ^15.1.0\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nservices\nThis library was generated with Nx.\nRunning unit tests\nRun nx test services to execute the unit tests.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
