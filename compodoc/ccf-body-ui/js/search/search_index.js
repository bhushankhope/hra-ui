var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/classes/BodyUI.html",[0,1.039,1,1.367]],["body/classes/BodyUI.html",[0,1.083,1,1.141,2,0.964,3,0.611,4,0.306,5,0.26,6,1.878,7,0.714,8,1.433,9,1.319,10,1.319,11,1.141,12,1.426,13,1.083,14,0.225,15,0.348,16,2.194,17,2.584,18,1.647,19,1.647,20,1.647,21,1.647,22,1.647,23,1.647,24,1.647,25,1.839,26,1.647,27,1.882,28,1.241,29,1.882,30,2.29,31,2.29,32,2.29,33,2.29,34,2.29,35,2.29,36,2.29,37,1.433,38,1.433,39,1.647,40,3.955,41,1.433,42,2.882,43,0.055,44,1.858,45,0.576,46,1.415,47,1.647,48,1.433,49,1.993,50,1.836,51,1.319,52,1.433,53,1.319,54,1.433,55,1.319,56,1.433,57,1.319,58,1.433,59,1.319,60,1.433,61,1.319,62,1.433,63,1.319,64,1.433,65,1.319,66,1.169,67,2.37,68,1.485,69,1.433,70,1.858,71,2.955,72,2.21,73,1.433,74,1.433,75,0.757,76,1.319,77,1.729,78,1.433,79,1.319,80,1.433,81,1.319,82,1.433,83,1.319,84,1.433,85,1.319,86,1.433,87,1.319,88,1.433,89,1.319,90,1.433,91,1.514,92,0.887,93,1.647,94,1.319,95,1.319,96,1.319,97,0.714,98,0.939,99,0.473,100,2.392,101,0.825,102,0.825,103,2.466,104,0.825,105,0.825,106,0.825,107,1.241,108,1.319,109,0.543,110,0.57,111,0.622,112,0.825,113,0.543,114,0.028,115,2.07,116,1.647,117,0.691,118,1.18,119,2.057,120,1.882,121,1.882,122,1.647,123,0.763,124,0.714,125,0.416,126,0.825,127,0.825,128,0.714,129,0.825,130,0.825,131,0.825,132,1.319,133,1.319,134,0.825,135,1.993,136,1.083,137,0.945,138,0.714,139,0.825,140,1.647,141,0.825,142,1.319,143,0.714,144,2.235,145,2.057,146,0.714,147,1.319,148,2.793,149,1.587,150,0.825,151,0.825,152,0.825,153,0.825,154,0.825,155,1.801,156,0.825,157,0.825,158,0.825,159,0.825,160,2.057,161,0.825,162,0.543,163,0.543,164,0.622,165,0.622,166,0.622,167,0.622,168,0.622,169,1.573,170,0.825,171,0.825,172,1.319,173,0.825,174,0.825,175,1.426,176,0.825,177,0.825,178,1.319,179,0.825,180,0.867,181,0.714,182,0.825,183,0.825,184,0.825,185,0.825,186,0.825,187,0.825,188,0.825,189,0.825,190,0.825,191,0.825,192,0.825,193,0.825,194,0.825,195,0.825,196,0.825,197,1.319,198,0.825,199,0.825,200,0.825,201,0.825,202,0.825,203,0.867,204,1.653,205,0.825,206,0.825,207,0.825,208,0.825,209,2.392,210,2.392,211,0.825,212,1.319,213,0.825,214,0.825,215,0.994,216,1.319,217,0.825,218,0.825,219,0.825,220,1.647,221,0.622,222,0.825,223,0.825,224,1.319,225,0.825,226,0.825,227,1.647,228,0.825,229,0.825,230,1.319,231,0.825,232,1.647,233,0.825,234,0.994,235,0.825,236,0.714,237,0.622,238,0.825,239,1.647,240,1.647,241,1.319,242,1.319,243,0.825,244,0.825,245,0.825,246,0.622,247,0.714,248,0.825,249,0.825,250,0.028,251,0.825,252,0.825,253,0.825,254,1.141,255,0.543,256,0.543,257,0.825,258,0.543,259,0.543,260,0.622,261,0.622,262,0.825,263,0.825,264,2.057,265,0.825,266,0.825,267,0.825,268,1.319,269,0.825,270,0.822,271,0.825,272,1.319,273,1.319,274,1.319,275,0.825,276,0.825,277,0.825,278,0.825,279,0.825,280,0.825,281,0.825,282,1.319,283,0.825,284,0.825,285,0.825,286,0.825,287,0.825,288,0.825,289,0.825,290,0.825,291,0.825,292,0.714,293,0.714,294,0.825,295,0.825,296,0.825,297,0.825,298,0.825,299,0.825,300,1.647,301,0.825,302,0.825,303,0.825,304,0.825,305,0.825,306,0.825,307,0.825,308,0.825,309,0.022]],["title/classes/BodyUILayer.html",[0,1.039,107,1.19]],["body/classes/BodyUILayer.html",[0,0.72,2,1.28,3,0.406,4,0.406,5,0.345,6,1.619,13,1.619,14,0.187,15,0.433,17,2.131,25,2.289,40,3.269,42,1.919,43,0.055,44,0.825,45,0.425,46,0.628,49,1.705,50,1.08,66,1.013,67,1.421,68,1.404,70,2.093,71,2.302,72,1.237,75,0.942,77,0.72,91,1.08,92,0.974,97,0.948,98,0.547,99,0.628,107,1.649,109,0.72,110,0.709,113,1.296,117,0.846,123,0.406,125,0.739,136,1.439,138,2.404,144,1.421,149,1.507,155,1.439,162,1.439,163,1.439,164,1.649,165,1.649,166,1.649,167,1.237,168,1.237,169,1.799,175,2.273,180,1.542,181,0.948,203,1.439,204,1.924,215,0.825,246,0.825,250,0.028,255,1.439,258,1.08,259,0.72,260,1.237,270,1.274,293,0.948,309,0.028,310,1.527,311,1.421,312,3.422,313,4.276,314,2.302,315,3.422,316,3.422,317,3.801,318,3.801,319,1.28,320,1.902,321,1.902,322,1.902,323,1.902,324,1.902,325,1.902,326,1.902,327,3.801,328,1.902,329,3.433,330,1.902,331,2.852,332,2.747,333,1.902,334,1.902,335,1.902,336,2.852,337,1.095,338,2.852,339,1.902,340,1.902,341,2.852,342,2.852,343,2.852,344,3.245,345,2.852,346,1.902,347,1.919,348,1.527,349,1.919,350,1.902,351,1.095,352,2.747,353,1.902,354,1.902,355,1.642,356,2.747,357,3.052,358,2.852,359,2.852,360,2.877,361,4.434,362,1.902,363,1.902,364,3.801,365,1.919,366,3.801,367,1.919,368,1.919,369,2.302,370,4.56,371,1.902,372,1.902,373,1.902,374,1.902,375,1.902,376,2.852,377,2.852,378,2.131,379,3.422,380,1.902,381,2.852,382,1.902,383,3.422,384,1.902,385,1.902,386,2.74,387,1.902,388,3.422,389,2.747,390,1.902,391,1.902,392,1.902,393,1.902,394,1.902,395,1.902,396,1.902,397,1.902,398,1.902,399,1.902,400,1.902,401,1.902,402,1.902,403,1.902,404,1.902,405,1.902,406,3.422,407,1.902,408,1.902,409,1.902,410,1.902,411,1.902,412,1.919,413,4.276,414,1.527,415,1.527,416,1.527,417,2.852,418,1.902,419,3.422,420,1.902,421,1.902,422,1.902,423,1.902,424,1.902,425,1.902,426,1.902,427,1.902,428,1.902,429,1.902,430,1.902,431,3.801,432,3.801,433,1.902,434,1.902,435,1.902,436,1.902,437,1.902,438,1.902,439,1.902,440,1.902,441,1.902,442,1.902]],["title/interfaces/BodyUIProps.html",[114,0.027,124,1.367]],["body/interfaces/BodyUIProps.html",[0,0.947,1,0.799,3,0.657,4,0.342,5,0.291,6,0.607,7,0.799,9,0.923,10,0.923,11,0.799,12,1.247,13,0.947,14,0.246,15,0.38,16,1.772,17,2.449,18,0.923,19,0.923,20,0.923,21,0.923,22,0.923,23,0.923,24,0.923,26,2.002,27,0.923,28,0.695,29,0.923,39,0.923,43,0.055,45,0.605,46,1.149,47,1.441,50,1.428,51,0.923,53,0.923,55,0.923,57,0.923,59,0.923,61,0.923,63,0.923,65,0.923,66,1.074,67,2.374,68,1.505,70,1.811,72,2.132,75,0.529,76,0.923,77,1.861,79,0.923,81,0.923,83,0.923,85,0.923,87,0.923,89,0.923,91,1.513,92,0.923,93,1.772,94,1.441,95,1.441,96,1.441,97,0.799,98,1.149,99,0.529,100,2.487,101,0.923,102,0.923,103,2.556,104,0.923,105,0.923,106,0.923,107,1.335,108,1.441,109,0.607,110,0.622,111,0.695,112,0.923,113,0.607,114,0.03,115,2.153,116,1.772,117,0.852,118,1.427,119,2.487,120,2.002,121,2.002,122,2.301,123,0.806,124,1.247,125,0.684,126,2.002,127,1.772,128,1.733,129,1.772,130,2.002,131,2.002,132,2.172,133,2.172,134,2.002,135,2.081,136,1.165,137,1.017,138,0.799,139,0.923,140,1.772,141,0.923,142,1.441,143,0.799,144,2.305,145,2.172,146,0.799,147,1.441,148,2.853,149,1.623,150,0.923,151,0.923,152,0.923,153,0.923,154,0.923,155,1.844,156,0.923,157,0.923,158,0.923,159,0.923,160,2.172,161,0.923,162,0.607,163,0.607,164,0.695,165,0.695,166,0.695,167,0.695,168,0.695,169,1.635,170,0.923,171,0.923,172,1.441,173,0.923,174,0.923,175,1.534,176,0.923,177,0.923,178,1.441,179,0.923,180,0.947,181,0.799,182,0.923,183,0.923,184,0.923,185,0.923,186,0.923,187,0.923,188,0.923,189,0.923,190,0.923,191,0.923,192,0.923,193,0.923,194,0.923,195,0.923,196,0.923,197,1.441,198,0.923,199,0.923,200,0.923,201,0.923,202,0.923,203,0.947,204,1.734,205,0.923,206,0.923,207,0.923,208,0.923,209,2.487,210,2.487,211,0.923,212,1.441,213,0.923,214,0.923,215,1.086,216,1.441,217,0.923,218,0.923,219,0.923,220,1.772,221,0.695,222,0.923,223,0.923,224,1.441,225,0.923,226,0.923,227,1.772,228,0.923,229,0.923,230,1.441,231,0.923,232,1.772,233,0.923,234,1.086,235,0.923,236,0.799,237,0.695,238,0.923,239,1.772,240,1.772,241,1.441,242,1.441,243,0.923,244,0.923,245,0.923,246,0.695,247,0.799,248,0.923,249,0.923,250,0.03,251,0.923,252,0.923,253,0.923,254,1.247,255,0.607,256,0.607,257,0.923,258,0.607,259,0.607,260,0.695,261,0.695,262,0.923,263,0.923,264,2.172,265,0.923,266,0.923,267,0.923,268,1.441,269,0.923,270,0.884,271,0.923,272,1.441,273,1.441,274,1.441,275,0.923,276,0.923,277,0.923,278,0.923,279,0.923,280,0.923,281,0.923,282,1.441,283,0.923,284,0.923,285,0.923,286,0.923,287,0.923,288,0.923,289,0.923,290,0.923,291,0.923,292,0.799,293,0.799,294,0.923,295,0.923,296,0.923,297,0.923,298,0.923,299,0.923,300,1.772,301,0.923,302,0.923,303,0.923,304,0.923,305,0.923,306,0.923,307,0.923,308,0.923,309,0.024,443,0.399]],["title/interfaces/BodyUIViewStateProps.html",[114,0.027,115,1.367]],["body/interfaces/BodyUIViewStateProps.html",[0,0.972,1,0.825,3,0.671,4,0.354,5,0.3,6,0.627,7,0.825,9,0.953,10,0.953,11,0.825,12,1.279,13,0.972,14,0.252,15,0.389,16,1.809,17,2.464,18,0.953,19,0.953,20,0.953,21,0.953,22,0.953,23,0.953,24,0.953,26,0.953,27,0.953,28,0.718,29,0.953,39,0.953,43,0.055,45,0.556,46,1.169,47,1.478,50,1.45,51,0.953,53,0.953,55,0.953,57,0.953,59,0.953,61,0.953,63,0.953,65,0.953,66,1.086,67,2.391,68,1.502,70,1.833,72,2.145,75,0.547,76,0.953,77,1.734,79,0.953,81,0.953,83,0.953,85,0.953,87,0.953,89,0.953,91,1.534,92,0.933,93,1.809,94,1.478,95,1.478,96,1.478,97,0.825,98,1.164,99,0.547,100,2.514,101,0.953,102,0.953,103,2.581,104,0.953,105,0.953,106,0.953,107,1.363,108,1.478,109,0.627,110,0.638,111,0.718,112,0.953,113,0.627,114,0.031,115,2.234,116,2.332,117,0.831,118,1.442,119,2.514,120,2.433,121,2.433,122,2.332,123,0.818,124,0.825,125,0.466,126,0.953,127,0.953,128,0.825,129,0.953,130,0.953,131,0.953,132,1.478,133,1.478,134,0.953,135,2.106,136,1.19,137,1.038,138,0.825,139,0.953,140,1.809,141,0.953,142,1.478,143,0.825,144,2.324,145,2.205,146,0.825,147,1.478,148,2.869,149,1.633,150,0.953,151,0.953,152,0.953,153,0.953,154,0.953,155,1.856,156,0.953,157,0.953,158,0.953,159,0.953,160,2.205,161,0.953,162,0.627,163,0.627,164,0.718,165,0.718,166,0.718,167,0.718,168,0.718,169,1.653,170,0.953,171,0.953,172,1.478,173,0.953,174,0.953,175,1.566,176,0.953,177,0.953,178,1.478,179,0.953,180,0.972,181,0.825,182,0.953,183,0.953,184,0.953,185,0.953,186,0.953,187,0.953,188,0.953,189,0.953,190,0.953,191,0.953,192,0.953,193,0.953,194,0.953,195,0.953,196,0.953,197,1.478,198,0.953,199,0.953,200,0.953,201,0.953,202,0.953,203,0.972,204,1.757,205,0.953,206,0.953,207,0.953,208,0.953,209,2.514,210,2.514,211,0.953,212,1.478,213,0.953,214,0.953,215,1.113,216,1.478,217,0.953,218,0.953,219,0.953,220,1.809,221,0.718,222,0.953,223,0.953,224,1.478,225,0.953,226,0.953,227,1.809,228,0.953,229,0.953,230,1.478,231,0.953,232,1.809,233,0.953,234,1.113,235,0.953,236,0.825,237,0.718,238,0.953,239,1.809,240,1.809,241,1.478,242,1.478,243,0.953,244,0.953,245,0.953,246,0.718,247,0.825,248,0.953,249,0.953,250,0.031,251,0.953,252,0.953,253,0.953,254,1.279,255,0.627,256,0.627,257,0.953,258,0.627,259,0.627,260,0.718,261,0.718,262,0.953,263,0.953,264,2.205,265,0.953,266,0.953,267,0.953,268,1.478,269,0.953,270,0.903,271,0.953,272,1.478,273,1.478,274,1.478,275,0.953,276,0.953,277,0.953,278,0.953,279,0.953,280,0.953,281,0.953,282,1.478,283,0.953,284,0.953,285,0.953,286,0.953,287,0.953,288,0.953,289,0.953,290,0.953,291,0.953,292,0.825,293,0.825,294,0.953,295,0.953,296,0.953,297,0.953,298,0.953,299,0.953,300,1.809,301,0.953,302,0.953,303,0.953,304,0.953,305,0.953,306,0.953,307,0.953,308,0.953,309,0.025,443,0.412]],["title/interfaces/Collision.html",[114,0.027,444,2.202]],["body/interfaces/Collision.html",[3,0.538,4,0.538,5,0.457,14,0.248,15,0.53,28,1.093,43,0.055,44,2.281,45,0.565,66,0.869,75,0.832,91,1.323,92,1.031,98,0.724,99,0.832,109,0.954,110,1.077,114,0.025,117,0.958,118,0.832,123,0.538,125,0.954,136,1.519,149,1.626,155,1.323,162,1.323,163,0.954,169,2.023,180,1.519,221,1.093,246,1.974,250,0.034,309,0.034,319,2.351,351,2.31,355,1.45,360,2.699,378,1.255,412,1.695,415,2.804,443,0.626,444,3.22,445,2.022,446,2.022,447,4.708,448,2.022,449,2.518,450,3.493,451,2.518,452,3.493,453,2.518,454,3.477,455,2.022,456,2.022,457,2.022,458,1.695,459,2.022,460,2.022,461,2.518,462,2.518,463,4.011,464,2.518,465,3.493,466,2.518,467,2.518,468,2.518,469,3.493,470,3.477,471,2.518,472,3.477,473,2.518,474,2.518,475,3.22,476,3.493,477,3.22,478,2.804,479,2.804,480,2.804,481,2.804,482,2.804,483,2.804,484,4.011,485,2.518,486,2.518,487,2.518,488,2.518,489,2.518,490,2.022,491,2.518,492,2.022,493,2.022,494,2.804,495,2.022,496,2.022,497,2.022,498,2.022,499,2.022,500,2.022,501,2.518,502,2.022,503,4.331,504,3.493,505,2.518,506,2.518,507,2.518,508,2.518,509,2.518,510,2.518,511,2.518,512,2.518,513,2.518,514,2.518,515,2.518,516,2.518,517,2.518,518,2.518,519,2.518,520,4.55,521,3.493,522,4.331,523,3.493,524,3.493,525,2.518,526,2.518,527,2.518,528,2.518,529,2.518,530,2.022]],["title/interfaces/PickInfo.html",[114,0.027,135,1.367]],["body/interfaces/PickInfo.html",[0,0.974,1,0.828,3,0.673,4,0.355,5,0.301,6,0.629,7,0.828,9,0.957,10,0.957,11,0.828,12,1.282,13,0.974,14,0.377,15,0.39,16,1.813,17,2.466,18,0.957,19,0.957,20,0.957,21,0.957,22,0.957,23,0.957,24,0.957,26,0.957,27,0.957,28,0.721,29,0.957,39,0.957,43,0.055,45,0.543,46,1.171,47,1.482,50,1.452,51,0.957,53,0.957,55,0.957,57,0.957,59,0.957,61,0.957,63,0.957,65,0.957,66,1.087,67,2.393,68,1.493,70,1.836,72,2.147,75,0.549,76,0.957,77,1.794,79,0.957,81,0.957,83,0.957,85,0.957,87,0.957,89,0.957,91,1.536,92,0.934,93,1.813,94,1.482,95,1.482,96,1.482,97,0.828,98,1.019,99,0.549,100,2.517,101,0.957,102,0.957,103,2.584,104,0.957,105,0.957,106,0.957,107,1.366,108,2.208,109,0.629,110,0.64,111,0.721,112,0.957,113,0.629,114,0.031,115,2.178,116,1.813,117,0.736,118,1.267,119,2.208,120,2.042,121,2.042,122,1.813,123,0.819,124,0.828,125,0.467,126,0.957,127,0.957,128,0.828,129,0.957,130,0.957,131,0.957,132,1.482,133,1.482,134,0.957,135,2.178,136,1.192,137,1.34,138,1.569,139,2.042,140,2.336,141,2.042,142,2.208,143,0.828,144,2.326,145,2.208,146,0.828,147,1.482,148,2.871,149,1.634,150,0.957,151,0.957,152,0.957,153,0.957,154,0.957,155,1.857,156,0.957,157,0.957,158,0.957,159,0.957,160,2.208,161,0.957,162,0.629,163,0.629,164,0.721,165,0.721,166,0.721,167,0.721,168,0.721,169,1.655,170,0.957,171,0.957,172,1.482,173,0.957,174,0.957,175,1.569,176,0.957,177,0.957,178,1.482,179,0.957,180,0.974,181,0.828,182,0.957,183,0.957,184,0.957,185,0.957,186,0.957,187,0.957,188,0.957,189,0.957,190,0.957,191,0.957,192,0.957,193,0.957,194,0.957,195,0.957,196,0.957,197,1.482,198,0.957,199,0.957,200,0.957,201,0.957,202,0.957,203,0.974,204,1.76,205,0.957,206,0.957,207,0.957,208,0.957,209,2.517,210,2.517,211,0.957,212,1.482,213,0.957,214,0.957,215,1.116,216,1.482,217,0.957,218,0.957,219,0.957,220,1.813,221,0.721,222,0.957,223,0.957,224,1.482,225,0.957,226,0.957,227,1.813,228,0.957,229,0.957,230,1.482,231,0.957,232,1.813,233,0.957,234,1.116,235,0.957,236,0.828,237,0.721,238,0.957,239,1.813,240,1.813,241,1.482,242,1.482,243,0.957,244,0.957,245,0.957,246,0.721,247,0.828,248,0.957,249,0.957,250,0.031,251,0.957,252,0.957,253,0.957,254,1.282,255,0.629,256,0.629,257,0.957,258,0.629,259,0.629,260,0.721,261,0.721,262,0.957,263,0.957,264,2.208,265,0.957,266,0.957,267,0.957,268,1.482,269,0.957,270,0.905,271,0.957,272,1.482,273,1.482,274,1.482,275,0.957,276,0.957,277,0.957,278,0.957,279,0.957,280,0.957,281,0.957,282,1.482,283,0.957,284,0.957,285,0.957,286,0.957,287,0.957,288,0.957,289,0.957,290,0.957,291,0.957,292,0.828,293,0.828,294,0.957,295,0.957,296,0.957,297,0.957,298,0.957,299,0.957,300,1.813,301,0.957,302,0.957,303,0.957,304,0.957,305,0.957,306,0.957,307,0.957,308,0.957,309,0.025,443,0.413]],["title/interfaces/ProcessedNode.html",[114,0.027,531,2.202]],["body/interfaces/ProcessedNode.html",[3,0.545,4,0.545,5,0.463,14,0.251,15,0.534,28,1.106,43,0.055,45,0.567,66,1.083,75,1.164,91,1.971,92,0.976,98,1.16,99,0.842,109,0.965,110,1.083,111,1.106,113,1.528,114,0.025,117,0.896,123,0.753,125,0.639,136,1.334,149,1.6,155,0.965,162,1.334,163,0.965,164,1.106,165,1.106,166,1.106,167,1.106,168,1.106,169,2.019,180,1.334,203,0.965,204,1.889,215,1.528,221,1.106,234,1.751,250,0.034,255,1.334,256,1.528,258,1.334,259,0.965,260,1.106,261,1.106,309,0.034,311,1.756,314,2.37,344,1.715,347,2.37,349,2.37,351,2.028,355,2.028,360,2.716,378,1.27,389,2.046,443,0.634,448,2.046,454,3.668,455,3.888,456,2.046,457,2.046,458,1.715,459,2.046,470,2.828,472,2.828,477,3.495,478,2.046,479,2.046,480,2.046,481,2.046,482,2.046,483,2.046,490,2.046,492,2.046,493,2.046,494,2.828,495,2.046,496,2.046,497,2.046,498,2.046,499,2.046,500,2.046,502,2.828,530,2.046,531,4.072,532,1.715,533,2.046,534,4.569,535,4.354,536,4.569,537,2.046,538,2.549,539,3.24,540,3.522,541,2.549,542,2.549,543,2.549,544,2.549,545,3.24,546,3.522,547,3.522,548,3.522,549,2.046,550,3.522,551,2.549,552,2.549,553,2.549,554,2.549,555,2.549,556,2.046,557,2.549,558,2.549,559,2.549,560,3.522,561,2.549,562,2.549,563,2.549,564,2.549,565,2.549,566,4.036,567,2.549,568,2.549,569,2.549,570,3.522,571,2.549,572,2.549,573,2.549,574,2.549,575,2.549,576,2.549,577,2.549,578,2.549,579,2.549,580,2.549,581,2.549,582,2.549,583,2.549,584,2.549]],["title/interfaces/SpatialEntityJsonLd.html",[114,0.027,585,1.367]],["body/interfaces/SpatialEntityJsonLd.html",[3,0.543,4,0.751,5,0.638,14,0.25,15,0.533,43,0.055,45,0.682,68,1.566,92,0.543,114,0.039,117,1.015,118,0.839,123,0.861,125,0.857,137,1.436,250,0.034,270,1.484,309,0.034,311,2.167,337,2.504,443,0.632,585,1.752,586,1.71,587,1.463,588,1.71,589,3.071,590,3.071,591,2.925,592,2.925,593,2.925,594,2.925,595,2.925,596,2.925,597,2.925,598,2.925,599,2.925,600,2.925,601,3.071,602,2.504,603,2.504,604,2.925,605,2.925,606,2.925,607,2.925,608,2.925,609,2.925,610,2.925,611,2.925,612,2.925,613,2.504,614,2.84,615,2.711,616,2.711,617,2.711,618,2.711,619,1.71,620,1.71,621,1.71,622,1.71,623,1.71,624,1.71,625,1.71,626,1.71,627,1.71,628,1.71,629,1.71,630,1.71,631,1.71,632,1.71,633,1.71,634,1.71]],["title/interfaces/SpatialObjectReferenceJsonLd.html",[114,0.027,613,1.58]],["body/interfaces/SpatialObjectReferenceJsonLd.html",[3,0.682,4,0.874,5,0.894,14,0.314,15,0.621,43,0.054,45,0.66,68,1.556,92,0.682,114,0.044,117,1.014,118,1.055,123,0.965,125,0.914,137,1.055,250,0.04,270,1.369,309,0.04,311,2.374,337,1.838,443,0.794,585,1.591,586,2.148,587,1.838,588,2.148,589,3.314,590,2.754,591,2.148,592,2.148,593,2.148,594,2.148,595,2.148,596,2.148,597,2.148,598,2.148,599,2.148,600,2.148,601,3.314,602,1.838,603,1.838,604,2.148,605,2.148,606,2.148,607,2.148,608,2.148,609,2.148,610,2.148,611,2.148,612,2.148,613,2.601,614,2.902,615,2.148,616,2.148,617,2.148,618,2.148,619,2.148,620,2.148,621,2.148,622,2.148,623,2.148,624,2.148,625,2.148,626,2.148,627,2.148,628,2.148,629,2.148,630,2.148,631,2.148,632,2.148,633,2.148,634,3.205]],["title/interfaces/SpatialPlacementJsonLd.html",[114,0.027,614,1.58]],["body/interfaces/SpatialPlacementJsonLd.html",[3,0.603,4,1.011,5,0.685,14,0.278,15,0.573,43,0.054,45,0.679,46,1.5,68,1.589,92,0.603,114,0.042,117,1.013,118,1.5,123,0.909,125,0.884,137,0.932,250,0.037,270,1.305,309,0.037,311,2.264,337,1.625,443,0.702,585,1.407,586,1.899,587,1.625,588,1.899,589,3.185,590,3.185,591,1.899,592,1.899,593,1.899,594,1.899,595,1.899,596,1.899,597,1.899,598,1.899,599,1.899,600,1.899,601,2.54,602,1.625,603,1.625,604,1.899,605,1.899,606,1.899,607,1.899,608,1.899,609,1.899,610,1.899,611,1.899,612,1.899,613,2.174,614,2.726,615,1.899,616,1.899,617,1.899,618,1.899,619,1.899,620,1.899,621,3.056,622,3.056,623,3.056,624,3.056,625,3.056,626,3.056,627,3.056,628,3.056,629,3.056,630,3.056,631,3.056,632,3.056,633,3.056,634,1.899]],["title/interfaces/SpatialSceneNode.html",[66,0.682,114,0.027]],["body/interfaces/SpatialSceneNode.html",[3,0.632,4,0.632,5,0.537,14,0.291,15,0.591,43,0.054,44,2.008,45,0.681,46,1.83,66,0.969,68,1.558,77,1.957,92,0.632,98,1.33,99,0.978,110,0.736,114,0.029,117,1.006,123,0.832,125,0.84,203,1.752,250,0.038,255,1.752,256,1.752,258,1.752,259,1.752,261,2.008,309,0.038,344,3.114,365,1.992,367,1.992,368,1.992,369,1.992,378,1.475,386,3.236,416,3.715,443,0.736,475,3.715,556,3.715,602,2.665,603,2.665,635,2.376,636,2.376,637,4.628,638,4.628,639,4.628,640,3.715]],["title/dependencies.html",[641,1.855,642,2.64]],["body/dependencies.html",[43,0.053,250,0.047,309,0.047,642,3.891,643,4.216,644,4.216,645,4.216,646,4.216,647,3.891,648,4.216,649,4.216,650,4.216]],["title/miscellaneous/functions.html",[651,1.003,652,2.64]],["body/miscellaneous/functions.html",[6,0.979,13,1.54,14,0.254,42,3.566,43,0.054,44,2.3,45,0.643,46,1.751,49,1.773,50,1.347,66,0.885,70,1.901,71,3.581,72,1.122,75,1.723,77,0.979,98,1.259,110,1.232,111,1.544,113,0.979,117,0.99,125,0.646,128,1.289,234,1.122,237,1.544,247,1.289,250,0.035,256,1.347,270,1.022,309,0.035,310,3.265,314,2.394,329,3.265,332,2.076,347,2.394,348,2.856,349,2.737,351,2.049,352,2.856,356,2.856,357,3.517,412,1.74,445,2.076,446,2.856,458,2.394,460,2.076,532,3.091,533,3.265,537,2.076,539,2.856,545,3.517,549,2.076,585,1.773,587,2.049,651,1.122,652,2.076,653,3.558,654,3.81,655,3.558,656,4.38,657,4.593,658,2.076,659,2.856,660,3.558,661,3.558,662,4.067,663,3.558,664,3.558,665,3.558,666,3.558,667,3.558,668,3.558,669,3.558,670,3.558,671,2.856,672,3.558,673,3.558,674,3.558,675,2.586,676,3.558,677,2.076,678,2.856,679,4.862,680,2.586,681,2.586,682,3.558,683,2.586,684,3.558,685,2.586,686,3.558,687,2.586,688,2.586,689,2.586,690,2.586,691,4.38,692,4.067,693,2.586,694,2.586,695,2.586,696,4.38,697,2.586,698,2.586,699,3.558,700,2.586,701,2.076,702,2.586,703,3.558,704,2.586,705,2.586,706,2.076,707,3.558,708,2.856]],["title/index.html",[14,0.227,709,2.311,710,2.311]],["body/index.html",[5,0.658,11,2.593,12,2.626,13,1.995,43,0.043,44,1.574,49,1.808,149,1.198,250,0.043,254,1.808,309,0.043,647,2.912,711,3.628,712,4.433,713,3.628,714,4.788,715,4.788,716,2.912,717,3.628,718,3.628,719,4.987,720,5.204,721,4.788,722,4.788,723,5.115,724,4.433,725,3.628,726,3.628,727,3.628,728,3.628,729,3.628,730,3.628,731,3.628,732,5.115,733,3.628,734,3.628,735,4.433,736,3.628,737,3.628,738,3.628,739,4.433,740,3.628,741,3.628,742,3.628,743,3.628,744,3.628,745,3.628,746,4.433,747,4.433,748,3.628,749,3.628,750,3.628,751,3.628,752,4.788,753,3.628,754,3.628,755,3.628,756,3.628]],["title/modules.html",[757,2.973]],["body/modules.html",[43,0.048,250,0.048,309,0.048,757,3.473]],["title/overview.html",[758,2.973]],["body/overview.html",[2,2.889,43,0.048,250,0.048,292,2.14,309,0.048,443,1.068,758,3.447,759,4.294]],["title/properties.html",[15,0.499,641,1.855]],["body/properties.html",[15,0.653,43,0.05,250,0.048,309,0.048,716,3.454,760,4.302]],["title/miscellaneous/typealiases.html",[651,1.003,761,3.288]],["body/miscellaneous/typealiases.html",[6,1.516,7,2.489,14,0.394,43,0.053,45,0.62,110,1.17,143,2.344,146,2.344,250,0.046,309,0.046,319,3.165,355,2.306,365,2.694,367,2.694,368,2.694,369,2.694,378,1.996,386,2.694,635,3.215,636,3.776,640,3.776,651,1.737,658,3.215,659,3.776,677,3.215,678,3.776,706,3.215,708,3.776,762,4.004]],["title/miscellaneous/variables.html",[651,1.003,763,2.64]],["body/miscellaneous/variables.html",[14,0.397,43,0.052,45,0.501,49,2.013,50,1.53,137,1.334,236,2.356,237,2.051,250,0.046,309,0.046,414,3.795,532,2.718,651,1.753,654,3.243,671,3.795,701,3.795,763,3.243,764,4.039,765,4.728,766,4.728,767,4.039,768,4.039,769,4.039,770,4.039,771,4.728,772,4.039,773,4.039,774,4.039,775,4.039,776,4.039]]],"invertedIndex":[["",{"_index":43,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":155,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["0.0.1",{"_index":760,"title":{},"body":{"properties.html":{}}}],["0.034",{"_index":244,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["0.05",{"_index":230,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["0.076",{"_index":240,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["0.11",{"_index":245,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["0.49",{"_index":243,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["0.5",{"_index":215,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["0.8",{"_index":392,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["0.9",{"_index":380,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["1",{"_index":246,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{}}}],["1.0",{"_index":293,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["1.6875389974302382e",{"_index":241,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["10.0",{"_index":206,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["1000",{"_index":177,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["11.5",{"_index":266,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["136",{"_index":374,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["15",{"_index":212,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["17",{"_index":242,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["2",{"_index":292,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"overview.html":{}}}],["2.0.0",{"_index":644,"title":{},"body":{"dependencies.html":{}}}],["200",{"_index":224,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["229",{"_index":375,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["255",{"_index":204,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["30",{"_index":373,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["3d",{"_index":236,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/variables.html":{}}}],["4.17.21",{"_index":650,"title":{},"body":{"dependencies.html":{}}}],["8.9",{"_index":291,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["9",{"_index":759,"title":{},"body":{"overview.html":{}}}],["9.1.1",{"_index":647,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["9.5",{"_index":218,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_dragevent(info",{"_index":306,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_lighting",{"_index":259,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["_onclick(info",{"_index":276,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_ondrag(info",{"_index":302,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_ondragend(info",{"_index":304,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_ondragstart(info",{"_index":299,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_onhover(e",{"_index":267,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["_onviewstatechange(event",{"_index":284,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["aabb",{"_index":454,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["add",{"_index":729,"title":{},"body":{"index.html":{}}}],["added",{"_index":730,"title":{},"body":{"index.html":{}}}],["aliases",{"_index":762,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["ambientlight",{"_index":93,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["anatomical",{"_index":665,"title":{},"body":{"miscellaneous/functions.html":{}}}],["anatomicalstructuresurl",{"_index":772,"title":{},"body":{"miscellaneous/variables.html":{}}}],["angular",{"_index":714,"title":{},"body":{"index.html":{}}}],["angular.json",{"_index":731,"title":{},"body":{"index.html":{}}}],["angular/common",{"_index":646,"title":{},"body":{"dependencies.html":{}}}],["angular/core",{"_index":648,"title":{},"body":{"dependencies.html":{}}}],["artifacts",{"_index":733,"title":{},"body":{"index.html":{}}}],["async",{"_index":28,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["autohighlight",{"_index":371,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["await",{"_index":221,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["b",{"_index":766,"title":{},"body":{"miscellaneous/variables.html":{}}}],["bbox",{"_index":477,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["behaviorsubject",{"_index":102,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["behaviorsubject([0",{"_index":154,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["bind",{"_index":100,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["body",{"_index":12,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"index.html":{}}}],["bodyui",{"_index":1,"title":{"classes/BodyUI.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["bodyuilayer",{"_index":107,"title":{"classes/BodyUILayer.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["bodyuilayer.gltfcache",{"_index":410,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["bodyuiprops",{"_index":124,"title":{"interfaces/BodyUIProps.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["bodyuiviewstateprops",{"_index":115,"title":{"interfaces/BodyUIViewStateProps.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["boolean",{"_index":77,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["break",{"_index":366,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["build",{"_index":732,"title":{},"body":{"index.html":{}}}],["building",{"_index":738,"title":{},"body":{"index.html":{}}}],["cache",{"_index":684,"title":{},"body":{"miscellaneous/functions.html":{}}}],["camera",{"_index":122,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["cannon",{"_index":456,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["canvas",{"_index":126,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["case",{"_index":364,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["ccf",{"_index":11,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"index.html":{}}}],["ccf_annotations",{"_index":591,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["ccfbodyui",{"_index":711,"title":{},"body":{"index.html":{}}}],["cd",{"_index":741,"title":{},"body":{"index.html":{}}}],["center",{"_index":534,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["check",{"_index":754,"title":{},"body":{"index.html":{}}}],["child",{"_index":540,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["child.bbox.clone",{"_index":567,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["childnames",{"_index":653,"title":{},"body":{"miscellaneous/functions.html":{}}}],["childnames(child",{"_index":544,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["childnames(node.node",{"_index":561,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["childnames(scene",{"_index":537,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["children",{"_index":538,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["class",{"_index":0,"title":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["classes",{"_index":2,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"overview.html":{}}}],["cli",{"_index":715,"title":{},"body":{"index.html":{}}}],["code",{"_index":717,"title":{},"body":{"index.html":{}}}],["collider",{"_index":354,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["collider.ts",{"_index":446,"title":{},"body":{"interfaces/Collision.html":{},"miscellaneous/functions.html":{}}}],["collision",{"_index":444,"title":{"interfaces/Collision.html":{}},"body":{"interfaces/Collision.html":{}}}],["collisioning",{"_index":462,"title":{},"body":{"interfaces/Collision.html":{}}}],["color",{"_index":203,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["comment",{"_index":337,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["component",{"_index":722,"title":{},"body":{"index.html":{}}}],["compositelayer",{"_index":312,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["cone",{"_index":367,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["conegeometry",{"_index":341,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["config",{"_index":699,"title":{},"body":{"miscellaneous/functions.html":{}}}],["config.csv",{"_index":771,"title":{},"body":{"miscellaneous/variables.html":{}}}],["console.log",{"_index":515,"title":{},"body":{"interfaces/Collision.html":{}}}],["console.log('data",{"_index":251,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["console.log('results",{"_index":249,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["console.log('starting",{"_index":461,"title":{},"body":{"interfaces/Collision.html":{}}}],["console.log(csvreport",{"_index":529,"title":{},"body":{"interfaces/Collision.html":{}}}],["const",{"_index":169,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["constructor",{"_index":37,"title":{},"body":{"classes/BodyUI.html":{}}}],["constructor(deckprops",{"_index":38,"title":{},"body":{"classes/BodyUI.html":{}}}],["constructor(private",{"_index":161,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["context",{"_index":590,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["controller",{"_index":178,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["convenience",{"_index":9,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["convention",{"_index":426,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["coordinate",{"_index":141,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["coordinate_system",{"_index":328,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["coordinate_system.cartesian",{"_index":377,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["coordinatesystem",{"_index":376,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["creation_date",{"_index":592,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["creator",{"_index":593,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["creator_first_name",{"_index":594,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["creator_last_name",{"_index":595,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["creator_middle_name",{"_index":596,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["creator_orcid",{"_index":597,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["crosswalk.csv",{"_index":773,"title":{},"body":{"miscellaneous/variables.html":{}}}],["csv.ts",{"_index":662,"title":{},"body":{"miscellaneous/functions.html":{}}}],["csvreport",{"_index":519,"title":{},"body":{"interfaces/Collision.html":{}}}],["csvreport.push",{"_index":521,"title":{},"body":{"interfaces/Collision.html":{}}}],["csvtext",{"_index":694,"title":{},"body":{"miscellaneous/functions.html":{}}}],["ctrlclick",{"_index":147,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["ctrlkey",{"_index":278,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["cube",{"_index":369,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["cubegeometry",{"_index":342,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["currentstate",{"_index":288,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["currentstate.data",{"_index":295,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["currentstate.zoomopacity",{"_index":294,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["cursor",{"_index":159,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["cylinder",{"_index":368,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["cylindergeometry",{"_index":343,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["d",{"_index":138,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["d.geometry",{"_index":466,"title":{},"body":{"interfaces/Collision.html":{}}}],["d.scenegraph",{"_index":465,"title":{},"body":{"interfaces/Collision.html":{}}}],["data",{"_index":70,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{}}}],["data.concat(object.values(results",{"_index":252,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["data.length",{"_index":359,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["data.map((d",{"_index":382,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["data.push",{"_index":253,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["data.ts",{"_index":671,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["data?.length",{"_index":226,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["debugscenenodeprocessing",{"_index":26,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["debugscenenodeprocessing(data",{"_index":65,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deck",{"_index":16,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deck(props",{"_index":208,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deck.gl/core/typed",{"_index":97,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deck.gl/layers/typed",{"_index":330,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["deck.gl/mesh",{"_index":333,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["deckprops",{"_index":47,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.camera",{"_index":172,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.interactive",{"_index":179,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.legacylighting",{"_index":201,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.maxrotationx",{"_index":213,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.minrotationx",{"_index":211,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.rotation",{"_index":216,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.target",{"_index":214,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["deckprops.zoom",{"_index":217,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["decompress",{"_index":487,"title":{},"body":{"interfaces/Collision.html":{}}}],["decorator",{"_index":101,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["default",{"_index":49,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{},"index.html":{},"miscellaneous/variables.html":{}}}],["defined",{"_index":40,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{}}}],["delete",{"_index":569,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["dependencies",{"_index":642,"title":{"dependencies.html":{}},"body":{"dependencies.html":{}}}],["depthmask",{"_index":430,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["derivescenegraph",{"_index":655,"title":{},"body":{"miscellaneous/functions.html":{}}}],["derivescenegraph(scenegraphnodename",{"_index":681,"title":{},"body":{"miscellaneous/functions.html":{}}}],["description",{"_index":8,"title":{},"body":{"classes/BodyUI.html":{}}}],["didzoom",{"_index":227,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["dimension_units",{"_index":598,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["directive|pipe|service|class|guard|interface|enum|module",{"_index":725,"title":{},"body":{"index.html":{}}}],["directory",{"_index":736,"title":{},"body":{"index.html":{}}}],["disable",{"_index":163,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["dist",{"_index":735,"title":{},"body":{"index.html":{}}}],["dist/ccf",{"_index":742,"title":{},"body":{"index.html":{}}}],["docollisions",{"_index":352,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["docollisions(scene",{"_index":460,"title":{},"body":{"interfaces/Collision.html":{},"miscellaneous/functions.html":{}}}],["docollisions(state.data",{"_index":437,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["don't",{"_index":727,"title":{},"body":{"index.html":{}}}],["dracoloader",{"_index":450,"title":{},"body":{"interfaces/Collision.html":{}}}],["e",{"_index":144,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["e.info",{"_index":442,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["e.isdragging",{"_index":198,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["e.object",{"_index":272,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["e.object?.['@id",{"_index":271,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["e.picked",{"_index":268,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["e?.srcevent?.ctrlkey",{"_index":283,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["enable",{"_index":530,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["entities",{"_index":696,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entities.ts",{"_index":673,"title":{},"body":{"miscellaneous/functions.html":{}}}],["entityid",{"_index":475,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/SpatialSceneNode.html":{}}}],["es",{"_index":457,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["eslint",{"_index":162,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["eslint/ban",{"_index":335,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["eslint/naming",{"_index":425,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["eslint/no",{"_index":167,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["event.interactionstate?.iszooming",{"_index":287,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["event.viewstate",{"_index":296,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["event.viewstate.rotationx",{"_index":298,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["event.viewstate.zoom",{"_index":290,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["execute",{"_index":748,"title":{},"body":{"index.html":{}}}],["explicit",{"_index":168,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["export",{"_index":123,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["extends",{"_index":311,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["extraction",{"_index":668,"title":{},"body":{"miscellaneous/functions.html":{}}}],["extraction_set",{"_index":599,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["extractionsitesconfigurl",{"_index":768,"title":{},"body":{"miscellaneous/variables.html":{}}}],["extractionsitesurl",{"_index":764,"title":{},"body":{"miscellaneous/variables.html":{}}}],["false",{"_index":175,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["female",{"_index":616,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["file",{"_index":5,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"index.html":{}}}],["file_format",{"_index":634,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["filter((d",{"_index":464,"title":{},"body":{"interfaces/Collision.html":{}}}],["filter((n",{"_index":565,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["finalize",{"_index":27,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["firstfieldname",{"_index":691,"title":{},"body":{"miscellaneous/functions.html":{}}}],["flipy",{"_index":174,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["folder",{"_index":740,"title":{},"body":{"index.html":{}}}],["forget",{"_index":728,"title":{},"body":{"index.html":{}}}],["function",{"_index":355,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/typealiases.html":{}}}],["functions",{"_index":652,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["further",{"_index":751,"title":{},"body":{"index.html":{}}}],["generate",{"_index":721,"title":{},"body":{"index.html":{}}}],["generated",{"_index":713,"title":{},"body":{"index.html":{}}}],["geometries",{"_index":395,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["geometries['scenegraph",{"_index":405,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["geometries['scenegraph'].push(node",{"_index":400,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["geometries[geometry",{"_index":401,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["geometries[geometry].push(node",{"_index":402,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["geometry",{"_index":344,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["geometry}pickable",{"_index":435,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getcolor",{"_index":379,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getcursor",{"_index":195,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["getpickinginfo",{"_index":316,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getpickinginfo(e",{"_index":322,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getposition",{"_index":387,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["gettext",{"_index":385,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["getting",{"_index":709,"title":{"index.html":{}},"body":{}}],["gettransformmatrix",{"_index":381,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["gltf",{"_index":351,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["gltf.scenes",{"_index":490,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["gltf.ts",{"_index":657,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gltf:${processednode['@id",{"_index":553,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["gltfcache",{"_index":314,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["gltfloader",{"_index":452,"title":{},"body":{"interfaces/Collision.html":{}}}],["gltfnode",{"_index":554,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["gltfnodes",{"_index":546,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["gltfnodes.push",{"_index":552,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["gltfoverride",{"_index":703,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gltfpromise",{"_index":686,"title":{},"body":{"miscellaneous/functions.html":{}}}],["gltfscene",{"_index":489,"title":{},"body":{"interfaces/Collision.html":{}}}],["gltftransform",{"_index":239,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["gltfurl",{"_index":234,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["go",{"_index":739,"title":{},"body":{"index.html":{}}}],["grab",{"_index":200,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["grabbing",{"_index":199,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["h",{"_index":525,"title":{},"body":{"interfaces/Collision.html":{}}}],["h.name",{"_index":528,"title":{},"body":{"interfaces/Collision.html":{}}}],["h['@id",{"_index":527,"title":{},"body":{"interfaces/Collision.html":{}}}],["halfsize",{"_index":578,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["help",{"_index":752,"title":{},"body":{"index.html":{}}}],["highlightcolor",{"_index":372,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["hit",{"_index":520,"title":{},"body":{"interfaces/Collision.html":{}}}],["hit.hits",{"_index":526,"title":{},"body":{"interfaces/Collision.html":{}}}],["hit.name",{"_index":524,"title":{},"body":{"interfaces/Collision.html":{}}}],["hit['@id",{"_index":523,"title":{},"body":{"interfaces/Collision.html":{}}}],["hits",{"_index":447,"title":{},"body":{"interfaces/Collision.html":{}}}],["hits.length",{"_index":510,"title":{},"body":{"interfaces/Collision.html":{}}}],["hits.push",{"_index":507,"title":{},"body":{"interfaces/Collision.html":{}}}],["htmlcanvaselement",{"_index":127,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["htmlelement",{"_index":129,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["http://localhost:8080/source_data/asct",{"_index":765,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:8080/source_data/extraction",{"_index":769,"title":{},"body":{"miscellaneous/variables.html":{}}}],["http://localhost:8080/source_data/reference",{"_index":775,"title":{},"body":{"miscellaneous/variables.html":{}}}],["https://hubmapconsortium.github.io/ccf",{"_index":235,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["id",{"_index":125,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["ignore",{"_index":338,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["import",{"_index":92,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["index",{"_index":14,"title":{"index.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":3,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["info.object",{"_index":282,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["info.object?.['@id",{"_index":280,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["info.picked",{"_index":279,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["info?.object?.['@id",{"_index":307,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["initialize",{"_index":29,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["initializestate",{"_index":317,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["intensity",{"_index":205,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["interactionstate",{"_index":285,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["interactive",{"_index":130,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["interface",{"_index":114,"title":{"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["interfaces",{"_index":443,"title":{},"body":{"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"overview.html":{}}}],["isdragging",{"_index":196,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["iszooming",{"_index":286,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["jsonld",{"_index":535,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["jsonld.ts",{"_index":588,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["jsonld/jsonld",{"_index":619,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["jsonldobj",{"_index":589,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["karma",{"_index":750,"title":{},"body":{"index.html":{}}}],["key",{"_index":358,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["l",{"_index":439,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["label",{"_index":600,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["landmarks.csv",{"_index":767,"title":{},"body":{"miscellaneous/variables.html":{}}}],["lasthovered",{"_index":160,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["layer",{"_index":108,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["layer.ts",{"_index":310,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["layer.ts:196",{"_index":323,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:82",{"_index":321,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:83",{"_index":320,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:85",{"_index":325,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layer.ts:91",{"_index":326,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layername",{"_index":315,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layers",{"_index":181,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["layers.filter((l",{"_index":438,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layers.push",{"_index":413,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layers/typed",{"_index":334,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["layerslist",{"_index":327,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["lb",{"_index":572,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["lb.clone().vadd(halfsize",{"_index":582,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["left",{"_index":617,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["legacylighting",{"_index":134,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["library",{"_index":712,"title":{},"body":{"index.html":{}}}],["library/vh_female/united/vhf_united_color.glb",{"_index":238,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["lightingeffect",{"_index":94,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["line",{"_index":165,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["literal",{"_index":319,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"miscellaneous/typealiases.html":{}}}],["load",{"_index":448,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["load(model.scenegraph",{"_index":486,"title":{},"body":{"interfaces/Collision.html":{}}}],["loaders.gl/core",{"_index":449,"title":{},"body":{"interfaces/Collision.html":{}}}],["loaders.gl/draco",{"_index":451,"title":{},"body":{"interfaces/Collision.html":{}}}],["loaders.gl/gltf",{"_index":453,"title":{},"body":{"interfaces/Collision.html":{}}}],["loadgltf",{"_index":347,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["loadgltf(model",{"_index":683,"title":{},"body":{"miscellaneous/functions.html":{}}}],["loadgltf2",{"_index":348,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["loadgltf2(model.scenegraphnode",{"_index":422,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["loadgltf2(scenegraphnodename",{"_index":685,"title":{},"body":{"miscellaneous/functions.html":{}}}],["lodash",{"_index":649,"title":{},"body":{"dependencies.html":{}}}],["lowerbound",{"_index":470,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["lowerbound[i",{"_index":483,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["luma.gl/core",{"_index":346,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["m",{"_index":404,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["m.scenegraph",{"_index":406,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["m.scenegraphnode",{"_index":407,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["male",{"_index":615,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["map((model",{"_index":467,"title":{},"body":{"interfaces/Collision.html":{}}}],["map((n",{"_index":563,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["mat",{"_index":468,"title":{},"body":{"interfaces/Collision.html":{}}}],["mat.transformaspoint",{"_index":471,"title":{},"body":{"interfaces/Collision.html":{}}}],["mat.transformaspoint([1",{"_index":473,"title":{},"body":{"interfaces/Collision.html":{}}}],["matching",{"_index":309,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["math.gl/core",{"_index":99,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["math.max(...report.map((r",{"_index":517,"title":{},"body":{"interfaces/Collision.html":{}}}],["math.max(n",{"_index":482,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["math.min(math.max(1",{"_index":289,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["math.min(n",{"_index":479,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["matrix",{"_index":262,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["matrix.gettranslation",{"_index":265,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["matrix4",{"_index":98,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["matrix4(d.transformmatrix).gettranslation",{"_index":384,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["matrix4(matrix4.identity).translate(center.toarray()).scale(halfsize.toarray",{"_index":584,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["matrix4(model.transformmatrix",{"_index":469,"title":{},"body":{"interfaces/Collision.html":{}}}],["matrix4(modelmatrix",{"_index":551,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["matrix4(node.transformmatrix",{"_index":263,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["matrix4(worldmatrix",{"_index":547,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["matrix4.identity",{"_index":548,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["maxhits",{"_index":516,"title":{},"body":{"interfaces/Collision.html":{}}}],["maxrotationx",{"_index":133,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["mesh",{"_index":361,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["meshlayer",{"_index":356,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["meshlayer(geometry",{"_index":434,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["meshlayer(id",{"_index":687,"title":{},"body":{"miscellaneous/functions.html":{}}}],["methods",{"_index":25,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{}}}],["minrotationx",{"_index":132,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["miscellaneous",{"_index":651,"title":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["missing",{"_index":339,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model",{"_index":412,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"miscellaneous/functions.html":{}}}],["model._lighting",{"_index":427,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.color",{"_index":429,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.entityid",{"_index":476,"title":{},"body":{"interfaces/Collision.html":{}}}],["model.opacity",{"_index":419,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.scenegraph",{"_index":424,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.scenegraphnode",{"_index":421,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.tooltip",{"_index":474,"title":{},"body":{"interfaces/Collision.html":{}}}],["model.transformmatrix",{"_index":428,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.unpickable",{"_index":420,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model.zoombasedopacity",{"_index":417,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["model['@id",{"_index":415,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{}}}],["modelmatrix",{"_index":492,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["modelmatrix.transformaspoint(primitive.attributes.position.max",{"_index":500,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["modelmatrix.transformaspoint(primitive.attributes.position.min",{"_index":499,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["models",{"_index":414,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/variables.html":{}}}],["modules",{"_index":757,"title":{"modules.html":{}},"body":{"modules.html":{}}}],["more",{"_index":753,"title":{},"body":{"index.html":{}}}],["mouseevent",{"_index":145,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["n.bbox",{"_index":560,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["n.unpickable",{"_index":432,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["name",{"_index":44,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["names",{"_index":539,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["names.push(child.name",{"_index":543,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["near",{"_index":176,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["never",{"_index":562,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["new",{"_index":149,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"index.html":{}}}],["next",{"_index":164,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["ng",{"_index":720,"title":{},"body":{"index.html":{}}}],["node",{"_index":91,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["node.bbox",{"_index":566,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.bbox.extend(child.bbox",{"_index":568,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.bbox.lowerbound",{"_index":573,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.bbox.upperbound",{"_index":575,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.center",{"_index":581,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.geometry",{"_index":398,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["node.id",{"_index":550,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.mesh",{"_index":493,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["node.mesh.primitives",{"_index":494,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["node.mesh.primitives.length",{"_index":495,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["node.name",{"_index":502,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["node.scenegraph",{"_index":399,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["node.size",{"_index":576,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.transformmatrix",{"_index":583,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["node.ts",{"_index":636,"title":{},"body":{"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["node.zoomtoonload",{"_index":228,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodeclick",{"_index":18,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodeclickevent",{"_index":146,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/typealiases.html":{}}}],["nodeclicksubject",{"_index":150,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedrag",{"_index":19,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedragend",{"_index":20,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedragendsubject",{"_index":158,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedragevent",{"_index":143,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/typealiases.html":{}}}],["nodedragstart",{"_index":21,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedragstartsubject",{"_index":156,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodedragsubject",{"_index":157,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodehoverstart",{"_index":22,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodehoverstartsubject",{"_index":151,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodehoverstop",{"_index":23,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodehoverstopsubject",{"_index":152,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["nodes",{"_index":113,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["nodes.filter((n",{"_index":431,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["nodes.ts",{"_index":533,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["nodes[n",{"_index":564,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["nodes[node['@id",{"_index":570,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["nodes[processednode['@id",{"_index":558,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["note",{"_index":726,"title":{},"body":{"index.html":{}}}],["npm",{"_index":743,"title":{},"body":{"index.html":{}}}],["number",{"_index":68,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["object",{"_index":137,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"miscellaneous/variables.html":{}}}],["object.entries(geometries",{"_index":411,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["object.prototype.hasownproperty.call(url2gltf",{"_index":408,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["object.values(nodes",{"_index":571,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["object.values(nodes).filter((n",{"_index":559,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["onclick",{"_index":185,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["ondrag",{"_index":191,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["ondragend",{"_index":193,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["ondragstart",{"_index":189,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["onhover",{"_index":183,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["onviewstatechange",{"_index":187,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["opacity",{"_index":416,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{}}}],["optional",{"_index":46,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["options",{"_index":357,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["options['geometry",{"_index":363,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["orbitaxis",{"_index":116,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["orbitview",{"_index":95,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["organ",{"_index":776,"title":{},"body":{"miscellaneous/variables.html":{}}}],["orthographic",{"_index":173,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["orthographicview",{"_index":96,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["out",{"_index":755,"title":{},"body":{"index.html":{}}}],["override",{"_index":388,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["overview",{"_index":758,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":641,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":42,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["parameters['getpickinginfo']>[0",{"_index":440,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["parent",{"_index":128,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{}}}],["parsecsv",{"_index":660,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsecsv(sourceurl",{"_index":690,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsecsvtext",{"_index":663,"title":{},"body":{"miscellaneous/functions.html":{}}}],["parsecsvtext(csvtext",{"_index":693,"title":{},"body":{"miscellaneous/functions.html":{}}}],["partial",{"_index":39,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["pbr",{"_index":260,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["peer",{"_index":645,"title":{},"body":{"dependencies.html":{}}}],["pickable",{"_index":370,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["picked",{"_index":142,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["pickinfo",{"_index":135,"title":{"interfaces/PickInfo.html":{}},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["placement",{"_index":601,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["placement_date",{"_index":621,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["pointer",{"_index":269,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["position",{"_index":383,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["postprocess",{"_index":488,"title":{},"body":{"interfaces/Collision.html":{}}}],["primitive",{"_index":496,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["primitive.attributes.position",{"_index":497,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["primitive.attributes.position.min",{"_index":498,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["priority",{"_index":637,"title":{},"body":{"interfaces/SpatialSceneNode.html":{}}}],["private",{"_index":148,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["processanatomicalstructures",{"_index":664,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processanatomicalstructures(sourceurl",{"_index":695,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processednode",{"_index":531,"title":{"interfaces/ProcessedNode.html":{}},"body":{"interfaces/ProcessedNode.html":{}}}],["processednode.bbox",{"_index":557,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["processednode['@id",{"_index":555,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["processextractionsites",{"_index":667,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processextractionsites(sourceurl",{"_index":697,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processreferencedata",{"_index":670,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processreferencedata(refentities",{"_index":698,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processscenenodes",{"_index":111,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["processscenenodes(gltfurl",{"_index":247,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{}}}],["processspatialentities",{"_index":672,"title":{},"body":{"miscellaneous/functions.html":{}}}],["processspatialentities(parent",{"_index":702,"title":{},"body":{"miscellaneous/functions.html":{}}}],["project",{"_index":723,"title":{},"body":{"index.html":{}}}],["promise",{"_index":75,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["promise((r",{"_index":222,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["properties",{"_index":15,"title":{"properties.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"properties.html":{}}}],["props",{"_index":170,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["props.effects",{"_index":202,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["publish",{"_index":744,"title":{},"body":{"index.html":{}}}],["publishing",{"_index":737,"title":{},"body":{"index.html":{}}}],["r.hits.length",{"_index":518,"title":{},"body":{"interfaces/Collision.html":{}}}],["readme",{"_index":756,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":17,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["record",{"_index":396,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["refentities",{"_index":700,"title":{},"body":{"miscellaneous/functions.html":{}}}],["reference",{"_index":237,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["reference_organ",{"_index":602,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["referencedataconfig",{"_index":701,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["referenceorganconfigurl",{"_index":774,"title":{},"body":{"miscellaneous/variables.html":{}}}],["registergltfloaders",{"_index":349,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["renderlayers",{"_index":318,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["report",{"_index":503,"title":{},"body":{"interfaces/Collision.html":{}}}],["report.push",{"_index":511,"title":{},"body":{"interfaces/Collision.html":{}}}],["representation_of",{"_index":603,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["results",{"_index":250,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"dependencies.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":360,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["returns",{"_index":71,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["returntype",{"_index":324,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["returntype['getpickinginfo",{"_index":441,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["right",{"_index":618,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["rotation",{"_index":131,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["rotation_units",{"_index":629,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["rotationorbit",{"_index":120,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["rotationx",{"_index":121,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["rui_rank",{"_index":604,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["run",{"_index":719,"title":{},"body":{"index.html":{}}}],["running",{"_index":745,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":104,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["rxjs/operators",{"_index":106,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["sad",{"_index":504,"title":{},"body":{"interfaces/Collision.html":{}}}],["sad.push(src",{"_index":514,"title":{},"body":{"interfaces/Collision.html":{}}}],["scaffolding",{"_index":718,"title":{},"body":{"index.html":{}}}],["scaling_units",{"_index":625,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["scene",{"_index":110,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["scene.children",{"_index":542,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["scene.filter((d",{"_index":485,"title":{},"body":{"interfaces/Collision.html":{}}}],["scene.nodes",{"_index":541,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["scene.ts",{"_index":676,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scenegraph",{"_index":255,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["scenegraphlayer",{"_index":331,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["scenegraphnode",{"_index":256,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["scenegraphnodename",{"_index":682,"title":{},"body":{"miscellaneous/functions.html":{}}}],["scenerotation",{"_index":24,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["scenerotationsubject",{"_index":153,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["scenetraversalvisitor",{"_index":708,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["setinteractive",{"_index":30,"title":{},"body":{"classes/BodyUI.html":{}}}],["setinteractive(value",{"_index":76,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["setrotation",{"_index":31,"title":{},"body":{"classes/BodyUI.html":{}}}],["setrotation(value",{"_index":79,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["setrotationx",{"_index":32,"title":{},"body":{"classes/BodyUI.html":{}}}],["setrotationx(value",{"_index":81,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["setscene",{"_index":33,"title":{},"body":{"classes/BodyUI.html":{}}}],["setscene(data",{"_index":83,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["settarget",{"_index":34,"title":{},"body":{"classes/BodyUI.html":{}}}],["settarget(value",{"_index":85,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["settimeout(r",{"_index":223,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["setzoom",{"_index":35,"title":{},"body":{"classes/BodyUI.html":{}}}],["setzoom(value",{"_index":87,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["sex",{"_index":605,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["share",{"_index":105,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["shared/spatial",{"_index":109,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["side",{"_index":606,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["simplemeshlayer",{"_index":332,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["simplifyscene",{"_index":674,"title":{},"body":{"miscellaneous/functions.html":{}}}],["simplifyscene(nodes",{"_index":705,"title":{},"body":{"miscellaneous/functions.html":{}}}],["site",{"_index":770,"title":{},"body":{"miscellaneous/variables.html":{}}}],["sites.ts",{"_index":669,"title":{},"body":{"miscellaneous/functions.html":{}}}],["size",{"_index":536,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["size.clone().vmul(new",{"_index":579,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["slice_count",{"_index":607,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["slice_thickness",{"_index":608,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["source",{"_index":4,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{}}}],["sourceboxes",{"_index":463,"title":{},"body":{"interfaces/Collision.html":{}}}],["sourceurl",{"_index":692,"title":{},"body":{"miscellaneous/functions.html":{}}}],["spatial",{"_index":587,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"miscellaneous/functions.html":{}}}],["spatialentityjsonld",{"_index":585,"title":{"interfaces/SpatialEntityJsonLd.html":{}},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"miscellaneous/functions.html":{}}}],["spatialobjectreferencejsonld",{"_index":613,"title":{"interfaces/SpatialObjectReferenceJsonLd.html":{}},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["spatialplacementjsonld",{"_index":614,"title":{"interfaces/SpatialPlacementJsonLd.html":{}},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["spatialscenegeometry",{"_index":640,"title":{},"body":{"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["spatialscenenode",{"_index":66,"title":{"interfaces/SpatialSceneNode.html":{}},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["spec",{"_index":620,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["sphere",{"_index":365,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["spheregeometry",{"_index":345,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["src",{"_index":505,"title":{},"body":{"interfaces/Collision.html":{}}}],["src.bbox.overlaps(target.bbox",{"_index":506,"title":{},"body":{"interfaces/Collision.html":{}}}],["src.entityid",{"_index":512,"title":{},"body":{"interfaces/Collision.html":{}}}],["src.name",{"_index":513,"title":{},"body":{"interfaces/Collision.html":{}}}],["src/.../body",{"_index":659,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../load",{"_index":656,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../parse",{"_index":661,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../process",{"_index":654,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/.../scene",{"_index":677,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/.../simplify",{"_index":675,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../spatial",{"_index":658,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/body",{"_index":6,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/shared/ccf",{"_index":586,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["src/lib/shared/spatial",{"_index":635,"title":{},"body":{"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/util/load",{"_index":680,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/util/parse",{"_index":689,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/util/process",{"_index":532,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["src/lib/util/scene",{"_index":706,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["src/lib/util/simplify",{"_index":704,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/lib/util/spatial",{"_index":445,"title":{},"body":{"interfaces/Collision.html":{},"miscellaneous/functions.html":{}}}],["srcevent",{"_index":277,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["started",{"_index":710,"title":{"index.html":{}},"body":{}}],["state",{"_index":393,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["state.data",{"_index":397,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["state.docollisions",{"_index":436,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["state.zoomopacity",{"_index":418,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["static",{"_index":313,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["stored",{"_index":734,"title":{},"body":{"index.html":{}}}],["string",{"_index":117,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{}}}],["structures.ts",{"_index":666,"title":{},"body":{"miscellaneous/functions.html":{}}}],["subject",{"_index":103,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["subject.next",{"_index":308,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["switch",{"_index":362,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["target",{"_index":118,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["target.name",{"_index":509,"title":{},"body":{"interfaces/Collision.html":{}}}],["target['@id",{"_index":508,"title":{},"body":{"interfaces/Collision.html":{}}}],["targetboxes",{"_index":484,"title":{},"body":{"interfaces/Collision.html":{}}}],["targetboxes.push",{"_index":501,"title":{},"body":{"interfaces/Collision.html":{}}}],["test",{"_index":254,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"index.html":{}}}],["tests",{"_index":747,"title":{},"body":{"index.html":{}}}],["text",{"_index":386,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["textlayer",{"_index":329,"title":{},"body":{"classes/BodyUILayer.html":{},"miscellaneous/functions.html":{}}}],["textlayer(id",{"_index":688,"title":{},"body":{"miscellaneous/functions.html":{}}}],["textpickable",{"_index":433,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["this._dragevent(info",{"_index":300,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._onclick",{"_index":186,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._ondrag",{"_index":192,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._ondragend",{"_index":194,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._ondragstart",{"_index":190,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._onhover",{"_index":184,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this._onviewstatechange",{"_index":188,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.bodyuilayer",{"_index":182,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.bodyuilayer.setstate",{"_index":232,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.bodyuilayer.state",{"_index":220,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.cursor",{"_index":197,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.debugscenenodeprocessing(data",{"_index":233,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.deck",{"_index":207,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.deck.finalize",{"_index":225,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.deck.props.viewstate",{"_index":264,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.deck.setprops",{"_index":209,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.deckprops.debugscenenodeprocessing",{"_index":231,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.lasthovered",{"_index":274,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodeclicksubject.next",{"_index":281,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodeclicksubject.pipe(share",{"_index":51,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragendsubject",{"_index":305,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragendsubject.pipe(share",{"_index":55,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragstartsubject",{"_index":301,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragstartsubject.pipe(share",{"_index":57,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragsubject",{"_index":303,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodedragsubject.pipe(share",{"_index":53,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodehoverstartsubject.next(e.object",{"_index":275,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodehoverstartsubject.pipe(share",{"_index":59,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodehoverstopsubject.next(lasthovered",{"_index":273,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.nodehoverstopsubject.pipe(share",{"_index":61,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.props",{"_index":390,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["this.scenerotationsubject.next([deckprops.rotation",{"_index":219,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.scenerotationsubject.next([event.viewstate.rotationorbit",{"_index":297,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.scenerotationsubject.pipe(share",{"_index":63,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["this.setstate",{"_index":391,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["this.state",{"_index":394,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["this.zoomto(node",{"_index":229,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["tissue",{"_index":522,"title":{},"body":{"interfaces/Collision.html":{}}}],["tooltip",{"_index":556,"title":{},"body":{"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["transformmatrix",{"_index":258,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["translation_units",{"_index":633,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["traversal",{"_index":459,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["traversal.ts",{"_index":678,"title":{},"body":{"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{}}}],["traversescene",{"_index":458,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["traversescene(gltfscene",{"_index":491,"title":{},"body":{"interfaces/Collision.html":{}}}],["traversescene(scene",{"_index":549,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["true",{"_index":180,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["ts",{"_index":336,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["tslib",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["type",{"_index":45,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["typealiases",{"_index":761,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typescript",{"_index":166,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["typings",{"_index":340,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["ub",{"_index":574,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["ub.clone().vsub(lb",{"_index":577,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["ui",{"_index":13,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{},"index.html":{}}}],["ui.ts",{"_index":7,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/typealiases.html":{}}}],["ui.ts:126",{"_index":74,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:134",{"_index":73,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:138",{"_index":84,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:157",{"_index":69,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:181",{"_index":90,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:194",{"_index":80,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:203",{"_index":82,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:212",{"_index":88,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:221",{"_index":86,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:230",{"_index":78,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:57",{"_index":48,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:68",{"_index":52,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:69",{"_index":60,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:70",{"_index":62,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:71",{"_index":64,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:72",{"_index":58,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:73",{"_index":54,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:74",{"_index":56,"title":{},"body":{"classes/BodyUI.html":{}}}],["ui.ts:77",{"_index":41,"title":{},"body":{"classes/BodyUI.html":{}}}],["undefined",{"_index":270,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{},"miscellaneous/functions.html":{}}}],["unit",{"_index":746,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":136,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/Collision.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{}}}],["unpickable",{"_index":638,"title":{},"body":{"interfaces/SpatialSceneNode.html":{}}}],["updated_date",{"_index":609,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["upperbound",{"_index":472,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["upperbound[i",{"_index":480,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["url",{"_index":389,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/ProcessedNode.html":{}}}],["url2gltf",{"_index":403,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["url2gltf[m.scenegraph",{"_index":409,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["url2gltf[model.scenegraph",{"_index":423,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["use",{"_index":724,"title":{},"body":{"index.html":{}}}],["util/load",{"_index":350,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["util/process",{"_index":112,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["util/spatial",{"_index":353,"title":{},"body":{"classes/BodyUILayer.html":{}}}],["value",{"_index":50,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["variables",{"_index":763,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["vec3",{"_index":455,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["vec3(...lowerbound.map((n",{"_index":478,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["vec3(...upperbound.map((n",{"_index":481,"title":{},"body":{"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{}}}],["vec3(0.5",{"_index":580,"title":{},"body":{"interfaces/ProcessedNode.html":{}}}],["version",{"_index":716,"title":{},"body":{"index.html":{},"properties.html":{}}}],["vhf_kidney_l_low1').then((results",{"_index":248,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["vhf_kidney_r_low",{"_index":257,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["via",{"_index":749,"title":{},"body":{"index.html":{}}}],["views",{"_index":171,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["viewstate",{"_index":210,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["visitor",{"_index":707,"title":{},"body":{"miscellaneous/functions.html":{}}}],["void",{"_index":72,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"miscellaneous/functions.html":{}}}],["wireframe",{"_index":378,"title":{},"body":{"classes/BodyUILayer.html":{},"interfaces/Collision.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{},"miscellaneous/typealiases.html":{}}}],["worldmatrix",{"_index":545,"title":{},"body":{"interfaces/ProcessedNode.html":{},"miscellaneous/functions.html":{}}}],["wrapper",{"_index":10,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["x",{"_index":139,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["x_dimension",{"_index":610,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["x_rotation",{"_index":626,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["x_scaling",{"_index":622,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["x_translation",{"_index":630,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["y",{"_index":140,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["y_dimension",{"_index":611,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["y_rotation",{"_index":627,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["y_scaling",{"_index":623,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["y_translation",{"_index":631,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["yes",{"_index":679,"title":{},"body":{"miscellaneous/functions.html":{}}}],["z_dimension",{"_index":612,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["z_rotation",{"_index":628,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["z_scaling",{"_index":624,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["z_translation",{"_index":632,"title":{},"body":{"interfaces/SpatialEntityJsonLd.html":{},"interfaces/SpatialObjectReferenceJsonLd.html":{},"interfaces/SpatialPlacementJsonLd.html":{}}}],["zoom",{"_index":119,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["zoombasedopacity",{"_index":261,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{},"interfaces/ProcessedNode.html":{},"interfaces/SpatialSceneNode.html":{}}}],["zoomopacity",{"_index":67,"title":{},"body":{"classes/BodyUI.html":{},"classes/BodyUILayer.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["zoomto",{"_index":36,"title":{},"body":{"classes/BodyUI.html":{}}}],["zoomto(node",{"_index":89,"title":{},"body":{"classes/BodyUI.html":{},"interfaces/BodyUIProps.html":{},"interfaces/BodyUIViewStateProps.html":{},"interfaces/PickInfo.html":{}}}],["zoomtoonload",{"_index":639,"title":{},"body":{"interfaces/SpatialSceneNode.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"classes/BodyUI.html":{"url":"classes/BodyUI.html","title":"class - BodyUI","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BodyUI\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/body-ui.ts\n        \n\n\n            \n                Description\n            \n            \n                A convenience wrapper class for the CCF Body UI\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                deck\n                            \n                            \n                                    Readonly\n                                nodeClick$\n                            \n                            \n                                    Readonly\n                                nodeDrag$\n                            \n                            \n                                    Readonly\n                                nodeDragEnd$\n                            \n                            \n                                    Readonly\n                                nodeDragStart$\n                            \n                            \n                                    Readonly\n                                nodeHoverStart$\n                            \n                            \n                                    Readonly\n                                nodeHoverStop$\n                            \n                            \n                                    Readonly\n                                sceneRotation$\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                debugSceneNodeProcessing\n                            \n                            \n                                finalize\n                            \n                            \n                                    Async\n                                initialize\n                            \n                            \n                                setInteractive\n                            \n                            \n                                setRotation\n                            \n                            \n                                setRotationX\n                            \n                            \n                                setScene\n                            \n                            \n                                setTarget\n                            \n                            \n                                setZoom\n                            \n                            \n                                zoomTo\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(deckProps: Partial)\n                    \n                \n                        \n                            \n                                Defined in src/lib/body-ui.ts:77\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        deckProps\n                                                  \n                                                        \n                                                                        Partial\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        deck\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Deck\n\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:57\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeClick$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeClickSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:68\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeDrag$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeDragSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:73\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeDragEnd$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeDragEndSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:74\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeDragStart$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeDragStartSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:72\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeHoverStart$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeHoverStartSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:69\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        nodeHoverStop$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.nodeHoverStopSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:70\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Readonly\n                        sceneRotation$\n                        \n                    \n                \n            \n                \n                    \n                        Default value : this.sceneRotationSubject.pipe(share())\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui.ts:71\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        debugSceneNodeProcessing\n                        \n                    \n                \n            \n            \n                \ndebugSceneNodeProcessing(data: SpatialSceneNode[], zoomOpacity: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:157\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            SpatialSceneNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                zoomOpacity\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        finalize\n                        \n                    \n                \n            \n            \n                \nfinalize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:134\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Async\n                        initialize\n                        \n                    \n                \n            \n            \n                \n                        \n                    initialize()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:126\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     Promise\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setInteractive\n                        \n                    \n                \n            \n            \n                \nsetInteractive(value: boolean)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:230\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            boolean\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRotation\n                        \n                    \n                \n            \n            \n                \nsetRotation(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:194\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setRotationX\n                        \n                    \n                \n            \n            \n                \nsetRotationX(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:203\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setScene\n                        \n                    \n                \n            \n            \n                \nsetScene(data: SpatialSceneNode[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:138\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                data\n                                            \n                                                            SpatialSceneNode[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setTarget\n                        \n                    \n                \n            \n            \n                \nsetTarget(value: number[])\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:221\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                        number[]\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        setZoom\n                        \n                    \n                \n            \n            \n                \nsetZoom(value: number)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:212\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                value\n                                            \n                                                            number\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        zoomTo\n                        \n                    \n                \n            \n            \n                \nzoomTo(node: SpatialSceneNode)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui.ts:181\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                node\n                                            \n                                                            SpatialSceneNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         void\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView, OrthographicView } from '@deck.gl/core/typed';\nimport { Matrix4 } from '@math.gl/core';\nimport { bind } from 'bind-decorator';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer } from './body-ui-layer';\nimport { SpatialSceneNode } from './shared/spatial-scene-node';\nimport { processSceneNodes } from './util/process-scene-nodes';\n\ninterface BodyUIViewStateProps {\n  orbitAxis?: string;\n  target?: Matrix4 | number[];\n  zoom: number;\n  rotationOrbit: number;\n  rotationX: number;\n  camera: string;\n}\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n  debugSceneNodeProcessing?: boolean;\n  target: Matrix4 | number[];\n  interactive: boolean;\n  rotation: number;\n  minRotationX: number;\n  maxRotationX: number;\n  zoom: number;\n  legacyLighting?: boolean;\n  camera: string;\n}\n\nexport interface PickInfo {\n  layer: unknown;\n  index: number;\n  object: D;\n  x: number;\n  y: number;\n  coordinate?: unknown;\n  picked?: boolean;\n}\n\nexport type NodeDragEvent = {\n  node: SpatialSceneNode;\n  info: PickInfo;\n  e: MouseEvent;\n};\n\nexport type NodeClickEvent = { node: SpatialSceneNode; ctrlClick: boolean };\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n  private readonly sceneRotationSubject = new BehaviorSubject([0, 0]);\n  private readonly nodeDragStartSubject = new Subject();\n  private readonly nodeDragSubject = new Subject();\n  private readonly nodeDragEndSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n  readonly sceneRotation$ = this.sceneRotationSubject.pipe(share());\n  readonly nodeDragStart$ = this.nodeDragStartSubject.pipe(share());\n  readonly nodeDrag$ = this.nodeDragSubject.pipe(share());\n  readonly nodeDragEnd$ = this.nodeDragEndSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(private readonly deckProps: Partial) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const props: any = {\n      ...deckProps,\n      views: [\n        deckProps.camera === 'orthographic'\n          ? new OrthographicView({ flipY: false, near: -1000 })\n          : new OrbitView({ orbitAxis: 'Y' }),\n      ],\n      controller: deckProps.interactive ?? true,\n      layers: [this.bodyUILayer],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      onDragStart: this._onDragStart,\n      onDrag: this._onDrag,\n      onDragEnd: this._onDragEnd,\n      getCursor: (e: { isDragging: boolean }) => this.cursor ?? (e.isDragging ? 'grabbing' : 'grab'),\n    };\n    if (deckProps.legacyLighting) {\n      props.effects = [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0,\n          }),\n        }),\n      ];\n    }\n    this.deck = new Deck(props);\n    this.deck.setProps({\n      viewState: {\n        orbitAxis: 'Y',\n        minRotationX: deckProps.minRotationX ?? -15,\n        maxRotationX: deckProps.maxRotationX ?? 15,\n        target: deckProps.target ?? [0.5, 0.5, 0],\n        rotationX: 0,\n        rotationOrbit: deckProps.rotation ?? 0,\n        zoom: deckProps.zoom ?? 9.5,\n        camera: deckProps.camera,\n      } as BodyUIViewStateProps,\n    });\n    if (deckProps.rotation) {\n      this.sceneRotationSubject.next([deckProps.rotation, 0]);\n    }\n  }\n\n  async initialize(): Promise {\n    while (!this.bodyUILayer.state) {\n      await new Promise((r) => {\n        setTimeout(r, 200);\n      });\n    }\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      let zoomOpacity = (this.bodyUILayer.state as { zoomOpacity: number }).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      zoomOpacity = didZoom ? 0.05 : zoomOpacity;\n      if (!this.deckProps.debugSceneNodeProcessing) {\n        this.bodyUILayer.setState({ data, zoomOpacity });\n      } else {\n        this.debugSceneNodeProcessing(data, zoomOpacity);\n      }\n    }\n  }\n\n  debugSceneNodeProcessing(data: SpatialSceneNode[], zoomOpacity: number): void {\n    const gltfUrl =\n      'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Female/United/VHF_United_Color.glb';\n    const gltfTransform = new Matrix4([\n      0.076, 0, 0, 0, 0, 0.076, 1.6875389974302382e-17, 0, 0, -1.6875389974302382e-17, 0.076, 0, 0.49, 0.034, 0.11, 1,\n    ]);\n    processSceneNodes(gltfUrl, gltfTransform, 'VHF_Kidney_L_Low1').then((results) => {\n      console.log('results', results);\n      console.log('data', data);\n      data = data.concat(Object.values(results));\n      data.push({\n        '@id': 'TEST',\n        '@type': 'TEST',\n        scenegraph: gltfUrl,\n        scenegraphNode: 'VHF_Kidney_R_Low',\n        transformMatrix: gltfTransform,\n        color: [255, 255, 255, 200],\n        _lighting: 'pbr',\n        zoomBasedOpacity: false,\n      });\n      this.bodyUILayer.setState({ data, zoomOpacity });\n    });\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotation(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationOrbit: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotationX(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationX: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setZoom(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        zoom: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setTarget(value: number[]): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setInteractive(value: boolean): void {\n    this.deck.setProps({\n      controller: value,\n    });\n  }\n\n  @bind\n  private _onHover(e: { picked: boolean; object: SpatialSceneNode }): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object?.['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(info: PickInfo, e: { srcEvent: { ctrlKey: boolean } }): void {\n    if (info.picked && info.object?.['@id']) {\n      this.nodeClickSubject.next({\n        node: info.object,\n        ctrlClick: e?.srcEvent?.ctrlKey ?? undefined,\n      });\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: {\n    interactionState: { isZooming: boolean };\n    viewState: BodyUIViewStateProps;\n  }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {\n        zoomOpacity: number;\n        data: unknown;\n      };\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 2, 0.05), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({ data: currentState.data, zoomOpacity });\n      }\n    }\n    this.deck.setProps({ viewState: { ...event.viewState } });\n    this.sceneRotationSubject.next([event.viewState.rotationOrbit, event.viewState.rotationX]);\n  }\n\n  @bind\n  private _onDragStart(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragStartSubject);\n  }\n\n  @bind\n  private _onDrag(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragSubject);\n  }\n\n  @bind\n  private _onDragEnd(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragEndSubject);\n  }\n\n  private _dragEvent(info: PickInfo, e: MouseEvent, subject: Subject): void {\n    if (info?.object?.['@id']) {\n      subject.next({ node: info.object, info, e });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/BodyUILayer.html":{"url":"classes/BodyUILayer.html","title":"class - BodyUILayer","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  BodyUILayer\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/body-ui-layer.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        CompositeLayer\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Static\n                                    Readonly\n                                gltfCache\n                            \n                            \n                                    Static\n                                    \n                                    Readonly\n                                layerName\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    \n                                getPickingInfo\n                            \n                            \n                                    \n                                initializeState\n                            \n                            \n                                renderLayers\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            Readonly\n                        gltfCache\n                        \n                    \n                \n            \n                \n                    \n                        Type :     literal type\n\n                    \n                \n                \n                    \n                        Default value : {}\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui-layer.ts:83\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Static\n                            \n                            Readonly\n                        layerName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Default value : 'BodyUILayer'\n                    \n                \n                    \n                        \n                                Defined in src/lib/body-ui-layer.ts:82\n                        \n                    \n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        getPickingInfo\n                        \n                    \n                \n            \n            \n                \n                        \n                    getPickingInfo(e)\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui-layer.ts:196\n                        \n                    \n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                e\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     ReturnType<>\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                            \n                        initializeState\n                        \n                    \n                \n            \n            \n                \n                        \n                    initializeState()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui-layer.ts:85\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        renderLayers\n                        \n                    \n                \n            \n            \n                \nrenderLayers()\n                \n            \n\n\n                    \n                        \n                            Defined in src/lib/body-ui-layer.ts:91\n                        \n                    \n\n\n            \n                \n\n                        \n                            Returns :     LayersList\n\n                        \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CompositeLayer, COORDINATE_SYSTEM, LayersList } from '@deck.gl/core/typed';\nimport { TextLayer } from '@deck.gl/layers/typed';\nimport { ScenegraphLayer, SimpleMeshLayer } from '@deck.gl/mesh-layers/typed';\n// eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore Ignore missing typings\nimport { ConeGeometry, CubeGeometry, CylinderGeometry, Geometry, SphereGeometry } from '@luma.gl/core';\nimport { Matrix4 } from '@math.gl/core';\n\nimport { SpatialSceneNode } from './shared/spatial-scene-node';\nimport { loadGLTF, loadGLTF2, registerGLTFLoaders } from './util/load-gltf';\nimport { doCollisions } from './util/spatial-scene-collider';\n\nfunction meshLayer(\n  id: string,\n  data: SpatialSceneNode[],\n  options: { [key: string]: unknown },\n): SimpleMeshLayer | undefined {\n  if (!data || data.length === 0) {\n    return undefined;\n  } else {\n    let mesh: Geometry;\n    switch (options['geometry']) {\n      case 'sphere':\n        mesh = new SphereGeometry();\n        break;\n      case 'cone':\n        mesh = new ConeGeometry();\n        break;\n      case 'cylinder':\n        mesh = new CylinderGeometry();\n        break;\n      case 'cube':\n      default:\n        mesh = new CubeGeometry();\n        break;\n    }\n    return new SimpleMeshLayer({\n      ...{\n        id,\n        pickable: true,\n        autoHighlight: false,\n        highlightColor: [30, 136, 229, 255],\n        coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n        data,\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        mesh: mesh as any,\n        wireframe: false,\n        getColor: (d) => (d as { color: [number, number, number, number] }).color || [255, 255, 255, 0.9 * 255],\n        getTransformMatrix: (d) => (d as { transformMatrix: number[] }).transformMatrix,\n      },\n      ...options,\n    });\n  }\n}\n\nfunction textLayer(\n  id: string,\n  data: SpatialSceneNode[],\n  options: { [key: string]: unknown },\n): TextLayer | undefined {\n  if (!data || data.length === 0) {\n    return undefined;\n  } else {\n    return new TextLayer({\n      ...{\n        id,\n        pickable: true,\n        data: data.map((d) => ({\n          ...d,\n          position: new Matrix4(d.transformMatrix).getTranslation(),\n        })),\n        getText: (d) => (d as { text: string }).text,\n        getPosition: (d) => (d as { position: [number, number] }).position,\n        getColor: (d) => (d as { color: [number, number, number, number] }).color,\n      },\n      ...options,\n    });\n  }\n}\n\nexport class BodyUILayer extends CompositeLayer {\n  static override readonly layerName = 'BodyUILayer';\n  static readonly gltfCache: { [url: string]: Promise } = {};\n\n  override initializeState(): void {\n    const { data } = this.props;\n    this.setState({ data: data ?? [], zoomOpacity: 0.8, doCollisions: false });\n    registerGLTFLoaders();\n  }\n\n  renderLayers(): LayersList {\n    const state = this.state as {\n      data: SpatialSceneNode[];\n      zoomOpacity: number;\n      doCollisions: boolean;\n    };\n    const geometries: Record = {\n      sphere: [],\n      cone: [],\n      cylinder: [],\n      cube: [],\n      text: [],\n      wireframe: [],\n      scenegraph: [],\n    };\n\n    for (const node of state.data) {\n      const geometry = node.geometry ?? 'cube';\n      if (node.scenegraph) {\n        geometries['scenegraph'].push(node);\n      } else if (geometries[geometry] !== undefined) {\n        geometries[geometry].push(node);\n      }\n    }\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const url2gltf: { [url: string]: Promise } = {};\n    for (const m of geometries['scenegraph']) {\n      if (m.scenegraph && m.scenegraphNode && !Object.prototype.hasOwnProperty.call(url2gltf, m.scenegraph)) {\n        url2gltf[m.scenegraph] = loadGLTF({ scenegraph: m.scenegraph } as SpatialSceneNode, BodyUILayer.gltfCache);\n      }\n    }\n\n    const layers: unknown[] = [];\n    for (const [geometry, nodes] of Object.entries(geometries)) {\n      if (geometry === 'scenegraph') {\n        for (const model of nodes) {\n          layers.push(\n            new ScenegraphLayer({\n              id: 'models-' + model['@id'],\n              opacity: model.zoomBasedOpacity ? state.zoomOpacity : model.opacity ?? 1.0,\n              pickable: !model.unpickable,\n              coordinateSystem: COORDINATE_SYSTEM.CARTESIAN,\n              data: [model],\n              scenegraph: model.scenegraphNode\n                ? loadGLTF2(model.scenegraphNode, url2gltf[model.scenegraph as string])\n                : (model.scenegraph as unknown as URL),\n              // eslint-disable-next-line @typescript-eslint/naming-convention\n              _lighting: model._lighting as 'pbr', // 'pbr' | undefined\n              getTransformMatrix: model.transformMatrix,\n              getColor: model.color ?? [0, 255, 0, 0.5 * 255],\n              parameters: {\n                depthMask: !model.zoomBasedOpacity && (model.opacity === undefined || model.opacity === 1),\n              },\n            }),\n          );\n        }\n      } else if (geometry === 'text') {\n        layers.push(\n          textLayer(\n            'text',\n            nodes.filter((n) => n.unpickable),\n            { pickable: false },\n          ),\n        );\n        layers.push(\n          textLayer(\n            'textPickable',\n            nodes.filter((n) => !n.unpickable),\n            { pickable: true },\n          ),\n        );\n      } else if (geometry === 'wireframe') {\n        layers.push(\n          meshLayer(geometry, nodes, {\n            wireframe: true,\n            pickable: false,\n            geometry,\n          }),\n        );\n      } else {\n        layers.push(\n          meshLayer(\n            geometry,\n            nodes.filter((n) => n.unpickable),\n            { wireframe: false, pickable: false, geometry },\n          ),\n        );\n        layers.push(\n          meshLayer(\n            `${geometry}Pickable`,\n            nodes.filter((n) => !n.unpickable),\n            { wireframe: false, pickable: true, geometry },\n          ),\n        );\n      }\n    }\n\n    if (state.doCollisions) {\n      doCollisions(state.data);\n    }\n\n    return layers.filter((l) => !!l) as LayersList;\n  }\n\n  override getPickingInfo(\n    e: Parameters['getPickingInfo']>[0],\n  ): ReturnType['getPickingInfo']> {\n    return e.info;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BodyUIProps.html":{"url":"interfaces/BodyUIProps.html","title":"interface - BodyUIProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BodyUIProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/body-ui.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            camera\n                                        \n                                \n                                \n                                        \n                                            canvas\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            debugSceneNodeProcessing\n                                        \n                                \n                                \n                                        \n                                            id\n                                        \n                                \n                                \n                                        \n                                            interactive\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            legacyLighting\n                                        \n                                \n                                \n                                        \n                                            maxRotationX\n                                        \n                                \n                                \n                                        \n                                            minRotationX\n                                        \n                                \n                                \n                                        \n                                            parent\n                                        \n                                \n                                \n                                        \n                                            rotation\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        camera\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        camera:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        canvas\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        canvas:     string | HTMLCanvasElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | HTMLCanvasElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        debugSceneNodeProcessing\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        debugSceneNodeProcessing:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        interactive\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        interactive:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        legacyLighting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        legacyLighting:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        maxRotationX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        maxRotationX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        minRotationX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        minRotationX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        parent\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        parent:     HTMLElement\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     HTMLElement\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:     Matrix4 | number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Matrix4 | number[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView, OrthographicView } from '@deck.gl/core/typed';\nimport { Matrix4 } from '@math.gl/core';\nimport { bind } from 'bind-decorator';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer } from './body-ui-layer';\nimport { SpatialSceneNode } from './shared/spatial-scene-node';\nimport { processSceneNodes } from './util/process-scene-nodes';\n\ninterface BodyUIViewStateProps {\n  orbitAxis?: string;\n  target?: Matrix4 | number[];\n  zoom: number;\n  rotationOrbit: number;\n  rotationX: number;\n  camera: string;\n}\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n  debugSceneNodeProcessing?: boolean;\n  target: Matrix4 | number[];\n  interactive: boolean;\n  rotation: number;\n  minRotationX: number;\n  maxRotationX: number;\n  zoom: number;\n  legacyLighting?: boolean;\n  camera: string;\n}\n\nexport interface PickInfo {\n  layer: unknown;\n  index: number;\n  object: D;\n  x: number;\n  y: number;\n  coordinate?: unknown;\n  picked?: boolean;\n}\n\nexport type NodeDragEvent = {\n  node: SpatialSceneNode;\n  info: PickInfo;\n  e: MouseEvent;\n};\n\nexport type NodeClickEvent = { node: SpatialSceneNode; ctrlClick: boolean };\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n  private readonly sceneRotationSubject = new BehaviorSubject([0, 0]);\n  private readonly nodeDragStartSubject = new Subject();\n  private readonly nodeDragSubject = new Subject();\n  private readonly nodeDragEndSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n  readonly sceneRotation$ = this.sceneRotationSubject.pipe(share());\n  readonly nodeDragStart$ = this.nodeDragStartSubject.pipe(share());\n  readonly nodeDrag$ = this.nodeDragSubject.pipe(share());\n  readonly nodeDragEnd$ = this.nodeDragEndSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(private readonly deckProps: Partial) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const props: any = {\n      ...deckProps,\n      views: [\n        deckProps.camera === 'orthographic'\n          ? new OrthographicView({ flipY: false, near: -1000 })\n          : new OrbitView({ orbitAxis: 'Y' }),\n      ],\n      controller: deckProps.interactive ?? true,\n      layers: [this.bodyUILayer],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      onDragStart: this._onDragStart,\n      onDrag: this._onDrag,\n      onDragEnd: this._onDragEnd,\n      getCursor: (e: { isDragging: boolean }) => this.cursor ?? (e.isDragging ? 'grabbing' : 'grab'),\n    };\n    if (deckProps.legacyLighting) {\n      props.effects = [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0,\n          }),\n        }),\n      ];\n    }\n    this.deck = new Deck(props);\n    this.deck.setProps({\n      viewState: {\n        orbitAxis: 'Y',\n        minRotationX: deckProps.minRotationX ?? -15,\n        maxRotationX: deckProps.maxRotationX ?? 15,\n        target: deckProps.target ?? [0.5, 0.5, 0],\n        rotationX: 0,\n        rotationOrbit: deckProps.rotation ?? 0,\n        zoom: deckProps.zoom ?? 9.5,\n        camera: deckProps.camera,\n      } as BodyUIViewStateProps,\n    });\n    if (deckProps.rotation) {\n      this.sceneRotationSubject.next([deckProps.rotation, 0]);\n    }\n  }\n\n  async initialize(): Promise {\n    while (!this.bodyUILayer.state) {\n      await new Promise((r) => {\n        setTimeout(r, 200);\n      });\n    }\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      let zoomOpacity = (this.bodyUILayer.state as { zoomOpacity: number }).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      zoomOpacity = didZoom ? 0.05 : zoomOpacity;\n      if (!this.deckProps.debugSceneNodeProcessing) {\n        this.bodyUILayer.setState({ data, zoomOpacity });\n      } else {\n        this.debugSceneNodeProcessing(data, zoomOpacity);\n      }\n    }\n  }\n\n  debugSceneNodeProcessing(data: SpatialSceneNode[], zoomOpacity: number): void {\n    const gltfUrl =\n      'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Female/United/VHF_United_Color.glb';\n    const gltfTransform = new Matrix4([\n      0.076, 0, 0, 0, 0, 0.076, 1.6875389974302382e-17, 0, 0, -1.6875389974302382e-17, 0.076, 0, 0.49, 0.034, 0.11, 1,\n    ]);\n    processSceneNodes(gltfUrl, gltfTransform, 'VHF_Kidney_L_Low1').then((results) => {\n      console.log('results', results);\n      console.log('data', data);\n      data = data.concat(Object.values(results));\n      data.push({\n        '@id': 'TEST',\n        '@type': 'TEST',\n        scenegraph: gltfUrl,\n        scenegraphNode: 'VHF_Kidney_R_Low',\n        transformMatrix: gltfTransform,\n        color: [255, 255, 255, 200],\n        _lighting: 'pbr',\n        zoomBasedOpacity: false,\n      });\n      this.bodyUILayer.setState({ data, zoomOpacity });\n    });\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotation(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationOrbit: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotationX(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationX: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setZoom(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        zoom: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setTarget(value: number[]): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setInteractive(value: boolean): void {\n    this.deck.setProps({\n      controller: value,\n    });\n  }\n\n  @bind\n  private _onHover(e: { picked: boolean; object: SpatialSceneNode }): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object?.['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(info: PickInfo, e: { srcEvent: { ctrlKey: boolean } }): void {\n    if (info.picked && info.object?.['@id']) {\n      this.nodeClickSubject.next({\n        node: info.object,\n        ctrlClick: e?.srcEvent?.ctrlKey ?? undefined,\n      });\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: {\n    interactionState: { isZooming: boolean };\n    viewState: BodyUIViewStateProps;\n  }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {\n        zoomOpacity: number;\n        data: unknown;\n      };\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 2, 0.05), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({ data: currentState.data, zoomOpacity });\n      }\n    }\n    this.deck.setProps({ viewState: { ...event.viewState } });\n    this.sceneRotationSubject.next([event.viewState.rotationOrbit, event.viewState.rotationX]);\n  }\n\n  @bind\n  private _onDragStart(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragStartSubject);\n  }\n\n  @bind\n  private _onDrag(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragSubject);\n  }\n\n  @bind\n  private _onDragEnd(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragEndSubject);\n  }\n\n  private _dragEvent(info: PickInfo, e: MouseEvent, subject: Subject): void {\n    if (info?.object?.['@id']) {\n      subject.next({ node: info.object, info, e });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/BodyUIViewStateProps.html":{"url":"interfaces/BodyUIViewStateProps.html","title":"interface - BodyUIViewStateProps","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  BodyUIViewStateProps\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/body-ui.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            camera\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            orbitAxis\n                                        \n                                \n                                \n                                        \n                                            rotationOrbit\n                                        \n                                \n                                \n                                        \n                                            rotationX\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            zoom\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        camera\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        camera:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        orbitAxis\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        orbitAxis:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotationOrbit\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotationOrbit:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotationX\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotationX:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:     Matrix4 | number[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Matrix4 | number[]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoom\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoom:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView, OrthographicView } from '@deck.gl/core/typed';\nimport { Matrix4 } from '@math.gl/core';\nimport { bind } from 'bind-decorator';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer } from './body-ui-layer';\nimport { SpatialSceneNode } from './shared/spatial-scene-node';\nimport { processSceneNodes } from './util/process-scene-nodes';\n\ninterface BodyUIViewStateProps {\n  orbitAxis?: string;\n  target?: Matrix4 | number[];\n  zoom: number;\n  rotationOrbit: number;\n  rotationX: number;\n  camera: string;\n}\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n  debugSceneNodeProcessing?: boolean;\n  target: Matrix4 | number[];\n  interactive: boolean;\n  rotation: number;\n  minRotationX: number;\n  maxRotationX: number;\n  zoom: number;\n  legacyLighting?: boolean;\n  camera: string;\n}\n\nexport interface PickInfo {\n  layer: unknown;\n  index: number;\n  object: D;\n  x: number;\n  y: number;\n  coordinate?: unknown;\n  picked?: boolean;\n}\n\nexport type NodeDragEvent = {\n  node: SpatialSceneNode;\n  info: PickInfo;\n  e: MouseEvent;\n};\n\nexport type NodeClickEvent = { node: SpatialSceneNode; ctrlClick: boolean };\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n  private readonly sceneRotationSubject = new BehaviorSubject([0, 0]);\n  private readonly nodeDragStartSubject = new Subject();\n  private readonly nodeDragSubject = new Subject();\n  private readonly nodeDragEndSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n  readonly sceneRotation$ = this.sceneRotationSubject.pipe(share());\n  readonly nodeDragStart$ = this.nodeDragStartSubject.pipe(share());\n  readonly nodeDrag$ = this.nodeDragSubject.pipe(share());\n  readonly nodeDragEnd$ = this.nodeDragEndSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(private readonly deckProps: Partial) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const props: any = {\n      ...deckProps,\n      views: [\n        deckProps.camera === 'orthographic'\n          ? new OrthographicView({ flipY: false, near: -1000 })\n          : new OrbitView({ orbitAxis: 'Y' }),\n      ],\n      controller: deckProps.interactive ?? true,\n      layers: [this.bodyUILayer],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      onDragStart: this._onDragStart,\n      onDrag: this._onDrag,\n      onDragEnd: this._onDragEnd,\n      getCursor: (e: { isDragging: boolean }) => this.cursor ?? (e.isDragging ? 'grabbing' : 'grab'),\n    };\n    if (deckProps.legacyLighting) {\n      props.effects = [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0,\n          }),\n        }),\n      ];\n    }\n    this.deck = new Deck(props);\n    this.deck.setProps({\n      viewState: {\n        orbitAxis: 'Y',\n        minRotationX: deckProps.minRotationX ?? -15,\n        maxRotationX: deckProps.maxRotationX ?? 15,\n        target: deckProps.target ?? [0.5, 0.5, 0],\n        rotationX: 0,\n        rotationOrbit: deckProps.rotation ?? 0,\n        zoom: deckProps.zoom ?? 9.5,\n        camera: deckProps.camera,\n      } as BodyUIViewStateProps,\n    });\n    if (deckProps.rotation) {\n      this.sceneRotationSubject.next([deckProps.rotation, 0]);\n    }\n  }\n\n  async initialize(): Promise {\n    while (!this.bodyUILayer.state) {\n      await new Promise((r) => {\n        setTimeout(r, 200);\n      });\n    }\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      let zoomOpacity = (this.bodyUILayer.state as { zoomOpacity: number }).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      zoomOpacity = didZoom ? 0.05 : zoomOpacity;\n      if (!this.deckProps.debugSceneNodeProcessing) {\n        this.bodyUILayer.setState({ data, zoomOpacity });\n      } else {\n        this.debugSceneNodeProcessing(data, zoomOpacity);\n      }\n    }\n  }\n\n  debugSceneNodeProcessing(data: SpatialSceneNode[], zoomOpacity: number): void {\n    const gltfUrl =\n      'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Female/United/VHF_United_Color.glb';\n    const gltfTransform = new Matrix4([\n      0.076, 0, 0, 0, 0, 0.076, 1.6875389974302382e-17, 0, 0, -1.6875389974302382e-17, 0.076, 0, 0.49, 0.034, 0.11, 1,\n    ]);\n    processSceneNodes(gltfUrl, gltfTransform, 'VHF_Kidney_L_Low1').then((results) => {\n      console.log('results', results);\n      console.log('data', data);\n      data = data.concat(Object.values(results));\n      data.push({\n        '@id': 'TEST',\n        '@type': 'TEST',\n        scenegraph: gltfUrl,\n        scenegraphNode: 'VHF_Kidney_R_Low',\n        transformMatrix: gltfTransform,\n        color: [255, 255, 255, 200],\n        _lighting: 'pbr',\n        zoomBasedOpacity: false,\n      });\n      this.bodyUILayer.setState({ data, zoomOpacity });\n    });\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotation(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationOrbit: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotationX(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationX: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setZoom(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        zoom: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setTarget(value: number[]): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setInteractive(value: boolean): void {\n    this.deck.setProps({\n      controller: value,\n    });\n  }\n\n  @bind\n  private _onHover(e: { picked: boolean; object: SpatialSceneNode }): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object?.['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(info: PickInfo, e: { srcEvent: { ctrlKey: boolean } }): void {\n    if (info.picked && info.object?.['@id']) {\n      this.nodeClickSubject.next({\n        node: info.object,\n        ctrlClick: e?.srcEvent?.ctrlKey ?? undefined,\n      });\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: {\n    interactionState: { isZooming: boolean };\n    viewState: BodyUIViewStateProps;\n  }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {\n        zoomOpacity: number;\n        data: unknown;\n      };\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 2, 0.05), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({ data: currentState.data, zoomOpacity });\n      }\n    }\n    this.deck.setProps({ viewState: { ...event.viewState } });\n    this.sceneRotationSubject.next([event.viewState.rotationOrbit, event.viewState.rotationX]);\n  }\n\n  @bind\n  private _onDragStart(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragStartSubject);\n  }\n\n  @bind\n  private _onDrag(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragSubject);\n  }\n\n  @bind\n  private _onDragEnd(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragEndSubject);\n  }\n\n  private _dragEvent(info: PickInfo, e: MouseEvent, subject: Subject): void {\n    if (info?.object?.['@id']) {\n      subject.next({ node: info.object, info, e });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/Collision.html":{"url":"interfaces/Collision.html","title":"interface - Collision","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  Collision\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/util/spatial-scene-collider.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            @id\n                                        \n                                \n                                \n                                        \n                                            hits\n                                        \n                                \n                                \n                                        \n                                            name\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        hits\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        hits:     literal type[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     literal type[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { load } from '@loaders.gl/core';\nimport { DracoLoader } from '@loaders.gl/draco';\nimport { GLTFLoader } from '@loaders.gl/gltf';\nimport { Matrix4 } from '@math.gl/core';\nimport { AABB, Vec3 } from 'cannon-es';\n\nimport { SpatialSceneNode } from '../shared/spatial-scene-node';\nimport { traverseScene } from './scene-traversal';\n\ninterface Collision {\n  '@id': string;\n  name: string;\n  hits: { '@id': string; name: string }[];\n}\n\n/* eslint-disable  */\nexport async function doCollisions(scene: SpatialSceneNode[]): Promise {\n  console.log('Starting Collisioning');\n  const sourceBoxes = scene\n    .filter((d) => !d.scenegraph && d.geometry !== 'wireframe')\n    .map((model) => {\n      const mat = new Matrix4(model.transformMatrix);\n      const lowerBound = mat.transformAsPoint([-1, -1, -1], []);\n      const upperBound = mat.transformAsPoint([1, 1, 1], []);\n      return {\n        '@id': model['@id'],\n        name: model.tooltip,\n        entityId: model.entityId,\n        bbox: new AABB({\n          lowerBound: new Vec3(...lowerBound.map((n, i) => Math.min(n, upperBound[i]))),\n          upperBound: new Vec3(...upperBound.map((n, i) => Math.max(n, lowerBound[i]))),\n        }),\n      };\n    });\n\n  const targetBoxes: {\n    '@id': string;\n    name: string;\n    entityId?: string;\n    bbox: AABB;\n    gltf: unknown;\n  }[] = [];\n  for (const model of scene.filter((d) => !!d.scenegraph)) {\n    const gltf = await load(model.scenegraph as string, GLTFLoader, {\n      DracoLoader,\n      decompress: true,\n      postProcess: true,\n    });\n    for (const gltfScene of gltf.scenes) {\n      traverseScene(gltfScene, new Matrix4(model.transformMatrix), (node, modelMatrix) => {\n        if (node.mesh && node.mesh.primitives && node.mesh.primitives.length > 0) {\n          for (const primitive of node.mesh.primitives) {\n            if (primitive.attributes.POSITION && primitive.attributes.POSITION.min) {\n              const lowerBound = modelMatrix.transformAsPoint(primitive.attributes.POSITION.min, []);\n              const upperBound = modelMatrix.transformAsPoint(primitive.attributes.POSITION.max, []);\n              targetBoxes.push({\n                '@id': model['@id'],\n                name: node.name,\n                entityId: model.entityId,\n                bbox: new AABB({\n                  lowerBound: new Vec3(...lowerBound.map((n, i) => Math.min(n, upperBound[i]))),\n                  upperBound: new Vec3(...upperBound.map((n, i) => Math.max(n, lowerBound[i]))),\n                }),\n                gltf,\n              });\n            }\n          }\n        }\n        return true;\n      });\n    }\n  }\n\n  const report: Collision[] = [];\n  const sad: unknown[] = [];\n  for (const src of sourceBoxes) {\n    const hits: { '@id': string; name: string }[] = [];\n    for (const target of targetBoxes) {\n      if (src.bbox.overlaps(target.bbox)) {\n        hits.push({ '@id': target['@id'], name: target.name });\n      }\n    }\n    if (hits.length > 0) {\n      report.push({\n        '@id': src.entityId as string,\n        name: src.name as string,\n        hits,\n      });\n    } else {\n      sad.push(src);\n    }\n  }\n\n  console.log({\n    sourceBoxes,\n    targetBoxes,\n    report,\n    sad,\n    maxHits: Math.max(...report.map((r) => r.hits.length)),\n  });\n\n  const csvReport: unknown[] = [];\n  for (const hit of report) {\n    csvReport.push({\n      'Tissue ID': hit['@id'],\n      'Tissue Name': hit.name,\n      'Hit ID': '',\n      'Hit Name': '',\n    });\n    for (const h of hit.hits) {\n      csvReport.push({\n        'Tissue ID': hit['@id'],\n        'Tissue Name': hit.name,\n        'Hit ID': h['@id'],\n        'Hit Name': h.name,\n      });\n    }\n  }\n  console.log(csvReport);\n\n  return report;\n}\n/* eslint-enable */\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/PickInfo.html":{"url":"interfaces/PickInfo.html","title":"interface - PickInfo","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  PickInfo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/body-ui.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            coordinate\n                                        \n                                \n                                \n                                        \n                                            index\n                                        \n                                \n                                \n                                        \n                                            layer\n                                        \n                                \n                                \n                                        \n                                            object\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            picked\n                                        \n                                \n                                \n                                        \n                                            x\n                                        \n                                \n                                \n                                        \n                                            y\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        coordinate\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        coordinate:     \n\n                                    \n                                \n\n\n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        index\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        index:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        layer\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        layer:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:     D\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     D\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        picked\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        picked:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { AmbientLight, Deck, LightingEffect, OrbitView, OrthographicView } from '@deck.gl/core/typed';\nimport { Matrix4 } from '@math.gl/core';\nimport { bind } from 'bind-decorator';\nimport { BehaviorSubject, Subject } from 'rxjs';\nimport { share } from 'rxjs/operators';\n\nimport { BodyUILayer } from './body-ui-layer';\nimport { SpatialSceneNode } from './shared/spatial-scene-node';\nimport { processSceneNodes } from './util/process-scene-nodes';\n\ninterface BodyUIViewStateProps {\n  orbitAxis?: string;\n  target?: Matrix4 | number[];\n  zoom: number;\n  rotationOrbit: number;\n  rotationX: number;\n  camera: string;\n}\n\nexport interface BodyUIProps {\n  id: string;\n  canvas: string | HTMLCanvasElement;\n  parent: HTMLElement;\n  debugSceneNodeProcessing?: boolean;\n  target: Matrix4 | number[];\n  interactive: boolean;\n  rotation: number;\n  minRotationX: number;\n  maxRotationX: number;\n  zoom: number;\n  legacyLighting?: boolean;\n  camera: string;\n}\n\nexport interface PickInfo {\n  layer: unknown;\n  index: number;\n  object: D;\n  x: number;\n  y: number;\n  coordinate?: unknown;\n  picked?: boolean;\n}\n\nexport type NodeDragEvent = {\n  node: SpatialSceneNode;\n  info: PickInfo;\n  e: MouseEvent;\n};\n\nexport type NodeClickEvent = { node: SpatialSceneNode; ctrlClick: boolean };\n\n/**\n * A convenience wrapper class for the CCF Body UI\n */\nexport class BodyUI {\n  deck: Deck;\n  private readonly bodyUILayer = new BodyUILayer({});\n\n  private readonly nodeClickSubject = new Subject();\n  private readonly nodeHoverStartSubject = new Subject();\n  private readonly nodeHoverStopSubject = new Subject();\n  private readonly sceneRotationSubject = new BehaviorSubject([0, 0]);\n  private readonly nodeDragStartSubject = new Subject();\n  private readonly nodeDragSubject = new Subject();\n  private readonly nodeDragEndSubject = new Subject();\n\n  readonly nodeClick$ = this.nodeClickSubject.pipe(share());\n  readonly nodeHoverStart$ = this.nodeHoverStartSubject.pipe(share());\n  readonly nodeHoverStop$ = this.nodeHoverStopSubject.pipe(share());\n  readonly sceneRotation$ = this.sceneRotationSubject.pipe(share());\n  readonly nodeDragStart$ = this.nodeDragStartSubject.pipe(share());\n  readonly nodeDrag$ = this.nodeDragSubject.pipe(share());\n  readonly nodeDragEnd$ = this.nodeDragEndSubject.pipe(share());\n\n  private cursor?: string;\n  private lastHovered?: SpatialSceneNode;\n\n  constructor(private readonly deckProps: Partial) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    const props: any = {\n      ...deckProps,\n      views: [\n        deckProps.camera === 'orthographic'\n          ? new OrthographicView({ flipY: false, near: -1000 })\n          : new OrbitView({ orbitAxis: 'Y' }),\n      ],\n      controller: deckProps.interactive ?? true,\n      layers: [this.bodyUILayer],\n      onHover: this._onHover,\n      onClick: this._onClick,\n      onViewStateChange: this._onViewStateChange,\n      onDragStart: this._onDragStart,\n      onDrag: this._onDrag,\n      onDragEnd: this._onDragEnd,\n      getCursor: (e: { isDragging: boolean }) => this.cursor ?? (e.isDragging ? 'grabbing' : 'grab'),\n    };\n    if (deckProps.legacyLighting) {\n      props.effects = [\n        new LightingEffect({\n          ambientLight: new AmbientLight({\n            color: [255, 255, 255],\n            intensity: 10.0,\n          }),\n        }),\n      ];\n    }\n    this.deck = new Deck(props);\n    this.deck.setProps({\n      viewState: {\n        orbitAxis: 'Y',\n        minRotationX: deckProps.minRotationX ?? -15,\n        maxRotationX: deckProps.maxRotationX ?? 15,\n        target: deckProps.target ?? [0.5, 0.5, 0],\n        rotationX: 0,\n        rotationOrbit: deckProps.rotation ?? 0,\n        zoom: deckProps.zoom ?? 9.5,\n        camera: deckProps.camera,\n      } as BodyUIViewStateProps,\n    });\n    if (deckProps.rotation) {\n      this.sceneRotationSubject.next([deckProps.rotation, 0]);\n    }\n  }\n\n  async initialize(): Promise {\n    while (!this.bodyUILayer.state) {\n      await new Promise((r) => {\n        setTimeout(r, 200);\n      });\n    }\n  }\n\n  finalize(): void {\n    this.deck.finalize();\n  }\n\n  setScene(data: SpatialSceneNode[]): void {\n    if (data?.length > 0) {\n      let zoomOpacity = (this.bodyUILayer.state as { zoomOpacity: number }).zoomOpacity;\n      let didZoom = false;\n      for (const node of data) {\n        if (node.zoomToOnLoad) {\n          this.zoomTo(node);\n          didZoom = true;\n        }\n      }\n      zoomOpacity = didZoom ? 0.05 : zoomOpacity;\n      if (!this.deckProps.debugSceneNodeProcessing) {\n        this.bodyUILayer.setState({ data, zoomOpacity });\n      } else {\n        this.debugSceneNodeProcessing(data, zoomOpacity);\n      }\n    }\n  }\n\n  debugSceneNodeProcessing(data: SpatialSceneNode[], zoomOpacity: number): void {\n    const gltfUrl =\n      'https://hubmapconsortium.github.io/ccf-3d-reference-object-library/VH_Female/United/VHF_United_Color.glb';\n    const gltfTransform = new Matrix4([\n      0.076, 0, 0, 0, 0, 0.076, 1.6875389974302382e-17, 0, 0, -1.6875389974302382e-17, 0.076, 0, 0.49, 0.034, 0.11, 1,\n    ]);\n    processSceneNodes(gltfUrl, gltfTransform, 'VHF_Kidney_L_Low1').then((results) => {\n      console.log('results', results);\n      console.log('data', data);\n      data = data.concat(Object.values(results));\n      data.push({\n        '@id': 'TEST',\n        '@type': 'TEST',\n        scenegraph: gltfUrl,\n        scenegraphNode: 'VHF_Kidney_R_Low',\n        transformMatrix: gltfTransform,\n        color: [255, 255, 255, 200],\n        _lighting: 'pbr',\n        zoomBasedOpacity: false,\n      });\n      this.bodyUILayer.setState({ data, zoomOpacity });\n    });\n  }\n\n  zoomTo(node: SpatialSceneNode): void {\n    const matrix = new Matrix4(node.transformMatrix);\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: matrix.getTranslation(),\n        rotationX: 0,\n        rotationOrbit: 0,\n        zoom: 11.5,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotation(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationOrbit: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setRotationX(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        rotationX: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setZoom(value: number): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        zoom: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setTarget(value: number[]): void {\n    this.deck.setProps({\n      viewState: {\n        ...this.deck.props.viewState,\n        target: value,\n      } as BodyUIViewStateProps,\n    });\n  }\n\n  setInteractive(value: boolean): void {\n    this.deck.setProps({\n      controller: value,\n    });\n  }\n\n  @bind\n  private _onHover(e: { picked: boolean; object: SpatialSceneNode }): void {\n    const { lastHovered } = this;\n    this.cursor = e.picked ? 'pointer' : undefined;\n    if (e.picked && e.object?.['@id']) {\n      if (lastHovered !== e.object) {\n        if (lastHovered) {\n          this.nodeHoverStopSubject.next(lastHovered);\n        }\n        this.lastHovered = e.object;\n        this.nodeHoverStartSubject.next(e.object);\n      }\n    } else if (lastHovered) {\n      this.nodeHoverStopSubject.next(lastHovered);\n      this.lastHovered = undefined;\n    }\n  }\n\n  @bind\n  private _onClick(info: PickInfo, e: { srcEvent: { ctrlKey: boolean } }): void {\n    if (info.picked && info.object?.['@id']) {\n      this.nodeClickSubject.next({\n        node: info.object,\n        ctrlClick: e?.srcEvent?.ctrlKey ?? undefined,\n      });\n    }\n  }\n\n  @bind\n  private _onViewStateChange(event: {\n    interactionState: { isZooming: boolean };\n    viewState: BodyUIViewStateProps;\n  }): void {\n    if (event.interactionState?.isZooming) {\n      const currentState = this.bodyUILayer.state as {\n        zoomOpacity: number;\n        data: unknown;\n      };\n      const zoomOpacity = Math.min(Math.max(1 - (event.viewState.zoom - 8.9) / 2, 0.05), 1.0);\n      if (currentState.zoomOpacity !== zoomOpacity) {\n        this.bodyUILayer.setState({ data: currentState.data, zoomOpacity });\n      }\n    }\n    this.deck.setProps({ viewState: { ...event.viewState } });\n    this.sceneRotationSubject.next([event.viewState.rotationOrbit, event.viewState.rotationX]);\n  }\n\n  @bind\n  private _onDragStart(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragStartSubject);\n  }\n\n  @bind\n  private _onDrag(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragSubject);\n  }\n\n  @bind\n  private _onDragEnd(info: PickInfo, e: MouseEvent): void {\n    this._dragEvent(info, e, this.nodeDragEndSubject);\n  }\n\n  private _dragEvent(info: PickInfo, e: MouseEvent, subject: Subject): void {\n    if (info?.object?.['@id']) {\n      subject.next({ node: info.object, info, e });\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/ProcessedNode.html":{"url":"interfaces/ProcessedNode.html","title":"interface - ProcessedNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  ProcessedNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/util/process-scene-nodes.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                            SpatialSceneNode\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            bbox\n                                        \n                                \n                                \n                                        \n                                            center\n                                        \n                                \n                                \n                                        \n                                            jsonld\n                                        \n                                \n                                \n                                        \n                                            node\n                                        \n                                \n                                \n                                        \n                                            size\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        bbox\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        bbox:     AABB\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     AABB\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        center\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        center:     Vec3\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Vec3\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        jsonld\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        jsonld:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        node\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        node:     \n\n                                    \n                                \n\n\n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        size\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        size:     Vec3\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Vec3\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Matrix4 } from '@math.gl/core';\nimport { AABB, Vec3 } from 'cannon-es';\n\nimport { SpatialSceneNode } from '../shared/spatial-scene-node';\nimport { loadGLTF, registerGLTFLoaders } from './load-gltf';\nimport { traverseScene } from './scene-traversal';\n\nexport interface ProcessedNode extends SpatialSceneNode {\n  bbox: AABB;\n  jsonld: unknown;\n  node: unknown;\n  size: Vec3;\n  center: Vec3;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction childNames(scene: { nodes: any; children: any }, names: string[] = []): string[] {\n  for (const child of scene.nodes || scene.children || []) {\n    names.push(child.name);\n    childNames(child, names);\n  }\n  return names;\n}\n\nexport async function processSceneNodes(\n  gltfUrl: string,\n  worldMatrix?: Matrix4,\n  scenegraphNode?: string,\n  gltfCache?: { [url: string]: Promise },\n): Promise {\n  registerGLTFLoaders();\n  const gltf = await loadGLTF({ scenegraph: gltfUrl, scenegraphNode } as SpatialSceneNode, gltfCache);\n  const nodes: { [node: string]: ProcessedNode } = {};\n  const gltfNodes: ProcessedNode[] = [];\n\n  worldMatrix = new Matrix4(worldMatrix ?? Matrix4.IDENTITY);\n\n  for (const scene of gltf.scenes) {\n    traverseScene(scene, worldMatrix, (node, modelMatrix: Matrix4) => {\n      const processedNode: ProcessedNode = {\n        '@id': (node.name || node.id) as string,\n        '@type': 'ProcessedNode',\n        transformMatrix: new Matrix4(modelMatrix),\n        geometry: 'wireframe',\n        node,\n      } as ProcessedNode;\n      gltfNodes.push({\n        '@id': `GLTF:${processedNode['@id']}`,\n        '@type': 'GLTFNode',\n        scenegraph: gltfUrl,\n        scenegraphNode: processedNode['@id'],\n        transformMatrix: new Matrix4(worldMatrix || Matrix4.IDENTITY),\n        tooltip: (node.name || node.id) as string,\n        color: [255, 255, 255, 255],\n        _lighting: 'pbr',\n        zoomBasedOpacity: true,\n        node,\n      } as ProcessedNode);\n      if (node.mesh && node.mesh.primitives && node.mesh.primitives.length > 0) {\n        for (const primitive of node.mesh.primitives) {\n          if (primitive.attributes.POSITION && primitive.attributes.POSITION.min) {\n            const lowerBound = modelMatrix.transformAsPoint(primitive.attributes.POSITION.min, []);\n            const upperBound = modelMatrix.transformAsPoint(primitive.attributes.POSITION.max, []);\n            processedNode.bbox = new AABB({\n              lowerBound: new Vec3(...lowerBound.map((n, i) => Math.min(n, upperBound[i]))),\n              upperBound: new Vec3(...upperBound.map((n, i) => Math.max(n, lowerBound[i]))),\n            });\n          }\n        }\n      }\n      nodes[processedNode['@id']] = processedNode;\n      return true;\n    });\n  }\n\n  for (const node of Object.values(nodes).filter((n) => !n.bbox)) {\n    for (const child of childNames(node.node as never)\n      .map((n) => nodes[n])\n      .filter((n) => n.bbox)) {\n      if (!node.bbox) {\n        node.bbox = child.bbox.clone();\n      } else {\n        node.bbox.extend(child.bbox);\n      }\n    }\n    if (!node.bbox) {\n      delete nodes[node['@id']];\n    }\n  }\n  for (const node of Object.values(nodes)) {\n    const lb = node.bbox.lowerBound;\n    const ub = node.bbox.upperBound;\n    const size = (node.size = ub.clone().vsub(lb));\n    const halfSize = size.clone().vmul(new Vec3(0.5, 0.5, 0.5));\n    const center = (node.center = lb.clone().vadd(halfSize));\n\n    node.transformMatrix = new Matrix4(Matrix4.IDENTITY).translate(center.toArray()).scale(halfSize.toArray());\n  }\n  for (const node of gltfNodes) {\n    nodes[node['@id']] = node;\n  }\n  return nodes;\n}\n/* eslint-enable */\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialEntityJsonLd.html":{"url":"interfaces/SpatialEntityJsonLd.html","title":"interface - SpatialEntityJsonLd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpatialEntityJsonLd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/shared/ccf-spatial-jsonld.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        JsonLdObj\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            @context\n                                        \n                                \n                                \n                                        \n                                            @id\n                                        \n                                \n                                \n                                        \n                                            @type\n                                        \n                                \n                                \n                                        \n                                            ccf_annotations\n                                        \n                                \n                                \n                                        \n                                            comment\n                                        \n                                \n                                \n                                        \n                                            creation_date\n                                        \n                                \n                                \n                                        \n                                            creator\n                                        \n                                \n                                \n                                        \n                                            creator_first_name\n                                        \n                                \n                                \n                                        \n                                            creator_last_name\n                                        \n                                \n                                \n                                        \n                                            creator_middle_name\n                                        \n                                \n                                \n                                        \n                                            creator_orcid\n                                        \n                                \n                                \n                                        \n                                            dimension_units\n                                        \n                                \n                                \n                                        \n                                            extraction_set\n                                        \n                                \n                                \n                                        \n                                            label\n                                        \n                                \n                                \n                                        \n                                            object\n                                        \n                                \n                                \n                                        \n                                            placement\n                                        \n                                \n                                \n                                        \n                                            reference_organ\n                                        \n                                \n                                \n                                        \n                                            representation_of\n                                        \n                                \n                                \n                                        \n                                            rui_rank\n                                        \n                                \n                                \n                                        \n                                            sex\n                                        \n                                \n                                \n                                        \n                                            side\n                                        \n                                \n                                \n                                        \n                                            slice_count\n                                        \n                                \n                                \n                                        \n                                            slice_thickness\n                                        \n                                \n                                \n                                        \n                                            updated_date\n                                        \n                                \n                                \n                                        \n                                            x_dimension\n                                        \n                                \n                                \n                                        \n                                            y_dimension\n                                        \n                                \n                                \n                                        \n                                            z_dimension\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @context:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @type:     string | string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        ccf_annotations\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        ccf_annotations:     string[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        comment\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        comment:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creation_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creation_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_first_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator_first_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_last_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator_last_name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_middle_name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator_middle_name:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        creator_orcid\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        creator_orcid:     string | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     string | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        dimension_units\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        dimension_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        extraction_set\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        extraction_set:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        label\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        label:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        object\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        object:         SpatialObjectReferenceJsonLd\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialObjectReferenceJsonLd\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placement:         SpatialPlacementJsonLd | SpatialPlacementJsonLd[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialPlacementJsonLd | SpatialPlacementJsonLd[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reference_organ\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reference_organ:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        representation_of\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        representation_of:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rui_rank\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rui_rank:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sex\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sex:     \"Male\" | \"Female\" | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Male\" | \"Female\" | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        side\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        side:     \"Left\" | \"Right\" | undefined\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     \"Left\" | \"Right\" | undefined\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice_count\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice_count:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        slice_thickness\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        slice_thickness:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        updated_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        updated_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_dimension\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_dimension\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_dimension\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        z_dimension:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JsonLdObj } from 'jsonld/jsonld-spec';\n\nexport interface SpatialPlacementJsonLd extends JsonLdObj {\n  '@context'?: string;\n  '@id': string;\n  '@type': string;\n  source?: string;\n  target: string;\n  placement_date: string;\n  x_scaling: number;\n  y_scaling: number;\n  z_scaling: number;\n  scaling_units: string;\n  x_rotation: number;\n  y_rotation: number;\n  z_rotation: number;\n  rotation_units: string;\n  x_translation: number;\n  y_translation: number;\n  z_translation: number;\n  translation_units: string;\n}\n\nexport interface SpatialObjectReferenceJsonLd extends JsonLdObj {\n  '@id': string;\n  '@type': string;\n  file: string;\n  file_format: string;\n  placement: SpatialPlacementJsonLd;\n}\n\nexport interface SpatialEntityJsonLd extends JsonLdObj {\n  '@context': string;\n  '@id': string;\n  '@type': string | string[];\n  label: string;\n  comment: string;\n  creator: string;\n  creator_first_name: string;\n  creator_middle_name: string | undefined;\n  creator_last_name: string;\n  creator_orcid: string | undefined;\n  creation_date: string;\n  updated_date: string;\n  ccf_annotations: string[];\n  representation_of: string;\n  reference_organ: string;\n  extraction_set: string;\n  sex: 'Male' | 'Female' | undefined;\n  side: 'Left' | 'Right' | undefined;\n  rui_rank: number;\n  slice_thickness: number;\n  slice_count: number;\n  x_dimension: number;\n  y_dimension: number;\n  z_dimension: number;\n  dimension_units: string;\n  object: SpatialObjectReferenceJsonLd;\n  placement: SpatialPlacementJsonLd | SpatialPlacementJsonLd[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialObjectReferenceJsonLd.html":{"url":"interfaces/SpatialObjectReferenceJsonLd.html","title":"interface - SpatialObjectReferenceJsonLd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpatialObjectReferenceJsonLd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/shared/ccf-spatial-jsonld.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        JsonLdObj\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            @id\n                                        \n                                \n                                \n                                        \n                                            @type\n                                        \n                                \n                                \n                                        \n                                            file\n                                        \n                                \n                                \n                                        \n                                            file_format\n                                        \n                                \n                                \n                                        \n                                            placement\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        file_format\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        file_format:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placement:         SpatialPlacementJsonLd\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialPlacementJsonLd\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JsonLdObj } from 'jsonld/jsonld-spec';\n\nexport interface SpatialPlacementJsonLd extends JsonLdObj {\n  '@context'?: string;\n  '@id': string;\n  '@type': string;\n  source?: string;\n  target: string;\n  placement_date: string;\n  x_scaling: number;\n  y_scaling: number;\n  z_scaling: number;\n  scaling_units: string;\n  x_rotation: number;\n  y_rotation: number;\n  z_rotation: number;\n  rotation_units: string;\n  x_translation: number;\n  y_translation: number;\n  z_translation: number;\n  translation_units: string;\n}\n\nexport interface SpatialObjectReferenceJsonLd extends JsonLdObj {\n  '@id': string;\n  '@type': string;\n  file: string;\n  file_format: string;\n  placement: SpatialPlacementJsonLd;\n}\n\nexport interface SpatialEntityJsonLd extends JsonLdObj {\n  '@context': string;\n  '@id': string;\n  '@type': string | string[];\n  label: string;\n  comment: string;\n  creator: string;\n  creator_first_name: string;\n  creator_middle_name: string | undefined;\n  creator_last_name: string;\n  creator_orcid: string | undefined;\n  creation_date: string;\n  updated_date: string;\n  ccf_annotations: string[];\n  representation_of: string;\n  reference_organ: string;\n  extraction_set: string;\n  sex: 'Male' | 'Female' | undefined;\n  side: 'Left' | 'Right' | undefined;\n  rui_rank: number;\n  slice_thickness: number;\n  slice_count: number;\n  x_dimension: number;\n  y_dimension: number;\n  z_dimension: number;\n  dimension_units: string;\n  object: SpatialObjectReferenceJsonLd;\n  placement: SpatialPlacementJsonLd | SpatialPlacementJsonLd[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialPlacementJsonLd.html":{"url":"interfaces/SpatialPlacementJsonLd.html","title":"interface - SpatialPlacementJsonLd","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpatialPlacementJsonLd\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/shared/ccf-spatial-jsonld.ts\n        \n\n\n\n            \n                Extends\n            \n            \n                        JsonLdObj\n            \n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            @context\n                                        \n                                \n                                \n                                        \n                                            @id\n                                        \n                                \n                                \n                                        \n                                            @type\n                                        \n                                \n                                \n                                        \n                                            placement_date\n                                        \n                                \n                                \n                                        \n                                            rotation_units\n                                        \n                                \n                                \n                                        \n                                            scaling_units\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            source\n                                        \n                                \n                                \n                                        \n                                            target\n                                        \n                                \n                                \n                                        \n                                            translation_units\n                                        \n                                \n                                \n                                        \n                                            x_rotation\n                                        \n                                \n                                \n                                        \n                                            x_scaling\n                                        \n                                \n                                \n                                        \n                                            x_translation\n                                        \n                                \n                                \n                                        \n                                            y_rotation\n                                        \n                                \n                                \n                                        \n                                            y_scaling\n                                        \n                                \n                                \n                                        \n                                            y_translation\n                                        \n                                \n                                \n                                        \n                                            z_rotation\n                                        \n                                \n                                \n                                        \n                                            z_scaling\n                                        \n                                \n                                \n                                        \n                                            z_translation\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        @context\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @context:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        placement_date\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        placement_date:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        rotation_units\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        rotation_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scaling_units\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scaling_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        source\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        source:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        target\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        target:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        translation_units\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        translation_units:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_scaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        x_translation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        x_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_scaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        y_translation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        y_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_rotation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        z_rotation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_scaling\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        z_scaling:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        z_translation\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        z_translation:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { JsonLdObj } from 'jsonld/jsonld-spec';\n\nexport interface SpatialPlacementJsonLd extends JsonLdObj {\n  '@context'?: string;\n  '@id': string;\n  '@type': string;\n  source?: string;\n  target: string;\n  placement_date: string;\n  x_scaling: number;\n  y_scaling: number;\n  z_scaling: number;\n  scaling_units: string;\n  x_rotation: number;\n  y_rotation: number;\n  z_rotation: number;\n  rotation_units: string;\n  x_translation: number;\n  y_translation: number;\n  z_translation: number;\n  translation_units: string;\n}\n\nexport interface SpatialObjectReferenceJsonLd extends JsonLdObj {\n  '@id': string;\n  '@type': string;\n  file: string;\n  file_format: string;\n  placement: SpatialPlacementJsonLd;\n}\n\nexport interface SpatialEntityJsonLd extends JsonLdObj {\n  '@context': string;\n  '@id': string;\n  '@type': string | string[];\n  label: string;\n  comment: string;\n  creator: string;\n  creator_first_name: string;\n  creator_middle_name: string | undefined;\n  creator_last_name: string;\n  creator_orcid: string | undefined;\n  creation_date: string;\n  updated_date: string;\n  ccf_annotations: string[];\n  representation_of: string;\n  reference_organ: string;\n  extraction_set: string;\n  sex: 'Male' | 'Female' | undefined;\n  side: 'Left' | 'Right' | undefined;\n  rui_rank: number;\n  slice_thickness: number;\n  slice_count: number;\n  x_dimension: number;\n  y_dimension: number;\n  z_dimension: number;\n  dimension_units: string;\n  object: SpatialObjectReferenceJsonLd;\n  placement: SpatialPlacementJsonLd | SpatialPlacementJsonLd[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/SpatialSceneNode.html":{"url":"interfaces/SpatialSceneNode.html","title":"interface - SpatialSceneNode","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  SpatialSceneNode\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/lib/shared/spatial-scene-node.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                            Optional\n                                        \n                                            _lighting\n                                        \n                                \n                                \n                                        \n                                            @id\n                                        \n                                \n                                \n                                        \n                                            @type\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            color\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            entityId\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            geometry\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            name\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            opacity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            priority\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            reference_organ\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            representation_of\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scenegraph\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            scenegraphNode\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            text\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            tooltip\n                                        \n                                \n                                \n                                        \n                                            transformMatrix\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            unpickable\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoomBasedOpacity\n                                        \n                                \n                                \n                                            Optional\n                                        \n                                            zoomToOnLoad\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        _lighting\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        _lighting:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @id\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @id:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        @type\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        @type:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        color\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        color:     [number, number, number, number]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     [number, number, number, number]\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        entityId\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        entityId:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        geometry\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        geometry:         SpatialSceneGeometry\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         SpatialSceneGeometry\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        name\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        name:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        opacity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        opacity:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        priority\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        priority:         number\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         number\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        reference_organ\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        reference_organ:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        representation_of\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        representation_of:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraph\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scenegraph:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        scenegraphNode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        scenegraphNode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        text\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        text:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        tooltip\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        tooltip:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        transformMatrix\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        transformMatrix:     Matrix4\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Matrix4\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        unpickable\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        unpickable:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomBasedOpacity\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoomBasedOpacity:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        zoomToOnLoad\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        zoomToOnLoad:         boolean\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         boolean\n\n                                        \n                                    \n\n                                    \n                                        \n                                            Optional\n                                        \n                                    \n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Matrix4 } from '@math.gl/core';\n\nexport type SpatialSceneGeometry = 'sphere' | 'cube' | 'wireframe' | 'text' | 'cone' | 'cylinder';\n\nexport interface SpatialSceneNode {\n  '@id': string;\n  '@type': string;\n  entityId?: string;\n  representation_of?: string;\n  reference_organ?: string;\n  unpickable?: boolean;\n  geometry?: SpatialSceneGeometry;\n  text?: string;\n  _lighting?: string;\n  scenegraph?: string;\n  scenegraphNode?: string;\n  zoomBasedOpacity?: boolean;\n  zoomToOnLoad?: boolean;\n  color?: [number, number, number, number];\n  opacity?: number;\n  transformMatrix: Matrix4;\n  name?: string;\n  tooltip?: string;\n  priority?: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            tslib : ^2.0.0\n    \n\n\n    \n    \n        Peer dependencies\n    \n    \n        \n            @angular/common : ^9.1.1\n        \n            @angular/core : ^9.1.1\n        \n            lodash : ^4.17.21\n    \n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            childNames   (src/.../process-scene-nodes.ts)\n                        \n                        \n                            deriveScenegraph   (src/.../load-gltf.ts)\n                        \n                        \n                            doCollisions   (src/.../spatial-scene-collider.ts)\n                        \n                        \n                            loadGLTF   (src/.../load-gltf.ts)\n                        \n                        \n                            loadGLTF2   (src/.../load-gltf.ts)\n                        \n                        \n                            meshLayer   (src/.../body-ui-layer.ts)\n                        \n                        \n                            parseCSV   (src/.../parse-csv.ts)\n                        \n                        \n                            parseCSVText   (src/.../parse-csv.ts)\n                        \n                        \n                            processAnatomicalStructures   (src/.../process-anatomical-structures.ts)\n                        \n                        \n                            processExtractionSites   (src/.../process-extraction-sites.ts)\n                        \n                        \n                            processReferenceData   (src/.../process-reference-data.ts)\n                        \n                        \n                            processSceneNodes   (src/.../process-scene-nodes.ts)\n                        \n                        \n                            processSpatialEntities   (src/.../process-spatial-entities.ts)\n                        \n                        \n                            registerGLTFLoaders   (src/.../load-gltf.ts)\n                        \n                        \n                            simplifyScene   (src/.../simplify-scene.ts)\n                        \n                        \n                            textLayer   (src/.../body-ui-layer.ts)\n                        \n                        \n                            traverseScene   (src/.../scene-traversal.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util/process-scene-nodes.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        childNames\n                        \n                    \n                \n            \n            \n                \nchildNames(scene, names)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                scene\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                names\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    []\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     string[]\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        processSceneNodes\n                        \n                    \n                \n            \n            \n                \nprocessSceneNodes(gltfUrl: string, worldMatrix?: Matrix4, scenegraphNode?: string, gltfCache?)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                gltfUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                worldMatrix\n                                            \n                                                        Matrix4\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                scenegraphNode\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                        \n                                                gltfCache\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/load-gltf.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        deriveScenegraph\n                        \n                    \n                \n            \n            \n                \nderiveScenegraph(scenegraphNodeName: string, gltf: any)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scenegraphNodeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gltf\n                                            \n                                                            any\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         any\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadGLTF\n                        \n                    \n                \n            \n            \n                \nloadGLTF(model: SpatialSceneNode, cache?)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                model\n                                            \n                                                            SpatialSceneNode\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                cache\n                                            \n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        loadGLTF2\n                        \n                    \n                \n            \n            \n                \nloadGLTF2(scenegraphNodeName: string, gltfPromise: Promise)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scenegraphNodeName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gltfPromise\n                                            \n                                                        Promise\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        registerGLTFLoaders\n                        \n                    \n                \n            \n            \n                \nregisterGLTFLoaders()\n                \n            \n\n\n\n\n            \n                \n\n                        \n                            Returns :         void\n\n                        \n                \n            \n        \n    \n    src/lib/util/spatial-scene-collider.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        doCollisions\n                        \n                    \n                \n            \n            \n                \ndoCollisions(scene)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scene\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/body-ui-layer.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        meshLayer\n                        \n                    \n                \n            \n            \n                \nmeshLayer(id: string, data, options)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     SimpleMeshLayer | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        textLayer\n                        \n                    \n                \n            \n            \n                \ntextLayer(id: string, data, options)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                id\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                data\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                options\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     TextLayer | undefined\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/parse-csv.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        parseCSV\n                        \n                    \n                \n            \n            \n                \nparseCSV(sourceUrl: string, firstFieldName?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                firstFieldName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        parseCSVText\n                        \n                    \n                \n            \n            \n                \nparseCSVText(csvText: string, firstFieldName?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                csvText\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                firstFieldName\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/process-anatomical-structures.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        processAnatomicalStructures\n                        \n                    \n                \n            \n            \n                \nprocessAnatomicalStructures(sourceUrl: string, entities)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entities\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/process-extraction-sites.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        processExtractionSites\n                        \n                    \n                \n            \n            \n                \nprocessExtractionSites(sourceUrl: string, entities)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                sourceUrl\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                entities\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/process-reference-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        processReferenceData\n                        \n                    \n                \n            \n            \n                \nprocessReferenceData(refEntities, config)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                                Default value\n                                        \n                                    \n                                    \n                                        \n                                                refEntities\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                            \n\n                                        \n                                        \n                                                config\n\n                                            \n                                                    No\n                                            \n\n                                            \n                                                    referenceDataConfig\n                                            \n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :     Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/process-spatial-entities.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        processSpatialEntities\n                        \n                    \n                \n            \n            \n                \nprocessSpatialEntities(parent: SpatialEntityJsonLd, gltfOverride?: string)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                parent\n                                            \n                                                            SpatialEntityJsonLd\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                gltfOverride\n                                            \n                                                            string\n                                            \n\n                                            \n                                                    Yes\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/simplify-scene.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        simplifyScene\n                        \n                    \n                \n            \n            \n                \nsimplifyScene(nodes)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                nodes\n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         Promise\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n    src/lib/util/scene-traversal.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        traverseScene\n                        \n                    \n                \n            \n            \n                \ntraverseScene(scene, worldMatrix: Matrix4, visitor: SceneTraversalVisitor)\n                \n            \n\n\n\n\n            \n                \n\n                            \n                                Parameters :\n                                \n                                \n                                    \n                                        \n                                            Name\n                                                Type\n                                            Optional\n                                        \n                                    \n                                    \n                                        \n                                                scene\n                                            \n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                worldMatrix\n                                            \n                                                        Matrix4\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                        \n                                                visitor\n                                            \n                                                            SceneTraversalVisitor\n                                            \n\n                                            \n                                                    No\n                                            \n\n\n                                        \n                                    \n                                \n                            \n                        \n                            Returns :         boolean\n\n                        \n                            \n                                \n                            \n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\nCcfBodyUi\nThis library was generated with Angular CLI version 9.1.1.\nCode scaffolding\nRun ng generate component component-name --project ccf-body-ui to generate a new component. You can also use ng generate directive|pipe|service|class|guard|interface|enum|module --project ccf-body-ui.\n\nNote: Don't forget to add --project ccf-body-ui or else it will be added to the default project in your angular.json file.\n\nBuild\nRun ng build ccf-body-ui to build the project. The build artifacts will be stored in the dist/ directory.\nPublishing\nAfter building your library with ng build ccf-body-ui, go to the dist folder cd dist/ccf-body-ui and run npm publish.\nRunning unit tests\nRun ng test ccf-body-ui to execute the unit tests via Karma.\nFurther help\nTo get more help on the Angular CLI use ng help or go check out the Angular CLI README.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n    \n\n    \n        \n            \n                \n                    \n                    2 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    9 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            NodeClickEvent   (src/.../body-ui.ts)\n                        \n                        \n                            NodeDragEvent   (src/.../body-ui.ts)\n                        \n                        \n                            SceneTraversalVisitor   (src/.../scene-traversal.ts)\n                        \n                        \n                            SpatialSceneGeometry   (src/.../spatial-scene-node.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/body-ui.ts\n    \n    \n        \n            \n                \n                    \n                    NodeClickEvent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    NodeDragEvent\n                \n            \n            \n                \n                        literal type\n\n                \n            \n        \n    \n    src/lib/util/scene-traversal.ts\n    \n    \n        \n            \n                \n                    \n                    SceneTraversalVisitor\n                \n            \n            \n                \n                            function\n\n                \n            \n        \n    \n    src/lib/shared/spatial-scene-node.ts\n    \n    \n        \n            \n                \n                    \n                    SpatialSceneGeometry\n                \n            \n            \n                \n                        \"sphere\" | \"cube\" | \"wireframe\" | \"text\" | \"cone\" | \"cylinder\"\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            referenceDataConfig   (src/.../process-reference-data.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/lib/util/process-reference-data.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        referenceDataConfig\n                        \n                    \n                \n            \n                \n                    \n                        Type :         object\n\n                    \n                \n                \n                    \n                        Default value : {\n  extractionSitesUrl: 'http://localhost:8080/source_data/asct-b-3d-models-landmarks.csv',\n  extractionSitesConfigUrl: 'http://localhost:8080/source_data/extraction-site-config.csv',\n  anatomicalStructuresUrl: 'http://localhost:8080/source_data/asct-b-3d-models-crosswalk.csv',\n  referenceOrganConfigUrl: 'http://localhost:8080/source_data/reference-organ-config.csv',\n}\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
