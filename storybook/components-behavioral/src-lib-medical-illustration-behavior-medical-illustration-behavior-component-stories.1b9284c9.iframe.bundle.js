(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[430],{"./libs/components/behavioral/src/lib/medical-illustration-behavior/medical-illustration-behavior.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,".tooltip {\n  display: flex;\n  flex-direction: column;\n  background: white;\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  border-radius: 0.5rem;\n  padding: 1rem;\n}\n\n[id^=Crosswalk] :is(path, polygon, polyline) {\n  fill: transparent;\n  stroke: transparent;\n}\n.hover-active [id^=Crosswalk] g:hover > :is(path, polygon, polyline) {\n  fill: hsl(0, 100%, 50%);\n  mix-blend-mode: saturation;\n}\n.hover-active [id^=Crosswalk] g > g:hover :is(path, polygon, polyline) {\n  fill: hsl(0, 100%, 50%);\n  mix-blend-mode: saturation;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/behavioral/src/lib/medical-illustration-behavior/medical-illustration-behavior.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,default:()=>medical_illustration_behavior_component_stories});var medical_illustration_state=__webpack_require__("./libs/state/src/lib/medical-illustration/medical-illustration.state.ts"),medical_illustration_actions=__webpack_require__("./libs/state/src/lib/medical-illustration/medical-illustration.actions.ts"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var medical_illustration_behavior_componentngResource=__webpack_require__("./libs/components/behavioral/src/lib/medical-illustration-behavior/medical-illustration-behavior.component.scss?ngResource"),medical_illustration_behavior_componentngResource_default=__webpack_require__.n(medical_illustration_behavior_componentngResource),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),select_snapshot=__webpack_require__("./libs/cdk/injectors/src/lib/select/select-snapshot.ts"),dispatch=__webpack_require__("./libs/cdk/injectors/src/lib/dispatch/dispatch.ts");var _class,interactive_svg_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/interactive-svg/interactive-svg.component.scss?ngResource"),interactive_svg_componentngResource_default=__webpack_require__.n(interactive_svg_componentngResource),overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2020/overlay.mjs"),lib_esmodule=__webpack_require__("./node_modules/ng-inline-svg-2/lib_esmodule/index.js"),BehaviorSubject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/BehaviorSubject.js"),debounce=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/debounce.js"),timer=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/timer.js"),Subject=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Subject.js"),fromEventPattern=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/observable/fromEventPattern.js"),takeUntil=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/takeUntil.js");const TOOLTIP_POSITIONS=[{originX:"center",originY:"center",overlayX:"start",overlayY:"center",offsetX:8},{originX:"center",originY:"center",overlayX:"end",overlayY:"center",offsetX:-8},{originX:"center",originY:"center",overlayX:"center",overlayY:"top",offsetY:8},{originX:"center",originY:"center",overlayX:"center",overlayY:"bottom",offsetY:-8}];let InteractiveSvgComponent=((_class=class InteractiveSvgComponent{constructor(){this.mapping=[],this.nodeHover=new core.EventEmitter,this.NEVER_EVAL_SCRIPTS="never",this.TOOLTIP_POSITIONS=TOOLTIP_POSITIONS,this.nodeHoverData$=new BehaviorSubject.X(void 0),this.nodeHoverDelayedData$=this.nodeHoverData$.pipe((0,debounce.D)((event=>(0,timer.H)(event?200:0)))),this.renderer=(0,core.inject)(core.Renderer2),this.destroy$=new Subject.x}ngOnDestroy(){this.clear()}setSvgElement(el){this.clear();const crosswalkEl=el.querySelector('[id^="Crosswalk"]');crosswalkEl&&(this.renderer.appendChild(el,crosswalkEl),this.attachCrosswalkHover(crosswalkEl))}formatNodeName(name){return name.replace(/_/g," ")}attachCrosswalkHover(el){this.attachEvent(el,"mouseover").subscribe(this.onCrosswalkHover.bind(this)),this.attachEvent(el,"mouseout").subscribe((()=>this.nodeHoverData$.next(void 0)))}onCrosswalkHover(event){const node=this.getNode(event);node&&(this.nodeHoverData$.next({node:node.label,origin:{x:event.clientX,y:event.clientY}}),this.nodeHover.emit(node))}clear(){this.destroy$.next(),this.destroy$.complete(),this.destroy$=new Subject.x}getNode(event){const idCollection=[event.target.id,event.target.parentElement?.id??"",event.target.parentElement?.parentElement?.id??""];for(const id of idCollection){const decodedID=this.decodeId(id),match=this.mapping.find((item=>item.node_name?.toLowerCase()===decodedID.toLowerCase()));if(match)return match}}decodeId(id){return id.replace(/_x([\da-f]+)_/gi,((_match,hex)=>String.fromCharCode(Number.parseInt(hex,16))))}attachEvent(el,event){const{renderer,destroy$}=this;return(0,fromEventPattern.R)((handler=>renderer.listen(el,event,handler)),((_handler,unlisten)=>unlisten())).pipe((0,takeUntil.R)(destroy$))}}).propDecorators={url:[{type:core.Input}],mapping:[{type:core.Input}],nodeHover:[{type:core.Output}]},_class);InteractiveSvgComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"hra-interactive-svg",standalone:!0,imports:[common.CommonModule,lib_esmodule.vi,overlay.U8],template:'<div\n  *ngIf="url"\n  class="svg"\n  [class.hover-active]="nodeHoverData$ | async"\n  [inlineSVG]="url"\n  [evalScripts]="NEVER_EVAL_SCRIPTS"\n  (onSVGInserted)="setSvgElement($event)"\n></div>\n\n<ng-container *ngIf="nodeHoverDelayedData$ | async as hover">\n  <ng-template\n    cdkConnectedOverlay\n    cdkConnectedOverlayPanelClass="hra-interactive-svg-tooltip-panel"\n    [cdkConnectedOverlayOrigin]="hover.origin"\n    [cdkConnectedOverlayPositions]="TOOLTIP_POSITIONS"\n    [cdkConnectedOverlayViewportMargin]="16"\n    [cdkConnectedOverlayOpen]="true"\n  >\n    <div class="tooltip">\n      {{ formatNodeName(hover.node) }}\n    </div>\n  </ng-template>\n</ng-container>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,encapsulation:core.ViewEncapsulation.None,styles:[interactive_svg_componentngResource_default()]})],InteractiveSvgComponent);var medical_illustration_selectors=__webpack_require__("./libs/state/src/lib/medical-illustration/medical-illustration.selectors.ts");let MedicalIllustrationBehaviorComponent=class MedicalIllustrationBehaviorComponent{constructor(){this.currentUrl=(0,select_snapshot.g)(medical_illustration_selectors.W.url),this.getMapping=(0,select_snapshot.g)(medical_illustration_selectors.W.mapping),this.updateNode=(0,dispatch.WI)(medical_illustration_actions.zJ)}};MedicalIllustrationBehaviorComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"ftu-medical-illustration-behavior",standalone:!0,imports:[common.CommonModule,InteractiveSvgComponent],template:'<hra-interactive-svg [url]="currentUrl()" [mapping]="getMapping()" (nodeHover)="updateNode($event)">\n</hra-interactive-svg>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[medical_illustration_behavior_componentngResource_default()]})],MedicalIllustrationBehaviorComponent);const medical_illustration_behavior_component_stories={title:"MedicalIllustrationBehaviorComponent",component:MedicalIllustrationBehaviorComponent,parameters:{state:{states:[medical_illustration_state.N],actions:[new medical_illustration_actions.bu("assets/TEMP/mapping.csv"),new medical_illustration_actions.DJ("https://hubmapconsortium.github.io/ccf-releases/v1.3/2d-ftu/2d-ftu-large-intestine-crypt-lieberkuhn.svg")]}}},Primary=(args=>({props:args})).bind({});Primary.args={},Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"args => ({\n  props: args\n})",...Primary.parameters?.docs?.source}}}}}]);