(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[181],{"./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: var(--palette-primary-contrast-500-rgb);\n}\n:host .mat-mdc-cell {\n  padding: 0.25rem 0rem;\n}\n:host .mat-mdc-row {\n  height: -moz-fit-content;\n  height: fit-content;\n}\n:host .no-border {\n  border: none;\n}\n:host .label {\n  color: #243142;\n  padding-right: 3rem;\n}\n:host .value {\n  color: #4c5a69;\n}\n:host .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,data:()=>data,default:()=>biomarker_table_data_card_component_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var _class,biomarker_table_data_card_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource"),biomarker_table_data_card_componentngResource_default=__webpack_require__.n(biomarker_table_data_card_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),table=__webpack_require__("./node_modules/@angular/material/fesm2020/table.mjs");let BiomarkerTableDataCardComponent=((_class=class BiomarkerTableDataCardComponent{constructor(){this.data=[],this.sectionItems=[]}ngOnChanges(changes){"data"in changes&&this.updateSectionItems()}updateSectionItems(){const newSectionItems=[];this.data.forEach(((section,sectionIndex)=>{section.forEach(((item,itemIndex)=>{newSectionItems.push({data:item,section:sectionIndex,isLastItem:itemIndex===section.length-1})}))})),this.sectionItems=newSectionItems}}).propDecorators={data:[{type:core.Input}]},_class);BiomarkerTableDataCardComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"hra-biomarker-table-data-card",standalone:!0,imports:[common.CommonModule,table.p0],template:'<div class="no-data" *ngIf="sectionItems.length === 0">No data</div>\n<table mat-table *ngIf="sectionItems.length > 0" [dataSource]="sectionItems">\n  <caption class="sr-only">\n    Biomarker Table Data Card\n  </caption>\n\n  \x3c!-- Label Column --\x3e\n  <ng-container matColumnDef="label">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Label</th>\n    <td class="label" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.label }}\n    </td>\n  </ng-container>\n\n  \x3c!-- Value Column --\x3e\n  <ng-container matColumnDef="value">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Value</th>\n    <td class="value" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.value }}\n    </td>\n  </ng-container>\n\n  <tr mat-row *matRowDef="let row; columns: [\'label\', \'value\']"></tr>\n</table>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_card_componentngResource_default()]})],BiomarkerTableDataCardComponent);const biomarker_table_data_card_component_stories={title:"BiomarkerTableDataCardComponent",component:BiomarkerTableDataCardComponent},Default=(args=>({props:args})).bind({}),data=[[{label:"Functional Tissue Unit Name",value:"Crypt of Lieberkuhn"},{label:"Uberon ID",value:"UBERON:0011184"},{label:"#Datasets",value:"3"}],[{label:"Cell Type Name",value:"epithelial stem cell"},{label:"CL ID",value:"CL:0009016"},{label:"Number of Cells",value:"187"}],[{label:"Gene Name",value:"RGMB"},{label:"HGNC ID",value:"HGNC:26896"},{label:"Mean Expression Value",value:"0.0642"}]];Default.args={data},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => ({\n  props: args\n})",...Default.parameters?.docs?.source}}},data.parameters={...data.parameters,docs:{...data.parameters?.docs,source:{originalSource:"[[{\n  label: 'Functional Tissue Unit Name',\n  value: 'Crypt of Lieberkuhn'\n}, {\n  label: 'Uberon ID',\n  value: 'UBERON:0011184'\n}, {\n  label: '#Datasets',\n  value: '3'\n}], [{\n  label: 'Cell Type Name',\n  value: 'epithelial stem cell'\n}, {\n  label: 'CL ID',\n  value: 'CL:0009016'\n}, {\n  label: 'Number of Cells',\n  value: '187'\n}], [{\n  label: 'Gene Name',\n  value: 'RGMB'\n}, {\n  label: 'HGNC ID',\n  value: 'HGNC:26896'\n}, {\n  label: 'Mean Expression Value',\n  value: '0.0642'\n}]]",...data.parameters?.docs?.source}}}}}]);