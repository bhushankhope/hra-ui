(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[179],{"./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./cdk/documentation.json":"./dist/compodoc/cdk/documentation.json","./components-atoms/documentation.json":"./dist/compodoc/components-atoms/documentation.json","./components-behavioral/documentation.json":"./dist/compodoc/components-behavioral/documentation.json","./components-molecules/documentation.json":"./dist/compodoc/components-molecules/documentation.json","./components-organisms/documentation.json":"./dist/compodoc/components-organisms/documentation.json","./shared-theming/documentation.json":"./dist/compodoc/shared-theming/documentation.json"};function webpackContext(req){var id=webpackContextResolve(req);return __webpack_require__(id)}function webpackContextResolve(req){if(!__webpack_require__.o(map,req)){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}return map[req]}webpackContext.keys=function webpackContextKeys(){return Object.keys(map)},webpackContext.resolve=webpackContextResolve,module.exports=webpackContext,webpackContext.id="./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$"},"./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$":(module,__unused_webpack_exports,__webpack_require__)=>{var map={"./src/lib/biomarker-table/biomarker-table.component.stories":["./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.stories.ts",253,614],"./src/lib/biomarker-table/biomarker-table.component.stories.ts":["./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.stories.ts",253,614]};function webpackAsyncContext(req){if(!__webpack_require__.o(map,req))return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}));var ids=map[req],id=ids[0];return Promise.all(ids.slice(1).map(__webpack_require__.e)).then((()=>__webpack_require__(id)))}webpackAsyncContext.keys=()=>Object.keys(map),webpackAsyncContext.id="./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$",module.exports=webpackAsyncContext},"./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$":module=>{function webpackEmptyAsyncContext(req){return Promise.resolve().then((()=>{var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}))}webpackEmptyAsyncContext.keys=()=>[],webpackEmptyAsyncContext.resolve=webpackEmptyAsyncContext,webpackEmptyAsyncContext.id="./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$",module.exports=webpackEmptyAsyncContext},"./.storybook/styles.scss?ngGlobalStyle":()=>{},"./libs/components/organisms/.storybook/preview.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{argTypesEnhancers:()=>argTypesEnhancers,decorators:()=>decorators,parameters:()=>parameters});var http=__webpack_require__("./node_modules/@angular/common/fesm2020/http.mjs"),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),animations=__webpack_require__("./node_modules/@angular/platform-browser/fesm2020/animations.mjs"),ngxs_logger_plugin=__webpack_require__("./node_modules/@ngxs/logger-plugin/fesm2015/ngxs-logger-plugin.js"),ngxs_store=__webpack_require__("./node_modules/@ngxs/store/fesm2015/ngxs-store.js"),angular=__webpack_require__("./node_modules/@storybook/addon-docs/angular/index.js"),dist=__webpack_require__("./node_modules/@storybook/angular/dist/index.mjs"),ngx_markdown=__webpack_require__("./node_modules/ngx-markdown/fesm2020/ngx-markdown.mjs"),tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js"),angular_material_css_vars=__webpack_require__("./node_modules/angular-material-css-vars/fesm2020/angular-material-css-vars.mjs"),js_yaml=__webpack_require__("./node_modules/js-yaml/dist/js-yaml.mjs"),map=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/map.js"),tap=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/operators/tap.js"),Observable=__webpack_require__("./node_modules/rxjs/dist/esm5/internal/Observable.js");class Load{constructor(url){this.url=url,this.type=Load.type}}Load.type="[Theming] Load Theming File";var lib=__webpack_require__("./node_modules/zod/lib/index.mjs");const THEMING_FILE_SCHEMA=lib.z.record(lib.z.nativeEnum(angular_material_css_vars.Rm),lib.z.string());let ThemingState=class ThemingState{constructor(){this.http=(0,core.inject)(http.eN),this.materialVars=(0,core.inject)(angular_material_css_vars.jO)}load(ctx,{url}){return this.http.get(url,{responseType:"text"}).pipe((0,map.U)((data=>(0,js_yaml.zD)(data,{filename:url}))),(0,map.U)((data=>THEMING_FILE_SCHEMA.parse(data))),(0,tap.b)((data=>ctx.setState(data))),(0,tap.b)((data=>this.setVariables(data))))}setVariables(data){for(const[key,value]of Object.entries(data))this.materialVars.setVariable(key,value)}};(0,tslib_es6.gn)([(0,ngxs_store.aU)(Load),(0,tslib_es6.w6)("design:type",Function),(0,tslib_es6.w6)("design:paramtypes",[Object,Load]),(0,tslib_es6.w6)("design:returntype",Observable.y)],ThemingState.prototype,"load",null),ThemingState=(0,tslib_es6.gn)([(0,ngxs_store.ZM)({name:"theming",defaults:{}}),(0,core.Injectable)()],ThemingState);let ThemingModule=class ThemingModule{};function parseDefaultValue(type){const{defaultValue,type:typeDef}=type;if(void 0===defaultValue||"string"!=typeof defaultValue||"string"===typeDef?.name)return defaultValue;switch(typeDef?.name){case"array":case"boolean":case"number":case"object":try{return new Function("return "+defaultValue)()}catch(_error){return}case"enum":return typeDef.value.includes(defaultValue)?defaultValue:void 0;default:return}}ThemingModule=(0,tslib_es6.gn)([(0,core.NgModule)({imports:[angular_material_css_vars.Pe.forRoot({}),ngxs_store.$l.forFeature([ThemingState])]})],ThemingModule);const parameters={actions:{argTypesRegex:"^on[A-Z].*"},controls:{matchers:{color:/(background|color)$/i,date:/Date$/}},docs:{inlineStories:!0}},argTypesEnhancers=[function fixArgTypes(){return context=>{const argTypes={...context.argTypes},exclude=[...context.parameters.controls?.exclude??[]];for(const[key,type]of Object.entries(argTypes))switch(type.table.category){case"inputs":const defaultValue=parseDefaultValue(type);defaultValue!==type.defaultValue&&(argTypes[key]={...type,defaultValue});break;case"outputs":argTypes[key]={...type,defaultValue:void 0};break;default:exclude.push(key)}return context.parameters.controls={...context.parameters.controls,exclude},argTypes}}()],decorators=[(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(animations.BrowserAnimationsModule,http.JF,ngxs_store.$l.forRoot([],{developmentMode:!0}),ngxs_logger_plugin.xz.forRoot(),ngx_markdown.JP.forRoot({loader:http.eN}),ThemingModule)]}),(0,dist.componentWrapperDecorator)((story=>`\n      <div class="mat-typography">${story}</div>\n      <div class="backdrop-filler" style="position: absolute; inset: 0; z-index: -1;"></div>\n    `)),function addState(){return(fn,ctx)=>{const config=ctx.parameters.state;return config?(0,dist.applicationConfig)({providers:[(0,core.importProvidersFrom)(ngxs_store.$l.forFeature(config.states)),{provide:core.APP_INITIALIZER,multi:!0,useFactory:store=>()=>{const{actions}=config;return actions&&actions.length>0?store.dispatch(actions):void 0},deps:[ngxs_store.yh]}]})(fn,ctx):fn(ctx)}}()];!function setDocs(library){const docs=__webpack_require__("./dist/compodoc sync recursive ^\\.\\/.*\\/documentation\\.json$")(`./${library}/documentation.json`);(0,angular.P)(docs)}("components-organisms")},"./storybook-config-entry.js":(__unused_webpack_module,__unused_webpack___webpack_exports__,__webpack_require__)=>{"use strict";var dist=__webpack_require__("./node_modules/@storybook/global/dist/index.mjs"),external_STORYBOOK_MODULE_PREVIEW_API_=__webpack_require__("@storybook/preview-api");const external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject=__STORYBOOK_MODULE_CHANNEL_POSTMESSAGE__,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject=__STORYBOOK_MODULE_CHANNEL_WEBSOCKET__;var asyncToGenerator=__webpack_require__("./node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js");const pipeline=x=>x(),importers=[function(){var _ref=(0,asyncToGenerator.Z)((function*(path){if(!/^\.[\\/](?:libs\/components\/organisms(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.mdx)$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.mdx)$")("./"+pathRemainder)}));return function(_x){return _ref.apply(this,arguments)}}(),function(){var _ref2=(0,asyncToGenerator.Z)((function*(path){if(!/^\.[\\/](?:libs\/components\/organisms(?:\/(?!\.)(?:(?:(?!(?:^|\/)\.).)*?)\/|\/|$)(?!\.)(?=.)[^/]*?\.stories\.(js|jsx|ts|tsx))$/.exec(path))return;const pathRemainder=path.substring(28);return __webpack_require__("./libs/components/organisms lazy recursive ^\\.\\/.*$ include: (?:\\/libs\\/components\\/organisms(?:\\/(?%21\\.)(?:(?:(?%21(?:^%7C\\/)\\.).)*?)\\/%7C\\/%7C$)(?%21\\.)(?=.)[^/]*?\\.stories\\.(js%7Cjsx%7Cts%7Ctsx))$")("./"+pathRemainder)}));return function(_x2){return _ref2.apply(this,arguments)}}()];function _importFn(){return(_importFn=(0,asyncToGenerator.Z)((function*(path){for(let i=0;i<importers.length;i++){const moduleExports=yield pipeline((()=>importers[i](path)));if(moduleExports)return moduleExports}}))).apply(this,arguments)}const{SERVER_CHANNEL_URL}=dist.global,channel=(0,external_STORYBOOK_MODULE_CHANNEL_POSTMESSAGE_namespaceObject.createChannel)({page:"preview"});if(external_STORYBOOK_MODULE_PREVIEW_API_.addons.setChannel(channel),SERVER_CHANNEL_URL){const serverChannel=(0,external_STORYBOOK_MODULE_CHANNEL_WEBSOCKET_namespaceObject.createChannel)({url:SERVER_CHANNEL_URL});external_STORYBOOK_MODULE_PREVIEW_API_.addons.setServerChannel(serverChannel),window.__STORYBOOK_SERVER_CHANNEL__=serverChannel}const preview=new external_STORYBOOK_MODULE_PREVIEW_API_.PreviewWeb;window.__STORYBOOK_PREVIEW__=preview,window.__STORYBOOK_STORY_STORE__=preview.storyStore,window.__STORYBOOK_ADDONS_CHANNEL__=channel,window.__STORYBOOK_CLIENT_API__=new external_STORYBOOK_MODULE_PREVIEW_API_.ClientApi({storyStore:preview.storyStore}),preview.initialize({importFn:function importFn(_x3){return _importFn.apply(this,arguments)},getProjectAnnotations:()=>(0,external_STORYBOOK_MODULE_PREVIEW_API_.composeConfigs)([__webpack_require__("./node_modules/@storybook/angular/dist/client/docs/config.js"),__webpack_require__("./node_modules/@storybook/angular/dist/client/config.js"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/docs/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/actions/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/backgrounds/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/measure/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/outline/preview.mjs"),__webpack_require__("./node_modules/@storybook/addon-essentials/dist/highlight/preview.mjs"),__webpack_require__("./libs/components/organisms/.storybook/preview.ts")])})},"./node_modules/@storybook/addon-docs/dist sync recursive":module=>{function webpackEmptyContext(req){var e=new Error("Cannot find module '"+req+"'");throw e.code="MODULE_NOT_FOUND",e}webpackEmptyContext.keys=()=>[],webpackEmptyContext.resolve=webpackEmptyContext,webpackEmptyContext.id="./node_modules/@storybook/addon-docs/dist sync recursive",module.exports=webpackEmptyContext},"@storybook/channels":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CHANNELS__},"@storybook/client-logger":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CLIENT_LOGGER__},"@storybook/core-client":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_CLIENT__},"@storybook/core-events":module=>{"use strict";module.exports=__STORYBOOK_MODULE_CORE_EVENTS__},"@storybook/preview-api":module=>{"use strict";module.exports=__STORYBOOK_MODULE_PREVIEW_API__},"./dist/compodoc/cdk/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"ActionConstructor","id":"interface-ActionConstructor-79d65b59eb27f474fc1f2fbef720f134360ce0d1017b538dfe48bd3ca60c6a0472d1789cdc31f57a5190150ce49b1ca0d304e9e44f722b1c4c992c619605ba68","file":"state/src/actions/actions.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { registerActionType } from \'./action-type-registry\';\\n\\n/** Base action type */\\nexport interface Action {\\n  /** Action type */\\n  readonly type: string;\\n}\\n\\n/** Base action constructor */\\nexport interface ActionConstructor {\\n  /** Action type */\\n  readonly type: string;\\n\\n  /** Create a new action */\\n  new (): Action;\\n}\\n\\n/**\\n * Creates an action factory that adds a common group string to each action type\\n * @param group Common action type group\\n * @returns An action factory\\n */\\nexport function ActionGroup(group: string): (type: string) => ActionConstructor {\\n  return (type) => Action(`[${group}] ${type}`);\\n}\\n\\n/**\\n * Creates a new base action with a specified type\\n * @param type Action type\\n * @returns A base action class\\n */\\nexport function Action(type: string): ActionConstructor {\\n  registerActionType(type);\\n  return class BaseAction {\\n    static readonly type = type;\\n    readonly type = type;\\n  };\\n}\\n","properties":[{"name":"type","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Action type</p>\\n","line":12,"rawdescription":"\\nAction type","modifierKind":[144]}],"indexSignatures":[],"kind":174,"description":"<p>Base action constructor</p>\\n","rawdescription":"\\nBase action constructor","methods":[]},{"name":"DestructorScope","id":"interface-DestructorScope-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05","file":"injectors/src/lib/on-destroy/destructor-subject.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ReplaySubject } from \'rxjs\';\\n\\n/** Object on which cleanup functions can be registered */\\nexport interface DestructorScope {\\n  /**\\n   * Register a cleanup function\\n   * @param cb Cleanup callback function\\n   */\\n  onDestroy(cb: () => void): void;\\n}\\n\\n/**\\n * Determines whether an object is destructor scope like\\n * @param obj Value to test\\n * @returns true if the object seems to be a destructor scope, otherwise false\\n */\\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\\n  const isObject = typeof obj === \'object\' && obj !== null;\\n  return isObject && \'onDestroy\' in obj && typeof obj.onDestroy === \'function\';\\n}\\n\\n/**\\n * A subject type that is associated with a destructor scope.\\n * When the cleanup function is run the subject emits a single\\n * undefined value and immediately completes\\n */\\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\\n  /**\\n   * Creates a new subject and attaches cleanup to the destructor scope\\n   * @param scope Associated scope\\n   */\\n  constructor(scope: DestructorScope) {\\n    super(1);\\n\\n    scope.onDestroy(() => {\\n      this.next();\\n      this.complete();\\n    });\\n  }\\n}\\n","properties":[],"indexSignatures":[],"kind":167,"description":"<p>Object on which cleanup functions can be registered</p>\\n","rawdescription":"\\nObject on which cleanup functions can be registered","methods":[{"name":"onDestroy","args":[{"name":"cb","type":"function","deprecated":false,"deprecationMessage":"","function":[]}],"optional":false,"returnType":"void","typeParameters":[],"line":9,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRegister a cleanup function\\n","description":"<p>Register a cleanup function</p>\\n","jsdoctags":[{"name":{"pos":184,"end":186,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"cb"},"type":"function","deprecated":false,"deprecationMessage":"","function":[],"tagName":{"pos":178,"end":183,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Cleanup callback function</p>\\n"}]}]},{"name":"HoverContext","id":"interface-HoverContext-09dbb1791c1e8551d99aeb917f0d664e71738bebaebeed4601b7634f7980b675771162be311571667692c787d939ee9eeb40e57b4627c9cd75ebc926e849cc0d","file":"src/lib/hover/hover.directive.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectionPositionPair, Overlay } from \'@angular/cdk/overlay\';\\nimport { TemplatePortal } from \'@angular/cdk/portal\';\\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\n\\n/**  Context passed to hover content templates */\\nexport interface HoverContext<T = unknown> {\\n  /** Data provided by the user for use inside the content template */\\n  $implicit: T;\\n}\\n\\n/** Hover overlay directive to be used across the application */\\n@Directive({\\n  selector: \'[hraHover]\',\\n  standalone: true,\\n})\\nexport class HoverDirective<T = unknown> {\\n  /**  Setter for the content to be displayed in the overlay */\\n  @Input(\'hraHover\')\\n  set content(content: TemplateRef<HoverContext<T>>) {\\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\\n    this.updateContent();\\n  }\\n\\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\\n  @Input(\'hraHoverData\')\\n  set data(data: T) {\\n    this._data = { $implicit: data };\\n    if (this.portal) {\\n      this.portal.context = this._data;\\n      this.updateContent();\\n    }\\n  }\\n\\n  /**  Reference to the element that the directive is attached to */\\n  private readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\\n  readonly overlayRef = inject(Overlay).create({\\n    positionStrategy: inject(Overlay)\\n      .position()\\n      .flexibleConnectedTo(this.el)\\n      .withPositions([\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'bottom\' }, { overlayX: \'end\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'top\' }, { overlayX: \'start\', overlayY: \'bottom\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'bottom\' }, { overlayX: \'start\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'top\' }, { overlayX: \'end\', overlayY: \'bottom\' }),\\n      ])\\n      .withPush(true),\\n  });\\n\\n  /** Reference view container that the directive is attached to */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Store the data that is passed into the data input property */\\n  private _data?: HoverContext<T>;\\n\\n  /** Portal that is created to display the overlay */\\n  portal?: TemplatePortal<HoverContext<T>>;\\n\\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\\n  @HostListener(\'mouseover\')\\n  startHover(): void {\\n    const { overlayRef, portal } = this;\\n    if (!overlayRef.hasAttached() && portal) {\\n      overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to handle the mouse out event to detach the portal  */\\n  @HostListener(\'mouseout\')\\n  endHover(): void {\\n    const { overlayRef } = this;\\n    if (overlayRef.hasAttached()) {\\n      overlayRef.detach();\\n    }\\n  }\\n\\n  /** Function to handle the updation of overlay with up to date content when the input changes */\\n  private updateContent(): void {\\n    const { overlayRef, portal } = this;\\n    if (overlayRef.hasAttached() && portal) {\\n      overlayRef.detach();\\n      overlayRef.attach(portal);\\n    }\\n  }\\n}\\n","properties":[{"name":"$implicit","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"<p>Data provided by the user for use inside the content template</p>\\n","line":8,"rawdescription":"\\nData provided by the user for use inside the content template"}],"indexSignatures":[],"kind":165,"description":"<p>Context passed to hover content templates</p>\\n","rawdescription":"\\nContext passed to hover content templates","methods":[]},{"name":"SelectOptions","id":"interface-SelectOptions-2a1e9b4935fb82769eb1dadf40ec0992c0e3f24e9bc0b33376fb53e5f271e89e87100bf0c22b87ea85ce9dd36fbdd2e6fb22f6978dc61aff4d02559ba5c9c8f0","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectorRef, inject } from \'@angular/core\';\\nimport { Any } from \'@hra-ui/utils/types\';\\nimport { StateToken, Store } from \'@ngxs/store\';\\nimport { MonoTypeOperatorFunction, Observable, takeUntil, tap } from \'rxjs\';\\nimport { injectDestroy$ } from \'../on-destroy/on-destroy\';\\n\\n/** Selector type for select style functions */\\nexport type StateSelector<T> = ((...args: Any[]) => T) | StateToken<T>;\\n\\n/** `select$` configuration options */\\nexport interface SelectOptions {\\n  /** Whether to mark the containing view for change detection on emits. Defaults to true. */\\n  notifyOnChange?: boolean;\\n}\\n\\n/**\\n * Marks a view for change detection whenever a new value is emitted\\n * @param options Options to explicitly disable marking\\n * @returns A rxjs operator\\n */\\nfunction markForCheck<T>(options?: SelectOptions): MonoTypeOperatorFunction<T> {\\n  const notifyOnChange = options?.notifyOnChange ?? true;\\n  const cdr = inject(ChangeDetectorRef, { optional: true });\\n  if (notifyOnChange && cdr) {\\n    const markFn = () => cdr.markForCheck();\\n    return tap({ next: markFn, error: markFn, complete: markFn });\\n  }\\n\\n  return (source) => source;\\n}\\n\\n/**\\n * Creates an observable emitting parts of the state. The observable\'s lifetime\\n * is automatically tied to the injection context where this is called.\\n * @param selector State selection function or token\\n * @param options Additional select options\\n * @returns An observable of the selected state\\n */\\nexport function select$<T>(selector: StateSelector<T>, options?: SelectOptions): Observable<T> {\\n  return inject(Store)\\n    .select(selector as StateToken<T>)\\n    .pipe(takeUntil(injectDestroy$()), markForCheck(options));\\n}\\n","properties":[{"name":"notifyOnChange","deprecated":false,"deprecationMessage":"","type":"boolean","optional":true,"description":"<p>Whether to mark the containing view for change detection on emits. Defaults to true.</p>\\n","line":13,"rawdescription":"\\nWhether to mark the containing view for change detection on emits. Defaults to true."}],"indexSignatures":[],"kind":165,"description":"<p><code>select$</code> configuration options</p>\\n","rawdescription":"\\n`select$` configuration options","methods":[]}],"injectables":[{"name":"LinkRegistryState","id":"injectable-LinkRegistryState-bfead2a3009612d204eed412fc8c69ca7e9f57b2d1fb4f3e57f693bfbc6e17c6534b44ee940a3c06f4dbac199304d4c5f8e04da519502d0f560b0c3b2d5d5175","file":"state/src/link-registry/link-registry.state.ts","properties":[],"methods":[{"name":"addMany","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddMany","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd multiple entries\\n","description":"<p>Add multiple entries</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddMany"}],"jsdoctags":[{"name":{"pos":1594,"end":1597,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1588,"end":1593,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddMany","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addOne","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Add","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd a single entry\\n","description":"<p>Add a single entry</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Add"}],"jsdoctags":[{"name":{"pos":1339,"end":1342,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1333,"end":1338,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Add","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addYaml","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":""},{"name":"filename","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":68,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nParse and add entries from yaml\\n","description":"<p>Parse and add entries from yaml</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddFromYaml"}],"jsdoctags":[{"name":{"pos":1838,"end":1841,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1832,"end":1837,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":1913,"end":1921,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"filename"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1907,"end":1912,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\\n"}]},{"name":"loadYaml","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":81,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLoad and add entries from an external yaml file\\n","description":"<p>Load and add entries from an external yaml file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadFromYaml"}],"jsdoctags":[{"name":{"pos":2338,"end":2341,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2332,"end":2337,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2415,"end":2422,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable that completes when the entries has been added</p>\\n"}]},{"name":"navigate","args":[{"name":"ctx","type":"LinkRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Navigate","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Promise<void>","typeParameters":[],"line":94,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNavigate to Internal or External urls from id\\n","description":"<p>Navigate to Internal or External urls from id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Navigate"}],"modifierKind":[131],"jsdoctags":[{"name":{"pos":2806,"end":2809,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"LinkRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2800,"end":2805,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Navigate","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2878,"end":2885,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A promise</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State for keeping track of links globally</p>\\n","rawdescription":"\\nState for keeping track of links globally","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable, NgZone } from \'@angular/core\';\\nimport { Router, UrlCreationOptions } from \'@angular/router\';\\nimport { createExternalUrl } from \'@hra-ui/utils\';\\nimport { UnionMember } from \'@hra-ui/utils/types\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable } from \'rxjs\';\\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, Navigate } from \'./link-registry.actions\';\\nimport {\\n  ExternalLinkEntry,\\n  InternalLinkEntry,\\n  LinkEntry,\\n  LinkId,\\n  LinkRegistryContext,\\n  LinkRegistryModel,\\n  LinkType,\\n  LINK_REGISTRY_SCHEMA,\\n} from \'./link-registry.model\';\\n\\n/** Query function for link entry optionally with type specified */\\nexport type LinkRegistryQuery = <T extends LinkType | string = string>(\\n  id: LinkId,\\n  type?: T\\n) => UnionMember<LinkEntry, \'type\', T> | undefined;\\n\\n/** State for keeping track of links globally */\\n@State<LinkRegistryModel>({\\n  name: \'linkRegistry\',\\n  defaults: {},\\n})\\n@Injectable()\\nexport class LinkRegistryState {\\n  /** Http service for link loading */\\n  private readonly http = inject(HttpClient);\\n  /** Injects angular router */\\n  private readonly router = inject(Router);\\n  /** Injects ngZone for routing */\\n  private readonly zone = inject(NgZone);\\n\\n  /**\\n   * Add a single entry\\n   * @param ctx State context\\n   * @param action Action with id and entry to add\\n   */\\n  @Action(Add)\\n  addOne(ctx: LinkRegistryContext, { id, entry }: Add): void {\\n    this.addMany(ctx, new AddMany({ [id]: entry }));\\n  }\\n\\n  /**\\n   * Add multiple entries\\n   * @param ctx State context\\n   * @param action Action with entries to add\\n   */\\n  @Action(AddMany)\\n  addMany(ctx: LinkRegistryContext, { entries }: AddMany): void {\\n    ctx.patchState(entries);\\n  }\\n\\n  /**\\n   * Parse and add entries from yaml\\n   * @param ctx State context\\n   * @param action Action with raw yaml data\\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\\n   */\\n  @Action(AddFromYaml)\\n  addYaml(ctx: LinkRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\\n    const data = load(yaml, { filename });\\n    const entries = LINK_REGISTRY_SCHEMA.parse(data);\\n    this.addMany(ctx, new AddMany(entries));\\n  }\\n\\n  /**\\n   * Load and add entries from an external yaml file\\n   * @param ctx State context\\n   * @param action Action with the external file url\\n   * @returns An observable that completes when the entries has been added\\n   */\\n  @Action(LoadFromYaml)\\n  loadYaml(ctx: LinkRegistryContext, { url }: LoadFromYaml): Observable<void> {\\n    return this.http\\n      .get(url, { responseType: \'text\' })\\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\\n  }\\n\\n  /**\\n   * Navigate to Internal or External urls from id\\n   * @param ctx State context\\n   * @param param1 Navigate action with link id\\n   * @returns A promise\\n   */\\n  @Action(Navigate)\\n  async navigate(ctx: LinkRegistryContext, { id, extras }: Navigate): Promise<void> {\\n    const entry = ctx.getState()[id];\\n    switch (entry?.type) {\\n      case LinkType.Internal:\\n        await this.navigateToInternal(entry, extras);\\n        break;\\n\\n      case LinkType.External:\\n        this.navigateToExternal(entry, extras);\\n        break;\\n\\n      default:\\n        throw new Error(`Cannot navigate to non-existing link \'${id}\'`);\\n    }\\n  }\\n\\n  /**\\n   * Method to navigate to an internal link using Angular router\\n   * @param entry Internal Link Entry with commands and extras\\n   */\\n  private async navigateToInternal(entry: InternalLinkEntry, extras: UrlCreationOptions): Promise<void> {\\n    await this.zone.run(() => this.router.navigate(entry.commands, { ...entry.extras, ...extras }));\\n  }\\n\\n  /**\\n   * Method to navigate to an external link using window\\n   * @param entry External link entry with url, target, and rel\\n   */\\n  private navigateToExternal(entry: ExternalLinkEntry, extras: UrlCreationOptions): void {\\n    const url = createExternalUrl(entry.url, extras);\\n    window.open(url, entry.target, entry.rel);\\n  }\\n}\\n","type":"injectable"},{"name":"ResourceRegistryState","id":"injectable-ResourceRegistryState-ee091eca7099a68b29fcf8b081af0f6e4eec5cfb7b538ee0423d54f17301e5430869290d05c8adab76fffaddd9c6c3cfff4569f15b2e831e632827f4347dee77","file":"state/src/resource-registry/resource-registry.state.ts","properties":[],"methods":[{"name":"addMany","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddMany","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":40,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd multiple entries\\n","description":"<p>Add multiple entries</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddMany"}],"jsdoctags":[{"name":{"pos":1038,"end":1041,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1032,"end":1037,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddMany","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addOne","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"Add","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdd a single entry\\n","description":"<p>Add a single entry</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Add"}],"jsdoctags":[{"name":{"pos":779,"end":782,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":773,"end":778,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"Add","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"addYaml","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":""},{"name":"filename","type":"string","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nParse and add entries from yaml\\n","description":"<p>Parse and add entries from yaml</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"AddFromYaml"}],"jsdoctags":[{"name":{"pos":1286,"end":1289,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1280,"end":1285,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"AddFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":1361,"end":1369,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"filename"},"type":"string","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1355,"end":1360,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional url/filename from which the data was loaded (for improved error messages)</p>\\n"}]},{"name":"loadMarkdown","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadMarkdown","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":77,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAdds a markdown entry with content loaded from an external file\\n","description":"<p>Adds a markdown entry with content loaded from an external file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadMarkdown"}],"jsdoctags":[{"name":{"pos":2284,"end":2287,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":2278,"end":2283,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadMarkdown","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2375,"end":2382,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable that completes when the entry has been added</p>\\n"}]},{"name":"loadYaml","args":[{"name":"ctx","type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":""},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<void>","typeParameters":[],"line":64,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nLoad and add entries from an external yaml file\\n","description":"<p>Load and add entries from an external yaml file</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"LoadFromYaml"}],"jsdoctags":[{"name":{"pos":1794,"end":1797,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ResourceRegistryContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1788,"end":1793,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State context</p>\\n"},{"type":"LoadFromYaml","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":1871,"end":1878,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable that completes when the entries has been added</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State keeping track of global resources</p>\\n","rawdescription":"\\nState keeping track of global resources","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable } from \'rxjs\';\\nimport { Add, AddFromYaml, AddMany, LoadFromYaml, LoadMarkdown } from \'./resource-registry.actions\';\\nimport {\\n  BuiltinResourceType,\\n  ResourceRegistryContext,\\n  ResourceRegistryModel,\\n  RESOURCE_REGISTRY_SCHEMA,\\n} from \'./resource-registry.model\';\\n\\n/** State keeping track of global resources */\\n@State<ResourceRegistryModel>({\\n  name: \'resourceRegistry\',\\n  defaults: {},\\n})\\n@Injectable()\\nexport class ResourceRegistryState {\\n  /** Http service for resource loading */\\n  private readonly http = inject(HttpClient);\\n\\n  /**\\n   * Add a single entry\\n   * @param ctx State context\\n   * @param action Action with id and entry to add\\n   */\\n  @Action(Add)\\n  addOne(ctx: ResourceRegistryContext, { id, entry }: Add): void {\\n    this.addMany(ctx, new AddMany({ [id]: entry }));\\n  }\\n\\n  /**\\n   * Add multiple entries\\n   * @param ctx State context\\n   * @param action Action with entries to add\\n   */\\n  @Action(AddMany)\\n  addMany(ctx: ResourceRegistryContext, { entries }: AddMany): void {\\n    ctx.patchState(entries);\\n  }\\n\\n  /**\\n   * Parse and add entries from yaml\\n   * @param ctx State context\\n   * @param action Action with raw yaml data\\n   * @param filename Optional url/filename from which the data was loaded (for improved error messages)\\n   */\\n  @Action(AddFromYaml)\\n  addYaml(ctx: ResourceRegistryContext, { yaml }: AddFromYaml, filename?: string): void {\\n    const data = load(yaml, { filename });\\n    const entries = RESOURCE_REGISTRY_SCHEMA.parse(data);\\n    this.addMany(ctx, new AddMany(entries));\\n  }\\n\\n  /**\\n   * Load and add entries from an external yaml file\\n   * @param ctx State context\\n   * @param action Action with the external file url\\n   * @returns An observable that completes when the entries has been added\\n   */\\n  @Action(LoadFromYaml)\\n  loadYaml(ctx: ResourceRegistryContext, { url }: LoadFromYaml): Observable<void> {\\n    return this.http\\n      .get(url, { responseType: \'text\' })\\n      .pipe(map((data) => this.addYaml(ctx, new AddFromYaml(data), url)));\\n  }\\n\\n  /**\\n   * Adds a markdown entry with content loaded from an external file\\n   * @param ctx State context\\n   * @param action Action with id and url to the external markdown\\n   * @returns An observable that completes when the entry has been added\\n   */\\n  @Action(LoadMarkdown)\\n  loadMarkdown(ctx: ResourceRegistryContext, { id, url }: LoadMarkdown): Observable<void> {\\n    return this.http.get(url, { responseType: \'text\' }).pipe(\\n      map((markdown) => new Add(id, { type: BuiltinResourceType.Markdown, markdown })),\\n      map((action) => this.addOne(ctx, action))\\n    );\\n  }\\n}\\n","type":"injectable"},{"name":"StorageState","id":"injectable-StorageState-72ac0507a219407170a641eb4ddefe5f02c0732d08adcd982880a7dd4d0f18ca6dcce1c0b1395a82191bcf464db28277c68d3df9b3f5ac52620adc50aabfd494","file":"state/src/storage/storage.state.ts","properties":[],"methods":[{"name":"clear","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Clear","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":65,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nclears the values of the specified storage id\\n","description":"<p>clears the values of the specified storage id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Clear"}],"jsdoctags":[{"name":{"pos":1825,"end":1828,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1819,"end":1824,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Clear","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"delete","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Delete","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":55,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ndeletes the value pointed by key in the list of values stored in the specified storage id\\n","description":"<p>deletes the value pointed by key in the list of values stored in the specified storage id</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Delete"}],"jsdoctags":[{"name":{"pos":1441,"end":1444,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1435,"end":1440,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Delete","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"getStorage","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Storage","typeParameters":[],"line":27,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nStorageState class to manage storage objects\\n","description":"<p>StorageState class to manage storage objects</p>\\n","modifierKind":[124],"jsdoctags":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":627,"end":634,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<ul>\\n<li>Storage objects - session and local</li>\\n</ul>\\n"}]},{"name":"set","args":[{"name":"ctx","type":"StorageContext","deprecated":false,"deprecationMessage":""},{"type":"Set","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nsets the key,value pair in the given storageId\\n","description":"<p>sets the key,value pair in the given storageId</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Set"}],"jsdoctags":[{"name":{"pos":1010,"end":1013,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"StorageContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1004,"end":1009,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>StorageContext object</li>\\n</ul>\\n"},{"type":"Set","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State holding Storage types</p>\\n","rawdescription":"\\n\\nState holding Storage types\\n","sourceCode":"import { produce } from \'immer\';\\nimport { StorageContext } from \'./storage.model\';\\nimport { Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { StorageId, StorageModel } from \'./storage.model\';\\nimport { Set, Delete, Clear } from \'./storage.actions\';\\n/**\\n * State holding Storage types\\n */\\n@State<StorageModel>({\\n  name: \'storage\',\\n  defaults: {\\n    [StorageId.Local]: 0,\\n    [StorageId.Session]: 0,\\n  },\\n})\\n@Injectable()\\n/**\\n *  class for managing storage state\\n */\\nexport class StorageState {\\n  /**\\n   * StorageState class to manage storage objects\\n   * @param id-Storage Identifier\\n   * @returns - Storage objects - session and local\\n   */\\n  static getStorage(id: StorageId): Storage {\\n    switch (id) {\\n      case StorageId.Local:\\n        return localStorage;\\n\\n      case StorageId.Session:\\n        return sessionStorage;\\n\\n      default:\\n        throw new Error(`No such storage \'${id}\'`);\\n    }\\n  }\\n  /**\\n   * sets the key,value pair in the given storageId\\n   * @param ctx - StorageContext object\\n   * @param param1- {id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Set)\\n  set(ctx: StorageContext, { id, key, value }: Set): void {\\n    StorageState.getStorage(id).setItem(key, value);\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * deletes the value pointed by key in the list of values stored in the specified storage id\\n   * @param ctx - StorageContext object\\n   * @param param1- id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Delete)\\n  delete(ctx: StorageContext, { id, key }: Delete): void {\\n    StorageState.getStorage(id).removeItem(key);\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * clears the values of the specified storage id\\n   * @param ctx - StorageContext object\\n   * @param param1 - id: StorageId ,key:string ,value:string} of type Set to set key,value pair for the given id\\n   */\\n  @Action(Clear)\\n  clear(ctx: StorageContext, { id }: Clear): void {\\n    StorageState.getStorage(id).clear();\\n    this.increaseChangeCount(ctx, id);\\n  }\\n  /**\\n   * increases count after each operation is performed on the specified storage id\\n   * @param ctx  - StorageContext obje\\n   * @param id - StorageId - Storage identifier for which the change count has to be updated\\n   */\\n  private increaseChangeCount(ctx: StorageContext, id: StorageId): void {\\n    ctx.setState(\\n      produce((draft) => {\\n        draft[id] += 1;\\n      })\\n    );\\n  }\\n}\\n","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"Add","id":"class-Add-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite a single link</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"LinkId","deprecated":false,"deprecationMessage":""},{"name":"entry","type":"LinkEntry","deprecated":false,"deprecationMessage":""}],"line":9,"rawdescription":"\\n\\nAdd or overwrite a single link\\n","jsdoctags":[{"name":{"pos":356,"end":358,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"LinkId","deprecated":false,"deprecationMessage":"","tagName":{"pos":350,"end":355,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>link identifier</p>\\n"},{"name":{"pos":387,"end":392,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"entry"},"type":"LinkEntry","deprecated":false,"deprecationMessage":"","tagName":{"pos":381,"end":386,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>link entry</p>\\n"}]},"properties":[],"description":"<p>Add a single link</p>\\n","rawdescription":"\\nAdd a single link","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"Add","id":"class-Add-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite a single resource</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"entry","type":"ResourceEntry","deprecated":false,"deprecationMessage":""}],"line":8,"rawdescription":"\\n\\nAdd or overwrite a single resource\\n","jsdoctags":[{"name":{"pos":326,"end":328,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":320,"end":325,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Resource identifier</p>\\n"},{"name":{"pos":361,"end":366,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"entry"},"type":"ResourceEntry","deprecated":false,"deprecationMessage":"","tagName":{"pos":355,"end":360,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Resource entry</p>\\n"}]},"properties":[],"description":"<p>Add a single resource</p>\\n","rawdescription":"\\nAdd a single resource","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"Add-1"},{"name":"AddFromYaml","id":"class-AddFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add links from unparsed yaml</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"yaml","type":"string","deprecated":false,"deprecationMessage":""}],"line":32,"rawdescription":"\\n\\nAdd links from unparsed yaml\\n","jsdoctags":[{"name":{"pos":892,"end":896,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"yaml"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":886,"end":891,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Unparsed yaml data</p>\\n"}]},"properties":[],"description":"<p>Add entries from yaml file</p>\\n","rawdescription":"\\nAdd entries from yaml file","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AddFromYaml","id":"class-AddFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add resources from unparsed yaml</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"yaml","type":"string","deprecated":false,"deprecationMessage":""}],"line":31,"rawdescription":"\\n\\nAdd resources from unparsed yaml\\n","jsdoctags":[{"name":{"pos":908,"end":912,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"yaml"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":902,"end":907,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Unparsed yaml data</p>\\n"}]},"properties":[],"description":"<p>Add resources from raw yaml data</p>\\n","rawdescription":"\\nAdd resources from raw yaml data","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"AddFromYaml-1"},{"name":"AddMany","id":"class-AddMany-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite multiple links</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"entries","type":"Partial<Record<LinkId, LinkEntry>>","deprecated":false,"deprecationMessage":""}],"line":21,"rawdescription":"\\n\\nAdd or overwrite multiple links\\n","jsdoctags":[{"name":{"pos":633,"end":640,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"entries"},"type":"Partial<Record<LinkId, LinkEntry>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":627,"end":632,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>New links</p>\\n"}]},"properties":[],"description":"<p>Add multiple links at once</p>\\n","rawdescription":"\\nAdd multiple links at once","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"AddMany","id":"class-AddMany-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Add or overwrite multiple resources</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"entries","type":"Partial<Record<ResourceId, ResourceEntry>>","deprecated":false,"deprecationMessage":""}],"line":20,"rawdescription":"\\n\\nAdd or overwrite multiple resources\\n","jsdoctags":[{"name":{"pos":627,"end":634,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"entries"},"type":"Partial<Record<ResourceId, ResourceEntry>>","deprecated":false,"deprecationMessage":"","tagName":{"pos":621,"end":626,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>New resources</p>\\n"}]},"properties":[],"description":"<p>Add multiple resources at once</p>\\n","rawdescription":"\\nAdd multiple resources at once","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"AddMany-1"},{"name":"Clear","id":"class-Clear-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for clear action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""}],"line":37,"rawdescription":"\\n\\nconstructor class for clear action object\\n","jsdoctags":[{"name":{"pos":1146,"end":1148,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1140,"end":1145,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"}]},"properties":[],"description":"<p>Clear the values stored in the specified StorageId</p>\\n","rawdescription":"\\n\\nClear the values stored in the specified StorageId\\n","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"Delete","id":"class-Delete-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for Delete action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""},{"name":"key","type":"string","deprecated":false,"deprecationMessage":""}],"line":24,"rawdescription":"\\n\\nconstructor class for Delete action object\\n","jsdoctags":[{"name":{"pos":769,"end":771,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":763,"end":768,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"},{"name":{"pos":823,"end":826,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":817,"end":822,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - Key to be stored in the storage identifier</li>\\n</ul>\\n"}]},"properties":[],"description":"<p> Class Delete Action for delete method</p>\\n","rawdescription":"\\n\\n Class Delete Action for delete method\\n","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LinkRegistrySelectors","id":"class-LinkRegistrySelectors-06d9e020c846f4521dcfb2095cd0e77e9f6aa4c734e6cd2f8081eef02dec593dc6ad455cf1a4d65585ecec0f48fb03db1829258cbc3db21e3c7603e10eb90644","file":"state/src/link-registry/link-registry.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UnionMember } from \'@hra-ui/utils/types\';\\nimport { Selector } from \'@ngxs/store\';\\nimport { LinkEntry, LinkId, LinkRegistryModel, LinkType } from \'./link-registry.model\';\\nimport { LinkRegistryQuery, LinkRegistryState } from \'./link-registry.state\';\\n\\n/**\\n * Selectors for Link Registry\\n */\\nexport class LinkRegistrySelectors {\\n  /**\\n   * Queries for a link entry\\n   * @param state Current state\\n   * @returns link query function\\n   */\\n  @Selector([LinkRegistryState])\\n  static query(state: LinkRegistryModel): LinkRegistryQuery {\\n    return (id, type) => this.getEntry(state, id, type);\\n  }\\n\\n  /**\\n   * Gets a link entry by id and optionally type\\n   * @param state link registry state\\n   * @param id Entry id\\n   * @param type Optional entry type\\n   * @returns The entry if found, undefined otherwise\\n   */\\n  private static getEntry<T extends LinkType | string>(\\n    state: LinkRegistryModel,\\n    id: LinkId,\\n    type?: T\\n  ): UnionMember<LinkEntry, \'type\', T> | undefined {\\n    const entry = state[id] as UnionMember<LinkEntry, \'type\', T>;\\n    const typeMatches = type === undefined || entry?.type === type;\\n    return typeMatches ? entry : undefined;\\n  }\\n}\\n","properties":[],"description":"<p>Selectors for Link Registry</p>\\n","rawdescription":"\\n\\nSelectors for Link Registry\\n","methods":[{"name":"query","args":[{"name":"state","type":"LinkRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"LinkRegistryQuery","typeParameters":[],"line":16,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries for a link entry\\n","description":"<p>Queries for a link entry</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'LinkRegistryState\']"}],"modifierKind":[124],"jsdoctags":[{"name":{"pos":382,"end":387,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"LinkRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":376,"end":381,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":408,"end":415,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>link query function</p>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LoadFromYaml","id":"class-LoadFromYaml-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote yaml file and add links</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":43,"rawdescription":"\\n\\nLoads a remote yaml file and add links\\n","jsdoctags":[{"name":{"pos":1145,"end":1148,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1139,"end":1144,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Remote yaml file url</p>\\n"}]},"properties":[],"description":"<p>Add links from a remote yaml file</p>\\n","rawdescription":"\\nAdd links from a remote yaml file","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"LoadFromYaml","id":"class-LoadFromYaml-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c-1","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote yaml file and add resources</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":42,"rawdescription":"\\n\\nLoads a remote yaml file and add resources\\n","jsdoctags":[{"name":{"pos":1169,"end":1172,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1163,"end":1168,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Remote yaml file url</p>\\n"}]},"properties":[],"description":"<p>Add resources from a remote yaml file</p>\\n","rawdescription":"\\nAdd resources from a remote yaml file","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"isDuplicate":true,"duplicateId":1,"duplicateName":"LoadFromYaml-1"},{"name":"LoadMarkdown","id":"class-LoadMarkdown-61aead3798856298b447f99ca03606a2a2d8d56ee3f496c5b87f3d3f63353ae681b92695370bd0d6228b5baf070b9c7e72f1decbe41c0fb4ef6e71fc441c807c","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { ResourceEntry, ResourceId } from \'./resource-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'ResourceRegistry\');\\n\\n/** Add a single resource */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single resource\\n   * @param id Resource identifier\\n   * @param entry Resource entry\\n   */\\n  constructor(readonly id: ResourceId, readonly entry: ResourceEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple resources at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple resources\\n   * @param entries New resources\\n   */\\n  constructor(readonly entries: Partial<Record<ResourceId, ResourceEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from raw yaml data */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add resources from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add resources from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add resources\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n\\n/** Add a markdown resource with data loaded from a remote file */\\nexport class LoadMarkdown extends Action(\'Load Markdown\') {\\n  /**\\n   * Loads a remote markdown file and add a resource\\n   * @param id Resource id\\n   * @param url Remote markdown file url\\n   */\\n  constructor(readonly id: ResourceId, readonly url: string) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Loads a remote markdown file and add a resource</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":53,"rawdescription":"\\n\\nLoads a remote markdown file and add a resource\\n","jsdoctags":[{"name":{"pos":1456,"end":1458,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1450,"end":1455,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":1483,"end":1486,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":1477,"end":1482,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Remote markdown file url</p>\\n"}]},"properties":[],"description":"<p>Add a markdown resource with data loaded from a remote file</p>\\n","rawdescription":"\\nAdd a markdown resource with data loaded from a remote file","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"Navigate","id":"class-Navigate-a88ac09a4c4d4396193ff1cc301dd02821aadc734d1f1fb6171368181244b64a8df3c4c16295034b76c3ecf3d2b04d34b369c6f49a9b5ee1d4b8f7a13f019acc","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { UrlCreationOptions } from \'@angular/router\';\\nimport { ActionGroup } from \'../actions/actions\';\\nimport { LinkEntry, LinkId } from \'./link-registry.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'LinkRegistry\');\\n\\n/** Add a single link */\\nexport class Add extends Action(\'Add\') {\\n  /**\\n   * Add or overwrite a single link\\n   * @param id link identifier\\n   * @param entry link entry\\n   */\\n  constructor(readonly id: LinkId, readonly entry: LinkEntry) {\\n    super();\\n  }\\n}\\n\\n/** Add multiple links at once */\\nexport class AddMany extends Action(\'Add Many\') {\\n  /**\\n   * Add or overwrite multiple links\\n   * @param entries New links\\n   */\\n  constructor(readonly entries: Partial<Record<LinkId, LinkEntry>>) {\\n    super();\\n  }\\n}\\n\\n/** Add entries from yaml file */\\nexport class AddFromYaml extends Action(\'Add from Yaml\') {\\n  /**\\n   * Add links from unparsed yaml\\n   * @param yaml Unparsed yaml data\\n   */\\n  constructor(readonly yaml: string) {\\n    super();\\n  }\\n}\\n\\n/** Add links from a remote yaml file */\\nexport class LoadFromYaml extends Action(\'Load from Yaml\') {\\n  /**\\n   * Loads a remote yaml file and add links\\n   * @param url Remote yaml file url\\n   */\\n  constructor(readonly url: string) {\\n    super();\\n  }\\n}\\n/** Navigate to an Internal or external url from Link id */\\nexport class Navigate extends Action(\'Navigate\') {\\n  /**\\n   * navigate to a link\\n   * @param id unqiue identifier of link\\n   * @param extras Options when building the navigation url\\n   */\\n  constructor(readonly id: LinkId, readonly extras: UrlCreationOptions = {}) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>navigate to a link</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"LinkId","deprecated":false,"deprecationMessage":""},{"name":"extras","type":"UrlCreationOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}"}],"line":53,"rawdescription":"\\n\\nnavigate to a link\\n","jsdoctags":[{"name":{"pos":1386,"end":1388,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"LinkId","deprecated":false,"deprecationMessage":"","tagName":{"pos":1380,"end":1385,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>unqiue identifier of link</p>\\n"},{"name":{"pos":1427,"end":1433,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"extras"},"type":"UrlCreationOptions","deprecated":false,"deprecationMessage":"","defaultValue":"{}","tagName":{"pos":1421,"end":1426,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Options when building the navigation url</p>\\n"}]},"properties":[],"description":"<p>Navigate to an Internal or external url from Link id</p>\\n","rawdescription":"\\nNavigate to an Internal or external url from Link id","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ResourceRegistrySelectors","id":"class-ResourceRegistrySelectors-30ee3cdaa36f8226c7eb574e0036e13521cbd6aeb6308e5ace88b8f7fd329f9bf1e99352d718ddf22dd6071fcd1548ba48117f604dc8951e00c89e925255254d","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Selector } from \'@ngxs/store\';\\nimport {\\n  BuiltinResourceType,\\n  getEntry,\\n  ResourceEntry,\\n  ResourceId,\\n  ResourceRegistryModel,\\n  ResourceType,\\n} from \'./resource-registry.model\';\\nimport { ResourceRegistryState } from \'./resource-registry.state\';\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.entry} */\\nexport type EntryQuery = <T extends ResourceEntry>(id: ResourceId, type: ResourceType<T>) => T | undefined;\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.anyEntry} */\\nexport type AnyEntryQuery = (id: ResourceId) => ResourceEntry | undefined;\\n\\n/** Query function returned by {@link ResourceRegistrySelectors.field} */\\nexport type FieldQuery = <T extends ResourceEntry, K extends keyof T>(\\n  id: ResourceId,\\n  type: ResourceType<T>,\\n  field: K,\\n  defaultValue?: T[K]\\n) => T[K];\\n\\n/** Query function for resource data */\\nexport type DataQuery<T> = (id: ResourceId) => T;\\n\\n/** Selectors for ResourceRegistry */\\nexport class ResourceRegistrySelectors {\\n  /**\\n   * Queries an entry by id and type\\n   * @param state Current state\\n   * @returns Entry query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static entry(state: ResourceRegistryModel): EntryQuery {\\n    return (id, type) => getEntry(state, id, type);\\n  }\\n\\n  /**\\n   * Queries an entry by id\\n   * @param state Current state\\n   * @returns Any entry query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static anyEntry(state: ResourceRegistryModel): AnyEntryQuery {\\n    return (id) => getEntry(state, id);\\n  }\\n\\n  /**\\n   * Queries a field of an entry\\n   * @param state Current state\\n   * @returns A field query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static field(state: ResourceRegistryModel): FieldQuery {\\n    return (id, type, field, defaultValue?) => {\\n      const entry = getEntry(state, id, type);\\n      return entry?.[field] ?? (defaultValue as never);\\n    };\\n  }\\n\\n  /**\\n   * Query for any text data\\n   * @param state Current state\\n   * @returns Text data query function\\n   */\\n  @Selector([ResourceRegistryState])\\n  static anyText(state: ResourceRegistryModel): DataQuery<string> {\\n    return (id) => {\\n      const entry = getEntry(state, id);\\n      switch (entry?.type) {\\n        case BuiltinResourceType.Markdown:\\n          return entry.markdown;\\n\\n        case BuiltinResourceType.Text:\\n          return entry.text;\\n\\n        default:\\n          return \'\';\\n      }\\n    };\\n  }\\n\\n  /**\\n   * Query for markdown data\\n   * @param state Current state\\n   * @returns Markdown data query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field])\\n  static markdown(getField: FieldQuery): DataQuery<string> {\\n    return (id) => getField(id, BuiltinResourceType.Markdown, \'markdown\', \'\');\\n  }\\n\\n  /**\\n   * Query for text data\\n   * @param state Current state\\n   * @returns Text data query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field])\\n  static text(getField: FieldQuery): DataQuery<string> {\\n    return (id) => getField(id, BuiltinResourceType.Text, \'text\', \'\');\\n  }\\n\\n  /**\\n   * Query for an url\\n   * @param state Current state\\n   * @returns Url query function\\n   */\\n  @Selector([ResourceRegistrySelectors.field])\\n  static url(getField: FieldQuery): DataQuery<string> {\\n    return (id) => getField(id, BuiltinResourceType.Url, \'url\', \'\');\\n  }\\n}\\n","properties":[],"description":"<p>Selectors for ResourceRegistry</p>\\n","rawdescription":"\\nSelectors for ResourceRegistry","methods":[{"name":"anyEntry","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"AnyEntryQuery","typeParameters":[],"line":47,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries an entry by id\\n","description":"<p>Queries an entry by id</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[124],"jsdoctags":[{"name":{"pos":1315,"end":1320,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1309,"end":1314,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1341,"end":1348,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Any entry query function</p>\\n"}]},{"name":"anyText","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":70,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for any text data\\n","description":"<p>Query for any text data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[124],"jsdoctags":[{"name":{"pos":1948,"end":1953,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1942,"end":1947,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1974,"end":1981,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Text data query function</p>\\n"}]},{"name":"entry","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"EntryQuery","typeParameters":[],"line":37,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries an entry by id and type\\n","description":"<p>Queries an entry by id and type</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[124],"jsdoctags":[{"name":{"pos":1055,"end":1060,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1049,"end":1054,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1081,"end":1088,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Entry query function</p>\\n"}]},{"name":"field","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"FieldQuery","typeParameters":[],"line":57,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQueries a field of an entry\\n","description":"<p>Queries a field of an entry</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'ResourceRegistryState\']"}],"modifierKind":[124],"jsdoctags":[{"name":{"pos":1578,"end":1583,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":1572,"end":1577,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state</p>\\n"},{"tagName":{"pos":1604,"end":1611,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A field query function</p>\\n"}]},{"name":"markdown","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":92,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for markdown data\\n","description":"<p>Query for markdown data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\']"}],"modifierKind":[124],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2486,"end":2493,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Markdown data query function</p>\\n"}]},{"name":"text","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":102,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for text data\\n","description":"<p>Query for text data</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\']"}],"modifierKind":[124],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":2790,"end":2797,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Text data query function</p>\\n"}]},{"name":"url","args":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"DataQuery<string>","typeParameters":[],"line":112,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nQuery for an url\\n","description":"<p>Query for an url</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'undefined\']"}],"modifierKind":[124],"jsdoctags":[{"name":"getField","type":"FieldQuery","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":3075,"end":3082,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>Url query function</p>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"ScopedDestructorSubject","id":"class-ScopedDestructorSubject-c4b53b823f2f6845a68f4b66881cc81070616d6b5124d0d203f80f1eeee060d84d1d05eab91b3a6e833ea4aef93cdf9d68ef0051d58b85ca5101c609dad76a05","file":"injectors/src/lib/on-destroy/destructor-subject.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ReplaySubject } from \'rxjs\';\\n\\n/** Object on which cleanup functions can be registered */\\nexport interface DestructorScope {\\n  /**\\n   * Register a cleanup function\\n   * @param cb Cleanup callback function\\n   */\\n  onDestroy(cb: () => void): void;\\n}\\n\\n/**\\n * Determines whether an object is destructor scope like\\n * @param obj Value to test\\n * @returns true if the object seems to be a destructor scope, otherwise false\\n */\\nexport function isDestructorScopeLike(obj: unknown): obj is DestructorScope {\\n  const isObject = typeof obj === \'object\' && obj !== null;\\n  return isObject && \'onDestroy\' in obj && typeof obj.onDestroy === \'function\';\\n}\\n\\n/**\\n * A subject type that is associated with a destructor scope.\\n * When the cleanup function is run the subject emits a single\\n * undefined value and immediately completes\\n */\\nexport class ScopedDestructorSubject extends ReplaySubject<void> {\\n  /**\\n   * Creates a new subject and attaches cleanup to the destructor scope\\n   * @param scope Associated scope\\n   */\\n  constructor(scope: DestructorScope) {\\n    super(1);\\n\\n    scope.onDestroy(() => {\\n      this.next();\\n      this.complete();\\n    });\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>Creates a new subject and attaches cleanup to the destructor scope</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"scope","type":"DestructorScope","deprecated":false,"deprecationMessage":""}],"line":27,"rawdescription":"\\n\\nCreates a new subject and attaches cleanup to the destructor scope\\n","jsdoctags":[{"name":{"pos":985,"end":990,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"scope"},"type":"DestructorScope","deprecated":false,"deprecationMessage":"","tagName":{"pos":979,"end":984,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Associated scope</p>\\n"}]},"properties":[],"description":"<p>A subject type that is associated with a destructor scope.\\nWhen the cleanup function is run the subject emits a single\\nundefined value and immediately completes</p>\\n","rawdescription":"\\n\\nA subject type that is associated with a destructor scope.\\nWhen the cleanup function is run the subject emits a single\\nundefined value and immediately completes\\n","methods":[],"indexSignatures":[],"extends":"ReplaySubject","inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"Set","id":"class-Set-bf7759a40e4d0e8e6314490589639d3b7dd6bdcc54fb05fadb475414c800a55e8d35049821318bb00cd59d904882087867195819aead7c752730abddf2833ce1","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ActionGroup } from \'../actions/actions\';\\nimport { StorageId } from \'./storage.model\';\\n\\n/** Base action factory */\\nconst Action = ActionGroup(\'Storage\');\\n\\n/**\\n * Class Set Action for set method\\n */\\nexport class Set extends Action(\'Set\') {\\n  /**\\n   * constructor class for Set action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   * @param value - type: string - value to be stored with the key\\n   */\\n  constructor(readonly id: StorageId, readonly key: string, readonly value: string) {\\n    super();\\n  }\\n}\\n/**\\n *  Class Delete Action for delete method\\n */\\nexport class Delete extends Action(\'Delete\') {\\n  /**\\n   * constructor class for Delete action object\\n   * @param id - type: StorageId - Storage identifier\\n   * @param key - type: string - Key to be stored in the storage identifier\\n   */\\n  constructor(readonly id: StorageId, readonly key: string) {\\n    super();\\n  }\\n}\\n/**\\n * Clear the values stored in the specified StorageId\\n */\\nexport class Clear extends Action(\'Clear\') {\\n  /**\\n   * constructor class for clear action object\\n   * @param id - type: StorageId - Storage identifier\\n   */\\n  constructor(readonly id: StorageId) {\\n    super();\\n  }\\n}\\n","constructorObj":{"name":"constructor","description":"<p>constructor class for Set action object</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"id","type":"StorageId","deprecated":false,"deprecationMessage":""},{"name":"key","type":"string","deprecated":false,"deprecationMessage":""},{"name":"value","type":"string","deprecated":false,"deprecationMessage":""}],"line":10,"rawdescription":"\\n\\nconstructor class for Set action object\\n","jsdoctags":[{"name":{"pos":310,"end":312,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"StorageId","deprecated":false,"deprecationMessage":"","tagName":{"pos":304,"end":309,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: StorageId - Storage identifier</li>\\n</ul>\\n"},{"name":{"pos":364,"end":367,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"key"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":358,"end":363,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - Key to be stored in the storage identifier</li>\\n</ul>\\n"},{"name":{"pos":440,"end":445,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":434,"end":439,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<ul>\\n<li>type: string - value to be stored with the key</li>\\n</ul>\\n"}]},"properties":[],"description":"<p>Class Set Action for set method</p>\\n","rawdescription":"\\n\\nClass Set Action for set method\\n","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]},{"name":"SnapshotObserver","id":"class-SnapshotObserver-e299315c33d01b7c5b9d7d2f8238209af3dd388427c9dfe124370b0bfb7c5852050237aaa3ca958ccb01cd0160e3e0a8d823189c91a4e0415996d17a10fef041","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { ErrorObserver, NextObserver } from \'rxjs\';\\n\\n/** Object indicating that no error has been emitted */\\nconst NO_ERROR_SENTINEL_OBJ = {};\\n\\n/** Observer storing the latest value from a snapshot stream */\\nexport class SnapshotObserver<T> implements NextObserver<T>, ErrorObserver<T> {\\n  /** The latest value */\\n  private value?: T = undefined;\\n  /** An error value if not equal to `NO_ERROR_SENTINEL` */\\n  private errorValue: unknown = NO_ERROR_SENTINEL_OBJ;\\n\\n  /**\\n   * Gets the latest value or throw on errors\\n   * @returns The latest value\\n   * @throws If an error has been emitted\\n   */\\n  get(): T {\\n    if (this.errorValue !== NO_ERROR_SENTINEL_OBJ) {\\n      throw this.errorValue;\\n    }\\n\\n    return this.value as T;\\n  }\\n\\n  /**\\n   * Handles value emits\\n   * @param value The new value\\n   */\\n  next(value: T): void {\\n    this.value = value;\\n  }\\n\\n  /**\\n   * Handles error emits\\n   * @param err The error value\\n   */\\n  error(err: unknown): void {\\n    this.value = undefined;\\n    this.errorValue = err;\\n  }\\n}\\n","properties":[],"description":"<p>Observer storing the latest value from a snapshot stream</p>\\n","rawdescription":"\\nObserver storing the latest value from a snapshot stream","methods":[{"name":"error","args":[{"name":"err","type":"","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":38,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandles error emits\\n","description":"<p>Handles error emits</p>\\n","jsdoctags":[{"name":{"pos":895,"end":898,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"err"},"type":"","deprecated":false,"deprecationMessage":"","tagName":{"pos":889,"end":894,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The error value</p>\\n"}]},{"name":"get","args":[],"optional":false,"returnType":"T","typeParameters":[],"line":18,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets the latest value or throw on errors\\n","description":"<p>Gets the latest value or throw on errors</p>\\n","jsdoctags":[{"tagName":{"pos":521,"end":528,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The latest value</p>\\n"}]},{"name":"next","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":30,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nHandles value emits\\n","description":"<p>Handles value emits</p>\\n","jsdoctags":[{"name":{"pos":772,"end":777,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":766,"end":771,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The new value</p>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[],"implements":["NextObserver","ErrorObserver"]},{"name":"StorageSelectors","id":"class-StorageSelectors-0d938da881e0833812d0d5fc912c373462855e27613ce56879abba3b34f8959431587c9ddcb129155b8908fe5dfe59498c3fcf8f154c461cf4461e749b880df5","file":"state/src/storage/storage.selectors.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"import { Selector } from \'@ngxs/store\';\\nimport { StorageId } from \'./storage.model\';\\nimport { StorageState } from \'./storage.state\';\\n/**\\n * Storage selectors - class for retrieving storage types\\n */\\nexport class StorageSelectors {\\n  /**\\n   * returns the value stored in the key,value pair in the storageId given\\n   * @returns (id,key) of the given storage id else undefined\\n   */\\n  @Selector([StorageState])\\n  static get(): (id: StorageId, key: string) => string | undefined {\\n    return (id, key) => StorageState.getStorage(id).getItem(key) ?? undefined;\\n  }\\n  /**\\n   * returns the number of items in the given storage id stored\\n   * @returns length of the given StorageId supplied\\n   */\\n  @Selector([StorageState])\\n  // eslint-disable-next-line @typescript-eslint/ban-ts-comment\\n  // @ts-ignore Allow selector name\\n  static length(): (id: StorageId) => number | undefined {\\n    return (id) => StorageState.getStorage(id).length;\\n  }\\n}\\n","properties":[],"description":"<p>Storage selectors - class for retrieving storage types</p>\\n","rawdescription":"\\n\\nStorage selectors - class for retrieving storage types\\n","methods":[{"name":"get","args":[],"optional":false,"returnType":"string | undefined","typeParameters":[],"line":13,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nreturns the value stored in the key,value pair in the storageId given\\n","description":"<p>returns the value stored in the key,value pair in the storageId given</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'StorageState\']"}],"modifierKind":[124],"jsdoctags":[{"tagName":{"pos":318,"end":325,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>(id,key) of the given storage id else undefined</p>\\n"}]},{"name":"length","args":[],"optional":false,"returnType":"number | undefined","typeParameters":[],"line":23,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nreturns the number of items in the given storage id stored\\n","description":"<p>returns the number of items in the given storage id stored</p>\\n","decorators":[{"name":"Selector","stringifiedArguments":"[\'StorageState\']"}],"modifierKind":[124],"jsdoctags":[{"tagName":{"pos":636,"end":643,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>length of the given StorageId supplied</p>\\n"}]}],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[{"name":"HoverDirective","id":"directive-HoverDirective-09dbb1791c1e8551d99aeb917f0d664e71738bebaebeed4601b7634f7980b675771162be311571667692c787d939ee9eeb40e57b4627c9cd75ebc926e849cc0d","file":"src/lib/hover/hover.directive.ts","type":"directive","description":"<p>Hover overlay directive to be used across the application</p>\\n","rawdescription":"\\nHover overlay directive to be used across the application","sourceCode":"import { ConnectionPositionPair, Overlay } from \'@angular/cdk/overlay\';\\nimport { TemplatePortal } from \'@angular/cdk/portal\';\\nimport { Directive, ElementRef, HostListener, inject, Input, TemplateRef, ViewContainerRef } from \'@angular/core\';\\n\\n/**  Context passed to hover content templates */\\nexport interface HoverContext<T = unknown> {\\n  /** Data provided by the user for use inside the content template */\\n  $implicit: T;\\n}\\n\\n/** Hover overlay directive to be used across the application */\\n@Directive({\\n  selector: \'[hraHover]\',\\n  standalone: true,\\n})\\nexport class HoverDirective<T = unknown> {\\n  /**  Setter for the content to be displayed in the overlay */\\n  @Input(\'hraHover\')\\n  set content(content: TemplateRef<HoverContext<T>>) {\\n    this.portal = new TemplatePortal(content, this.viewContainerRef, this._data);\\n    this.updateContent();\\n  }\\n\\n  /** Setter for the context that is to be displayed in the portal attached to the overlay */\\n  @Input(\'hraHoverData\')\\n  set data(data: T) {\\n    this._data = { $implicit: data };\\n    if (this.portal) {\\n      this.portal.context = this._data;\\n      this.updateContent();\\n    }\\n  }\\n\\n  /**  Reference to the element that the directive is attached to */\\n  private readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /**  Reference to the overlay that is created when the userhovers over the element along with its position setting */\\n  readonly overlayRef = inject(Overlay).create({\\n    positionStrategy: inject(Overlay)\\n      .position()\\n      .flexibleConnectedTo(this.el)\\n      .withPositions([\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'bottom\' }, { overlayX: \'end\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'top\' }, { overlayX: \'start\', overlayY: \'bottom\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'bottom\' }, { overlayX: \'start\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'top\' }, { overlayX: \'end\', overlayY: \'bottom\' }),\\n      ])\\n      .withPush(true),\\n  });\\n\\n  /** Reference view container that the directive is attached to */\\n  private readonly viewContainerRef = inject(ViewContainerRef);\\n\\n  /** Store the data that is passed into the data input property */\\n  private _data?: HoverContext<T>;\\n\\n  /** Portal that is created to display the overlay */\\n  portal?: TemplatePortal<HoverContext<T>>;\\n\\n  /** Function to handle the mouse over event to attach the portal and display the hover content */\\n  @HostListener(\'mouseover\')\\n  startHover(): void {\\n    const { overlayRef, portal } = this;\\n    if (!overlayRef.hasAttached() && portal) {\\n      overlayRef.attach(portal);\\n    }\\n  }\\n\\n  /** Function to handle the mouse out event to detach the portal  */\\n  @HostListener(\'mouseout\')\\n  endHover(): void {\\n    const { overlayRef } = this;\\n    if (overlayRef.hasAttached()) {\\n      overlayRef.detach();\\n    }\\n  }\\n\\n  /** Function to handle the updation of overlay with up to date content when the input changes */\\n  private updateContent(): void {\\n    const { overlayRef, portal } = this;\\n    if (overlayRef.hasAttached() && portal) {\\n      overlayRef.detach();\\n      overlayRef.attach(portal);\\n    }\\n  }\\n}\\n","selector":"[hraHover]","providers":[],"inputsClass":[{"name":"hraHover","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSetter for the content to be displayed in the overlay","description":"<p>Setter for the content to be displayed in the overlay</p>\\n","line":19,"type":"TemplateRef<HoverContext<T>>","decorators":[]},{"name":"hraHoverData","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSetter for the context that is to be displayed in the portal attached to the overlay","description":"<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\\n","line":26,"type":"T","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[{"name":"mouseout","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse out event to detach the portal","description":"<p>Function to handle the mouse out event to detach the portal</p>\\n","line":71},{"name":"mouseover","args":[],"argsDecorator":[],"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse over event to attach the portal and display the hover content","description":"<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\\n","line":62}],"propertiesClass":[{"name":"overlayRef","defaultValue":"inject(Overlay).create({\\n    positionStrategy: inject(Overlay)\\n      .position()\\n      .flexibleConnectedTo(this.el)\\n      .withPositions([\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'bottom\' }, { overlayX: \'end\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'top\' }, { overlayX: \'start\', overlayY: \'bottom\' }),\\n        new ConnectionPositionPair({ originX: \'start\', originY: \'bottom\' }, { overlayX: \'start\', overlayY: \'top\' }),\\n        new ConnectionPositionPair({ originX: \'end\', originY: \'top\' }, { overlayX: \'end\', overlayY: \'bottom\' }),\\n      ])\\n      .withPush(true),\\n  })","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Reference to the overlay that is created when the userhovers over the element along with its position setting</p>\\n","line":38,"rawdescription":"\\nReference to the overlay that is created when the userhovers over the element along with its position setting","modifierKind":[144]},{"name":"portal","deprecated":false,"deprecationMessage":"","type":"TemplatePortal<HoverContext<T>>","optional":true,"description":"<p>Portal that is created to display the overlay</p>\\n","line":58,"rawdescription":"\\nPortal that is created to display the overlay"}],"methodsClass":[{"name":"endHover","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":71,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse out event to detach the portal","description":"<p>Function to handle the mouse out event to detach the portal</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'mouseout\'"}]},{"name":"startHover","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":62,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nFunction to handle the mouse over event to attach the portal and display the hover content","description":"<p>Function to handle the mouse over event to attach the portal and display the hover content</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'mouseover\'"}]}],"accessors":{"content":{"name":"content","setSignature":{"name":"content","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"content","type":"TemplateRef<HoverContext<T>>","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":19,"rawdescription":"\\nSetter for the content to be displayed in the overlay","description":"<p>Setter for the content to be displayed in the overlay</p>\\n","jsdoctags":[{"name":"content","type":"TemplateRef<HoverContext<T>>","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}},"data":{"name":"data","setSignature":{"name":"data","type":"void","deprecated":false,"deprecationMessage":"","args":[{"name":"data","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"void","line":26,"rawdescription":"\\nSetter for the context that is to be displayed in the portal attached to the overlay","description":"<p>Setter for the context that is to be displayed in the portal attached to the overlay</p>\\n","jsdoctags":[{"name":"data","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}}}},{"name":"LinkDirective","id":"directive-LinkDirective-3a72ea9951359ac8c2820ab17b233c7a92ebad446e52761c9694b431a28bc3d08c8fd1d8405a44a840bcdc6b63328cdbda54820dabf5f26d797e1be7d5cd3a23","file":"src/lib/link/link.directive.ts","type":"directive","description":"<p>Link Directive for routing</p>\\n","rawdescription":"\\nLink Directive for routing","sourceCode":"import { Directive, ElementRef, HostBinding, HostListener, inject, Injector, Input, OnChanges } from \'@angular/core\';\\nimport { ActivatedRoute, Params, QueryParamsHandling, UrlCreationOptions } from \'@angular/router\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { EMPTY_LINK, LinkEntry, LinkRegistryActions, LinkRegistrySelectors, LinkType } from \'@hra-ui/cdk/state\';\\nimport { createExternalUrl, createInternalUrl } from \'@hra-ui/utils\';\\n\\n/** Link Directive for routing */\\n@Directive({\\n  selector: \'[hraLink]\',\\n  standalone: true,\\n})\\nexport class LinkDirective implements OnChanges {\\n  /** linkId with empty string as default value */\\n  @Input(\'hraLink\') linkId = EMPTY_LINK;\\n\\n  /** Query string parameters */\\n  @Input() queryParams?: Params;\\n\\n  /** How to handle existing query params */\\n  @Input() queryParamsHandling?: QueryParamsHandling;\\n\\n  /** Url fragment */\\n  @Input() fragment?: string;\\n\\n  /** Whether to preserve the existing fragment */\\n  @Input() preserveFragment?: boolean;\\n\\n  /** Nagivate relative to a route. Only affects internal links. */\\n  @Input() relativeTo?: ActivatedRoute;\\n\\n  /** href of the element */\\n  @HostBinding(\'attr.href\') href?: string;\\n  /** rel attribute of the element */\\n  @HostBinding(\'attr.rel\') rel?: string;\\n  /** target attribute of the element */\\n  @HostBinding(\'attr.target\') target?: string;\\n\\n  /** Reference to this component\'s injector */\\n  private readonly injector = inject(Injector);\\n  /** Element tag on which this directive is mounted */\\n  private readonly tagName = inject<ElementRef<Element>>(ElementRef).nativeElement.tagName.toLowerCase();\\n  /** Selector for querying the link registry state */\\n  private readonly queryLink = selectQuerySnapshot(LinkRegistrySelectors.query);\\n  /** Dispatch action to navigate to a url */\\n  private readonly navigate = dispatch(LinkRegistryActions.Navigate);\\n\\n  /** Link Entry */\\n  private link?: LinkEntry;\\n\\n  /** Whether the host element is an anchor */\\n  private get isAnchorElement(): boolean {\\n    return [\'a\', \'area\'].includes(this.tagName);\\n  }\\n\\n  /** Whether the host element deals with resource urls */\\n  private get isResourceUrl(): boolean {\\n    return [\'base\', \'link\'].includes(this.tagName);\\n  }\\n\\n  /** Collects query params and fragment options into a single object */\\n  private get extras(): UrlCreationOptions {\\n    const { link } = this;\\n    return this.mergeExtras(link?.type === LinkType.Internal ? link.extras : undefined, this);\\n  }\\n\\n  /** Updates the current link/url based on the inputs */\\n  ngOnChanges(): void {\\n    this.updateLink();\\n  }\\n\\n  /**\\n   * Triggers when a click action is performed on the element\\n   * @param event type of event\\n   * @returns true/false based on entry and element\\n   */\\n  @HostListener(\'click\', [\'$event\'])\\n  onClick(event: MouseEvent): boolean {\\n    const { link, linkId, isAnchorElement } = this;\\n    if (!link) {\\n      return true;\\n    }\\n\\n    if (isAnchorElement) {\\n      const { button, ctrlKey, shiftKey, altKey, metaKey } = event;\\n      if (link.type === LinkType.External || button !== 0 || ctrlKey || shiftKey || altKey || metaKey) {\\n        return true;\\n      }\\n    }\\n\\n    this.navigate(linkId, this.extras);\\n    return !isAnchorElement;\\n  }\\n\\n  /** Updates the link entry and bound attributes */\\n  private updateLink(): void {\\n    const link = (this.link = this.queryLink(this.linkId));\\n    ({ href: this.href, rel: this.rel, target: this.target } = this.getLinkAttributes(link));\\n  }\\n\\n  /**\\n   * Gets the new values for different attributes bound to the host element\\n   * @param link Current link entry\\n   * @returns New attributes values to bind on the host element\\n   */\\n  private getLinkAttributes(link?: LinkEntry): { href?: string; rel?: string; target?: string } {\\n    const { injector, extras, isResourceUrl } = this;\\n    switch (link?.type) {\\n      case LinkType.Internal:\\n        return { href: createInternalUrl(injector, link.commands, extras, isResourceUrl) };\\n\\n      case LinkType.External:\\n        return { ...link, href: createExternalUrl(link.url, extras) };\\n\\n      default:\\n        return {};\\n    }\\n  }\\n\\n  /**\\n   * Merges two UrlCreationOptions.\\n   * Undefined values in the second set does not override values from the first set.\\n   * @param opt1 First set of options\\n   * @param opt2 Second set of options\\n   * @returns Merged options\\n   */\\n  private mergeExtras(opt1: UrlCreationOptions | undefined, opt2: UrlCreationOptions): UrlCreationOptions {\\n    const result = { ...opt1 };\\n    const mergeKey = <K extends keyof UrlCreationOptions>(key: K) => {\\n      if (opt2[key] !== undefined) {\\n        result[key] = opt2[key];\\n      }\\n    };\\n\\n    mergeKey(\'queryParams\');\\n    mergeKey(\'queryParamsHandling\');\\n    mergeKey(\'fragment\');\\n    mergeKey(\'preserveFragment\');\\n    mergeKey(\'relativeTo\');\\n    return result;\\n  }\\n}\\n","selector":"[hraLink]","providers":[],"inputsClass":[{"name":"fragment","deprecated":false,"deprecationMessage":"","rawdescription":"\\nUrl fragment","description":"<p>Url fragment</p>\\n","line":23,"type":"string","decorators":[]},{"name":"hraLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nlinkId with empty string as default value","description":"<p>linkId with empty string as default value</p>\\n","line":14,"type":"any","decorators":[]},{"name":"preserveFragment","deprecated":false,"deprecationMessage":"","rawdescription":"\\nWhether to preserve the existing fragment","description":"<p>Whether to preserve the existing fragment</p>\\n","line":26,"type":"boolean","decorators":[]},{"name":"queryParams","deprecated":false,"deprecationMessage":"","rawdescription":"\\nQuery string parameters","description":"<p>Query string parameters</p>\\n","line":17,"type":"Params","decorators":[]},{"name":"queryParamsHandling","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHow to handle existing query params","description":"<p>How to handle existing query params</p>\\n","line":20,"type":"QueryParamsHandling","decorators":[]},{"name":"relativeTo","deprecated":false,"deprecationMessage":"","rawdescription":"\\nNagivate relative to a route. Only affects internal links.","description":"<p>Nagivate relative to a route. Only affects internal links.</p>\\n","line":29,"type":"ActivatedRoute","decorators":[]}],"outputsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"attr.href","deprecated":false,"deprecationMessage":"","rawdescription":"\\nhref of the element","description":"<p>href of the element</p>\\n","line":32,"type":"string","decorators":[]},{"name":"attr.rel","deprecated":false,"deprecationMessage":"","rawdescription":"\\nrel attribute of the element","description":"<p>rel attribute of the element</p>\\n","line":34,"type":"string","decorators":[]},{"name":"attr.target","deprecated":false,"deprecationMessage":"","rawdescription":"\\ntarget attribute of the element","description":"<p>target attribute of the element</p>\\n","line":36,"type":"string","decorators":[]}],"hostListeners":[{"name":"click","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"argsDecorator":["$event"],"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTriggers when a click action is performed on the element\\n","description":"<p>Triggers when a click action is performed on the element</p>\\n","jsdoctags":[{"pos":2659,"end":2691,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":338,"tagName":{"pos":2660,"end":2665,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>type of event</p>\\n","name":{"pos":2666,"end":2671,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"isNameFirst":true,"isBracketed":false},{"pos":2691,"end":2741,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":339,"tagName":{"pos":2692,"end":2699,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>true/false based on entry and element</p>\\n"}],"line":77}],"propertiesClass":[{"name":"href","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>href of the element</p>\\n","line":32,"rawdescription":"\\nhref of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.href\'"}]},{"name":"rel","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>rel attribute of the element</p>\\n","line":34,"rawdescription":"\\nrel attribute of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.rel\'"}]},{"name":"target","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>target attribute of the element</p>\\n","line":36,"rawdescription":"\\ntarget attribute of the element","decorators":[{"name":"HostBinding","stringifiedArguments":"\'attr.target\'"}]}],"methodsClass":[{"name":"onClick","args":[{"name":"event","type":"MouseEvent","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":77,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nTriggers when a click action is performed on the element\\n","description":"<p>Triggers when a click action is performed on the element</p>\\n","decorators":[{"name":"HostListener","stringifiedArguments":"\'click\', [\'$event\']"}],"jsdoctags":[{"name":{"pos":2666,"end":2671,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"event"},"type":"MouseEvent","deprecated":false,"deprecationMessage":"","tagName":{"pos":2660,"end":2665,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>type of event</p>\\n"},{"tagName":{"pos":2692,"end":2699,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>true/false based on entry and element</p>\\n"}]}],"implements":["OnChanges"]}],"components":[{"name":"DestroyHostComponent","id":"component-DestroyHostComponent-673df9acfa9566a60f8f4a880379e6b99e54ae5d5ad511c7cd7a96cae5e2bdc436037556a9ad3ca44bdc0a5f74c3a300031212bae7e0df53e349d8e34d30dd92","file":"injectors/src/lib/on-destroy/destroy-host.component.ts","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-destroy-host","styleUrls":[],"styles":[":host { display: none }"],"template":"","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"el","defaultValue":"inject(ElementRef).nativeElement","deprecated":false,"deprecationMessage":"","type":"Element","optional":false,"description":"<p>Reference to own dom element</p>\\n","line":14,"rawdescription":"\\nReference to own dom element","modifierKind":[144]}],"methodsClass":[{"name":"create","args":[{"name":"container","type":"ViewContainerRef","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"ComponentRef<DestroyHostComponent>","typeParameters":[],"line":22,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCreates a new DestroyHostComponent inside the provided container.\\nThe element is inserted as the first child (index \'0\') in the container.\\n","description":"<p>Creates a new DestroyHostComponent inside the provided container.\\nThe element is inserted as the first child (index &#39;0&#39;) in the container.</p>\\n","modifierKind":[124],"jsdoctags":[{"name":{"pos":661,"end":670,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"container"},"type":"ViewContainerRef","deprecated":false,"deprecationMessage":"","tagName":{"pos":655,"end":660,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>View in which to create the element</p>\\n"},{"tagName":{"pos":713,"end":720,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The ComponentRef of the newly inserted element</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component used when attaching destroy lifecycle observables to a component/directive/pipe</p>\\n","rawdescription":"\\n\\nComponent used when attaching destroy lifecycle observables to a component/directive/pipe\\n","type":"component","sourceCode":"import { AfterViewInit, Component, ComponentRef, ElementRef, inject, ViewContainerRef } from \'@angular/core\';\\n\\n/**\\n * Component used when attaching destroy lifecycle observables to a component/directive/pipe\\n */\\n@Component({\\n  selector: \'hra-destroy-host\',\\n  standalone: true,\\n  template: \'\',\\n  styles: [\':host { display: none }\'],\\n})\\nexport class DestroyHostComponent implements AfterViewInit {\\n  /** Reference to own dom element */\\n  readonly el: Element = inject(ElementRef).nativeElement;\\n\\n  /**\\n   * Creates a new DestroyHostComponent inside the provided container.\\n   * The element is inserted as the first child (index \'0\') in the container.\\n   * @param container View in which to create the element\\n   * @returns The ComponentRef of the newly inserted element\\n   */\\n  static create(container: ViewContainerRef): ComponentRef<DestroyHostComponent> {\\n    return container.createComponent(DestroyHostComponent, { index: 0 });\\n  }\\n\\n  /** Disconnects the component from the dom tree */\\n  ngAfterViewInit(): void {\\n    this.el.remove();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":":host { display: none }\\n","implements":["AfterViewInit"]}],"modules":[{"name":"CdkStateModule","id":"module-CdkStateModule-a93bb19297573c6c6708763b071fc9fb4b27e887170144694df55a5d5749e030c9dd51938c8c23a8844e3888ac2176fede6d8f95d54f41aead08116fa6c152d4","description":"","deprecationMessage":"","deprecated":false,"file":"state/src/state.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { LinkRegistryState } from \'./link-registry\';\\nimport { ResourceRegistryState } from \'./resource-registry\';\\nimport { StorageState } from \'./storage\';\\n\\n@NgModule({\\n  imports: [NgxsModule.forFeature([LinkRegistryState, ResourceRegistryState, StorageState])],\\n})\\nexport class CdkStateModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'LinkRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'ResourceRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'Storage\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"},{"name":"actionTypeRegistry","ctype":"miscellaneous","subtype":"variable","file":"state/src/actions/action-type-registry.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Set<string>()","rawdescription":"Registry of action types","description":"<p>Registry of action types</p>\\n"},{"name":"BUILTIN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.discriminatedUnion(\'type\', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])","rawdescription":"Union of all builtin entries","description":"<p>Union of all builtin entries</p>\\n"},{"name":"BUILTIN_TYPE_VALUES","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.values(RawBuiltinResourceType)","rawdescription":"Builtin type strings as an array","description":"<p>Builtin type strings as an array</p>\\n"},{"name":"BuiltinResourceType","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"RawBuiltinResourceType as BuiltinTypes","rawdescription":"Builtin resource types","description":"<p>Builtin resource types</p>\\n"},{"name":"CUSTOM_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()","rawdescription":"Custom entry","description":"<p>Custom entry</p>\\n"},{"name":"CUSTOM_ENTRY_TYPE","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .refine((val) => !isBuiltinType(val), \'Invalid builtin resource format\')\\n  .transform<CustomResourceType<string>>(createCustomType)","rawdescription":"Custom entry type validator with transformation","description":"<p>Custom entry type validator with transformation</p>\\n"},{"name":"CUSTOM_TYPE_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'custom:\'","rawdescription":"Prefix of all custom types","description":"<p>Prefix of all custom types</p>\\n"},{"name":"DESTRUCTOR_CACHE","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/on-destroy/on-destroy.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new WeakMap<object, Observable<void>>()","rawdescription":"Cached destructor observables","description":"<p>Cached destructor observables</p>\\n"},{"name":"EMPTY_LINK","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"createLinkId(\'@@__EMPTY__\')","rawdescription":"Empty link id","description":"<p>Empty link id</p>\\n"},{"name":"EXTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.External),\\n    url: z.string(),\\n    rel: z.string().default(\'noopener\'),\\n    target: z.string(),\\n  })\\n  .partial({ rel: true, target: true })","rawdescription":"Type for external link entry","description":"<p>Type for external link entry</p>\\n"},{"name":"INTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.Internal),\\n    commands: z.any().array(),\\n    extras: z\\n      .object({\\n        queryParams: z.record(z.any()).nullable(),\\n        fragment: z.string(),\\n        queryParamsHandling: z.enum([\'merge\', \'preserve\', \'\']).nullable(),\\n        preserveFragment: z.boolean(),\\n        onSameUrlNavigation: z.literal(\'reload\'),\\n        skipLocationChange: z.boolean(),\\n        replaceUrl: z.boolean(),\\n      })\\n      .partial(),\\n  })\\n  .partial({ extras: true })","rawdescription":"Type for internal link entry","description":"<p>Type for internal link entry</p>\\n"},{"name":"LINK_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(\\n  z\\n    .string()\\n    .transform((id) => `LinkId:\'${id}\'`)\\n    .brand(\'LinkId\'),\\n  z.discriminatedUnion(\'type\', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\\n)","rawdescription":"Schema for link registry","description":"<p>Schema for link registry</p>\\n"},{"name":"MARKDOWN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Markdown),\\n  markdown: z.string(),\\n})","rawdescription":"Markdown data","description":"<p>Markdown data</p>\\n"},{"name":"NO_ERROR_SENTINEL_OBJ","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{}","rawdescription":"Object indicating that no error has been emitted","description":"<p>Object indicating that no error has been emitted</p>\\n"},{"name":"RESOURCE_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])","rawdescription":"Builtin or custom entries","description":"<p>Builtin or custom entries</p>\\n"},{"name":"RESOURCE_ID","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .transform((id) => `ResourceId:\'${id}\'`)\\n  .brand(\'ResourceId\')","rawdescription":"Resource identifier validator with transformation","description":"<p>Resource identifier validator with transformation</p>\\n"},{"name":"RESOURCE_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(RESOURCE_ID, RESOURCE_ENTRY)","rawdescription":"State schema","description":"<p>State schema</p>\\n"},{"name":"TEXT_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Text),\\n  text: z.string(),\\n})","rawdescription":"Text data","description":"<p>Text data</p>\\n"},{"name":"URL_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Url),\\n  url: z.string(),\\n})","rawdescription":"External url","description":"<p>External url</p>\\n"}],"functions":[{"name":"Action","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new base action with a specified type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":685,"end":689,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":679,"end":684,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type</p>\\n"},{"tagName":{"pos":706,"end":713,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A base action class</p>\\n"}]},{"name":"ActionGroup","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory that adds a common group string to each action type</p>\\n","args":[{"name":"group","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":421,"end":426,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"group"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Common action type group</p>\\n"},{"tagName":{"pos":456,"end":463,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An action factory</p>\\n"}]},{"name":"assertUniqueActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Asserts that an action type is unique</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":141,"end":145,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":135,"end":140,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"createActionFactory","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory function</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":""}],"returnType":"A","jsdoctags":[{"name":{"pos":500,"end":504,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":494,"end":499,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor</p>\\n"},{"name":{"pos":534,"end":543,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","tagName":{"pos":528,"end":533,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Initial bound arguments</p>\\n"},{"tagName":{"pos":572,"end":579,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A factory function creating a new action on each call</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>","jsdoctags":[{"name":{"pos":4708,"end":4712,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4702,"end":4707,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"tagName":{"pos":4735,"end":4742,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type with a payload. The payload should be\\nspecified using the {@link payload} function</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""},{"name":"payload","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Props>>","jsdoctags":[{"name":{"pos":5138,"end":5142,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":5132,"end":5137,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"name":{"pos":5171,"end":5178,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"payload"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":5165,"end":5170,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Payload type</p>\\n"},{"tagName":{"pos":5032,"end":5039,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\\n"},{"tagName":{"pos":5196,"end":5203,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Implementation of createCustomType overloads</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createLinkId","file":"state/src/link-registry/link-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>function to createa unique link ids</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"LinkId","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createResourceId","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new resource identifier</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":4258,"end":4260,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4252,"end":4257,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw identifier</p>\\n"},{"tagName":{"pos":4280,"end":4287,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A resource id</p>\\n"}]},{"name":"dispatch","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"A","jsdoctags":[{"name":{"pos":1721,"end":1725,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1715,"end":1720,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":1779,"end":1788,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1773,"end":1778,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":1835,"end":1842,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatch$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.\\nEach call to the wrapper returns an observable that emits the action instance once the\\ndispatch action has completed.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Observable<A>","jsdoctags":[{"name":{"pos":2426,"end":2430,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2420,"end":2425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":2484,"end":2493,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2478,"end":2483,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":2540,"end":2547,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatchAction","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns passed actions unchanged</p>\\n","args":[],"returnType":"A","jsdoctags":[{"tagName":{"pos":3054,"end":3061,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchAction$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\\n","args":[],"returnType":"Observable<A>","jsdoctags":[{"tagName":{"pos":3418,"end":3425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchImpl","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Common dispatch functionality used to implement all dispatch functions</p>\\n","args":[{"name":"actionFactory","deprecated":false,"deprecationMessage":""},{"name":"resultHandler","deprecated":false,"deprecationMessage":""}],"returnType":"R","jsdoctags":[{"name":{"pos":976,"end":989,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"actionFactory"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":970,"end":975,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Creates an action or array of actions from the user provided arguments</p>\\n"},{"name":{"pos":1071,"end":1084,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"resultHandler"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1065,"end":1070,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Selects the output value from the action and the dispatch observable</p>\\n"},{"tagName":{"pos":1158,"end":1165,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\\n"}]},{"name":"findDestructorScope","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds the nearest destructor scope object in the current injection context</p>\\n","args":[],"returnType":"DestructorScope","jsdoctags":[{"tagName":{"pos":1267,"end":1274,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The scope on which cleanup can be attached</p>\\n"}]},{"name":"findStableKeyObject","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds a stable object in the current injection context to be\\nused as a key in the destructor cache</p>\\n","args":[],"returnType":"object","jsdoctags":[{"tagName":{"pos":912,"end":919,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An object</p>\\n"}]},{"name":"firstDefinedValue","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the first defined value returned by a generator</p>\\n","args":[{"name":"genFn","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":441,"end":446,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"genFn"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":435,"end":440,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Generator function taking no arguments</p>\\n"},{"tagName":{"pos":490,"end":497,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The first non-null value</p>\\n"}]},{"name":"getEntry","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Internal helper function for getting an entry from the state</p>\\n","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""},{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"type","type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"T | undefined","jsdoctags":[{"name":{"pos":5670,"end":5675,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":5664,"end":5669,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state snapshot</p>\\n"},{"name":{"pos":5709,"end":5711,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":5703,"end":5708,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":5734,"end":5738,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":5728,"end":5733,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional entry type</p>\\n"},{"tagName":{"pos":5763,"end":5770,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The entry object it exists and has the correct type, otherwise undefined</p>\\n"}]},{"name":"identity","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Identity function returning the first argument passed</p>\\n","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"injectDestroy$","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\\nit is injected into. It can be used to control the lifetime of other observables using\\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\\n<p>Caveats:</p>\\n<ul>\\n<li>There are NO guarantees about whether the returned observable will emit and complete\\nbefore or after the regular ngOnDestroy lifecycle hook</li>\\n<li>For root and module level services the observable may never complete unless\\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\\ntake care to maintain the view controlling the lifecycle of the observable. Failure\\nto do so may result in early emit and completion of the returned observable</li>\\n</ul>\\n<p>Based on comment on <a href=\\"https://github.com/angular/angular/issues/10185\\">https://github.com/angular/angular/issues/10185</a>\\nMostly <a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\\n<a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\\n","args":[],"returnType":"Observable<void>","jsdoctags":[{"tagName":{"pos":2694,"end":2701,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\\n"}]},{"name":"isBuiltinType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type string has builtin support</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":3572,"end":3576,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3566,"end":3571,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3597,"end":3604,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>True if type is one of the builtin types, otherwise false</p>\\n"}]},{"name":"isCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type is a custom resource type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<z.infer<>>","jsdoctags":[{"name":{"pos":3881,"end":3885,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3875,"end":3880,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3906,"end":3913,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>True if type is a custom type, otherwise false</p>\\n"}]},{"name":"isDestructorScopeLike","file":"injectors/src/lib/on-destroy/destructor-subject.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether an object is destructor scope like</p>\\n","args":[{"name":"obj","deprecated":false,"deprecationMessage":""}],"returnType":"DestructorScope","jsdoctags":[{"name":{"pos":328,"end":331,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":322,"end":327,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Value to test</p>\\n"},{"tagName":{"pos":350,"end":357,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>true if the object seems to be a destructor scope, otherwise false</p>\\n"}]},{"name":"markForCheck","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Marks a view for change detection whenever a new value is emitted</p>\\n","args":[{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":{"pos":689,"end":696,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":683,"end":688,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Options to explicitly disable marking</p>\\n"},{"tagName":{"pos":739,"end":746,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A rxjs operator</p>\\n"}]},{"name":"payload","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Helper function used to specify the payload format when creating custom types</p>\\n","args":[],"returnType":"ResourceEntryPayload<Props>","jsdoctags":[{"tagName":{"pos":4477,"end":4484,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A custom payload type</p>\\n"}]},{"name":"pipeActionInstance","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Maps all emits to an action value</p>\\n","args":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":""},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":""}],"returnType":"Observable<A>","jsdoctags":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"registerActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Registers an action type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":421,"end":425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"select$","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\\nis automatically tied to the injection context where this is called.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Observable<T>","jsdoctags":[{"name":{"pos":1313,"end":1321,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":1307,"end":1312,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State selection function or token</p>\\n"},{"name":{"pos":1366,"end":1373,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1360,"end":1365,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Additional select options</p>\\n"},{"tagName":{"pos":1404,"end":1411,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable of the selected state</p>\\n"}]},{"name":"selectQuerySnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that can be called with the same arguments as the query selector\\nand returns the latest value each time. Automatically marks components, directives, or pipes\\nfor change detection whenever a new value is available. Note that since typescript has yet to\\nimplement support for higher order generics there is sometimes a need to specialize the\\nreturned query function with the correct arguments and return type. This can be done as shown\\nin the examples.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"SelectQuery<F, BoundArgs>","jsdoctags":[{"name":{"pos":2433,"end":2441,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":2427,"end":2432,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Store query selector</p>\\n"},{"name":{"pos":2473,"end":2482,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2467,"end":2472,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional bound query arguments</p>\\n"},{"tagName":{"pos":1631,"end":1638,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<caption>Basic usage</caption>\\nclass Component {\\n...\\n// Return type: () => string\\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\\n// Return type: (id: ResourceId) => string\\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\\n...\\n}"},{"tagName":{"pos":1975,"end":1982,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<caption>Specialize query arguments and/or return type</caption>\\nclass Component {\\n...\\n// Return type: () => number[]\\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, \'points\', [])<number[]>;\\n// Return type: (field: string, defaultValue: string) => string\\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\\n}"},{"tagName":{"pos":2518,"end":2525,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\\n"}]},{"name":"selectSnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that returns the latest snapshot value each time it is called\\nAutomatically marks components, directives, or pipes for change detection whenever\\na new value is available</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":819,"end":827,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":813,"end":818,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Store data selector</p>\\n"},{"tagName":{"pos":852,"end":859,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A snapshot function</p>\\n"}]}],"typealiases":[{"name":"AnyEntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\\n","kind":178},{"name":"BuiltinTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Maps raw builtin type strings to ResourceType</p>\\n","kind":194},{"name":"CustomResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Typed custom resource entry</p>\\n","kind":187},{"name":"CustomResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":" `custom:${T}`","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom entry types</p>\\n","kind":197},{"name":"DataQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for resource data</p>\\n","kind":178},{"name":"EntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\\n","kind":178},{"name":"ExternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for external link entry</p>\\n","kind":177},{"name":"ExtractBuiltinEntryType","ctype":"miscellaneous","subtype":"typealias","rawtype":"UnionMember<z.infer<> | type | T>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Extracts the builtin entry with type T</p>\\n","kind":177},{"name":"FieldQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\\n","kind":178},{"name":"InternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for internal link entry</p>\\n","kind":177},{"name":"LinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>entry for link registry</p>\\n","kind":177},{"name":"LinkId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for unique identifier for link</p>\\n","kind":177},{"name":"LinkRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<LinkRegistryModel>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for State Context of LinkRegistry</p>\\n","kind":177},{"name":"LinkRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for LinkRegistry State</p>\\n","kind":177},{"name":"LinkRegistryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/link-registry/link-registry.state.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for link entry optionally with type specified</p>\\n","kind":178},{"name":"ResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Any resource entry</p>\\n","kind":177},{"name":"ResourceEntryPayload","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Payload type used when creating custom types</p>\\n","kind":187},{"name":"ResourceId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource identifier</p>\\n","kind":177},{"name":"ResourceRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ResourceRegistryModel>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Context type for action handlers</p>\\n","kind":177},{"name":"ResourceRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State data model</p>\\n","kind":177},{"name":"ResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource type string with entry typings</p>\\n","kind":187},{"name":"RestArgs","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Get remaining arguments after applying bound arguments</p>\\n","kind":188},{"name":"SelectQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Function type returned by {@link selectQuerySnapshot}</p>\\n","kind":178},{"name":"StateSelector","ctype":"miscellaneous","subtype":"typealias","rawtype":" | StateToken<T>","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","description":"<p>Selector type for select style functions</p>\\n","kind":186},{"name":"StorageContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<StorageModel>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper alias for action handler&#39;s ctx argument</p>\\n","kind":177},{"name":"StorageModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<StorageId | number>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type alias for the array of Storage objects</p>\\n","kind":177}],"enumerations":[{"name":"LinkType","childs":[{"name":"Internal","deprecated":false,"deprecationMessage":"","value":"internal"},{"name":"External","deprecated":false,"deprecationMessage":"","value":"external"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Types for Link</p>\\n","file":"state/src/link-registry/link-registry.model.ts"},{"name":"RawBuiltinResourceType","childs":[{"name":"Markdown","deprecated":false,"deprecationMessage":"","value":"markdown"},{"name":"Text","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"Url","deprecated":false,"deprecationMessage":"","value":"url"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Raw builtin type strings</p>\\n","file":"state/src/resource-registry/resource-registry.model.ts"},{"name":"StorageId","childs":[{"name":"Local","deprecated":false,"deprecationMessage":"","value":"local"},{"name":"Session","deprecated":false,"deprecationMessage":"","value":"session"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\\n","file":"state/src/storage/storage.model.ts"}],"groupedVariables":{"state/src/link-registry/link-registry.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'LinkRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/resource-registry/resource-registry.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'ResourceRegistry\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/storage/storage.actions.ts":[{"name":"Action","ctype":"miscellaneous","subtype":"variable","file":"state/src/storage/storage.actions.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"ActionGroup(\'Storage\')","rawdescription":"Base action factory","description":"<p>Base action factory</p>\\n"}],"state/src/actions/action-type-registry.ts":[{"name":"actionTypeRegistry","ctype":"miscellaneous","subtype":"variable","file":"state/src/actions/action-type-registry.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new Set<string>()","rawdescription":"Registry of action types","description":"<p>Registry of action types</p>\\n"}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"BUILTIN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.discriminatedUnion(\'type\', [MARKDOWN_ENTRY, TEXT_ENTRY, URL_ENTRY])","rawdescription":"Union of all builtin entries","description":"<p>Union of all builtin entries</p>\\n"},{"name":"BUILTIN_TYPE_VALUES","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"Object.values(RawBuiltinResourceType)","rawdescription":"Builtin type strings as an array","description":"<p>Builtin type strings as an array</p>\\n"},{"name":"BuiltinResourceType","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"RawBuiltinResourceType as BuiltinTypes","rawdescription":"Builtin resource types","description":"<p>Builtin resource types</p>\\n"},{"name":"CUSTOM_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({ type: CUSTOM_ENTRY_TYPE }).passthrough()","rawdescription":"Custom entry","description":"<p>Custom entry</p>\\n"},{"name":"CUSTOM_ENTRY_TYPE","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .refine((val) => !isBuiltinType(val), \'Invalid builtin resource format\')\\n  .transform<CustomResourceType<string>>(createCustomType)","rawdescription":"Custom entry type validator with transformation","description":"<p>Custom entry type validator with transformation</p>\\n"},{"name":"CUSTOM_TYPE_PREFIX","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"string","defaultValue":"\'custom:\'","rawdescription":"Prefix of all custom types","description":"<p>Prefix of all custom types</p>\\n"},{"name":"MARKDOWN_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Markdown),\\n  markdown: z.string(),\\n})","rawdescription":"Markdown data","description":"<p>Markdown data</p>\\n"},{"name":"RESOURCE_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.union([BUILTIN_ENTRY, CUSTOM_ENTRY])","rawdescription":"Builtin or custom entries","description":"<p>Builtin or custom entries</p>\\n"},{"name":"RESOURCE_ID","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .string()\\n  .transform((id) => `ResourceId:\'${id}\'`)\\n  .brand(\'ResourceId\')","rawdescription":"Resource identifier validator with transformation","description":"<p>Resource identifier validator with transformation</p>\\n"},{"name":"RESOURCE_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(RESOURCE_ID, RESOURCE_ENTRY)","rawdescription":"State schema","description":"<p>State schema</p>\\n"},{"name":"TEXT_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Text),\\n  text: z.string(),\\n})","rawdescription":"Text data","description":"<p>Text data</p>\\n"},{"name":"URL_ENTRY","ctype":"miscellaneous","subtype":"variable","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.object({\\n  type: z.literal(RawBuiltinResourceType.Url),\\n  url: z.string(),\\n})","rawdescription":"External url","description":"<p>External url</p>\\n"}],"injectors/src/lib/on-destroy/on-destroy.ts":[{"name":"DESTRUCTOR_CACHE","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/on-destroy/on-destroy.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"new WeakMap<object, Observable<void>>()","rawdescription":"Cached destructor observables","description":"<p>Cached destructor observables</p>\\n"}],"state/src/link-registry/link-registry.model.ts":[{"name":"EMPTY_LINK","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"createLinkId(\'@@__EMPTY__\')","rawdescription":"Empty link id","description":"<p>Empty link id</p>\\n"},{"name":"EXTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.External),\\n    url: z.string(),\\n    rel: z.string().default(\'noopener\'),\\n    target: z.string(),\\n  })\\n  .partial({ rel: true, target: true })","rawdescription":"Type for external link entry","description":"<p>Type for external link entry</p>\\n"},{"name":"INTERNAL_LINK_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z\\n  .object({\\n    type: z.literal(LinkType.Internal),\\n    commands: z.any().array(),\\n    extras: z\\n      .object({\\n        queryParams: z.record(z.any()).nullable(),\\n        fragment: z.string(),\\n        queryParamsHandling: z.enum([\'merge\', \'preserve\', \'\']).nullable(),\\n        preserveFragment: z.boolean(),\\n        onSameUrlNavigation: z.literal(\'reload\'),\\n        skipLocationChange: z.boolean(),\\n        replaceUrl: z.boolean(),\\n      })\\n      .partial(),\\n  })\\n  .partial({ extras: true })","rawdescription":"Type for internal link entry","description":"<p>Type for internal link entry</p>\\n"},{"name":"LINK_REGISTRY_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(\\n  z\\n    .string()\\n    .transform((id) => `LinkId:\'${id}\'`)\\n    .brand(\'LinkId\'),\\n  z.discriminatedUnion(\'type\', [EXTERNAL_LINK_SCHEMA, INTERNAL_LINK_SCHEMA])\\n)","rawdescription":"Schema for link registry","description":"<p>Schema for link registry</p>\\n"}],"injectors/src/lib/select/snapshot-observer.ts":[{"name":"NO_ERROR_SENTINEL_OBJ","ctype":"miscellaneous","subtype":"variable","file":"injectors/src/lib/select/snapshot-observer.ts","deprecated":false,"deprecationMessage":"","type":"object","defaultValue":"{}","rawdescription":"Object indicating that no error has been emitted","description":"<p>Object indicating that no error has been emitted</p>\\n"}]},"groupedFunctions":{"state/src/actions/actions.ts":[{"name":"Action","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new base action with a specified type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":685,"end":689,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":679,"end":684,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type</p>\\n"},{"tagName":{"pos":706,"end":713,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A base action class</p>\\n"}]},{"name":"ActionGroup","file":"state/src/actions/actions.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory that adds a common group string to each action type</p>\\n","args":[{"name":"group","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ActionConstructor","jsdoctags":[{"name":{"pos":421,"end":426,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"group"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Common action type group</p>\\n"},{"tagName":{"pos":456,"end":463,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An action factory</p>\\n"}]}],"state/src/actions/action-type-registry.ts":[{"name":"assertUniqueActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Asserts that an action type is unique</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":141,"end":145,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":135,"end":140,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]},{"name":"registerActionType","file":"state/src/actions/action-type-registry.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Registers an action type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"void","jsdoctags":[{"name":{"pos":421,"end":425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":415,"end":420,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action type string</p>\\n"}]}],"injectors/src/lib/dispatch/dispatch.ts":[{"name":"createActionFactory","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an action factory function</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":""}],"returnType":"A","jsdoctags":[{"name":{"pos":500,"end":504,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":494,"end":499,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor</p>\\n"},{"name":{"pos":534,"end":543,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","tagName":{"pos":528,"end":533,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Initial bound arguments</p>\\n"},{"tagName":{"pos":572,"end":579,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A factory function creating a new action on each call</p>\\n"}]},{"name":"dispatch","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"A","jsdoctags":[{"name":{"pos":1721,"end":1725,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1715,"end":1720,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":1779,"end":1788,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":1773,"end":1778,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":1835,"end":1842,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatch$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Wraps an action constructor with automatic dispatching on each call to the function.\\nEach call to the wrapper returns an observable that emits the action instance once the\\ndispatch action has completed.</p>\\n","args":[{"name":"type","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"Observable<A>","jsdoctags":[{"name":{"pos":2426,"end":2430,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":2420,"end":2425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Action constructor to create new instances</p>\\n"},{"name":{"pos":2484,"end":2493,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2478,"end":2483,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Bound arguments to the action constructor</p>\\n"},{"tagName":{"pos":2540,"end":2547,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches an action on the store each time it is called</p>\\n"}]},{"name":"dispatchAction","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns passed actions unchanged</p>\\n","args":[],"returnType":"A","jsdoctags":[{"tagName":{"pos":3054,"end":3061,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchAction$","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a callback that can dispatch any action or array of actions.\\nEach call returns an observable that emits the passed actions when the dispatch has finished</p>\\n","args":[],"returnType":"Observable<A>","jsdoctags":[{"tagName":{"pos":3418,"end":3425,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A function that dispatches actions on the store each time it is called</p>\\n"}]},{"name":"dispatchImpl","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Common dispatch functionality used to implement all dispatch functions</p>\\n","args":[{"name":"actionFactory","deprecated":false,"deprecationMessage":""},{"name":"resultHandler","deprecated":false,"deprecationMessage":""}],"returnType":"R","jsdoctags":[{"name":{"pos":976,"end":989,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"actionFactory"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":970,"end":975,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Creates an action or array of actions from the user provided arguments</p>\\n"},{"name":{"pos":1071,"end":1084,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"resultHandler"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":1065,"end":1070,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Selects the output value from the action and the dispatch observable</p>\\n"},{"tagName":{"pos":1158,"end":1165,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new dispatch function taking user arguments, dispatches actions, and returns a value</p>\\n"}]},{"name":"identity","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Identity function returning the first argument passed</p>\\n","args":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":"value","type":"T","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"pipeActionInstance","file":"injectors/src/lib/dispatch/dispatch.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Maps all emits to an action value</p>\\n","args":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":""},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":""}],"returnType":"Observable<A>","jsdoctags":[{"name":"action","type":"A","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"obs$","type":"Observable","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Partial<Record<string, >>>>","jsdoctags":[{"name":{"pos":4708,"end":4712,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":4702,"end":4707,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"tagName":{"pos":4735,"end":4742,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a custom resource type with a payload. The payload should be\\nspecified using the {@link payload} function</p>\\n","args":[{"name":"type","type":"T","deprecated":false,"deprecationMessage":""},{"name":"payload","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<CustomResourceEntry<T, Props>>","jsdoctags":[{"name":{"pos":5138,"end":5142,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":5132,"end":5137,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw resource type</p>\\n"},{"name":{"pos":5171,"end":5178,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"payload"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":5165,"end":5170,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Payload type</p>\\n"},{"tagName":{"pos":5032,"end":5039,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<p>const MyResourceType = createCustomType(&#39;my-type&#39;, payload&lt;{ value: number }&gt;());</p>\\n"},{"tagName":{"pos":5196,"end":5203,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A new resource type</p>\\n"}]},{"name":"createCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Implementation of createCustomType overloads</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]},{"name":"createResourceId","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates a new resource identifier</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":4258,"end":4260,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":4252,"end":4257,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Raw identifier</p>\\n"},{"tagName":{"pos":4280,"end":4287,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A resource id</p>\\n"}]},{"name":"getEntry","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Internal helper function for getting an entry from the state</p>\\n","args":[{"name":"state","type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":""},{"name":"id","type":"ResourceId","deprecated":false,"deprecationMessage":""},{"name":"type","type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"T | undefined","jsdoctags":[{"name":{"pos":5670,"end":5675,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"state"},"type":"ResourceRegistryModel","deprecated":false,"deprecationMessage":"","tagName":{"pos":5664,"end":5669,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Current state snapshot</p>\\n"},{"name":{"pos":5709,"end":5711,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"id"},"type":"ResourceId","deprecated":false,"deprecationMessage":"","tagName":{"pos":5703,"end":5708,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Resource id</p>\\n"},{"name":{"pos":5734,"end":5738,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"ResourceType","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":5728,"end":5733,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional entry type</p>\\n"},{"tagName":{"pos":5763,"end":5770,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The entry object it exists and has the correct type, otherwise undefined</p>\\n"}]},{"name":"isBuiltinType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type string has builtin support</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"jsdoctags":[{"name":{"pos":3572,"end":3576,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3566,"end":3571,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3597,"end":3604,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>True if type is one of the builtin types, otherwise false</p>\\n"}]},{"name":"isCustomType","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether a type is a custom resource type</p>\\n","args":[{"name":"type","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"ResourceType<z.infer<>>","jsdoctags":[{"name":{"pos":3881,"end":3885,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"originalKeywordKind":151,"escapedText":"type"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3875,"end":3880,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>The type string</p>\\n"},{"tagName":{"pos":3906,"end":3913,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>True if type is a custom type, otherwise false</p>\\n"}]},{"name":"payload","file":"state/src/resource-registry/resource-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Helper function used to specify the payload format when creating custom types</p>\\n","args":[],"returnType":"ResourceEntryPayload<Props>","jsdoctags":[{"tagName":{"pos":4477,"end":4484,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A custom payload type</p>\\n"}]}],"state/src/link-registry/link-registry.model.ts":[{"name":"createLinkId","file":"state/src/link-registry/link-registry.model.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>function to createa unique link ids</p>\\n","args":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":""}],"returnType":"LinkId","jsdoctags":[{"name":"id","type":"string","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"injectors/src/lib/on-destroy/on-destroy.ts":[{"name":"findDestructorScope","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds the nearest destructor scope object in the current injection context</p>\\n","args":[],"returnType":"DestructorScope","jsdoctags":[{"tagName":{"pos":1267,"end":1274,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The scope on which cleanup can be attached</p>\\n"}]},{"name":"findStableKeyObject","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Finds a stable object in the current injection context to be\\nused as a key in the destructor cache</p>\\n","args":[],"returnType":"object","jsdoctags":[{"tagName":{"pos":912,"end":919,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An object</p>\\n"}]},{"name":"firstDefinedValue","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Get the first defined value returned by a generator</p>\\n","args":[{"name":"genFn","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":441,"end":446,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"genFn"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":435,"end":440,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Generator function taking no arguments</p>\\n"},{"tagName":{"pos":490,"end":497,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>The first non-null value</p>\\n"}]},{"name":"injectDestroy$","file":"injectors/src/lib/on-destroy/on-destroy.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Inject an observable that emits and completes at the same time as the component, directive, pipe, or service\\nit is injected into. It can be used to control the lifetime of other observables using\\nthe <code>takeUntil</code> pipe, and to build other complex injection functions.</p>\\n<p>Caveats:</p>\\n<ul>\\n<li>There are NO guarantees about whether the returned observable will emit and complete\\nbefore or after the regular ngOnDestroy lifecycle hook</li>\\n<li>For root and module level services the observable may never complete unless\\nthe containing module is explicitly destroyed, so don&#39;t rely on it for important operations</li>\\n<li>Components, directives, pipe, and services that manipulate the <code>ViewContainerRef</code> MUST\\ntake care to maintain the view controlling the lifecycle of the observable. Failure\\nto do so may result in early emit and completion of the returned observable</li>\\n</ul>\\n<p>Based on comment on <a href=\\"https://github.com/angular/angular/issues/10185\\">https://github.com/angular/angular/issues/10185</a>\\nMostly <a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1165545544\\">https://github.com/angular/angular/issues/10185#issuecomment-1165545544</a> and\\n<a href=\\"https://github.com/angular/angular/issues/10185#issuecomment-1199063426\\">https://github.com/angular/angular/issues/10185#issuecomment-1199063426</a></p>\\n","args":[],"returnType":"Observable<void>","jsdoctags":[{"tagName":{"pos":2694,"end":2701,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable that emits and completes when the component/directive/etc. is destroyed</p>\\n"}]}],"injectors/src/lib/on-destroy/destructor-subject.ts":[{"name":"isDestructorScopeLike","file":"injectors/src/lib/on-destroy/destructor-subject.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Determines whether an object is destructor scope like</p>\\n","args":[{"name":"obj","deprecated":false,"deprecationMessage":""}],"returnType":"DestructorScope","jsdoctags":[{"name":{"pos":328,"end":331,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"obj"},"deprecated":false,"deprecationMessage":"","tagName":{"pos":322,"end":327,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Value to test</p>\\n"},{"tagName":{"pos":350,"end":357,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>true if the object seems to be a destructor scope, otherwise false</p>\\n"}]}],"injectors/src/lib/select/select.ts":[{"name":"markForCheck","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Marks a view for change detection whenever a new value is emitted</p>\\n","args":[{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"MonoTypeOperatorFunction<T>","jsdoctags":[{"name":{"pos":689,"end":696,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":683,"end":688,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Options to explicitly disable marking</p>\\n"},{"tagName":{"pos":739,"end":746,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A rxjs operator</p>\\n"}]},{"name":"select$","file":"injectors/src/lib/select/select.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Creates an observable emitting parts of the state. The observable&#39;s lifetime\\nis automatically tied to the injection context where this is called.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"options","type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true}],"returnType":"Observable<T>","jsdoctags":[{"name":{"pos":1313,"end":1321,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":1307,"end":1312,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State selection function or token</p>\\n"},{"name":{"pos":1366,"end":1373,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"options"},"type":"SelectOptions","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"pos":1360,"end":1365,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Additional select options</p>\\n"},{"tagName":{"pos":1404,"end":1411,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>An observable of the selected state</p>\\n"}]}],"injectors/src/lib/select/select-snapshot.ts":[{"name":"selectQuerySnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that can be called with the same arguments as the query selector\\nand returns the latest value each time. Automatically marks components, directives, or pipes\\nfor change detection whenever a new value is available. Note that since typescript has yet to\\nimplement support for higher order generics there is sometimes a need to specialize the\\nreturned query function with the correct arguments and return type. This can be done as shown\\nin the examples.</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""},{"name":"boundArgs","type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true}],"returnType":"SelectQuery<F, BoundArgs>","jsdoctags":[{"name":{"pos":2433,"end":2441,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":2427,"end":2432,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Store query selector</p>\\n"},{"name":{"pos":2473,"end":2482,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"boundArgs"},"type":"BoundArgs","deprecated":false,"deprecationMessage":"","dotDotDotToken":true,"tagName":{"pos":2467,"end":2472,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Optional bound query arguments</p>\\n"},{"tagName":{"pos":1631,"end":1638,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<caption>Basic usage</caption>\\nclass Component {\\n...\\n// Return type: () => string\\nreadonly markdown = querySelectSnapshot(ResourceRegistrySelectors.markdown, id);\\n// Return type: (id: ResourceId) => string\\nreadonly markdownById = querySelectSnapshot(ResourceRegistrySelectors.markdown);\\n...\\n}"},{"tagName":{"pos":1975,"end":1982,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"example"},"comment":"<caption>Specialize query arguments and/or return type</caption>\\nclass Component {\\n...\\n// Return type: () => number[]\\nreadonly points = querySelectSnapshot(ResourceRegistrySelectors.field, id, type, \'points\', [])<number[]>;\\n// Return type: (field: string, defaultValue: string) => string\\nreadonly getStringField = querySelectSnapshot(ResourceRegistrySelectors.field, id, type)<string, [string, string]>;\\n}"},{"tagName":{"pos":2518,"end":2525,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A snapshot function taking the same arguments as the query selector (excluding bound arguments)</p>\\n"}]},{"name":"selectSnapshot","file":"injectors/src/lib/select/select-snapshot.ts","ctype":"miscellaneous","subtype":"function","deprecated":false,"deprecationMessage":"","description":"<p>Injects a function that returns the latest snapshot value each time it is called\\nAutomatically marks components, directives, or pipes for change detection whenever\\na new value is available</p>\\n","args":[{"name":"selector","type":"StateSelector","deprecated":false,"deprecationMessage":""}],"returnType":"T","jsdoctags":[{"name":{"pos":819,"end":827,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"selector"},"type":"StateSelector","deprecated":false,"deprecationMessage":"","tagName":{"pos":813,"end":818,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Store data selector</p>\\n"},{"tagName":{"pos":852,"end":859,"flags":4194304,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>A snapshot function</p>\\n"}]}]},"groupedEnumerations":{"state/src/link-registry/link-registry.model.ts":[{"name":"LinkType","childs":[{"name":"Internal","deprecated":false,"deprecationMessage":"","value":"internal"},{"name":"External","deprecated":false,"deprecationMessage":"","value":"external"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Types for Link</p>\\n","file":"state/src/link-registry/link-registry.model.ts"}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"RawBuiltinResourceType","childs":[{"name":"Markdown","deprecated":false,"deprecationMessage":"","value":"markdown"},{"name":"Text","deprecated":false,"deprecationMessage":"","value":"text"},{"name":"Url","deprecated":false,"deprecationMessage":"","value":"url"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>Raw builtin type strings</p>\\n","file":"state/src/resource-registry/resource-registry.model.ts"}],"state/src/storage/storage.model.ts":[{"name":"StorageId","childs":[{"name":"Local","deprecated":false,"deprecationMessage":"","value":"local"},{"name":"Session","deprecated":false,"deprecationMessage":"","value":"session"}],"ctype":"miscellaneous","subtype":"enum","deprecated":false,"deprecationMessage":"","description":"<p>StorageId - enum with values as Local, Session - identifier for storage types</p>\\n","file":"state/src/storage/storage.model.ts"}]},"groupedTypeAliases":{"state/src/resource-registry/resource-registry.selectors.ts":[{"name":"AnyEntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.anyEntry}</p>\\n","kind":178},{"name":"DataQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for resource data</p>\\n","kind":178},{"name":"EntryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.entry}</p>\\n","kind":178},{"name":"FieldQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/resource-registry/resource-registry.selectors.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function returned by {@link ResourceRegistrySelectors.field}</p>\\n","kind":178}],"state/src/resource-registry/resource-registry.model.ts":[{"name":"BuiltinTypes","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Maps raw builtin type strings to ResourceType</p>\\n","kind":194},{"name":"CustomResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Typed custom resource entry</p>\\n","kind":187},{"name":"CustomResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":" `custom:${T}`","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Custom entry types</p>\\n","kind":197},{"name":"ExtractBuiltinEntryType","ctype":"miscellaneous","subtype":"typealias","rawtype":"UnionMember<z.infer<> | type | T>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Extracts the builtin entry with type T</p>\\n","kind":177},{"name":"ResourceEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Any resource entry</p>\\n","kind":177},{"name":"ResourceEntryPayload","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Payload type used when creating custom types</p>\\n","kind":187},{"name":"ResourceId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource identifier</p>\\n","kind":177},{"name":"ResourceRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ResourceRegistryModel>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Context type for action handlers</p>\\n","kind":177},{"name":"ResourceRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State data model</p>\\n","kind":177},{"name":"ResourceType","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"state/src/resource-registry/resource-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Resource type string with entry typings</p>\\n","kind":187}],"state/src/link-registry/link-registry.model.ts":[{"name":"ExternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for external link entry</p>\\n","kind":177},{"name":"InternalLinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for internal link entry</p>\\n","kind":177},{"name":"LinkEntry","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>entry for link registry</p>\\n","kind":177},{"name":"LinkId","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type for unique identifier for link</p>\\n","kind":177},{"name":"LinkRegistryContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<LinkRegistryModel>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>type for State Context of LinkRegistry</p>\\n","kind":177},{"name":"LinkRegistryModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"state/src/link-registry/link-registry.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for LinkRegistry State</p>\\n","kind":177}],"state/src/link-registry/link-registry.state.ts":[{"name":"LinkRegistryQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"state/src/link-registry/link-registry.state.ts","deprecated":false,"deprecationMessage":"","description":"<p>Query function for link entry optionally with type specified</p>\\n","kind":178}],"injectors/src/lib/select/select-snapshot.ts":[{"name":"RestArgs","ctype":"miscellaneous","subtype":"typealias","rawtype":"","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Get remaining arguments after applying bound arguments</p>\\n","kind":188},{"name":"SelectQuery","ctype":"miscellaneous","subtype":"typealias","rawtype":"function","file":"injectors/src/lib/select/select-snapshot.ts","deprecated":false,"deprecationMessage":"","description":"<p>Function type returned by {@link selectQuerySnapshot}</p>\\n","kind":178}],"injectors/src/lib/select/select.ts":[{"name":"StateSelector","ctype":"miscellaneous","subtype":"typealias","rawtype":" | StateToken<T>","file":"injectors/src/lib/select/select.ts","deprecated":false,"deprecationMessage":"","description":"<p>Selector type for select style functions</p>\\n","kind":186}],"state/src/storage/storage.model.ts":[{"name":"StorageContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<StorageModel>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Helper alias for action handler&#39;s ctx argument</p>\\n","kind":177},{"name":"StorageModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"Record<StorageId | number>","file":"state/src/storage/storage.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Type alias for the array of Storage objects</p>\\n","kind":177}]}}}')},"./dist/compodoc/components-atoms/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"GradientPoint","id":"interface-GradientPoint-deca5c57881562b1c16d34b446006d52194dfce42a4093fe366ac3fcbeaf7291e08172915aac95fc2938e856084da0fe61a29b9897eb6da4ca9edd58116c7198","file":"src/lib/gradient-legend/gradient-legend.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** An interface of gradient colors along with their percentages for the gradient bar. */\\nexport interface GradientPoint {\\n  /** Gradient color at a specific percentage */\\n  color: string;\\n  /** Percentage point along the gradient bar */\\n  percentage: number;\\n}\\n\\n/** Gradient legend for biomarkers */\\n@Component({\\n  selector: \'hra-gradient-legend\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./gradient-legend.component.html\',\\n  styleUrls: [\'./gradient-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class GradientLegendComponent {\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Computes the css linear-gradient function for the gradient bar */\\n  get gradientCss(): string {\\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(\',\');\\n    return `linear-gradient(90deg, ${stops})`;\\n  }\\n}\\n","properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Gradient color at a specific percentage</p>\\n","line":7,"rawdescription":"\\nGradient color at a specific percentage"},{"name":"percentage","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>Percentage point along the gradient bar</p>\\n","line":9,"rawdescription":"\\nPercentage point along the gradient bar"}],"indexSignatures":[],"kind":165,"description":"<p>An interface of gradient colors along with their percentages for the gradient bar.</p>\\n","rawdescription":"\\nAn interface of gradient colors along with their percentages for the gradient bar.","methods":[]},{"name":"SizeLegend","id":"interface-SizeLegend-dae8784679328cc4f52418a0ae905fed758d8fca706c3b6238631087d98a163ec72f26f1b06661d00473eefd6eafd27ab263e34a661981ea71d5a1885746f8e9","file":"src/lib/size-legend/size-legend.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Defining the input data types for the radius and label to be displayed. */\\nexport interface SizeLegend {\\n  /** Label under circle */\\n  label: string;\\n  /** Radius for cirlce */\\n  radius: number;\\n}\\n\\n/** Size legend component for the biomarkers table. */\\n@Component({\\n  selector: \'hra-size-legend\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./size-legend.component.html\',\\n  styleUrls: [\'./size-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SizeLegendComponent {\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Label under circle</p>\\n","line":7,"rawdescription":"\\nLabel under circle"},{"name":"radius","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>Radius for cirlce</p>\\n","line":9,"rawdescription":"\\nRadius for cirlce"}],"indexSignatures":[],"kind":165,"description":"<p>Defining the input data types for the radius and label to be displayed.</p>\\n","rawdescription":"\\nDefining the input data types for the radius and label to be displayed.","methods":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"EmailInputComponent","id":"component-EmailInputComponent-1f7d0d808093e56fed36089f88f516d958678e7e917eb4299c6deb26edf7810680d231b1d0c349c0b380f39d8927a3738e20cd80686dd35cc343ef10c58dc481","file":"src/lib/email-input/email-input.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-email-input","styleUrls":["./email-input.component.scss"],"styles":[],"templateUrl":["./email-input.component.html"],"viewProviders":[],"inputsClass":[{"name":"placeholder","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA placeholder for the email input field. This will be disappeared when the email is typed.","description":"<p>A placeholder for the email input field. This will be disappeared when the email is typed.</p>\\n","line":22,"type":"string","decorators":[]}],"outputsClass":[{"name":"emailChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the new email when the input changes or undefined if the email is invalid","description":"<p>Emits the new email when the input changes or undefined if the email is invalid</p>\\n","line":25,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required, Validators.email],\\n  })","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>A control to validate the email.</p>\\n","line":31,"rawdescription":"\\nA control to validate the email.","modifierKind":[144]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Observable emitting when the component is destroyed</p>\\n","line":28,"rawdescription":"\\nObservable emitting when the component is destroyed","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Email input components for contact modal.</p>\\n","rawdescription":"\\n\\nEmail input components for contact modal.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { FormControl, ReactiveFormsModule, Validators } from \'@angular/forms\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { map, takeUntil } from \'rxjs\';\\n\\n/**\\n * Email input components for contact modal.\\n */\\n@Component({\\n  selector: \'hra-email-input\',\\n  standalone: true,\\n  imports: [CommonModule, MatFormFieldModule, ReactiveFormsModule, MatInputModule],\\n  templateUrl: \'./email-input.component.html\',\\n  styleUrls: [\'./email-input.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class EmailInputComponent {\\n  /** A placeholder for the email input field. This will be disappeared when the email is typed. */\\n  @Input() placeholder = \'\';\\n\\n  /** Emits the new email when the input changes or undefined if the email is invalid  */\\n  @Output() readonly emailChange = new EventEmitter<string | undefined>();\\n\\n  /** Observable emitting when the component is destroyed */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**  A control to validate the email. */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required, Validators.email],\\n  });\\n\\n  /** Connects the input control to component outputs */\\n  constructor() {\\n    const { control, destroy$ } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? value : undefined))\\n      )\\n      .subscribe((value) => this.emailChange.emit(value as string | undefined));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .email-text-field {\\n    width: 100%;\\n    background: #ffffff;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./email-input.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Connects the input control to component outputs</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":34,"rawdescription":"\\nConnects the input control to component outputs"},"templateData":"<mat-form-field class=\\"email-text-field\\" appearance=\\"outline\\">\\n  <mat-label> Email </mat-label>\\n  <input type=\\"email\\" matInput [formControl]=\\"control\\" [placeholder]=\\"placeholder\\" />\\n\\n  <mat-error *ngIf=\\"control.hasError(\'email\') && !control.hasError(\'required\')\\">\\n    Please enter a valid email address\\n  </mat-error>\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\"> Email is required! </mat-error>\\n</mat-form-field>\\n"},{"name":"EmptyBiomarkerComponent","id":"component-EmptyBiomarkerComponent-37024d95c11a561444e101c6aa7bc4ff857513ca38fac3e421501e21ab27f43cf3f33da15755e5ac3a40b963a23bdf6efe3e86834cd7971258fea52168aa9ad5","file":"src/lib/empty-biomarker/empty-biomarker.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-empty-biomarker","styleUrls":["./empty-biomarker.component.scss"],"styles":[],"templateUrl":["./empty-biomarker.component.html"],"viewProviders":[],"inputsClass":[{"name":"collaborateText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  buttonon text of empty biomarker component.\\n","description":"<p>Input  buttonon text of empty biomarker component.</p>\\n","line":23,"type":"string","decorators":[]},{"name":"message","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  message markdown of empty biomarker component.\\n","description":"<p>Input  message markdown of empty biomarker component.</p>\\n","line":28,"type":"string","decorators":[]}],"outputsClass":[{"name":"collaborateClick","defaultValue":"new EventEmitter()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAn event emitter that emits the user button click event\\n","description":"<p>An event emitter that emits the user button click event</p>\\n","line":33,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p> Component for any empty biomaker cell\\n to inform about the empty data and has\\n button to navigate to HRA Team.</p>\\n","rawdescription":"\\n\\n Component for any empty biomaker cell\\n to inform about the empty data and has\\n button to navigate to HRA Team.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n *  Component for any empty biomaker cell\\n *  to inform about the empty data and has\\n *  button to navigate to HRA Team.\\n */\\n@Component({\\n  selector: \'hra-empty-biomarker\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MarkdownModule],\\n  templateUrl: \'./empty-biomarker.component.html\',\\n  styleUrls: [\'./empty-biomarker.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class EmptyBiomarkerComponent {\\n  /**\\n   * Input  buttonon text of empty biomarker component.\\n   */\\n  @Input() collaborateText = \'\';\\n\\n  /**\\n   * Input  message markdown of empty biomarker component.\\n   */\\n  @Input() message = \'\';\\n\\n  /**\\n   * An event emitter that emits the user button click event\\n   */\\n  @Output() readonly collaborateClick = new EventEmitter();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n  padding: 2.625rem 2rem 2.625rem 2rem;\\n\\n  .message {\\n    color: #243142;\\n  }\\n\\n  .collaborate-button {\\n    margin-top: 2rem;\\n    font-weight: 700;\\n    color: #fff;\\n    width: 100%;\\n    max-width: 17.25rem;\\n    height: 3rem;\\n  }\\n}\\n","styleUrl":"./empty-biomarker.component.scss"}],"stylesData":"","templateData":"<markdown [data]=\\"message\\" class=\\"message\\"></markdown>\\n<button mat-flat-button class=\\"collaborate-button\\" color=\\"primary\\" (click)=\\"collaborateClick.emit($event)\\">\\n  {{ collaborateText }}\\n</button>\\n"},{"name":"GradientLegendComponent","id":"component-GradientLegendComponent-deca5c57881562b1c16d34b446006d52194dfce42a4093fe366ac3fcbeaf7291e08172915aac95fc2938e856084da0fe61a29b9897eb6da4ca9edd58116c7198","file":"src/lib/gradient-legend/gradient-legend.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-gradient-legend","styleUrls":["./gradient-legend.component.scss"],"styles":[],"templateUrl":["./gradient-legend.component.html"],"viewProviders":[],"inputsClass":[{"name":"gradient","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nGradient colors along with their stop points","description":"<p>Gradient colors along with their stop points</p>\\n","line":23,"type":"GradientPoint[]","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Gradient legend for biomarkers</p>\\n","rawdescription":"\\nGradient legend for biomarkers","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** An interface of gradient colors along with their percentages for the gradient bar. */\\nexport interface GradientPoint {\\n  /** Gradient color at a specific percentage */\\n  color: string;\\n  /** Percentage point along the gradient bar */\\n  percentage: number;\\n}\\n\\n/** Gradient legend for biomarkers */\\n@Component({\\n  selector: \'hra-gradient-legend\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./gradient-legend.component.html\',\\n  styleUrls: [\'./gradient-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class GradientLegendComponent {\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Computes the css linear-gradient function for the gradient bar */\\n  get gradientCss(): string {\\n    const stops = this.gradient.map(({ color, percentage }) => `${color} ${percentage}%`).join(\',\');\\n    return `linear-gradient(90deg, ${stops})`;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .gradient-bar {\\n    height: 1.5rem;\\n    width: 100%;\\n  }\\n\\n  .legend {\\n    display: flex;\\n\\n    .filler {\\n      flex-grow: 1;\\n    }\\n  }\\n}\\n","styleUrl":"./gradient-legend.component.scss"}],"stylesData":"","accessors":{"gradientCss":{"name":"gradientCss","getSignature":{"name":"gradientCss","type":"string","returnType":"string","line":26,"rawdescription":"\\nComputes the css linear-gradient function for the gradient bar","description":"<p>Computes the css linear-gradient function for the gradient bar</p>\\n"}}},"templateData":"<div class=\\"gradient-bar\\" [style.background]=\\"gradientCss\\"></div>\\n<div class=\\"legend\\">\\n  <div class=\\"start\\">0.0</div>\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"end\\">1.0</div>\\n</div>\\n"},{"name":"LabelBoxComponent","id":"component-LabelBoxComponent-ef78615c37f1899e7f105d2e14f13a219f8472171bf04099642de0ee701b87eafba4f218cf04d7ba1c2e552e28262d1b32ae397ca7eab7043ad462a5f76a960d","file":"src/lib/label-box/label-box.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-label-box","styleUrls":["./label-box.component.scss"],"styles":[],"templateUrl":["./label-box.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Label box component for reuse accross the page. The content with &quot;end&quot; selector will be added to the end of the label box</p>\\n","rawdescription":"\\nLabel box component for reuse accross the page. The content with \\"end\\" selector will be added to the end of the label box","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Label box component for reuse accross the page. The content with \\"end\\" selector will be added to the end of the label box */\\n@Component({\\n  selector: \'hra-label-box\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./label-box.component.html\',\\n  styleUrls: [\'./label-box.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LabelBoxComponent {}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  align-items: center;\\n  padding: 0.75rem 2rem;\\n  background: #f8f9fa;\\n\\n  .filler {\\n    flex-grow: 1;\\n  }\\n}\\n","styleUrl":"./label-box.component.scss"}],"stylesData":"","templateData":"<ng-content></ng-content>\\n\\n<div class=\\"filler\\"></div>\\n\\n<ng-content select=\\".end\\"></ng-content>\\n"},{"name":"RequiredInputComponent","id":"component-RequiredInputComponent-6a768e79d86219e624a199447195426647b4cde0beb840ecbc68113987b52c6d0be44d19e13b91a4c8d351b9ad503e8a328db1c7626d4ea76b7cc8338bef3247","file":"src/lib/required-input/required-input.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-required-input","styleUrls":["./required-input.component.scss"],"styles":[],"templateUrl":["./required-input.component.html"],"viewProviders":[],"inputsClass":[{"name":"label","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nThe label to display for the text field.\\n","description":"<p>The label to display for the text field.</p>\\n","line":25,"type":"string","decorators":[]}],"outputsClass":[{"name":"inputChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAn event emitter that emits the input value when it changes.\\n","description":"<p>An event emitter that emits the input value when it changes.</p>\\n","line":30,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: Validators.required,\\n  })","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Form control for input to set some input validation.</p>\\n","line":40,"rawdescription":"\\n\\nForm control for input to set some input validation.\\n","modifierKind":[144]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Destroy observable used to control the lifetime of other observables.</p>\\n","line":35,"rawdescription":"\\n\\nDestroy observable used to control the lifetime of other observables.\\n","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>A reusable text field component that can be used to input text.\\nThis input field component also had required validation check.</p>\\n","rawdescription":"\\n\\nA reusable text field component that can be used to input text.\\nThis input field component also had required validation check.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\nimport { FormControl, ReactiveFormsModule, Validators } from \'@angular/forms\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { map, takeUntil } from \'rxjs\';\\n\\n/**\\n * A reusable text field component that can be used to input text.\\n * This input field component also had required validation check.\\n */\\n@Component({\\n  selector: \'hra-required-input\',\\n  standalone: true,\\n  imports: [CommonModule, MatFormFieldModule, MatInputModule, ReactiveFormsModule],\\n  templateUrl: \'./required-input.component.html\',\\n  styleUrls: [\'./required-input.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class RequiredInputComponent {\\n  /**\\n   * The label to display for the text field.\\n   */\\n  @Input() label = \'\';\\n\\n  /**\\n   * An event emitter that emits the input value when it changes.\\n   */\\n  @Output() readonly inputChange = new EventEmitter<string | undefined>();\\n\\n  /**\\n   * Destroy observable used to control the lifetime of other observables.\\n   */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**\\n   * Form control for input to set some input validation.\\n   */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: Validators.required,\\n  });\\n\\n  /**\\n   * Creates an instance of required input component\\n   * and it connect the form control value changes to check for validation\\n   * before output emmiter is triggered\\n   */\\n  constructor() {\\n    const { control, destroy$, inputChange } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? (value as string) : undefined))\\n      )\\n      .subscribe(inputChange);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .form-field {\\n    width: 100%;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./required-input.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Creates an instance of required input component\\nand it connect the form control value changes to check for validation\\nbefore output emmiter is triggered</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":43,"rawdescription":"\\n\\nCreates an instance of required input component\\nand it connect the form control value changes to check for validation\\nbefore output emmiter is triggered\\n"},"templateData":"<mat-form-field class=\\"form-field\\" appearance=\\"outline\\">\\n  <mat-label> {{ label }} </mat-label>\\n  <input matInput [formControl]=\\"control\\" />\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\">{{ label }} is required!</mat-error>\\n</mat-form-field>\\n"},{"name":"RequiredTextboxComponent","id":"component-RequiredTextboxComponent-ad002581cf0f7ae0707bd500566ee127dc19a3403138f98034117f59231d3c30eaf53896f1e1b5850df7a95498bb9dd632f29b200e38de676c48c0d61c350ad7","file":"src/lib/required-textbox/required-textbox.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-required-textbox","styleUrls":["./required-textbox.component.scss"],"styles":[],"templateUrl":["./required-textbox.component.html"],"viewProviders":[],"inputsClass":[{"name":"label","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA label for the textarea field","description":"<p>A label for the textarea field</p>\\n","line":25,"type":"string","decorators":[]},{"name":"placeholder","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA placeholder for the message textarea field","description":"<p>A placeholder for the message textarea field</p>\\n","line":22,"type":"string","decorators":[]}],"outputsClass":[{"name":"messageChange","defaultValue":"new EventEmitter<string | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the new message when the input changes or undefined if the message is invalid","description":"<p>Emits the new message when the input changes or undefined if the message is invalid</p>\\n","line":28,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required],\\n  })","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>A control to validate if the message field is empty</p>\\n","line":34,"rawdescription":"\\nA control to validate if the message field is empty","modifierKind":[144]},{"name":"destroy$","defaultValue":"injectDestroy$()","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Observable emitting when the component is destroyed</p>\\n","line":31,"rawdescription":"\\nObservable emitting when the component is destroyed","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>The required textbox component displays a message box for users to add a message</p>\\n","rawdescription":"\\n\\nThe required textbox component displays a message box for users to add a message\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { injectDestroy$ } from \'@hra-ui/cdk/injectors\';\\nimport { FormControl, Validators, ReactiveFormsModule } from \'@angular/forms\';\\nimport { map, takeUntil } from \'rxjs\';\\nimport { MatFormFieldModule } from \'@angular/material/form-field\';\\nimport { MatInputModule } from \'@angular/material/input\';\\n\\n/**\\n * The required textbox component displays a message box for users to add a message\\n */\\n@Component({\\n  selector: \'hra-required-textbox\',\\n  standalone: true,\\n  imports: [CommonModule, MatInputModule, MatFormFieldModule, ReactiveFormsModule],\\n  templateUrl: \'./required-textbox.component.html\',\\n  styleUrls: [\'./required-textbox.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class RequiredTextboxComponent {\\n  /** A placeholder for the message textarea field */\\n  @Input() placeholder = \'\';\\n\\n  /** A label for the textarea field */\\n  @Input() label = \'\';\\n\\n  /** Emits the new message when the input changes or undefined if the message is invalid  */\\n  @Output() readonly messageChange = new EventEmitter<string | undefined>();\\n\\n  /** Observable emitting when the component is destroyed */\\n  readonly destroy$ = injectDestroy$();\\n\\n  /**  A control to validate if the message field is empty */\\n  readonly control = new FormControl(\'\', {\\n    updateOn: \'blur\',\\n    validators: [Validators.required],\\n  });\\n\\n  /** Connects the input control to component outputs */\\n  constructor() {\\n    const { control, destroy$ } = this;\\n    control.valueChanges\\n      .pipe(\\n        takeUntil(destroy$),\\n        map((value) => (control.valid ? value : undefined))\\n      )\\n      .subscribe((value) => this.messageChange.emit(value as string | undefined));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .message-field {\\n    width: 100%;\\n    background: #ffffff;\\n  }\\n\\n  ::ng-deep .mat-mdc-form-field-required-marker {\\n    color: #dc231e;\\n  }\\n}\\n","styleUrl":"./required-textbox.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Connects the input control to component outputs</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":37,"rawdescription":"\\nConnects the input control to component outputs"},"templateData":"<mat-form-field class=\\"message-field\\" appearance=\\"outline\\">\\n  <mat-label> {{ label }} </mat-label>\\n  <textarea\\n    cdkTextareaAutosize\\n    cdkAutosizeMinRows=\\"10\\"\\n    cdkAutosizeMaxRows=\\"20\\"\\n    matInput\\n    [formControl]=\\"control\\"\\n    [placeholder]=\\"placeholder\\"\\n  ></textarea>\\n  <mat-error *ngIf=\\"control.hasError(\'required\')\\"> {{ label }} is required! </mat-error>\\n</mat-form-field>\\n"},{"name":"SizeLegendComponent","id":"component-SizeLegendComponent-dae8784679328cc4f52418a0ae905fed758d8fca706c3b6238631087d98a163ec72f26f1b06661d00473eefd6eafd27ab263e34a661981ea71d5a1885746f8e9","file":"src/lib/size-legend/size-legend.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-size-legend","styleUrls":["./size-legend.component.scss"],"styles":[],"templateUrl":["./size-legend.component.html"],"viewProviders":[],"inputsClass":[{"name":"sizes","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":23,"type":"SizeLegend[]","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Size legend component for the biomarkers table.</p>\\n","rawdescription":"\\nSize legend component for the biomarkers table.","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** Defining the input data types for the radius and label to be displayed. */\\nexport interface SizeLegend {\\n  /** Label under circle */\\n  label: string;\\n  /** Radius for cirlce */\\n  radius: number;\\n}\\n\\n/** Size legend component for the biomarkers table. */\\n@Component({\\n  selector: \'hra-size-legend\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./size-legend.component.html\',\\n  styleUrls: [\'./size-legend.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SizeLegendComponent {\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  flex-direction: row;\\n  column-gap: 2rem;\\n\\n  .item {\\n    display: flex;\\n    flex-direction: column;\\n    align-items: center;\\n    line-height: 0.5rem;\\n\\n    .circle {\\n      height: var(--size);\\n      width: var(--size);\\n      border-radius: 50%;\\n      border: 0.125rem solid #75838f;\\n    }\\n\\n    .label {\\n      margin-top: 0.5rem;\\n    }\\n\\n    .filler {\\n      flex-grow: 1;\\n    }\\n  }\\n}\\n","styleUrl":"./size-legend.component.scss"}],"stylesData":"","templateData":"<div *ngFor=\\"let text of sizes\\" class=\\"item\\">\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"circle\\" style=\\"--size: {{ text.radius }}rem\\"></div>\\n  <div class=\\"filler\\"></div>\\n  <div class=\\"label\\">{{ text.label }}</div>\\n</div>\\n"}],"modules":[],"miscellaneous":[]}')},"./dist/compodoc/components-behavioral/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerDetailsComponent","id":"component-BiomarkerDetailsComponent-d07876168c6d26767dc141fa6520cc648a9c6a1d9683f72d793f94b25ee35e5ad1cf275ac0ad87d526729024fa3cafb7c2f95fa5f1cf6015729aee8b32d283f6","file":"src/lib/biomarker-details/biomarker-details.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-biomarker-details","styleUrls":["./biomarker-details.component.scss"],"styles":[],"templateUrl":["./biomarker-details.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"collaborateText","defaultValue":"\'Collaborate with the HRA Team\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>button text of empty biomarker component.</p>\\n","line":102,"rawdescription":"\\n\\nbutton text of empty biomarker component.\\n","modifierKind":[144]},{"name":"gradientHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Info to be shown on the tooltip for Gradient Legend</p>\\n","line":57,"rawdescription":"\\nInfo to be shown on the tooltip for Gradient Legend","modifierKind":[144]},{"name":"gradients","defaultValue":"selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Gradient colors along with their stop points</p>\\n","line":66,"rawdescription":"\\nGradient colors along with their stop points","modifierKind":[144]},{"name":"iri","defaultValue":"selectSnapshot(ActiveFtuSelectors.iri)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Iri  of medical illustration behavior component</p>\\n","line":79,"rawdescription":"\\n\\nIri  of medical illustration behavior component\\n","modifierKind":[144]},{"name":"isTableFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Indicates if the table is fully shown, defaults to false</p>\\n","line":63,"rawdescription":"\\nIndicates if the table is fully shown, defaults to false"},{"name":"message","defaultValue":"`We currently do not have cell type data for this biomarker.\\n  <br><br> Please contact us to discuss your dataset.`","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>message markdown of empty biomarker component.</p>\\n","line":107,"rawdescription":"\\n\\nmessage markdown of empty biomarker component.\\n","modifierKind":[144]},{"name":"sizeHoverInfo","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Info to be shown on the tooltip for Size Legend</p>\\n","line":60,"rawdescription":"\\nInfo to be shown on the tooltip for Size Legend","modifierKind":[144]},{"name":"sizes","defaultValue":"selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":71,"rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","modifierKind":[144]},{"name":"source","defaultValue":"selectSnapshot(SourceRefsSelectors.sourceReferences)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":74,"rawdescription":"\\nList of sources with titles and links displayed to the user","modifierKind":[144]},{"name":"tabs","defaultValue":"selectSnapshot(CellSummarySelectors.aggregates)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Table tabs</p>\\n","line":54,"rawdescription":"\\nTable tabs","modifierKind":[144]},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Get all tissues</p>\\n","line":84,"rawdescription":"\\n\\nGet all tissues\\n","modifierKind":[144]}],"methodsClass":[{"name":"toggleFullscreen","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":116,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function that toggles isTableFullScreen and\\ncalls the setScreenMode function.\\n","description":"<p>A function that toggles isTableFullScreen and\\ncalls the setScreenMode function.</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>The component displays the biomarker details which includes the details, gradient legends, size legends and source lists</p>\\n","rawdescription":"\\nThe component displays the biomarker details which includes the details, gradient legends, size legends and source lists","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTabsModule } from \'@angular/material/tabs\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { ActiveFtuSelectors, ScreenModeAction, TissueLibrarySelectors } from \'@hra-ui/state\';\\nimport {\\n  EmptyBiomarkerComponent,\\n  GradientLegendComponent,\\n  GradientPoint,\\n  LabelBoxComponent,\\n  SizeLegend,\\n  SizeLegendComponent,\\n} from \'@hra-ui/components/atoms\';\\nimport { BiomarkerTableDataCardComponent, SourceListComponent } from \'@hra-ui/components/molecules\';\\nimport { BiomarkerTableComponent, TissueInfo } from \'@hra-ui/components/organisms\';\\nimport { CellSummarySelectors, ResourceIds as Ids, ResourceTypes as RTypes, SourceRefsSelectors } from \'@hra-ui/state\';\\n\\n/**\\n * PlaceHolder for Empty Tissue Info\\n */\\nconst EMPTY_TISSUE_INFO: TissueInfo = {\\n  id: \'\',\\n  label: \'\',\\n  datasetCount: 0,\\n};\\n\\n/** The component displays the biomarker details which includes the details, gradient legends, size legends and source lists*/\\n@Component({\\n  selector: \'ftu-biomarker-details\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatIconModule,\\n    MatTabsModule,\\n\\n    BiomarkerTableComponent,\\n    BiomarkerTableDataCardComponent,\\n    GradientLegendComponent,\\n    HoverDirective,\\n    LabelBoxComponent,\\n    SizeLegendComponent,\\n    SourceListComponent,\\n    EmptyBiomarkerComponent,\\n  ],\\n  templateUrl: \'./biomarker-details.component.html\',\\n  styleUrls: [\'./biomarker-details.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerDetailsComponent {\\n  /** Table tabs */\\n  readonly tabs = selectSnapshot(CellSummarySelectors.aggregates);\\n\\n  /** Info to be shown on the tooltip for Gradient Legend */\\n  readonly gradientHoverInfo = selectQuerySnapshot(RR.anyText, Ids.GradientLegendInfo);\\n\\n  /** Info to be shown on the tooltip for Size Legend */\\n  readonly sizeHoverInfo = selectQuerySnapshot(RR.anyText, Ids.SizeLegendInfo);\\n\\n  /** Indicates if the table is fully shown, defaults to false*/\\n  isTableFullScreen = false;\\n\\n  /** Gradient colors along with their stop points */\\n  readonly gradients = selectQuerySnapshot(RR.field, Ids.GradientLegend, RTypes.Gradient, \'points\' as const, [])<\\n    GradientPoint[]\\n  >;\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  readonly sizes = selectQuerySnapshot(RR.field, Ids.SizeLegend, RTypes.Size, \'sizes\' as const, [])<SizeLegend[]>;\\n\\n  /** List of sources with titles and links displayed to the user */\\n  readonly source = selectSnapshot(SourceRefsSelectors.sourceReferences);\\n\\n  /**\\n   * Iri  of medical illustration behavior component\\n   */\\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\\n\\n  /**\\n   * Get all tissues\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueInfo(): TissueInfo {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    if (iri === undefined) {\\n      return EMPTY_TISSUE_INFO;\\n    }\\n    const { id, label } = tissues[iri];\\n    return { id, label, datasetCount: 10 };\\n  }\\n\\n  /**\\n   * button text of empty biomarker component.\\n   */\\n  readonly collaborateText = \'Collaborate with the HRA Team\';\\n\\n  /**\\n   * message markdown of empty biomarker component.\\n   */\\n  readonly message = `We currently do not have cell type data for this biomarker.\\n  <br><br> Please contact us to discuss your dataset.`;\\n\\n  /** A dispatcher function to set the screen mode */\\n  private readonly setScreenMode = dispatch(ScreenModeAction.Set);\\n\\n  /** A function that toggles isTableFullScreen and\\n   * calls the setScreenMode function.\\n   */\\n  toggleFullscreen(): void {\\n    this.isTableFullScreen = !this.isTableFullScreen;\\n    this.setScreenMode(this.isTableFullScreen);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 21.5rem 21.5rem auto;\\n  grid-template-rows: 3.5rem 20rem 3rem 5rem auto;\\n  grid-template-areas:\\n    \'table-header table-header table-header\'\\n    \'table table table\'\\n    \'gradient-legend-header size-legend-header .\'\\n    \'gradient-legend size-legend .\'\\n    \'source-list source-list source-list\';\\n\\n  .table-header {\\n    grid-area: table-header;\\n    border-bottom: 0.063rem solid #d3d3d3;\\n    width: 43rem;\\n    height: 3.5rem;\\n  }\\n\\n  .table {\\n    grid-area: table;\\n    max-width: 100%;\\n    overflow: auto;\\n\\n    ::ng-deep .table-tab-header {\\n      padding-left: 1rem;\\n      padding-right: 1rem;\\n      border-left: 0.063rem solid #d3d3d3;\\n      border-bottom: 0.063rem solid #d3d3d3;\\n\\n      &:last-child {\\n        border-right: 0.063rem solid #d3d3d3;\\n      }\\n\\n      &.mdc-tab-indicator--active {\\n        background-color: #f8f9fa;\\n      }\\n    }\\n  }\\n\\n  .legend-header {\\n    color: vars.$dark-primary-text;\\n    border-top: 0.063rem solid #d3d3d3;\\n    border-bottom: 0.063rem solid #d3d3d3;\\n    border-right: 0.063rem solid #d3d3d3;\\n\\n    &.gradient {\\n      grid-area: gradient-legend-header;\\n    }\\n\\n    &.size {\\n      grid-area: size-legend-header;\\n    }\\n\\n    .icon {\\n      margin-left: 0.6rem;\\n    }\\n  }\\n\\n  .legend {\\n    padding: 1rem 2rem;\\n    border-right: 0.063rem solid #d3d3d3;\\n\\n    &.gradient {\\n      grid-area: gradient-legend;\\n\\n      .content {\\n        width: 10rem;\\n      }\\n    }\\n\\n    &.size {\\n      grid-area: size-legend;\\n    }\\n  }\\n\\n  .source-list {\\n    grid-area: source-list;\\n\\n    .content {\\n      width: min-content;\\n    }\\n  }\\n}\\n\\n::ng-deep .biomarker-details.info-tooltip {\\n  display: flex;\\n  padding: 1rem;\\n  border: 1px solid #a8a3a3;\\n  border-radius: 0.5rem;\\n  box-shadow: 1px 2px 16px 2px #00000029;\\n  background-color: vars.$primary-contrast-rgb;\\n  max-width: 21rem;\\n  font-size: small;\\n}\\n","styleUrl":"./biomarker-details.component.scss"}],"stylesData":"","accessors":{"tissueInfo":{"name":"tissueInfo","getSignature":{"name":"tissueInfo","type":"","returnType":"TissueInfo","line":89,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}}},"templateData":"<hra-label-box class=\\"table-header\\">\\n  Cell Types by Gene Biomarkers\\n  <mat-icon (click)=\\"toggleFullscreen()\\" class=\\"end\\">\\n    {{ isTableFullScreen ? \'close_fullscreen\' : \'open_in_full\' }}\\n  </mat-icon>\\n</hra-label-box>\\n\\n<mat-tab-group class=\\"table\\" [class.table-fullscreen]=\\"isTableFullScreen\\" mat-stretch-tabs=\\"false\\" color=\\"accent\\">\\n  <mat-tab *ngFor=\\"let tab of tabs()\\" labelClass=\\"table-tab-header\\" [label]=\\"tab.label\\">\\n    <hra-biomarker-table\\n      *ngIf=\\"tab.rows.length !== 0\\"\\n      [data]=\\"$any(tab.rows)\\"\\n      [columns]=\\"tab.columns\\"\\n      [gradient]=\\"gradients()\\"\\n      [sizes]=\\"sizes()\\"\\n      [tissueInfo]=\\"tissueInfo\\"\\n    ></hra-biomarker-table>\\n    <hra-empty-biomarker\\n      *ngIf=\\"tab.rows.length === 0\\"\\n      [collaborateText]=\\"collaborateText\\"\\n      [message]=\\"message\\"\\n    ></hra-empty-biomarker>\\n  </mat-tab>\\n</mat-tab-group>\\n\\n<hra-label-box class=\\"legend-header gradient\\">\\n  Biomarker Expression Mean in FTU\\n  <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"gradientHoverInfo()\\">info_outlined</mat-icon>\\n</hra-label-box>\\n<div class=\\"legend gradient\\">\\n  <hra-gradient-legend [gradient]=\\"gradients()\\" class=\\"content\\"></hra-gradient-legend>\\n</div>\\n\\n<hra-label-box class=\\"legend-header size\\">\\n  Percentage of Cells in FTU\\n  <mat-icon class=\\"icon\\" [hraHover]=\\"infoTooltip\\" [hraHoverData]=\\"sizeHoverInfo()\\">info_outlined</mat-icon>\\n</hra-label-box>\\n<div class=\\"legend size\\">\\n  <hra-size-legend [sizes]=\\"sizes()\\" class=\\"content\\"></hra-size-legend>\\n</div>\\n\\n<div class=\\"source-list\\">\\n  <hra-source-list [sources]=\\"source()\\" class=\\"content\\"></hra-source-list>\\n</div>\\n\\n<ng-template #infoTooltip let-tooltip>\\n  <div class=\\"biomarker-details info-tooltip\\">\\n    {{ tooltip }}\\n  </div>\\n</ng-template>\\n"},{"name":"ContactBehaviorComponent","id":"component-ContactBehaviorComponent-b9d5e223798d92be933b5dbadc75b1d6c247f7b00beb75f933bb07b0a4949d22458ee53931ca654d0b255f40508dbf23ef4e516e2f80368415a86fdfe44d60b6","file":"src/lib/contact-behavior/contact-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-contact-behavior","styleUrls":["./contact-behavior.component.scss"],"styles":[],"templateUrl":["./contact-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"description","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Information modal message to the user</p>\\n","line":29,"rawdescription":"\\nInformation modal message to the user","modifierKind":[144]},{"name":"postMessageTemplate","deprecated":false,"deprecationMessage":"","type":"TemplateRef<void>","optional":false,"description":"<p>A template to post a message</p>\\n","line":20,"rawdescription":"\\nA template to post a message","decorators":[{"name":"ViewChild","stringifiedArguments":"\'postMessage\'"}],"modifierKind":[144]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":23,"rawdescription":"\\nInput for product logo URL to displayed on the left side.","modifierKind":[144]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":26,"rawdescription":"\\nInput for product title to displayed on the left side.","modifierKind":[144]},{"name":"sendMessage","defaultValue":"dispatch(ContactActions.SendMessage)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>A dispatcher function to send message entered by user</p>\\n","line":32,"rawdescription":"\\nA dispatcher function to send message entered by user","modifierKind":[144]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":51,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which closes the \'Contact us\' dialog and the acknowledgement dialog.","description":"<p>A function which closes the &#39;Contact us&#39; dialog and the acknowledgement dialog.</p>\\n"},{"name":"submit","args":[{"name":"message","type":"ContactData","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.","description":"<p>A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box.</p>\\n","jsdoctags":[{"name":"message","type":"ContactData","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>A Component for contact behavior which sends the message entered by the user and shows an acknowledgement</p>\\n","rawdescription":"\\nA Component for contact behavior which sends the message entered by the user and shows an acknowledgement","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject, TemplateRef, ViewChild } from \'@angular/core\';\\nimport { MatDialog, MatDialogModule, MatDialogRef } from \'@angular/material/dialog\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { ContactData, ContactModalComponent, InfoModalComponent } from \'@hra-ui/components/molecules\';\\nimport { ResourceIds as Ids, ContactActions } from \'@hra-ui/state\';\\n\\n/** A Component for contact behavior which sends the message entered by the user and shows an acknowledgement */\\n@Component({\\n  selector: \'ftu-contact-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, MatDialogModule, ContactModalComponent, InfoModalComponent],\\n  templateUrl: \'./contact-behavior.component.html\',\\n  styleUrls: [\'./contact-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactBehaviorComponent {\\n  /** A template to post a message */\\n  @ViewChild(\'postMessage\') readonly postMessageTemplate!: TemplateRef<void>;\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /** Input for product title to displayed on the left side. */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /** Information modal message to the user */\\n  readonly description = selectQuerySnapshot(RR.anyText, Ids.ContactAcknowledgement);\\n\\n  /** A dispatcher function to send message entered by user */\\n  readonly sendMessage = dispatch(ContactActions.SendMessage);\\n\\n  /** A dialog box which shows user an acknowledgement after clicking on submit */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** A mat form field dialog which accepts the email, subject, and message of user and validates it */\\n  private readonly selfRef = inject(MatDialogRef, { optional: true });\\n\\n  /** Dialog box which references the acknowledgement dialog box */\\n  private postRef?: MatDialogRef<void>;\\n\\n  /** A function which sends/dispatches a message which contains email, subject, and message. And also opens the acknowledgement dialog box. */\\n  submit(message: ContactData): void {\\n    this.sendMessage(message);\\n    this.selfRef?.close();\\n    this.postRef = this.dialog.open(this.postMessageTemplate);\\n  }\\n\\n  /** A function which closes the \'Contact us\' dialog and the acknowledgement dialog.  */\\n  close(): void {\\n    this.postRef?.close();\\n    this.selfRef?.close();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .contact-modal {\\n    width: 41rem;\\n    height: 40rem;\\n  }\\n\\n  .info-modal {\\n    width: 35rem;\\n    height: 11.8rem;\\n  }\\n\\n  @media screen and (max-height: 328px) {\\n    .contact-modal {\\n      height: calc(100vh - 2rem);\\n    }\\n  }\\n}\\n","styleUrl":"./contact-behavior.component.scss"}],"stylesData":"","templateData":"<hra-contact-modal\\n  class=\\"contact-modal\\"\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  (submitClick)=\\"submit($event)\\"\\n  (closeClick)=\\"close()\\"\\n>\\n</hra-contact-modal>\\n\\n<ng-template #postMessage>\\n  <hra-info-modal\\n    class=\\"info-modal\\"\\n    [productLogoUrl]=\\"productLogoUrl()\\"\\n    [productTitle]=\\"productTitle()\\"\\n    [description]=\\"description()\\"\\n    (closeClick)=\\"close()\\"\\n  >\\n  </hra-info-modal>\\n</ng-template>\\n"},{"name":"FooterBehaviorComponent","id":"component-FooterBehaviorComponent-40fb239d2f5d63559ed01a906d6e4e15d8b354395ff588736be920ea320eb8690c99eced7537541b1877204f3badef734418f253ac305b0a139d12cfaf2a0d63","file":"src/lib/footer-behavior/footer-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-footer-behavior","styleUrls":["./footer-behavior.component.scss"],"styles":[],"templateUrl":["./footer-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"download","defaultValue":"dispatch(DownloadActions.Download)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>A dispatcher function to download file in specified format</p>\\n","line":39,"rawdescription":"\\nA dispatcher function to download file in specified format","modifierKind":[144]},{"name":"downloadFormats","defaultValue":"selectSnapshot(DownloadSelectors.formats)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Selects a snapshot of the current value of the available download formats</p>\\n","line":27,"rawdescription":"\\nSelects a snapshot of the current value of the available download formats","modifierKind":[144]},{"name":"embed","defaultValue":"LinkIds.Embed","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Embed link routing after clicking on Embed</p>\\n","line":36,"rawdescription":"\\nEmbed link routing after clicking on Embed","modifierKind":[144]},{"name":"hraPortal","defaultValue":"LinkIds.Portal","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Hra portal link routing after clicking on HRA Portal</p>\\n","line":30,"rawdescription":"\\nHra portal link routing after clicking on HRA Portal","modifierKind":[144]},{"name":"illustrationMetadata","defaultValue":"LinkIds.Illustration","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Metadata page link routing after clicking on Illustration</p>\\n","line":33,"rawdescription":"\\nMetadata page link routing after clicking on Illustration","modifierKind":[144]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":21,"rawdescription":"\\nInput for product logo URL to displayed on the left side.","modifierKind":[144]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":24,"rawdescription":"\\nInput for product title to displayed on the left side.","modifierKind":[144]}],"methodsClass":[{"name":"contact","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":45,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which opens the contact modal dialog box","description":"<p>A function which opens the contact modal dialog box</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>A component for footer behavior which provides functionality for various buttons in footer</p>\\n","rawdescription":"\\nA component for footer behavior which provides functionality for various buttons in footer","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { MatDialog, MatDialogConfig, MatDialogModule } from \'@angular/material/dialog\';\\nimport { dispatch, selectQuerySnapshot, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { FooterComponent } from \'@hra-ui/components/molecules\';\\nimport { DownloadActions, DownloadSelectors, ResourceIds as Ids, LinkIds } from \'@hra-ui/state\';\\nimport { ContactBehaviorComponent } from \'../contact-behavior/contact-behavior.component\';\\n\\n/** A component for footer behavior which provides functionality for various buttons in footer */\\n@Component({\\n  selector: \'ftu-footer-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, MatDialogModule, FooterComponent, ContactBehaviorComponent],\\n  templateUrl: \'./footer-behavior.component.html\',\\n  styleUrls: [\'./footer-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterBehaviorComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /** Input for product title to displayed on the left side. */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /** Selects a snapshot of the current value of the available download formats */\\n  readonly downloadFormats = selectSnapshot(DownloadSelectors.formats);\\n\\n  /** Hra portal link routing after clicking on HRA Portal */\\n  readonly hraPortal = LinkIds.Portal;\\n\\n  /** Metadata page link routing after clicking on Illustration */\\n  readonly illustrationMetadata = LinkIds.Illustration;\\n\\n  /** Embed link routing after clicking on Embed */\\n  readonly embed = LinkIds.Embed;\\n\\n  /** A dispatcher function to download file in specified format */\\n  readonly download = dispatch(DownloadActions.Download);\\n\\n  /** A dialog box which shows contact modal after clicking on contact */\\n  private readonly dialog = inject(MatDialog);\\n\\n  /** A function which opens the contact modal dialog box */\\n  contact(): void {\\n    const dialogConfig = new MatDialogConfig();\\n    dialogConfig.disableClose = true;\\n    this.dialog.open(ContactBehaviorComponent, dialogConfig);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n}\\n","styleUrl":"./footer-behavior.component.scss"}],"stylesData":"","templateData":"<hra-footer\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  [hraPortal]=\\"hraPortal\\"\\n  [illustrationMetadata]=\\"illustrationMetadata\\"\\n  [embed]=\\"embed\\"\\n  [downloadFormats]=\\"downloadFormats()\\"\\n  (contactClick)=\\"contact()\\"\\n  (download)=\\"download($event.id)\\"\\n>\\n</hra-footer>\\n"},{"name":"HeaderBehaviorComponent","id":"component-HeaderBehaviorComponent-a76f74e70c7aacab4debd2492e1302dc534513cd4598dce499fc0d4f09bf0a16fc333bcb4bb100ffc9dbcb5427533473060400e0ae5eb7051dac7768474ae300","file":"src/lib/header-behavior/header-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-header-behavior","styleUrls":["./header-behavior.component.scss"],"styles":[],"templateUrl":["./header-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"aboutLink","defaultValue":"LinkIds.About","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for about link for user click action.</p>\\n","line":41,"rawdescription":"\\n\\nInput for about link for user click action.\\n","modifierKind":[144]},{"name":"appTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.AppTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for app title to show on the left side.</p>\\n","line":31,"rawdescription":"\\n\\nInput for app title to show on the left side.\\n","modifierKind":[144]},{"name":"productLogoUrl","defaultValue":"selectQuerySnapshot(RR.url, Ids.ProductLogoUrl)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":21,"rawdescription":"\\n\\nInput for product logo URL to displayed on the left side.\\n","modifierKind":[144]},{"name":"productTitle","defaultValue":"selectQuerySnapshot(RR.anyText, Ids.ProductTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product title to displayed on the left side.</p>\\n","line":26,"rawdescription":"\\n\\nInput for product title to displayed on the left side.\\n","modifierKind":[144]},{"name":"productTitleLink","defaultValue":"LinkIds.ProductTitle","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for product title link for user click action</p>\\n","line":36,"rawdescription":"\\n\\nInput for product title link for user click action\\n","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component for Header Behavior</p>\\n","rawdescription":"\\nComponent for Header Behavior","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR } from \'@hra-ui/cdk/state\';\\nimport { HeaderComponent } from \'@hra-ui/components/molecules\';\\nimport { ResourceIds as Ids, LinkIds } from \'@hra-ui/state\';\\n\\n/** Component for Header Behavior */\\n@Component({\\n  selector: \'ftu-header-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, HeaderComponent],\\n  templateUrl: \'./header-behavior.component.html\',\\n  styleUrls: [\'./header-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderBehaviorComponent {\\n  /**\\n   * Input for product logo URL to displayed on the left side.\\n   */\\n  readonly productLogoUrl = selectQuerySnapshot(RR.url, Ids.ProductLogoUrl);\\n\\n  /**\\n   * Input for product title to displayed on the left side.\\n   */\\n  readonly productTitle = selectQuerySnapshot(RR.anyText, Ids.ProductTitle);\\n\\n  /**\\n   * Input for app title to show on the left side.\\n   */\\n  readonly appTitle = selectQuerySnapshot(RR.anyText, Ids.AppTitle);\\n\\n  /**\\n   * Input for product title link for user click action\\n   */\\n  readonly productTitleLink = LinkIds.ProductTitle;\\n\\n  /**\\n   * Input for about link for user click action.\\n   */\\n  readonly aboutLink = LinkIds.About;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n}\\n","styleUrl":"./header-behavior.component.scss"}],"stylesData":"","templateData":"<hra-header\\n  [productLogoUrl]=\\"productLogoUrl()\\"\\n  [productTitle]=\\"productTitle()\\"\\n  [appTitle]=\\"appTitle()\\"\\n  [productTitleLink]=\\"productTitleLink\\"\\n  [aboutLink]=\\"aboutLink\\"\\n>\\n</hra-header>\\n"},{"name":"LandingPageContentComponent","id":"component-LandingPageContentComponent-d72615e2863b7f2f08c767452a75c71c9e079687610cd3e50b54f72f11546184f7ad55c5304741d79adb9bb9ea161cdac4253ae6fb1cbbf15040f2814110616a","file":"src/lib/landing-page-content/landing-page-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-landing-page-content","styleUrls":["./landing-page-content.component.scss"],"styles":[],"templateUrl":["./landing-page-content.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"intersectableEls","deprecated":false,"deprecationMessage":"","type":"QueryList<ElementRef>","optional":false,"description":"<p>array of element refs for intersectables</p>\\n","line":34,"rawdescription":"\\narray of element refs for intersectables","decorators":[{"name":"ViewChildren","stringifiedArguments":"\'intersectable\', {read: ElementRef}"}],"modifierKind":[144]},{"name":"landingPageDepthDescription","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page depth description</p>\\n","line":57,"rawdescription":"\\nselect snapshot for landing page depth description","modifierKind":[144]},{"name":"landingPageDepthImg","defaultValue":"selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page depth img</p>\\n","line":61,"rawdescription":"\\nselect snapshot for landing page depth img","modifierKind":[144]},{"name":"landingPageDepthMoreText","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot forlanding page depth more text</p>\\n","line":59,"rawdescription":"\\nselect snapshot forlanding page depth more text","modifierKind":[144]},{"name":"landingPageDepthTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page depth title</p>\\n","line":55,"rawdescription":"\\nselect snapshot for landing page depth title","modifierKind":[144]},{"name":"landingPageIntroDescription","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page intro description</p>\\n","line":40,"rawdescription":"\\nselect snapshot for landing page intro description","modifierKind":[144]},{"name":"landingPageIntroImg","defaultValue":"selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page intro img</p>\\n","line":47,"rawdescription":"\\nselect snapshot for landing page intro img","modifierKind":[144]},{"name":"landingPageIntroMoreText","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page intro more text</p>\\n","line":45,"rawdescription":"\\nselect snapshot for landing page intro more text","modifierKind":[144]},{"name":"landingPageIntroPartners","defaultValue":"selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for landing page intro partners</p>\\n","line":42,"rawdescription":"\\nselect snapshot for landing page intro partners","modifierKind":[144]},{"name":"landingPageIntroTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for Landing Page title</p>\\n","line":37,"rawdescription":"\\nselect snapshot for Landing Page title","modifierKind":[144]},{"name":"LinkIds","defaultValue":"LinkIds","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Expose links for use it template</p>\\n","line":64,"rawdescription":"\\nExpose links for use it template","modifierKind":[144]},{"name":"metrics","defaultValue":"selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, \'metrics\' as const, [])<MetricItem[]>","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for metrics</p>\\n","line":49,"rawdescription":"\\nselect snapshot for metrics","modifierKind":[144]},{"name":"metricsLogo","defaultValue":"selectQuerySnapshot(RRS.url, RIds.MetricsLogo)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for metrics logo</p>\\n","line":53,"rawdescription":"\\nselect snapshot for metrics logo","modifierKind":[144]},{"name":"metricsTitle","defaultValue":"selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>select snapshot for metrics title</p>\\n","line":51,"rawdescription":"\\nselect snapshot for metrics title","modifierKind":[144]}],"methodsClass":[{"name":"handleIntersection","args":[{"name":"entries","type":"IntersectionObserverEntry[]","deprecated":false,"deprecationMessage":""},{"name":"observer","type":"IntersectionObserver","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":82,"deprecated":false,"deprecationMessage":"","rawdescription":"\\ncallback function for intersection observer","description":"<p>callback function for intersection observer</p>\\n","jsdoctags":[{"name":"entries","type":"IntersectionObserverEntry[]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"observer","type":"IntersectionObserver","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component for LandingPageContent Behavior</p>\\n","rawdescription":"\\nComponent for LandingPageContent Behavior","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport {\\n  AfterViewInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ElementRef,\\n  inject,\\n  QueryList,\\n  Renderer2,\\n  ViewChildren,\\n} from \'@angular/core\';\\nimport { injectDestroy$, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RRS } from \'@hra-ui/cdk/state\';\\nimport {\\n  LandingPageInDepthComponent,\\n  LandingPageIntroComponent,\\n  MetricItem,\\n  MetricsComponent,\\n} from \'@hra-ui/components/molecules\';\\nimport { LinkIds, ResourceIds as RIds, ResourceTypes as RTypes } from \'@hra-ui/state\';\\n\\n/** Component for LandingPageContent Behavior */\\n@Component({\\n  selector: \'ftu-landing-page-content\',\\n  standalone: true,\\n  imports: [CommonModule, LandingPageIntroComponent, MetricsComponent, LandingPageInDepthComponent],\\n  templateUrl: \'./landing-page-content.component.html\',\\n  styleUrls: [\'./landing-page-content.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageContentComponent implements AfterViewInit {\\n  /** array of element refs for intersectables */\\n  @ViewChildren(\'intersectable\', { read: ElementRef })\\n  readonly intersectableEls!: QueryList<ElementRef>;\\n\\n  /** select snapshot for Landing Page title */\\n  readonly landingPageIntroTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageTitle);\\n\\n  /** select snapshot for landing page intro description */\\n  readonly landingPageIntroDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDescription);\\n  /** select snapshot for landing page intro partners */\\n  readonly landingPageIntroPartners = selectQuerySnapshot(RRS.markdown, RIds.LandingPagePartners);\\n\\n  /** select snapshot for landing page intro more text */\\n  readonly landingPageIntroMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageIntroMoreText);\\n  /** select snapshot for landing page intro img */\\n  readonly landingPageIntroImg = selectQuerySnapshot(RRS.url, RIds.LandingPageIntroImg);\\n  /** select snapshot for metrics */\\n  readonly metrics = selectQuerySnapshot(RRS.field, RIds.Metrics, RTypes.Metrics, \'metrics\' as const, [])<MetricItem[]>;\\n  /** select snapshot for metrics title */\\n  readonly metricsTitle = selectQuerySnapshot(RRS.anyText, RIds.MetricsTitle);\\n  /** select snapshot for metrics logo */\\n  readonly metricsLogo = selectQuerySnapshot(RRS.url, RIds.MetricsLogo);\\n  /** select snapshot for landing page depth title */\\n  readonly landingPageDepthTitle = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthTitle);\\n  /** select snapshot for landing page depth description */\\n  readonly landingPageDepthDescription = selectQuerySnapshot(RRS.markdown, RIds.LandingPageDepthDescription);\\n  /** select snapshot forlanding page depth more text */\\n  readonly landingPageDepthMoreText = selectQuerySnapshot(RRS.anyText, RIds.LandingPageDepthMoreText);\\n  /** select snapshot for landing page depth img */\\n  readonly landingPageDepthImg = selectQuerySnapshot(RRS.url, RIds.LandingPageDepthImg);\\n\\n  /** Expose links for use it template */\\n  readonly LinkIds = LinkIds;\\n\\n  /** Renderer to add class for animation */\\n  private readonly renderer = inject(Renderer2);\\n  /** destroys observer */\\n  private readonly destroy$ = injectDestroy$();\\n\\n  /** creates an observer after view init */\\n  ngAfterViewInit(): void {\\n    const observer = new IntersectionObserver(this.handleIntersection.bind(this), {\\n      threshold: 0.18,\\n    });\\n\\n    this.intersectableEls.forEach((el) => observer.observe(el.nativeElement));\\n    this.destroy$.subscribe(() => observer.disconnect());\\n  }\\n\\n  /** callback function for intersection observer */\\n  handleIntersection(entries: IntersectionObserverEntry[], observer: IntersectionObserver): void {\\n    for (const { isIntersecting, target } of entries) {\\n      if (isIntersecting) {\\n        this.renderer.addClass(target, \'visible\');\\n        observer.unobserve(target);\\n      }\\n    }\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  overflow-x: hidden;\\n\\n  .intro {\\n    margin: 3.5rem 2rem;\\n  }\\n\\n  .metrics {\\n    opacity: 0;\\n\\n    &.visible {\\n      animation: fadeIn 2s ease-in forwards;\\n    }\\n  }\\n\\n  .in-depth {\\n    opacity: 0;\\n\\n    &.visible {\\n      overflow: hidden;\\n      animation: slideIn 2s ease-in-out forwards;\\n    }\\n  }\\n}\\n\\n@keyframes fadeIn {\\n  0% {\\n    opacity: 0;\\n  }\\n\\n  100% {\\n    opacity: 1;\\n  }\\n}\\n\\n@keyframes slideIn {\\n  0% {\\n    transform: translateX(200%);\\n    opacity: 1;\\n  }\\n\\n  100% {\\n    transform: translateX(0);\\n    opacity: 1;\\n  }\\n}\\n","styleUrl":"./landing-page-content.component.scss"}],"stylesData":"","implements":["AfterViewInit"],"templateData":"<hra-landing-page-intro\\n  class=\\"intro\\"\\n  [title]=\\"landingPageIntroTitle()\\"\\n  [img]=\\"landingPageIntroImg()\\"\\n  [partners]=\\"landingPageIntroPartners()\\"\\n  [description]=\\"landingPageIntroDescription()\\"\\n  [moreText]=\\"landingPageIntroMoreText()\\"\\n  [moreLink]=\\"LinkIds.ExploreFTU\\"\\n>\\n</hra-landing-page-intro>\\n<hra-metrics class=\\"metrics\\" [title]=\\"metricsTitle()\\" [metrics]=\\"metrics()\\" [logo]=\\"metricsLogo()\\" #intersectable>\\n</hra-metrics>\\n<hra-landing-page-in-depth\\n  class=\\"in-depth\\"\\n  [title]=\\"landingPageDepthTitle()\\"\\n  [description]=\\"landingPageDepthDescription()\\"\\n  [moreText]=\\"landingPageDepthMoreText()\\"\\n  [img]=\\"landingPageDepthImg()\\"\\n  [moreLink]=\\"LinkIds.LandingPageReadMore\\"\\n  #intersectable\\n>\\n</hra-landing-page-in-depth>\\n"},{"name":"MedicalIllustrationBehaviorComponent","id":"component-MedicalIllustrationBehaviorComponent-610a4972f7d0224528bb33d8be1519ef978347288113323673781462c123ae7594b429f92410f36f2473af99ae029b522543385a8ad435ade8c087e7cb998a2b","file":"src/lib/medical-illustration-behavior/medical-illustration-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-medical-illustration-behavior","styleUrls":["./medical-illustration-behavior.component.scss"],"styles":[],"templateUrl":["./medical-illustration-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"currentUrl","defaultValue":"selectSnapshot(IllustratorSelectors.url)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Current illustration url</p>\\n","line":23,"rawdescription":"\\n\\nCurrent illustration url\\n","modifierKind":[144]},{"name":"iri","defaultValue":"selectSnapshot(ActiveFtuSelectors.iri)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Iri  of medical illustration behavior component</p>\\n","line":33,"rawdescription":"\\n\\nIri  of medical illustration behavior component\\n","modifierKind":[144]},{"name":"mapping","defaultValue":"selectSnapshot(IllustratorSelectors.mapping)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Current mapping file</p>\\n","line":28,"rawdescription":"\\n\\nCurrent mapping file\\n","modifierKind":[144]},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Get all tissues</p>\\n","line":38,"rawdescription":"\\n\\nGet all tissues\\n","modifierKind":[144]},{"name":"updateNode","defaultValue":"dispatch(IllustratorActions.SetSelection)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Updates the active node on node hover</p>\\n","line":52,"rawdescription":"\\n\\nUpdates the active node on node hover\\n","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Behavior component for medical illustration component</p>\\n","rawdescription":"\\n\\nBehavior component for medical illustration component\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component } from \'@angular/core\';\\nimport { dispatch, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\nimport { InteractiveSvgComponent } from \'@hra-ui/components/molecules\';\\nimport { ActiveFtuSelectors, IllustratorActions, IllustratorSelectors, TissueLibrarySelectors } from \'@hra-ui/state\';\\n\\n/**\\n * Behavior component for medical illustration component\\n */\\n@Component({\\n  selector: \'ftu-medical-illustration-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, InteractiveSvgComponent, LabelBoxComponent],\\n  templateUrl: \'./medical-illustration-behavior.component.html\',\\n  styleUrls: [\'./medical-illustration-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MedicalIllustrationBehaviorComponent {\\n  /**\\n   * Current illustration url\\n   */\\n  readonly currentUrl = selectSnapshot(IllustratorSelectors.url);\\n\\n  /**\\n   * Current mapping file\\n   */\\n  readonly mapping = selectSnapshot(IllustratorSelectors.mapping);\\n\\n  /**\\n   * Iri  of medical illustration behavior component\\n   */\\n  readonly iri = selectSnapshot(ActiveFtuSelectors.iri);\\n\\n  /**\\n   * Get all tissues\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n\\n  /**\\n   * Gets tissue title from the list of tissues\\n   */\\n  get tissueTitle(): string {\\n    const iri = this.iri();\\n    const tissues = this.tissues();\\n    return iri ? tissues[iri].label : \'\';\\n  }\\n\\n  /**\\n   * Updates the active node on node hover\\n   */\\n  readonly updateNode = dispatch(IllustratorActions.SetSelection);\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  hra-label-box {\\n    border-bottom: 0.063rem solid #d3d3d3;\\n    width: 100%;\\n    height: 3.5rem;\\n  }\\n}\\n","styleUrl":"./medical-illustration-behavior.component.scss"}],"stylesData":"","accessors":{"tissueTitle":{"name":"tissueTitle","getSignature":{"name":"tissueTitle","type":"string","returnType":"string","line":43,"rawdescription":"\\n\\nGets tissue title from the list of tissues\\n","description":"<p>Gets tissue title from the list of tissues</p>\\n"}}},"templateData":"<hra-label-box>{{ tissueTitle }}</hra-label-box>\\n<hra-interactive-svg [url]=\\"currentUrl()\\" [mapping]=\\"mapping()\\" (nodeHover)=\\"updateNode($event)\\"> </hra-interactive-svg>\\n"},{"name":"ScreenNoticeBehaviorComponent","id":"component-ScreenNoticeBehaviorComponent-de4fc156bf7f658d9ca0a8d114626d829387a03f3b206cb5439f1ad22b9e157cbc51e850b06eb8f0b9dd48a75acb723b42c7fd79d0c50694757e9d23cac9f416","file":"src/lib/screen-notice-behavior/screen-notice-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-ui-screen-notice-behavior","styleUrls":["./screen-notice-behavior.component.scss"],"styles":[],"templateUrl":["./screen-notice-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"content","defaultValue":"selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Content  of screen notice behavior component</p>\\n","line":21,"rawdescription":"\\nContent  of screen notice behavior component","modifierKind":[144]},{"name":"portal","defaultValue":"LinkIds.Portal","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Hra portal link routing after clicking on HRA Portal</p>\\n","line":24,"rawdescription":"\\nHra portal link routing after clicking on HRA Portal","modifierKind":[144]}],"methodsClass":[{"name":"close","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":33,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nA function which closes the screen size notice dialog box","description":"<p>A function which closes the screen size notice dialog box</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>A component for screen size notice behavior which provides the content to be displayed and provides functionality\\nfor the buttons on the notice modal</p>\\n","rawdescription":"\\nA component for screen size notice behavior which provides the content to be displayed and provides functionality\\nfor the buttons on the notice modal","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, inject } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { dispatch, selectQuerySnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { ResourceRegistrySelectors as RR, StorageActions, StorageId } from \'@hra-ui/cdk/state\';\\nimport { ResourceIds, LinkIds } from \'@hra-ui/state\';\\nimport { ScreenSizeNoticeComponent } from \'@hra-ui/components/molecules\';\\nimport { MatDialogRef } from \'@angular/material/dialog\';\\n\\n/** A component for screen size notice behavior which provides the content to be displayed and provides functionality\\n * for the buttons on the notice modal */\\n@Component({\\n  selector: \'ftu-ui-screen-notice-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, ScreenSizeNoticeComponent],\\n  templateUrl: \'./screen-notice-behavior.component.html\',\\n  styleUrls: [\'./screen-notice-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScreenNoticeBehaviorComponent {\\n  /** Content  of screen notice behavior component*/\\n  readonly content = selectQuerySnapshot(RR.anyText, ResourceIds.ScreenSizeNoticeContent);\\n\\n  /** Hra portal link routing after clicking on HRA Portal*/\\n  readonly portal = LinkIds.Portal;\\n\\n  /** Reference for the screen size notice dialog box*/\\n  private readonly ref = inject(MatDialogRef, { optional: true });\\n\\n  /** A dispatcher function that sets the Local Storage as \'shown\'*/\\n  private readonly setScreenNoticeShown = dispatch(StorageActions.Set, StorageId.Local, \'screen-size-notice\', \'shown\');\\n\\n  /** A function which closes the screen size notice dialog box*/\\n  close(): void {\\n    this.setScreenNoticeShown();\\n    this.ref?.close();\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n}\\n","styleUrl":"./screen-notice-behavior.component.scss"}],"stylesData":"","templateData":"<hra-screen-size-notice [content]=\\"content()\\" [portal]=\\"portal\\" (proceedClick)=\\"close()\\"> </hra-screen-size-notice>\\n"},{"name":"TissueLibraryBehaviorComponent","id":"component-TissueLibraryBehaviorComponent-610abb3b7980e743eb12eb125deb48cf3e54258a140afe7c8a98d5b959c2aa3a89eb0c7544fa4cdef50838357d0802b14364b82df62efb66f4512530db3eb135","file":"src/lib/tissue-library-behavior/tissue-library-behavior.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"ftu-tissue-library-behavior","styleUrls":["./tissue-library-behavior.component.scss"],"styles":[],"templateUrl":["./tissue-library-behavior.component.html"],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"list","deprecated":false,"deprecationMessage":"","type":"TissueTreeListComponent<never | never>","optional":false,"description":"<p>Reference to the TissueTreeListComponent.</p>\\n","line":25,"rawdescription":"\\n\\nReference to the TissueTreeListComponent.\\n","decorators":[{"name":"ViewChild","stringifiedArguments":"\'list\', {static: true}"}],"modifierKind":[144]},{"name":"selected","deprecated":false,"deprecationMessage":"","type":"Tissue","optional":true,"description":"<p>Selected  of tissue library behavior component</p>\\n","line":34,"rawdescription":"\\n\\nSelected  of tissue library behavior component\\n"},{"name":"tissues","defaultValue":"selectSnapshot(TissueLibrarySelectors.tissues)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Input for tissues data</p>\\n","line":30,"rawdescription":"\\n\\nInput for tissues data\\n","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component for Tissue Library Behavior</p>\\n","rawdescription":"\\n\\nComponent for Tissue Library Behavior\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, ViewChild } from \'@angular/core\';\\nimport { select$, selectSnapshot } from \'@hra-ui/cdk/injectors\';\\nimport { TissueTreeListComponent } from \'@hra-ui/components/molecules\';\\nimport { Tissue } from \'@hra-ui/services\';\\nimport { ActiveFtuSelectors, TissueLibrarySelectors } from \'@hra-ui/state\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\n\\n/**\\n * Component for Tissue Library Behavior\\n */\\n@Component({\\n  selector: \'ftu-tissue-library-behavior\',\\n  standalone: true,\\n  imports: [CommonModule, LabelBoxComponent, TissueTreeListComponent],\\n  templateUrl: \'./tissue-library-behavior.component.html\',\\n  styleUrls: [\'./tissue-library-behavior.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueLibraryBehaviorComponent {\\n  /**\\n   * Reference to the TissueTreeListComponent.\\n   */\\n  @ViewChild(\'list\', { static: true })\\n  readonly list!: TissueTreeListComponent<never, never>;\\n\\n  /**\\n   * Input for tissues data\\n   */\\n  readonly tissues = selectSnapshot(TissueLibrarySelectors.tissues);\\n  /**\\n   * Selected  of tissue library behavior component\\n   */\\n  selected?: Tissue;\\n\\n  /**\\n   * Sets the TissueItem instance as undefined if\\n   * the url is undefined\\n   */\\n  constructor() {\\n    /** Get iris from the observable else reset selection if\\n     * iri is undefined\\n     */\\n    select$(ActiveFtuSelectors.iri).subscribe((iri) => {\\n      this.selected = iri && this.tissues()[iri];\\n      if (iri === undefined) {\\n        this.list.resetSelection();\\n      }\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .label {\\n    border-bottom: 1px solid #e2e7e9;\\n    width: 100%;\\n    height: 3.5rem;\\n  }\\n}\\n","styleUrl":"./tissue-library-behavior.component.scss"}],"stylesData":"","constructorObj":{"name":"constructor","description":"<p>Sets the TissueItem instance as undefined if\\nthe url is undefined</p>\\n","deprecated":false,"deprecationMessage":"","args":[],"line":34,"rawdescription":"\\n\\nSets the TissueItem instance as undefined if\\nthe url is undefined\\n"},"templateData":"<hra-label-box class=\\"label\\">FTU Library</hra-label-box>\\n<hra-tissue-tree-list [nodes]=\\"tissues()\\" [(selected)]=\\"selected\\" #list> </hra-tissue-tree-list>\\n"}],"modules":[],"miscellaneous":{"variables":[{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details/biomarker-details.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n  datasetCount: 0,\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/lib/biomarker-details/biomarker-details.component.ts":[{"name":"EMPTY_TISSUE_INFO","ctype":"miscellaneous","subtype":"variable","file":"src/lib/biomarker-details/biomarker-details.component.ts","deprecated":false,"deprecationMessage":"","type":"TissueInfo","defaultValue":"{\\n  id: \'\',\\n  label: \'\',\\n  datasetCount: 0,\\n}","rawdescription":"PlaceHolder for Empty Tissue Info","description":"<p>PlaceHolder for Empty Tissue Info</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}}}')},"./dist/compodoc/components-molecules/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"ContactData","id":"interface-ContactData-309310b2740da63be5ea5aaa894ef73ced8bed2a86b50643af4dd031551d6cdb7b26ece6b3328d0e31c21e46f940bd8b901f5665c241ca2a4cb38f39631bd8a3","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","properties":[{"name":"email","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>The email address of the person submitting the form.</p>\\n","line":14,"rawdescription":"\\nThe email address of the person submitting the form."},{"name":"message","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>The body of the message being sent.</p>\\n","line":18,"rawdescription":"\\nThe body of the message being sent."},{"name":"subject","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>The subject line of the message being sent.</p>\\n","line":16,"rawdescription":"\\nThe subject line of the message being sent."}],"indexSignatures":[],"kind":165,"description":"<p>An interface representing contact data information which will be emitted if all the fields are in correct format.</p>\\n","rawdescription":"\\n\\nAn interface representing contact data information which will be emitted if all the fields are in correct format.\\n","methods":[]},{"name":"DataItem","id":"interface-DataItem-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  standalone: true,\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>A string property that represents the label</p>\\n","line":8,"rawdescription":"\\nA string property that represents the label"},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>A string property that represents the value</p>\\n","line":10,"rawdescription":"\\nA string property that represents the value"}],"indexSignatures":[],"kind":165,"description":"<p>An item which defines a string label and a string value</p>\\n","rawdescription":"\\nAn item which defines a string label and a string value","methods":[]},{"name":"DataNode","id":"interface-DataNode-8544338e8c5e11dd440f8b104bfa31552155bc5006289770258a8e940978177df7797adcb9bafb5b09a9943913ecf339692d528f868c6846be5c3de8a6270237","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id])\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n    }\\n    if (\'selected\' in changes) {\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      this.expandPath(path);\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n}\\n","properties":[{"name":"children","deprecated":false,"deprecationMessage":"","type":"K[]","optional":true,"description":"<p>Nested nodes</p>\\n","line":29,"rawdescription":"\\nNested nodes"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","optional":true,"description":"<p>Id to pass as a query parameter on navigation</p>\\n","line":25,"rawdescription":"\\nId to pass as a query parameter on navigation"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>User readable label</p>\\n","line":23,"rawdescription":"\\nUser readable label"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"LinkId","optional":true,"description":"<p>Link to navigate to on node click</p>\\n","line":27,"rawdescription":"\\nLink to navigate to on node click"}],"indexSignatures":[],"kind":165,"description":"<p>Base node type</p>\\n","rawdescription":"\\nBase node type","methods":[]},{"name":"DownloadFormat","id":"interface-DownloadFormat-8b2546c471b258bf6a1366f32f76e1cfb6e5e130e40f5f54fc777c49dd8b4011c994505ca83bf52ee5f6c022571a4285701658442b10a1c9ed863ea4777b6c0e","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\') @Input() size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for HRA Portal link */\\n  @Input() hraPortal = EMPTY_LINK;\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>User readable format label</p>\\n","line":17,"rawdescription":"\\n\\nUser readable format label\\n"}],"indexSignatures":[],"kind":165,"description":"<p>Base type for different download format options.</p>\\n","rawdescription":"\\n\\nBase type for different download format options.\\n","methods":[]},{"name":"InternalNode","id":"interface-InternalNode-8544338e8c5e11dd440f8b104bfa31552155bc5006289770258a8e940978177df7797adcb9bafb5b09a9943913ecf339692d528f868c6846be5c3de8a6270237","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id])\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n    }\\n    if (\'selected\' in changes) {\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      this.expandPath(path);\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"T","optional":false,"description":"<p>Associated user node data</p>\\n","line":43,"rawdescription":"\\nAssociated user node data"},{"name":"expandable","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>Whether the node can be expanded to display child nodes</p>\\n","line":39,"rawdescription":"\\nWhether the node can be expanded to display child nodes"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Displayed label</p>\\n","line":37,"rawdescription":"\\nDisplayed label"},{"name":"level","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>Depth of node in the tree</p>\\n","line":41,"rawdescription":"\\nDepth of node in the tree"}],"indexSignatures":[],"kind":165,"description":"<p>Internal interface for flat tissue data hierarchy</p>\\n","rawdescription":"\\n\\nInternal interface for flat tissue data hierarchy\\n","methods":[]},{"name":"MetricItem","id":"interface-MetricItem-e52c0a1cdf090042d1924c4907a4034774cbb442217faca9ec5035e76d2796116cf55644ecf49ae040fdea1168f9c5d99f6ce15b2079f70de3d853fece481b30","file":"src/lib/metrics/metrics.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n}\\n","properties":[{"name":"description","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Describes the type of metric.</p>\\n","line":13,"rawdescription":"\\nDescribes the type of metric."},{"name":"icon","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Represents the icon associated with the metric.</p>\\n","line":9,"rawdescription":"\\nRepresents the icon associated with the metric."},{"name":"value","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Describes the numberical value of the metric.</p>\\n","line":11,"rawdescription":"\\nDescribes the numberical value of the metric."}],"indexSignatures":[],"kind":165,"description":"<p>An interface representing a single metric with an icon, value and description.</p>\\n","rawdescription":"\\n\\nAn interface representing a single metric with an icon, value and description.\\n","methods":[]},{"name":"NodeMapEntry","id":"interface-NodeMapEntry-ec82f0ba880f3c77112d43cf3ca5ab4a3c7c6dedc47c3b51b903fff54cbfc796563cc464c90248a57211b09c705dbb41fdc8753cefe25eccb33c8699f44aab8d","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node name */\\n  name: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  standalone: true,\\n  imports: [CommonModule, InlineSVGModule, OverlayModule],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.None,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    const crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\');\\n    if (crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, crosswalkEl);\\n      this.attachCrosswalkHover(crosswalkEl);\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe(this.onCrosswalkHover.bind(this));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.nodeHoverData$.next(undefined));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    const node = this.getNode(event);\\n    if (node) {\\n      this.nodeHoverData$.next({\\n        node: node.label,\\n        origin: {\\n          x: event.clientX,\\n          y: event.clientY,\\n        },\\n      });\\n      this.nodeHover.emit(node); //emits node entry\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const match = this.mapping.find(\\n        (item) => item.name?.toLowerCase() === decodedID.toLowerCase() //search mapping by name for matching node entry\\n      );\\n      if (match) {\\n        return match;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Node label</p>\\n","line":64,"rawdescription":"\\nNode label"},{"name":"name","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Node name</p>\\n","line":66,"rawdescription":"\\nNode name"}],"indexSignatures":[],"kind":165,"description":"<p>Interface for node entries</p>\\n","rawdescription":"\\nInterface for node entries","methods":[]},{"name":"NodeTooltipData","id":"interface-NodeTooltipData-ec82f0ba880f3c77112d43cf3ca5ab4a3c7c6dedc47c3b51b903fff54cbfc796563cc464c90248a57211b09c705dbb41fdc8753cefe25eccb33c8699f44aab8d","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node name */\\n  name: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  standalone: true,\\n  imports: [CommonModule, InlineSVGModule, OverlayModule],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.None,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    const crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\');\\n    if (crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, crosswalkEl);\\n      this.attachCrosswalkHover(crosswalkEl);\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe(this.onCrosswalkHover.bind(this));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.nodeHoverData$.next(undefined));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    const node = this.getNode(event);\\n    if (node) {\\n      this.nodeHoverData$.next({\\n        node: node.label,\\n        origin: {\\n          x: event.clientX,\\n          y: event.clientY,\\n        },\\n      });\\n      this.nodeHover.emit(node); //emits node entry\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const match = this.mapping.find(\\n        (item) => item.name?.toLowerCase() === decodedID.toLowerCase() //search mapping by name for matching node entry\\n      );\\n      if (match) {\\n        return match;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","properties":[{"name":"node","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Node name</p>\\n","line":56,"rawdescription":"\\nNode name"},{"name":"origin","deprecated":false,"deprecationMessage":"","type":"literal type","optional":false,"description":"<p>Center point of hovered node in screen coordinates</p>\\n","line":58,"rawdescription":"\\nCenter point of hovered node in screen coordinates"}],"indexSignatures":[],"kind":165,"description":"<p>Node tooltip data</p>\\n","rawdescription":"\\nNode tooltip data","methods":[]},{"name":"SectionItem","id":"interface-SectionItem-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  standalone: true,\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","properties":[{"name":"data","deprecated":false,"deprecationMessage":"","type":"DataItem","optional":false,"description":"<p>A DateItem property that represents a section and its data</p>\\n","line":18,"rawdescription":"\\nA DateItem property that represents a section and its data"},{"name":"isLastItem","deprecated":false,"deprecationMessage":"","type":"boolean","optional":false,"description":"<p>A boolean property that represents the last item of a section</p>\\n","line":20,"rawdescription":"\\nA boolean property that represents the last item of a section"},{"name":"section","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>A number property that represents the section number</p>\\n","line":16,"rawdescription":"\\nA number property that represents the section number"}],"indexSignatures":[],"kind":165,"description":"<p>An item which represents a section with a data item and an indicator for the last item in the section</p>\\n","rawdescription":"\\nAn item which represents a section with a data item and an indicator for the last item in the section","methods":[]},{"name":"SourceListItem","id":"interface-SourceListItem-3e55f2d90acdd1770d63ee01d7cb04bfb862e234a989f6253c27f416e0d0d33c9fd51a594ccdd21bb13acf50a7076f9a951f5f110e2d6c319be91dfc009e7d61","file":"src/lib/source-list/source-list.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  standalone: true,\\n  imports: [CommonModule, MatTableModule, MatIconModule, LabelBoxComponent],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: SourceListItem[] = [];\\n  /**\\n   * Show table of source list component which toggles to true or false\\n   * based on click\\n   */\\n  showTable = true;\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n  }\\n}\\n","properties":[{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Label of the dataset in the SourceList</p>\\n","line":13,"rawdescription":"\\nLabel of the dataset in the SourceList"},{"name":"link","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Link to the dataset in the SourceList</p>\\n","line":16,"rawdescription":"\\nLink to the dataset in the SourceList"},{"name":"title","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Title of the dataset in the SourceList</p>\\n","line":10,"rawdescription":"\\nTitle of the dataset in the SourceList"}],"indexSignatures":[],"kind":165,"description":"<p>SourceListItem interface contains title and link to the dataset for the SourceList</p>\\n","rawdescription":"\\nSourceListItem interface contains title and link to the dataset for the SourceList","methods":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerTableDataCardComponent","id":"component-BiomarkerTableDataCardComponent-dba50a1e9cbac5f9733930bd6b04d1ac5fda31ee6342e13da75314f7b5dbbf46c436aab104bfc47abdc323e9ff42aeeb0047ee89577f639d3979c6964344bbd7","file":"src/lib/biomarker-table-data-card/biomarker-table-data-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-card","styleUrls":["./biomarker-table-data-card.component.scss"],"styles":[],"templateUrl":["./biomarker-table-data-card.component.html"],"viewProviders":[],"inputsClass":[{"name":"data","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nNested list of DataItems for each section which is displayed to the user","description":"<p>Nested list of DataItems for each section which is displayed to the user</p>\\n","line":34,"type":"DataItem[][]","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"sectionItems","defaultValue":"[]","deprecated":false,"deprecationMessage":"","type":"SectionItem[]","optional":false,"description":"<p>Converted nested array of DataItem into Flat array of SectionItem</p>\\n","line":37,"rawdescription":"\\nConverted nested array of DataItem into Flat array of SectionItem"}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>This component displays a table with sections, where each section contains a list of items with a label and a value.</p>\\n","rawdescription":"\\nThis component displays a table with sections, where each section contains a list of items with a label and a value.","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\n\\n/** An item which defines a string label and a string value */\\nexport interface DataItem {\\n  /** A string property that represents the label */\\n  label: string;\\n  /** A string property that represents the value */\\n  value: string;\\n}\\n\\n/** An item which represents a section with a data item and an indicator for the last item in the section */\\nexport interface SectionItem {\\n  /** A number property that represents the section number */\\n  section: number;\\n  /** A DateItem property that represents a section and its data */\\n  data: DataItem;\\n  /** A boolean property that represents the last item of a section */\\n  isLastItem: boolean;\\n}\\n\\n/** This component displays a table with sections, where each section contains a list of items with a label and a value. */\\n@Component({\\n  selector: \'hra-biomarker-table-data-card\',\\n  standalone: true,\\n  imports: [CommonModule, MatTableModule],\\n  templateUrl: \'./biomarker-table-data-card.component.html\',\\n  styleUrls: [\'./biomarker-table-data-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataCardComponent implements OnChanges {\\n  /** Nested list of DataItems for each section which is displayed to the user */\\n  @Input() data: DataItem[][] = [];\\n\\n  /** Converted nested array of DataItem into Flat array of SectionItem */\\n  sectionItems: SectionItem[] = [];\\n\\n  /** Triggers an update on sectionItems array when data is changed */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.updateSectionItems();\\n    }\\n  }\\n\\n  /** Updates sectionItems array when data is changed */\\n  private updateSectionItems(): void {\\n    const newSectionItems: SectionItem[] = [];\\n\\n    this.data.forEach((section, sectionIndex) => {\\n      section.forEach((item, itemIndex) => {\\n        newSectionItems.push({\\n          data: item,\\n          section: sectionIndex,\\n          isLastItem: itemIndex === section.length - 1,\\n        });\\n      });\\n    });\\n\\n    this.sectionItems = newSectionItems;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n\\n  .mat-mdc-cell {\\n    padding: 0.25rem 0rem;\\n  }\\n\\n  .mat-mdc-row {\\n    height: fit-content;\\n  }\\n\\n  .no-border {\\n    border: none;\\n  }\\n\\n  .label {\\n    color: #243142;\\n    padding-right: 3rem;\\n  }\\n\\n  .value {\\n    color: #4c5a69;\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n}\\n","styleUrl":"./biomarker-table-data-card.component.scss"}],"stylesData":"","implements":["OnChanges"],"templateData":"<div class=\\"no-data\\" *ngIf=\\"sectionItems.length === 0\\">No data</div>\\n<table mat-table *ngIf=\\"sectionItems.length > 0\\" [dataSource]=\\"sectionItems\\">\\n  <caption class=\\"sr-only\\">\\n    Biomarker Table Data Card\\n  </caption>\\n\\n  \x3c!-- Label Column --\x3e\\n  <ng-container matColumnDef=\\"label\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Label</th>\\n    <td class=\\"label\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.label }}\\n    </td>\\n  </ng-container>\\n\\n  \x3c!-- Value Column --\x3e\\n  <ng-container matColumnDef=\\"value\\">\\n    <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Value</th>\\n    <td class=\\"value\\" mat-cell *matCellDef=\\"let element\\" [class.no-border]=\\"!element.isLastItem\\">\\n      {{ element.data.value }}\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-row *matRowDef=\\"let row; columns: [\'label\', \'value\']\\"></tr>\\n</table>\\n"},{"name":"BiomarkerTableDataIconComponent","id":"component-BiomarkerTableDataIconComponent-0fab04062dee70e0c4d57bfdc6f056400c9b82591b050c6912b9e59a896e1a5535f884a104c1d3f95c19721a049ca51f5b2a953512dc1d6a501c29d5399a063c","file":"src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table-data-icon","styleUrls":["./biomarker-table-data-icon.component.scss"],"styles":[],"template":"","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"color","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the color of the icon","description":"<p>Represents the color of the icon</p>\\n","line":17,"type":"string","decorators":[]},{"name":"size","defaultValue":"0","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRepresents the size of the icon","description":"<p>Represents the size of the icon</p>\\n","line":20,"type":"number","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Describes the data icon for the table</p>\\n","rawdescription":"\\n\\nDescribes the data icon for the table\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n * Describes the data icon for the table\\n */\\n@Component({\\n  selector: \'hra-biomarker-table-data-icon\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'\',\\n  styleUrls: [\'./biomarker-table-data-icon.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableDataIconComponent {\\n  /** Represents the color of the icon */\\n  @HostBinding(\'style.background-color\') @Input() color = \'\';\\n\\n  /** Represents the size of the icon  */\\n  @HostBinding(\'style.--radius.rem\') @Input() size = 0;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  border-radius: 50%;\\n  --radius: 0.625rem;\\n  width: var(--radius);\\n  height: var(--radius);\\n}\\n","styleUrl":"./biomarker-table-data-icon.component.scss"}],"stylesData":""},{"name":"ContactModalComponent","id":"component-ContactModalComponent-309310b2740da63be5ea5aaa894ef73ced8bed2a86b50643af4dd031551d6cdb7b26ece6b3328d0e31c21e46f940bd8b901f5665c241ca2a4cb38f39631bd8a3","file":"src/lib/contact-modal/contact-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-contact-modal","styleUrls":["./contact-modal.component.scss"],"styles":[],"templateUrl":["./contact-modal.component.html"],"viewProviders":[],"inputsClass":[{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":49,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":52,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the cancel button or close icon is clicked","description":"<p>Emits when the cancel button or close icon is clicked</p>\\n","line":58,"type":"EventEmitter"},{"name":"submitClick","defaultValue":"new EventEmitter<ContactData>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the submit button is clicked and all the values are appropriate.","description":"<p>Emits when the submit button is clicked and all the values are appropriate.</p>\\n","line":55,"type":"EventEmitter"}],"propertiesClass":[{"name":"contactData","defaultValue":"EMPTY_CONTACT_DATA","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Asigns the undefined initially to all the input fields.</p>\\n","line":66,"rawdescription":"\\nAsigns the undefined initially to all the input fields."}],"methodsClass":[{"name":"submit","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":76,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nIt emits the updated value of contact data","description":"<p>It emits the updated value of contact data</p>\\n"},{"name":"updateData","args":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":""},{"name":"value","type":"","deprecated":false,"deprecationMessage":"","optional":true}],"optional":false,"returnType":"void","typeParameters":["K"],"line":69,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nUpdates the contact data object with a new value for a given key.","description":"<p>Updates the contact data object with a new value for a given key.</p>\\n","jsdoctags":[{"name":"key","type":"K","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":"value","type":"","deprecated":false,"deprecationMessage":"","optional":true,"tagName":{"text":"param"}}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Contact modal component.</p>\\n","rawdescription":"\\n\\nContact modal component.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EmailInputComponent, RequiredInputComponent, RequiredTextboxComponent } from \'@hra-ui/components/atoms\';\\nimport { produce } from \'immer\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n  An interface representing contact data information which will be emitted if all the fields are in correct format.\\n */\\nexport interface ContactData {\\n  /**  The email address of the person submitting the form. */\\n  email: string;\\n  /** The subject line of the message being sent. */\\n  subject: string;\\n  /** The body of the message being sent. */\\n  message: string;\\n}\\n\\n/** Initial empty contact data */\\nconst EMPTY_CONTACT_DATA: Partial<ContactData> = {\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n};\\n\\n/**\\n * Contact modal component.\\n */\\n@Component({\\n  selector: \'hra-contact-modal\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatIconModule,\\n    EmailInputComponent,\\n    MarkdownModule,\\n    RequiredTextboxComponent,\\n    RequiredInputComponent,\\n  ],\\n  templateUrl: \'./contact-modal.component.html\',\\n  styleUrls: [\'./contact-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ContactModalComponent {\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Emits when the submit button is clicked and all the values are appropriate. */\\n  @Output() readonly submitClick = new EventEmitter<ContactData>();\\n\\n  /** Emits when the cancel button or close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n\\n  /** A function to disable the submit button. If all the values are in approproiate format, then it will be enabled. */\\n  get disableSubmit(): boolean {\\n    return Object.values(this.contactData).some((value) => value === undefined);\\n  }\\n\\n  /** Asigns the undefined initially to all the input fields. */\\n  contactData = EMPTY_CONTACT_DATA;\\n\\n  /** Updates the contact data object with a new value for a given key. */\\n  updateData<K extends keyof ContactData>(key: K, value?: ContactData[K]): void {\\n    this.contactData = produce(this.contactData, (draft) => {\\n      draft[key] = value;\\n    });\\n  }\\n\\n  /** It emits the updated value of contact data */\\n  submit(): void {\\n    this.submitClick.emit(this.contactData as ContactData);\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding-top: 2rem;\\n  margin-right: 1.5rem;\\n  margin-left: 1.5rem;\\n\\n  .product-logo {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      color: #990000;\\n      margin: 0;\\n      font-weight: 600;\\n    }\\n  }\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 0rem;\\n  }\\n\\n  .submit {\\n    margin-right: 1.5rem;\\n  }\\n\\n  .submit,\\n  .cancel {\\n    width: 7.5rem;\\n  }\\n\\n  .email {\\n    margin-top: 1.25rem;\\n  }\\n\\n  .message-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .subject-field {\\n    margin-top: 1rem;\\n  }\\n\\n  .desc {\\n    margin-top: 1.5rem;\\n  }\\n}\\n","styleUrl":"./contact-modal.component.scss"}],"stylesData":"","accessors":{"disableSubmit":{"name":"disableSubmit","getSignature":{"name":"disableSubmit","type":"boolean","returnType":"boolean","line":61,"rawdescription":"\\nA function to disable the submit button. If all the values are in approproiate format, then it will be enabled.","description":"<p>A function to disable the submit button. If all the values are in approproiate format, then it will be enabled.</p>\\n"}}},"templateData":"<a class=\\"product-logo\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button class=\\"close\\" mat-icon-button (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<hra-email-input class=\\"email\\" placeholder=\\"Example@domain.com\\" (emailChange)=\\"updateData(\'email\', $event)\\">\\n</hra-email-input>\\n\\n<hra-required-input label=\\"Subject\\" (inputChange)=\\"updateData(\'subject\', $event)\\" class=\\"subject-field\\">\\n</hra-required-input>\\n\\n<hra-required-textbox\\n  class=\\"message-field\\"\\n  label=\\"Message\\"\\n  placeholder=\\"Enter your message here\\"\\n  (messageChange)=\\"updateData(\'message\', $event)\\"\\n>\\n</hra-required-textbox>\\n\\n<markdown class=\\"desc\\" data=\\"Please allow two business days for a response to each inquiry.\\"></markdown>\\n\\n<button mat-flat-button class=\\"submit\\" color=\\"primary\\" [disabled]=\\"disableSubmit\\" (click)=\\"submit()\\">Submit</button>\\n<button mat-stroked-button class=\\"cancel\\" color=\\"accent\\" (click)=\\"closeClick.emit()\\">Cancel</button>\\n"},{"name":"FooterComponent","id":"component-FooterComponent-8b2546c471b258bf6a1366f32f76e1cfb6e5e130e40f5f54fc777c49dd8b4011c994505ca83bf52ee5f6c022571a4285701658442b10a1c9ed863ea4777b6c0e","file":"src/lib/footer/footer.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-footer","styleUrls":["./footer.component.scss"],"styles":[],"templateUrl":["./footer.component.html"],"viewProviders":[],"inputsClass":[{"name":"downloadFormats","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDifferent download formats options displayed to the user","description":"<p>Different download formats options displayed to the user</p>\\n","line":72,"type":"T[]","decorators":[]},{"name":"embed","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for embed link in HRA Portal","description":"<p>Input for embed link in HRA Portal</p>\\n","line":69,"type":"any","decorators":[]},{"name":"hraPortal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for HRA Portal link","description":"<p>Input for HRA Portal link</p>\\n","line":63,"type":"any","decorators":[]},{"name":"illustrationMetadata","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Illustration metadata page link in HRA Portal","description":"<p>Input for Illustration metadata page link in HRA Portal</p>\\n","line":66,"type":"any","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product logo URL to displayed on the left side.","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":57,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for product title to displayed on the left side.","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":60,"type":"string","decorators":[]},{"name":"size","defaultValue":"\'large\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nHost binding of footer component","description":"<p>Host binding of footer component</p>\\n","line":54,"type":"\\"small\\" | \\"large\\"","decorators":[]}],"outputsClass":[{"name":"contactClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the contact button is clicked","description":"<p>Emits when the contact button is clicked</p>\\n","line":78,"type":"EventEmitter"},{"name":"download","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits the selected download format","description":"<p>Emits the selected download format</p>\\n","line":75,"type":"EventEmitter"}],"propertiesClass":[{"name":"downloadListOpen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Whether the download list panel is open</p>\\n","line":89,"rawdescription":"\\nWhether the download list panel is open"},{"name":"DOWNLOADS_LIST_POSITION","defaultValue":"DOWNLOADS_LIST_POSITION","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Download list popup overlay positioning</p>\\n","line":81,"rawdescription":"\\nDownload list popup overlay positioning","modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component for footer that displays its content at the bottom of the page with different action buttons.</p>\\n","rawdescription":"\\n\\nComponent for footer that displays its content at the bottom of the page with different action buttons.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, HostBinding, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { MatListModule } from \'@angular/material/list\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk/state\';\\n\\n/**\\n * Base type for different download format options.\\n */\\nexport interface DownloadFormat {\\n  /**\\n   * User readable format label\\n   */\\n  label: string;\\n}\\n\\n/**\\n * Positioning value for the download list popup\\n */\\nconst DOWNLOADS_LIST_POSITION: ConnectedPosition[] = [\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n];\\n\\n/**\\n * Component for footer that displays its content at the bottom of the page with different action buttons.\\n */\\n@Component({\\n  selector: \'hra-footer\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MatIconModule, OverlayModule, MatListModule, LinkDirective],\\n  templateUrl: \'./footer.component.html\',\\n  styleUrls: [\'./footer.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FooterComponent<T extends DownloadFormat = DownloadFormat> {\\n  /** Host binding of footer component */\\n  @HostBinding(\'class\') @Input() size: \'small\' | \'large\' = \'large\';\\n\\n  /** Input for product logo URL to displayed on the left side. */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Input for product title to displayed on the left side. */\\n  @Input() productTitle = \'\';\\n\\n  /** Input for HRA Portal link */\\n  @Input() hraPortal = EMPTY_LINK;\\n\\n  /** Input for Illustration metadata page link in HRA Portal */\\n  @Input() illustrationMetadata = EMPTY_LINK;\\n\\n  /** Input for embed link in HRA Portal */\\n  @Input() embed = EMPTY_LINK;\\n\\n  /** Different download formats options displayed to the user */\\n  @Input() downloadFormats: T[] = [];\\n\\n  /** Emits the selected download format */\\n  @Output() readonly download = new EventEmitter<T>();\\n\\n  /** Emits when the contact button is clicked */\\n  @Output() readonly contactClick = new EventEmitter<void>();\\n\\n  /** Download list popup overlay positioning */\\n  readonly DOWNLOADS_LIST_POSITION = DOWNLOADS_LIST_POSITION;\\n\\n  /** Gets whether the footer required is small */\\n  get isSmall(): boolean {\\n    return this.size === \'small\';\\n  }\\n\\n  /** Whether the download list panel is open */\\n  downloadListOpen = false;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  padding: 1rem 2rem;\\n  border-top: 0.063rem solid #e2e7e9;\\n  align-items: center;\\n  background-color: #f8f9fa;\\n  gap: 1rem;\\n\\n  --palette-primary-500: #abcdef;\\n\\n  .controls {\\n    display: flex;\\n    justify-content: flex-end;\\n  }\\n  .filler {\\n    flex-grow: 1;\\n  }\\n\\n  .product-title {\\n    color: #990000;\\n    margin-right: 0rem;\\n  }\\n\\n  a {\\n    cursor: pointer;\\n    display: flex;\\n  }\\n\\n  .product-logo-image {\\n    height: 1.2rem;\\n    margin-right: 1rem;\\n  }\\n\\n  button {\\n    justify-content: center;\\n    align-items: center;\\n    min-width: 9rem;\\n    min-height: 3rem;\\n    gap: 0.5rem;\\n\\n    --palette-primary-100-rgb: #4c5a69;\\n    --palette-primary-500-rgb: #243142;\\n\\n    &.mat-accent {\\n      &:active {\\n        --palette-primary-700-rgb: #4c5a69;\\n      }\\n      .mat-icon {\\n        z-index: 1;\\n      }\\n    }\\n  }\\n}\\n\\n::ng-deep {\\n  .download-options-panel {\\n    box-shadow: 0.1rem 0.1rem 0.4rem 0.2rem #dad7d7;\\n    background-color: #ffffff;\\n  }\\n}\\n","styleUrl":"./footer.component.scss"}],"stylesData":"","accessors":{"isSmall":{"name":"isSmall","getSignature":{"name":"isSmall","type":"boolean","returnType":"boolean","line":84,"rawdescription":"\\nGets whether the footer required is small","description":"<p>Gets whether the footer required is small</p>\\n"}}},"templateData":"<div *ngIf=\\"isSmall\\">\\n  <a class=\\"product-logo-link\\">\\n    <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n    <div class=\\"product-title\\">{{ productTitle }}</div>\\n  </a>\\n</div>\\n<div class=\\"filler\\" *ngIf=\\"isSmall\\"></div>\\n\\n<button class=\\"button\\" mat-stroked-button color=\\"accent\\" [hraLink]=\\"illustrationMetadata\\">\\n  <mat-icon>info_outlined</mat-icon>\\n  Illustration\\n</button>\\n\\n<button\\n  class=\\"button\\"\\n  mat-stroked-button\\n  color=\\"accent\\"\\n  (click)=\\"downloadListOpen = !downloadListOpen\\"\\n  type=\\"button\\"\\n  cdkOverlayOrigin\\n  #anchor=\\"cdkOverlayOrigin\\"\\n>\\n  <mat-icon>download</mat-icon>\\n  Download\\n</button>\\n\\n<button class=\\"button\\" mat-stroked-button color=\\"accent\\" [hraLink]=\\"embed\\">\\n  <mat-icon>code</mat-icon>\\n  Embed\\n</button>\\n\\n<div class=\\"filler\\" *ngIf=\\"!isSmall\\"></div>\\n\\n<button class=\\"button\\" mat-stroked-button color=\\"accent\\" (click)=\\"contactClick.emit()\\">\\n  <mat-icon>mail_outlined</mat-icon>\\n  Contact\\n</button>\\n\\n<button class=\\"button\\" mat-stroked-button color=\\"accent\\" [hraLink]=\\"hraPortal\\">\\n  <mat-icon>open_in_new</mat-icon>\\n  HRA Portal\\n</button>\\n\\n<ng-template\\n  cdkConnectedOverlay\\n  [cdkConnectedOverlayOrigin]=\\"anchor\\"\\n  [cdkConnectedOverlayOpen]=\\"downloadListOpen\\"\\n  [cdkConnectedOverlayPositions]=\\"DOWNLOADS_LIST_POSITION\\"\\n  [cdkConnectedOverlayOffsetX]=\\"0\\"\\n  cdkConnectedOverlayHasBackdrop=\\"false\\"\\n  cdkConnectedOverlayPush=\\"false\\"\\n  cdkConnectedOverlayPanelClass=\\"download-options-panel\\"\\n  (overlayOutsideClick)=\\"downloadListOpen = false\\"\\n>\\n  <mat-action-list>\\n    <button\\n      mat-list-item\\n      *ngFor=\\"let format of downloadFormats\\"\\n      (click)=\\"downloadListOpen = false; download.emit(format)\\"\\n    >\\n      {{ format.label }}\\n    </button>\\n  </mat-action-list>\\n</ng-template>\\n"},{"name":"FullscreenContainerComponent","id":"component-FullscreenContainerComponent-78edc2b37cbc90a17be0fcca4ed7291593d5f3d12c4ea823de3f9510c13bad4492bc5cd65823726fc7e333c874880c17093ff9d20096fd92e20137c8cc4f75af","file":"src/lib/fullscreen/fullscreen-container.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-container","styleUrls":[],"styles":["\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    "],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"inputsClass":[{"name":"fullscreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nA boolean input property that controls the fullscreen mode","description":"<p>A boolean input property that controls the fullscreen mode</p>\\n","line":38,"type":"boolean","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"content","deprecated":false,"deprecationMessage":"","type":"QueryList<FullscreenContentComponent>","optional":true,"description":"<p>A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component&#39;s content area</p>\\n","line":35,"rawdescription":"\\nA property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area","decorators":[{"name":"ContentChildren","stringifiedArguments":"FullscreenContentComponent"}],"modifierKind":[144]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>A component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property</p>\\n","rawdescription":"\\nA component that wraps any child components of type FullscreenContentComponent and\\nsets their isFullScreen property to true or false based on its own fullscreen input property\\n","type":"component","sourceCode":"import {\\n  AfterContentInit,\\n  ChangeDetectionStrategy,\\n  Component,\\n  ContentChildren,\\n  Input,\\n  OnChanges,\\n  QueryList,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { FullscreenContentComponent } from \'./fullscreen-content.component\';\\n\\n/** A component that wraps any child components of type FullscreenContentComponent and\\n * sets their isFullScreen property to true or false based on its own fullscreen input property\\n */\\n@Component({\\n  selector: \'hra-fullscreen-container\',\\n  standalone: true,\\n  imports: [CommonModule, FullscreenContentComponent],\\n  template: \'<ng-content></ng-content>\',\\n  styles: [\\n    `\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    `,\\n  ],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContainerComponent implements AfterContentInit, OnChanges {\\n  /** A property that gets a reference to any child components of type FullscreenContentComponent that are projected into the component\'s content area */\\n  @ContentChildren(FullscreenContentComponent)\\n  readonly content?: QueryList<FullscreenContentComponent>;\\n\\n  /** A boolean input property that controls the fullscreen mode */\\n  @Input() fullscreen = false;\\n\\n  /** It calls the updateFullscreenMode method to set the isFullScreen property of the child\\n   * FullscreenContentComponent instances based on the value of the fullscreen input property\\n   */\\n  ngAfterContentInit(): void {\\n    this.updateFullscreenMode();\\n  }\\n\\n  /** It checks if the fullscreen input property has changed, and calls the updateFullscreenMode method if it has */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'fullscreen\' in changes) {\\n      this.updateFullscreenMode();\\n    }\\n  }\\n\\n  /** A private method that sets the isFullScreen property of each child FullscreenContentComponent based on the value of the fullscreen  */\\n  private updateFullscreenMode(): void {\\n    this.content?.forEach((content) => {\\n      content.isFullScreen = this.fullscreen;\\n    });\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":"","stylesData":"\\n      :host {\\n        display: block;\\n        position: relative;\\n      }\\n    \\n","implements":["AfterContentInit","OnChanges"]},{"name":"FullscreenContentComponent","id":"component-FullscreenContentComponent-6710fc01baaf0574ecee8c1610a0f285865856eb963b364d086ef5d9528a4680bd78469b881201a033e582734f9ab5cabb16aeef9e5e00bd2679e67b73a067d9","file":"src/lib/fullscreen/fullscreen-content.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-fullscreen-content","styleUrls":["./fullscreen-content.component.scss"],"styles":[],"template":"<ng-content></ng-content>","templateUrl":[],"viewProviders":[],"inputsClass":[],"outputsClass":[],"propertiesClass":[{"name":"isFullScreen","defaultValue":"false","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":15,"rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","decorators":[{"name":"HostBinding","stringifiedArguments":"\'class.fullscreen-on\'"}]}],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[{"name":"class.fullscreen-on","defaultValue":"false","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThis binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true","description":"<p>This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true</p>\\n","line":15,"type":"boolean","decorators":[]}],"hostListeners":[],"description":"<p>A component that displays its content in fullscreen mode when its isFullScreen property is set to true</p>\\n","rawdescription":"\\nA component that displays its content in fullscreen mode when its isFullScreen property is set to true","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, HostBinding } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/** A component that displays its content in fullscreen mode when its isFullScreen property is set to true */\\n@Component({\\n  selector: \'hra-fullscreen-content\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  template: \'<ng-content></ng-content>\',\\n  styleUrls: [\'./fullscreen-content.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class FullscreenContentComponent {\\n  /** This binds the isFullScreen property to the class.fullscreen-on when isFullScreen is true */\\n  @HostBinding(\'class.fullscreen-on\') isFullScreen = false;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  &.fullscreen-on {\\n    position: absolute;\\n    inset: 0;\\n    z-index: 100;\\n  }\\n}\\n","styleUrl":"./fullscreen-content.component.scss"}],"stylesData":""},{"name":"HeaderComponent","id":"component-HeaderComponent-81f5689eacf69c8f1658a62e299bcad0df485f2cc8e6664f3f16cfa7d30400e53a54549f6aa8125abb2fc207fb428887c0a19dde695063a2d92611d78d9c6956","file":"src/lib/header/header.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-header","styleUrls":["./header.component.scss"],"styles":[],"templateUrl":["./header.component.html"],"viewProviders":[],"inputsClass":[{"name":"aboutLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for about link","description":"<p>Input for about link</p>\\n","line":40,"type":"any","decorators":[]},{"name":"appTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for app title to show on the left side.\\n","description":"<p>Input for app title to show on the left side.</p>\\n","line":34,"type":"string","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product logo URL to displayed on the left side.\\n","description":"<p>Input for product logo URL to displayed on the left side.</p>\\n","line":24,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for product title to displayed on the left side.\\n","description":"<p>Input for product title to displayed on the left side.</p>\\n","line":29,"type":"string","decorators":[]},{"name":"productTitleLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInput for Product Title link","description":"<p>Input for Product Title link</p>\\n","line":37,"type":"any","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Header component, displays on top of every page.</p>\\n","rawdescription":"\\n\\nHeader component, displays on top of every page.\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { EMPTY_LINK } from \'@hra-ui/cdk\';\\n\\n/**\\n * Header component, displays on top of every page.\\n */\\n@Component({\\n  selector: \'hra-header\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MatRippleModule, LinkDirective],\\n  templateUrl: \'./header.component.html\',\\n  styleUrls: [\'./header.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class HeaderComponent {\\n  /**\\n   * Input for product logo URL to displayed on the left side.\\n   */\\n  @Input() productLogoUrl = \'\';\\n\\n  /**\\n   * Input for product title to displayed on the left side.\\n   */\\n  @Input() productTitle = \'\';\\n\\n  /**\\n   * Input for app title to show on the left side.\\n   */\\n  @Input() appTitle = \'\';\\n\\n  /** Input for Product Title link */\\n  @Input() productTitleLink = EMPTY_LINK;\\n\\n  /** Input for about link */\\n  @Input() aboutLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: flex;\\n  align-items: center;\\n  height: 5rem;\\n  padding: 0 2rem 0 1rem;\\n\\n  @include utils.define-flex-filler();\\n\\n  h1 {\\n    // Reset margins for h1 elements\\n    margin: 0;\\n  }\\n\\n  .product {\\n    display: flex;\\n    align-items: center;\\n    text-decoration: none;\\n    // Style the ripple animation\\n    padding: 0 1rem;\\n    border-radius: 0.25rem;\\n\\n    &:hover {\\n      cursor: pointer;\\n    }\\n\\n    .text {\\n      margin-left: 1rem;\\n      font-weight: 600;\\n      color: vars.$accent-rgb;\\n    }\\n  }\\n\\n  .app {\\n    margin-left: 0.5rem;\\n  }\\n\\n  .about {\\n    width: 9rem;\\n    height: 3rem;\\n\\n    .icon {\\n      width: 1.5rem;\\n      height: 1.5rem;\\n      font-size: 1.5rem;\\n    }\\n  }\\n\\n  @media (max-width: 30rem) {\\n    height: 4.5rem;\\n\\n    .product .text,\\n    .about .text {\\n      @include utils.sr-only();\\n    }\\n\\n    .product {\\n      height: 2.5rem;\\n      padding: 0 0.25rem;\\n\\n      .logo {\\n        width: 1.5rem;\\n        height: 1.5rem;\\n      }\\n    }\\n\\n    .app {\\n      font-size: 1rem;\\n      line-height: 1.5rem;\\n    }\\n\\n    .about {\\n      min-width: 2.5rem;\\n      width: 2.5rem;\\n      height: 2.5rem;\\n      padding: 0;\\n\\n      .icon {\\n        margin: 0;\\n      }\\n    }\\n  }\\n\\n  @media (max-width: 20rem) {\\n    padding: 0;\\n  }\\n}\\n","styleUrl":"./header.component.scss"}],"stylesData":"","templateData":"<a class=\\"product\\" matRipple [hraLink]=\\"productTitleLink\\">\\n  <img class=\\"logo image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" aria-hidden=\\"true\\" />\\n  <h1 class=\\"text\\">{{ productTitle }}</h1>\\n</a>\\n<h1 class=\\"app text\\">{{ appTitle }}</h1>\\n\\n<div class=\\"filler\\"></div>\\n\\n<a mat-flat-button class=\\"about\\" [hraLink]=\\"aboutLink\\">\\n  <mat-icon class=\\"icon\\">info_outlined</mat-icon>\\n  <span class=\\"text\\">About</span>\\n</a>\\n"},{"name":"InfoModalComponent","id":"component-InfoModalComponent-56dc03e6960f4005149bab8dbf6a5b713061505964f6b3cc7d33868ed7f83aff7dbf222ccf66999864c6313f218c20f849715b3ebcc4d2ea44285c6e07811662","file":"src/lib/info-modal/info-modal.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-info-modal","styleUrls":["./info-modal.component.scss"],"styles":[],"templateUrl":["./info-modal.component.html"],"viewProviders":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nInformation modal message to the user","description":"<p>Information modal message to the user</p>\\n","line":24,"type":"string","decorators":[]},{"name":"productLogoUrl","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct logo shown to the user","description":"<p>Product logo shown to the user</p>\\n","line":21,"type":"string","decorators":[]},{"name":"productTitle","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nProduct title shown to the user","description":"<p>Product title shown to the user</p>\\n","line":18,"type":"string","decorators":[]}],"outputsClass":[{"name":"closeClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the close icon is clicked","description":"<p>Emits when the close icon is clicked</p>\\n","line":27,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Displays an information modal to the user with the product title and logo and description</p>\\n","rawdescription":"\\nDisplays an information modal to the user with the product title and logo and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays an information modal to the user with the product title and logo and description */\\n@Component({\\n  selector: \'hra-info-modal\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule],\\n  templateUrl: \'./info-modal.component.html\',\\n  styleUrls: [\'./info-modal.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class InfoModalComponent {\\n  /** Product title shown to the user */\\n  @Input() productTitle = \'\';\\n\\n  /** Product logo shown to the user */\\n  @Input() productLogoUrl = \'\';\\n\\n  /** Information modal message to the user */\\n  @Input() description = \'\';\\n\\n  /** Emits when the close icon is clicked */\\n  @Output() readonly closeClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n  position: relative;\\n  padding: 2rem 2rem 1.25rem 2rem;\\n\\n  .close {\\n    position: absolute;\\n    top: 1.5rem;\\n    right: 1.5rem;\\n  }\\n\\n  .title {\\n    display: flex;\\n    align-items: center;\\n\\n    .product-logo-image {\\n      height: 2.75rem;\\n      margin-right: 1rem;\\n    }\\n\\n    .product-title {\\n      margin: 0;\\n      color: #990000;\\n    }\\n  }\\n\\n  .description {\\n    display: block;\\n    margin-top: 1rem;\\n  }\\n}\\n","styleUrl":"./info-modal.component.scss"}],"stylesData":"","templateData":"<a class=\\"title\\">\\n  <img class=\\"product-logo-image\\" [src]=\\"productLogoUrl\\" alt=\\"Prodoct Logo\\" />\\n  <h2 class=\\"product-title\\">{{ productTitle }}</h2>\\n</a>\\n\\n<button mat-icon-button class=\\"close\\" (click)=\\"closeClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"},{"name":"InteractiveSvgComponent","id":"component-InteractiveSvgComponent-ec82f0ba880f3c77112d43cf3ca5ab4a3c7c6dedc47c3b51b903fff54cbfc796563cc464c90248a57211b09c705dbb41fdc8753cefe25eccb33c8699f44aab8d","file":"src/lib/interactive-svg/interactive-svg.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":["ViewEncapsulation.None"],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-interactive-svg","styleUrls":["./interactive-svg.component.scss"],"styles":[],"templateUrl":["./interactive-svg.component.html"],"viewProviders":[],"inputsClass":[{"name":"mapping","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMapping info","description":"<p>Mapping info</p>\\n","line":86,"type":"T[]","decorators":[]},{"name":"url","deprecated":false,"deprecationMessage":"","rawdescription":"\\nSVG url","description":"<p>SVG url</p>\\n","line":83,"type":"string","decorators":[]}],"outputsClass":[{"name":"nodeHover","defaultValue":"new EventEmitter<T>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits node id when hovered","description":"<p>Emits node id when hovered</p>\\n","line":89,"type":"EventEmitter"}],"propertiesClass":[{"name":"NEVER_EVAL_SCRIPTS","defaultValue":"SVGScriptEvalMode.NEVER","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>SVG script eval mode</p>\\n","line":92,"rawdescription":"\\nSVG script eval mode","modifierKind":[144]},{"name":"nodeHoverData$","defaultValue":"new BehaviorSubject<NodeTooltipData | undefined>(undefined)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Observable of node hover data or undefined when there is no active hover</p>\\n","line":98,"rawdescription":"\\nObservable of node hover data or undefined when there is no active hover","modifierKind":[144]},{"name":"nodeHoverDelayedData$","defaultValue":"this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)))","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Observable of node hover with a timer</p>\\n","line":101,"rawdescription":"\\nObservable of node hover with a timer","modifierKind":[144]},{"name":"TOOLTIP_POSITIONS","defaultValue":"TOOLTIP_POSITIONS","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Tooltip position settings</p>\\n","line":95,"rawdescription":"\\nTooltip position settings","modifierKind":[144]}],"methodsClass":[{"name":"formatNodeName","args":[{"name":"name","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":135,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nRemoves underscores from id\\n","description":"<p>Removes underscores from id</p>\\n","jsdoctags":[{"name":{"pos":3280,"end":3284,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"name"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3274,"end":3279,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Node name</p>\\n"},{"tagName":{"pos":3301,"end":3308,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>node name without underscores</p>\\n"}]},{"name":"setSvgElement","args":[{"name":"el","type":"SVGElement","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":120,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nSets SVG element\\n","description":"<p>Sets SVG element</p>\\n","jsdoctags":[{"name":{"pos":2909,"end":2911,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"el"},"type":"SVGElement","deprecated":false,"deprecationMessage":"","tagName":{"pos":2903,"end":2908,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>SVG element</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Interactive SVG component</p>\\n","rawdescription":"\\n\\nInteractive SVG component\\n","type":"component","sourceCode":"import { ConnectedPosition, OverlayModule } from \'@angular/cdk/overlay\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  inject,\\n  Input,\\n  OnDestroy,\\n  Output,\\n  Renderer2,\\n  ViewEncapsulation,\\n} from \'@angular/core\';\\nimport { InlineSVGModule, SVGScriptEvalMode } from \'ng-inline-svg-2\';\\nimport { BehaviorSubject, debounce, fromEventPattern, Observable, Subject, takeUntil, timer } from \'rxjs\';\\nimport { NodeEventHandler } from \'rxjs/internal/observable/fromEvent\';\\n\\n/** Delay before tooltip becomes visible */\\nconst HOVER_DELAY = 200;\\n\\n/** Tooltip position settings */\\nconst TOOLTIP_POSITIONS: ConnectedPosition[] = [\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n];\\n\\n/** Node tooltip data */\\nexport interface NodeTooltipData {\\n  /** Node name */\\n  node: string;\\n  /** Center point of hovered node in screen coordinates */\\n  origin: { x: number; y: number };\\n}\\n\\n/** Interface for node entries */\\nexport interface NodeMapEntry {\\n  /** Node label */\\n  label: string;\\n  /** Node name */\\n  name: string;\\n}\\n\\n/**\\n * Interactive SVG component\\n */\\n@Component({\\n  selector: \'hra-interactive-svg\',\\n  standalone: true,\\n  imports: [CommonModule, InlineSVGModule, OverlayModule],\\n  templateUrl: \'./interactive-svg.component.html\',\\n  styleUrls: [\'./interactive-svg.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n  encapsulation: ViewEncapsulation.None,\\n})\\nexport class InteractiveSvgComponent<T extends NodeMapEntry> implements OnDestroy {\\n  /** SVG url */\\n  @Input() url?: string;\\n\\n  /** Mapping info */\\n  @Input() mapping: T[] = [];\\n\\n  /** Emits node id when hovered */\\n  @Output() readonly nodeHover = new EventEmitter<T>();\\n\\n  /** SVG script eval mode */\\n  readonly NEVER_EVAL_SCRIPTS = SVGScriptEvalMode.NEVER;\\n\\n  /** Tooltip position settings */\\n  readonly TOOLTIP_POSITIONS = TOOLTIP_POSITIONS;\\n\\n  /** Observable of node hover data or undefined when there is no active hover */\\n  readonly nodeHoverData$ = new BehaviorSubject<NodeTooltipData | undefined>(undefined);\\n\\n  /** Observable of node hover with a timer */\\n  readonly nodeHoverDelayedData$ = this.nodeHoverData$.pipe(debounce((event) => timer(event ? HOVER_DELAY : 0)));\\n\\n  /** Custom renderer */\\n  private readonly renderer = inject(Renderer2);\\n\\n  /** Destroys */\\n  private destroy$ = new Subject<void>();\\n\\n  /**\\n   * Clears observables on destroy\\n   */\\n  ngOnDestroy(): void {\\n    this.clear();\\n  }\\n\\n  /**\\n   * Sets SVG element\\n   * @param el SVG element\\n   */\\n  setSvgElement(el: SVGElement): void {\\n    this.clear();\\n    const crosswalkEl = el.querySelector(\'[id^=\\"Crosswalk\\"]\');\\n    if (crosswalkEl) {\\n      // Move to front (i.e. last child in svg)\\n      this.renderer.appendChild(el, crosswalkEl);\\n      this.attachCrosswalkHover(crosswalkEl);\\n    }\\n  }\\n\\n  /**\\n   * Removes underscores from id\\n   * @param name Node name\\n   * @returns node name without underscores\\n   */\\n  formatNodeName(name: string): string {\\n    return name.replace(/_/g, \' \');\\n  }\\n\\n  /**\\n   * Attaches crosswalk hover\\n   * @param el element\\n   */\\n  private attachCrosswalkHover(el: Element): void {\\n    this.attachEvent(el, \'mouseover\').subscribe(this.onCrosswalkHover.bind(this));\\n    this.attachEvent(el, \'mouseout\').subscribe(() => this.nodeHoverData$.next(undefined));\\n  }\\n\\n  /**\\n   * Finds matching node in data from a hovered element\\n   * @param event Mouse event\\n   */\\n  private onCrosswalkHover(event: MouseEvent): void {\\n    const node = this.getNode(event);\\n    if (node) {\\n      this.nodeHoverData$.next({\\n        node: node.label,\\n        origin: {\\n          x: event.clientX,\\n          y: event.clientY,\\n        },\\n      });\\n      this.nodeHover.emit(node); //emits node entry\\n    }\\n  }\\n\\n  /**\\n   * Clears observables\\n   */\\n  private clear(): void {\\n    this.destroy$.next();\\n    this.destroy$.complete();\\n    this.destroy$ = new Subject();\\n  }\\n\\n  /**\\n   * Returns entry from mapping if target, parent, or grandparent id matches the node name\\n   * @param event Event\\n   * @returns Node entry that matches the target id\\n   */\\n  private getNode(event: Event): T | undefined {\\n    const targetId = (event.target as Element).id;\\n    const parentId = (event.target as Element).parentElement?.id ?? \'\';\\n    const grandparentId = (event.target as Element).parentElement?.parentElement?.id ?? \'\';\\n    const idCollection = [targetId, parentId, grandparentId];\\n    for (const id of idCollection) {\\n      const decodedID = this.decodeId(id);\\n      const match = this.mapping.find(\\n        (item) => item.name?.toLowerCase() === decodedID.toLowerCase() //search mapping by name for matching node entry\\n      );\\n      if (match) {\\n        return match;\\n      }\\n    }\\n    return undefined;\\n  }\\n\\n  /**\\n   * Decodes id into a normal string\\n   * @param id Undecoded ID\\n   * @returns id\\n   */\\n  private decodeId(id: string): string {\\n    const replacer = (_match: string, hex: string) => String.fromCharCode(Number.parseInt(hex, 16));\\n    return id.replace(/_x([\\\\da-f]+)_/gi, replacer);\\n  }\\n\\n  /**\\n   * Attaches an event listener\\n   * @template K\\n   * @param el Element\\n   * @param event Event\\n   * @returns Observable\\n   */\\n  private attachEvent<K extends keyof SVGElementEventMap>(el: Element, event: K): Observable<SVGElementEventMap[K]> {\\n    const { renderer, destroy$ } = this;\\n    const add = (handler: NodeEventHandler) => renderer.listen(el, event, handler);\\n    const remove = (_handler: NodeEventHandler, unlisten: () => void) => unlisten();\\n    return fromEventPattern<SVGElementEventMap[K]>(add, remove).pipe(takeUntil(destroy$));\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":".tooltip {\\n  display: flex;\\n  flex-direction: column;\\n  background: white;\\n  box-shadow: 1px 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  border-radius: 0.5rem;\\n  padding: 1rem;\\n}\\n\\n[id^=\'Crosswalk\'] {\\n  :is(path, polygon, polyline) {\\n    fill: transparent;\\n    stroke: transparent;\\n  }\\n\\n  .hover-active & g:hover > :is(path, polygon, polyline) {\\n    fill: hsl(0deg 100% 50%);\\n    mix-blend-mode: saturation;\\n  }\\n\\n  .hover-active & g > g:hover {\\n    :is(path, polygon, polyline) {\\n      fill: hsl(0deg 100% 50%);\\n      mix-blend-mode: saturation;\\n    }\\n  }\\n}\\n","styleUrl":"./interactive-svg.component.scss"}],"stylesData":"","implements":["OnDestroy"],"templateData":"<div\\n  *ngIf=\\"url\\"\\n  class=\\"svg\\"\\n  [class.hover-active]=\\"nodeHoverData$ | async\\"\\n  [inlineSVG]=\\"url\\"\\n  [evalScripts]=\\"NEVER_EVAL_SCRIPTS\\"\\n  (onSVGInserted)=\\"setSvgElement($event)\\"\\n></div>\\n\\n<ng-container *ngIf=\\"nodeHoverDelayedData$ | async as hover\\">\\n  <ng-template\\n    cdkConnectedOverlay\\n    cdkConnectedOverlayPanelClass=\\"hra-interactive-svg-tooltip-panel\\"\\n    [cdkConnectedOverlayOrigin]=\\"hover.origin\\"\\n    [cdkConnectedOverlayPositions]=\\"TOOLTIP_POSITIONS\\"\\n    [cdkConnectedOverlayViewportMargin]=\\"16\\"\\n    [cdkConnectedOverlayOpen]=\\"true\\"\\n  >\\n    <div class=\\"tooltip\\">\\n      {{ formatNodeName(hover.node) }}\\n    </div>\\n  </ng-template>\\n</ng-container>\\n"},{"name":"LandingPageInDepthComponent","id":"component-LandingPageInDepthComponent-266cc77d12f81268af62a259a42675f25c0be65e3cab6881ce7afcd3dbaa4ab87e767f669fc822ea592327de677787a00c9eb4a5b9b1171d78fe6aefc8cc439b","file":"src/lib/landing-page-in-depth/landing-page-in-depth.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-in-depth","styleUrls":["./landing-page-in-depth.component.scss"],"styles":[],"templateUrl":["./landing-page-in-depth.component.html"],"viewProviders":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage description shown to the user","description":"<p>Image description shown to the user</p>\\n","line":24,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage shown to the user","description":"<p>Image shown to the user</p>\\n","line":27,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":33,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":30,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nImage title shown to the user","description":"<p>Image title shown to the user</p>\\n","line":21,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Displays the image and also corresponding title and text along with a button to read more</p>\\n","rawdescription":"\\n\\nDisplays the image and also corresponding title and text along with a button to read more\\n","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/**\\n * Displays the image and also corresponding title and text along with a button to read more\\n */\\n@Component({\\n  selector: \'hra-landing-page-in-depth\',\\n  standalone: true,\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./landing-page-in-depth.component.html\',\\n  styleUrls: [\'./landing-page-in-depth.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageInDepthComponent {\\n  /**  Image title shown to the user */\\n  @Input() title = \'\';\\n\\n  /** Image description shown to the user */\\n  @Input() description = \'\';\\n\\n  /** Image shown to the user */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 2fr 3fr;\\n  grid-template-rows: auto auto 1fr;\\n  column-gap: 2rem;\\n  row-gap: 2rem;\\n  padding: 3.5rem 2rem;\\n\\n  .image {\\n    grid-column: 1;\\n    grid-row: 1 / span 3;\\n    width: 100%;\\n    height: auto;\\n    align-self: center;\\n    border-radius: 1rem;\\n    box-shadow: 0.06rem 0.13rem 1rem 0.13rem #00000029;\\n  }\\n\\n  .title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n    margin: 0;\\n  }\\n\\n  .description {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n}\\n","styleUrl":"./landing-page-in-depth.component.scss"}],"stylesData":"","templateData":"<img class=\\"image\\" [src]=\\"img\\" alt=\\"\\" />\\n<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n<button mat-flat-button class=\\"more-button\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n</button>\\n"},{"name":"LandingPageIntroComponent","id":"component-LandingPageIntroComponent-8e48a2ad3d32eea60c9dee7976b3dbc195b3a8107a3c174ac68b4696362903f19522bad089b509daae23505334aa5361945e7a8124fd32f17a6834c349c87aed","file":"src/lib/landing-page-intro/landing-page-intro.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-landing-page-intro","styleUrls":["./landing-page-intro.component.scss"],"styles":[],"templateUrl":["./landing-page-intro.component.html"],"viewProviders":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for FTU Explorer","description":"<p>Description for FTU Explorer</p>\\n","line":22,"type":"string","decorators":[]},{"name":"img","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro Image file url","description":"<p>Intro Image file url</p>\\n","line":28,"type":"string","decorators":[]},{"name":"moreLink","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLink to navigate to on more button click","description":"<p>Link to navigate to on more button click</p>\\n","line":34,"type":"any","decorators":[]},{"name":"moreText","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nText for more button","description":"<p>Text for more button</p>\\n","line":31,"type":"string","decorators":[]},{"name":"partners","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nThank you message to partners","description":"<p>Thank you message to partners</p>\\n","line":25,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nIntro title for FTU Explorer","description":"<p>Intro title for FTU Explorer</p>\\n","line":19,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Component for LandingPage Intro</p>\\n","rawdescription":"\\nComponent for LandingPage Intro","type":"component","sourceCode":"import { CommonModule } from \'@angular/common\';\\nimport { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Component for LandingPage Intro */\\n@Component({\\n  selector: \'hra-landing-page-intro\',\\n  standalone: true,\\n  imports: [CommonModule, MatButtonModule, MatIconModule, MarkdownModule, LinkDirective],\\n  templateUrl: \'./landing-page-intro.component.html\',\\n  styleUrls: [\'./landing-page-intro.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class LandingPageIntroComponent {\\n  /** Intro title for FTU Explorer */\\n  @Input() title = \'\';\\n\\n  /** Description for FTU Explorer */\\n  @Input() description = \'\';\\n\\n  /** Thank you message to partners */\\n  @Input() partners = \'\';\\n\\n  /** Intro Image file url */\\n  @Input() img = \'\';\\n\\n  /** Text for more button */\\n  @Input() moreText = \'\';\\n\\n  /** Link to navigate to on more button click */\\n  @Input() moreLink = EMPTY_LINK;\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: grid;\\n  grid-template-columns: 3fr 2fr;\\n  grid-template-rows: auto auto 3rem 1fr;\\n  align-items: start;\\n  column-gap: 2rem;\\n  row-gap: 2rem;\\n\\n  .title {\\n    font-size: 3rem;\\n    line-height: 4rem;\\n    margin: 0;\\n  }\\n\\n  .more-button {\\n    width: fit-content;\\n    height: 3rem;\\n  }\\n\\n  .image {\\n    grid-column: 2;\\n    grid-row: 1 / span 4;\\n    place-self: center;\\n    width: 100%;\\n    height: auto;\\n  }\\n\\n  .description,\\n  .partners {\\n    ::ng-deep p {\\n      margin: 0;\\n    }\\n\\n    ::ng-deep a {\\n      color: vars.$primary-rgb;\\n      font-weight: 700;\\n    }\\n  }\\n}\\n","styleUrl":"./landing-page-intro.component.scss"}],"stylesData":"","templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n\\n<button mat-flat-button class=\\"more-button\\" color=\\"primary\\" [hraLink]=\\"moreLink\\">\\n  {{ moreText }}\\n  <mat-icon iconPositionEnd>arrow_right_alt</mat-icon>\\n</button>\\n<markdown class=\\"partners\\" [data]=\\"partners\\"></markdown>\\n\\n<img class=\\"image\\" [src]=\\"img\\" alt=\\"alt\\" />\\n"},{"name":"MetricsComponent","id":"component-MetricsComponent-e52c0a1cdf090042d1924c4907a4034774cbb442217faca9ec5035e76d2796116cf55644ecf49ae040fdea1168f9c5d99f6ce15b2079f70de3d853fece481b30","file":"src/lib/metrics/metrics.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-metrics","styleUrls":["./metrics.component.scss"],"styles":[],"templateUrl":["./metrics.component.html"],"viewProviders":[],"inputsClass":[{"name":"logo","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nLogo of metrics component.","description":"<p>Logo of metrics component.</p>\\n","line":31,"type":"string","decorators":[]},{"name":"metrics","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of metrics that will be shown to the user.","description":"<p>List of metrics that will be shown to the user.</p>\\n","line":34,"type":"MetricItem[]","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nMain title of metrics component.","description":"<p>Main title of metrics component.</p>\\n","line":28,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Describes the metrics for the HuBMAP project.</p>\\n","rawdescription":"\\n\\nDescribes the metrics for the HuBMAP project.\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\n\\n/**\\n  An interface representing a single metric with an icon, value and description.\\n */\\nexport interface MetricItem {\\n  /** Represents the icon associated with the metric. */\\n  icon: string;\\n  /** Describes the numberical value of the metric. */\\n  value: string;\\n  /** Describes the type of metric. */\\n  description: string;\\n}\\n/**\\n * Describes the metrics for the HuBMAP project.\\n */\\n@Component({\\n  selector: \'hra-metrics\',\\n  standalone: true,\\n  imports: [CommonModule],\\n  templateUrl: \'./metrics.component.html\',\\n  styleUrls: [\'./metrics.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class MetricsComponent {\\n  /** Main title of metrics component. */\\n  @Input() title = \'\';\\n\\n  /** Logo of metrics component. */\\n  @Input() logo = \'\';\\n\\n  /** List of metrics that will be shown to the user. */\\n  @Input() metrics: MetricItem[] = [];\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: flex;\\n  flex-direction: column;\\n  align-items: center;\\n  padding: 2rem 0 0 0;\\n  background: #f8f9fa;\\n  gap: 0.5rem;\\n\\n  .logo {\\n    height: 2.75rem;\\n  }\\n\\n  .header-title {\\n    font-size: 2rem;\\n    line-height: 2.5rem;\\n  }\\n\\n  .metrics {\\n    display: flex;\\n    flex-direction: row;\\n    overflow-x: auto;\\n    max-width: 100%;\\n    gap: 2rem;\\n    padding: 2rem 1.75rem;\\n\\n    .metric {\\n      display: flex;\\n      flex-direction: column;\\n      align-items: center;\\n      min-width: 14.25rem;\\n      height: 14.75rem;\\n      padding-top: 2rem;\\n      padding-bottom: 2rem;\\n\\n      .logo {\\n        margin-bottom: 2rem;\\n      }\\n\\n      .value {\\n        font-size: 3rem;\\n        line-height: 4rem;\\n        margin-bottom: 0.25rem;\\n      }\\n\\n      .description {\\n        font-size: 1rem;\\n        text-align: center;\\n      }\\n    }\\n  }\\n}\\n","styleUrl":"./metrics.component.scss"}],"stylesData":"","templateData":"<img class=\\"logo\\" [src]=\\"logo\\" alt=\\"\\" />\\n<span class=\\"header-title\\">{{ title }}</span>\\n\\n<div class=\\"metrics\\">\\n  <div class=\\"metric\\" *ngFor=\\"let item of metrics\\">\\n    <img class=\\"logo\\" [src]=\\"item.icon\\" alt=\\"\\" />\\n    <span class=\\"value\\"> {{ item.value }} </span>\\n    <span class=\\"description\\"> {{ item.description }} </span>\\n  </div>\\n</div>\\n"},{"name":"ScreenSizeNoticeComponent","id":"component-ScreenSizeNoticeComponent-6b641a220201d969fb228ecf72f5e7a8fc87da742b8a53350bc9c27cea9c54a6493313826b99ec8c34dfd7004772a27748e45af5b0c9ead80bdf168a781117f8","file":"src/lib/screen-size-notice/screen-size-notice.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-screen-size-notice","styleUrls":["./screen-size-notice.component.scss"],"styles":[],"templateUrl":["./screen-size-notice.component.html"],"viewProviders":[],"inputsClass":[{"name":"content","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput for passing screen size notice content\\n","description":"<p>Input for passing screen size notice content</p>\\n","line":23,"type":"string","decorators":[]},{"name":"portal","defaultValue":"EMPTY_LINK","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of screen size notice component\\n","description":"<p>Input  of screen size notice component</p>\\n","line":28,"type":"any","decorators":[]}],"outputsClass":[{"name":"proceedClick","defaultValue":"new EventEmitter<void>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\nEmits when the proceed button is clicked","description":"<p>Emits when the proceed button is clicked</p>\\n","line":31,"type":"EventEmitter"}],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>The screen size notice component displays a notice for the users specifying the required screen size</p>\\n","rawdescription":"\\n\\nThe screen size notice component displays a notice for the users specifying the required screen size\\n","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, EventEmitter, Input, Output } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { EMPTY_LINK, LinkDirective } from \'@hra-ui/cdk\';\\n\\n/**\\n * The screen size notice component displays a notice for the users specifying the required screen size\\n */\\n@Component({\\n  selector: \'hra-screen-size-notice\',\\n  standalone: true,\\n  imports: [CommonModule, MarkdownModule, MatButtonModule, MatIconModule, LinkDirective],\\n  templateUrl: \'./screen-size-notice.component.html\',\\n  styleUrls: [\'./screen-size-notice.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class ScreenSizeNoticeComponent {\\n  /**\\n   * Input for passing screen size notice content\\n   */\\n  @Input() content = \'\';\\n\\n  /**\\n   * Input  of screen size notice component\\n   */\\n  @Input() portal = EMPTY_LINK;\\n\\n  /** Emits when the proceed button is clicked */\\n  @Output() readonly proceedClick = new EventEmitter<void>();\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: none;\\n  position: relative;\\n  border-radius: 0.5rem;\\n  padding: 1.5rem;\\n  flex-direction: column;\\n\\n  .header-close {\\n    position: absolute;\\n    top: 0.625rem;\\n    right: 1rem;\\n  }\\n\\n  h3 {\\n    margin: 0 0 1rem 0;\\n    font-weight: 700;\\n  }\\n\\n  .btn-stroked {\\n    font-weight: 700;\\n    margin-bottom: 1rem;\\n    margin-top: 1rem;\\n    padding: 0.75rem 0;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  .btn-flat {\\n    font-weight: 700;\\n    font-size: 16px;\\n    padding: 0.75rem 0;\\n    letter-spacing: 0.5px;\\n    color: white;\\n  }\\n\\n  .content {\\n    font-size: 1rem;\\n    line-height: 1.5rem;\\n    letter-spacing: 0.5px;\\n  }\\n\\n  @media (max-width: 480px) {\\n    display: flex;\\n  }\\n}\\n","styleUrl":"./screen-size-notice.component.scss"}],"stylesData":"","templateData":"<h3>Screen Size Notice</h3>\\n<button mat-icon-button class=\\"header-close\\" (click)=\\"proceedClick.emit()\\">\\n  <mat-icon>close</mat-icon>\\n</button>\\n<markdown [data]=\\"content\\" class=\\"content\\"></markdown>\\n<button mat-stroked-button color=\\"accent\\" class=\\"btn-stroked\\" (click)=\\"proceedClick.emit()\\">\\n  Proceed to FTU Explorer\\n</button>\\n<a mat-flat-button color=\\"primary\\" class=\\"btn-flat\\" [hraLink]=\\"portal\\"> Human Reference Atlas Portal </a>\\n"},{"name":"SourceListComponent","id":"component-SourceListComponent-3e55f2d90acdd1770d63ee01d7cb04bfb862e234a989f6253c27f416e0d0d33c9fd51a594ccdd21bb13acf50a7076f9a951f5f110e2d6c319be91dfc009e7d61","file":"src/lib/source-list/source-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-source-list","styleUrls":["./source-list.component.scss"],"styles":[],"templateUrl":["./source-list.component.html"],"viewProviders":[],"inputsClass":[{"name":"sources","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nList of sources with titles and links displayed to the user","description":"<p>List of sources with titles and links displayed to the user</p>\\n","line":30,"type":"SourceListItem[]","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"showTable","defaultValue":"true","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Show table of source list component which toggles to true or false\\nbased on click</p>\\n","line":35,"rawdescription":"\\n\\nShow table of source list component which toggles to true or false\\nbased on click\\n"}],"methodsClass":[{"name":"toggleTable","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":41,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt changes the value of showTable to false if value it true\\nand vice versa\\n","description":"<p>It changes the value of showTable to false if value it true\\nand vice versa</p>\\n"}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>This component shows list of sources with title and links to the datasets</p>\\n","rawdescription":"\\nThis component shows list of sources with title and links to the datasets","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule } from \'@angular/material/table\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { LabelBoxComponent } from \'@hra-ui/components/atoms\';\\n\\n/** SourceListItem interface contains title and link to the dataset for the SourceList*/\\nexport interface SourceListItem {\\n  /** Title of the dataset in the SourceList */\\n  title: string;\\n\\n  /** Label of the dataset in the SourceList */\\n  label: string;\\n\\n  /** Link to the dataset in the SourceList */\\n  link: string;\\n}\\n\\n/** This component shows list of sources with title and links to the datasets */\\n@Component({\\n  selector: \'hra-source-list\',\\n  standalone: true,\\n  imports: [CommonModule, MatTableModule, MatIconModule, LabelBoxComponent],\\n  templateUrl: \'./source-list.component.html\',\\n  styleUrls: [\'./source-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class SourceListComponent {\\n  /** List of sources with titles and links displayed to the user */\\n  @Input() sources: SourceListItem[] = [];\\n  /**\\n   * Show table of source list component which toggles to true or false\\n   * based on click\\n   */\\n  showTable = true;\\n\\n  /**\\n   * It changes the value of showTable to false if value it true\\n   * and vice versa\\n   */\\n  toggleTable(): void {\\n    this.showTable = !this.showTable;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n\\n  @include utils.define-flex-filler();\\n\\n  h1 {\\n    margin: 0;\\n  }\\n\\n  .mat-mdc-cell {\\n    vertical-align: top;\\n    border: none;\\n    padding: 0.25rem 0.875rem;\\n    font-size: 1rem;\\n  }\\n\\n  .filler {\\n    width: 30rem;\\n  }\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n\\n  .table-content {\\n    max-height: 21rem;\\n    overflow: auto;\\n  }\\n\\n  .toggle {\\n    margin-bottom: 1rem;\\n    display: flex;\\n    align-items: center;\\n    width: 43rem;\\n    height: 3.5rem;\\n    grid-area: source-list-header;\\n    color: var(--dark-primary-text);\\n    border-top: 0.063rem solid #d3d3d3;\\n    border-bottom: 0.063rem solid #d3d3d3;\\n    .mat-icon {\\n      margin-left: 32rem;\\n    }\\n  }\\n\\n  .hidden {\\n    display: none;\\n  }\\n}\\n","styleUrl":"./source-list.component.scss"}],"stylesData":"","templateData":"<hra-label-box class=\\"toggle\\" (click)=\\"toggleTable()\\">\\n  Source Data\\n  <mat-icon>\\n    {{ showTable ? \'keyboard_arrow_down\' : \'keyboard_arrow_up\' }}\\n  </mat-icon>\\n</hra-label-box>\\n\\n<div class=\\"table-content\\">\\n  <table mat-table [dataSource]=\\"sources\\" [class.hidden]=\\"!showTable\\">\\n    <caption class=\\"sr-only\\">\\n      Source List Table with Title and Links\\n    </caption>\\n\\n    \x3c!-- Position Column --\x3e\\n    <ng-container matColumnDef=\\"link\\">\\n      <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Item Number</th>\\n      <td mat-cell *matCellDef=\\"let element; let i = index\\">{{ i + 1 }}.</td>\\n    </ng-container>\\n\\n    \x3c!-- Data Column --\x3e\\n    <ng-container matColumnDef=\\"title\\">\\n      <th class=\\"sr-only\\" mat-header-cell *matHeaderCellDef>Title and Link</th>\\n      <td mat-cell *matCellDef=\\"let element\\">\\n        {{ element.title }}\\n        <br />\\n        <a [href]=\\"element.link\\" target=\\"_blank\\">{{ element.label }}</a>\\n      </td>\\n    </ng-container>\\n\\n    <tr mat-row *matRowDef=\\"let row; columns: [\'link\', \'title\']\\"></tr>\\n  </table>\\n</div>\\n"},{"name":"TissueTreeListComponent","id":"component-TissueTreeListComponent-8544338e8c5e11dd440f8b104bfa31552155bc5006289770258a8e940978177df7797adcb9bafb5b09a9943913ecf339692d528f868c6846be5c3de8a6270237","file":"src/lib/tissue-tree-list/tissue-tree-list.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-tissue-tree-list","styleUrls":["./tissue-tree-list.component.scss"],"styles":[],"templateUrl":["./tissue-tree-list.component.html"],"viewProviders":[],"inputsClass":[{"name":"nodes","defaultValue":"{} as Record<K, T>","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput  of tissue tree list component\\n","description":"<p>Input  of tissue tree list component</p>\\n","line":69,"type":"Record<K | T>","decorators":[]},{"name":"selected","defaultValue":"undefined","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nNode selected, to view the data associated with it\\n","description":"<p>Node selected, to view the data associated with it</p>\\n","line":74,"type":"T","decorators":[]}],"outputsClass":[{"name":"selectedChange","defaultValue":"new EventEmitter<T | undefined>()","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nOutput  of tissue tree list component\\n","description":"<p>Output  of tissue tree list component</p>\\n","line":79,"type":"EventEmitter"}],"propertiesClass":[{"name":"control","defaultValue":"new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable\\n  )","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>tree controller, used to control the nodes in the tree</p>\\n","line":84,"rawdescription":"\\n\\ntree controller, used to control the nodes in the tree\\n","modifierKind":[144]},{"name":"dataSource","defaultValue":"new MatTreeFlatDataSource(this.control, this.flattener)","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Data source of tissue tree list component, defines the data in mat-tree</p>\\n","line":107,"rawdescription":"\\n\\nData source of tissue tree list component, defines the data in mat-tree\\n","modifierKind":[144]},{"name":"flattener","defaultValue":"new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id])\\n  )","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Flattener of tissue tree list component, returns flat-data structure</p>\\n","line":92,"rawdescription":"\\n\\nFlattener of tissue tree list component, returns flat-data structure\\n","modifierKind":[144]}],"methodsClass":[{"name":"hasChild","args":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":""},{"name":"node","type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"boolean","typeParameters":[],"line":128,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ncheck if the current node has children\\n","description":"<p>check if the current node has children</p>\\n","jsdoctags":[{"name":"_","type":"number","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"name":{"pos":3422,"end":3426,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"node"},"type":"InternalNode<K | T>","deprecated":false,"deprecationMessage":"","tagName":{"pos":3416,"end":3421,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>current selected node</p>\\n"},{"tagName":{"pos":3455,"end":3462,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>boolean, which means if node has children</p>\\n"}]},{"name":"resetSelection","args":[],"optional":false,"returnType":"void","typeParameters":[],"line":146,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nResets selection and collapes all nodes of the tree.\\n","description":"<p>Resets selection and collapes all nodes of the tree.</p>\\n"},{"name":"selectNode","args":[{"name":"node","type":"T","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"void","typeParameters":[],"line":136,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nIt selects the node, which is clicked.\\n","description":"<p>It selects the node, which is clicked.</p>\\n","jsdoctags":[{"name":{"pos":3665,"end":3669,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"node"},"type":"T","deprecated":false,"deprecationMessage":"","tagName":{"pos":3659,"end":3664,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>Tissue Tree Item, which is clicked</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Tabular View for hubMap tissue side-bar</p>\\n","rawdescription":"\\n\\nTabular View for hubMap tissue side-bar\\n","type":"component","sourceCode":"import { FlatTreeControl } from \'@angular/cdk/tree\';\\nimport { CommonModule } from \'@angular/common\';\\nimport {\\n  ChangeDetectionStrategy,\\n  Component,\\n  EventEmitter,\\n  Input,\\n  OnChanges,\\n  Output,\\n  SimpleChanges,\\n} from \'@angular/core\';\\nimport { MatButtonModule } from \'@angular/material/button\';\\nimport { MatRippleModule } from \'@angular/material/core\';\\nimport { MatExpansionModule } from \'@angular/material/expansion\';\\nimport { MatIconModule } from \'@angular/material/icon\';\\nimport { MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule } from \'@angular/material/tree\';\\nimport { LinkDirective } from \'@hra-ui/cdk\';\\nimport { LinkId } from \'@hra-ui/cdk/state\';\\n\\n/** Base node type */\\nexport interface DataNode<K extends string> {\\n  /** User readable label */\\n  label: string;\\n  /** Id to pass as a query parameter on navigation */\\n  id?: string;\\n  /** Link to navigate to on node click */\\n  link?: LinkId;\\n  /** Nested nodes */\\n  children?: K[];\\n}\\n\\n/**\\n * Internal interface for flat tissue data hierarchy\\n */\\ninterface InternalNode<K extends string, T extends DataNode<K>> {\\n  /** Displayed label */\\n  label: string;\\n  /** Whether the node can be expanded to display child nodes */\\n  expandable: boolean;\\n  /** Depth of node in the tree */\\n  level: number;\\n  /** Associated user node data */\\n  data: T;\\n}\\n\\n/**\\n * Tabular View for hubMap tissue side-bar\\n */\\n@Component({\\n  selector: \'hra-tissue-tree-list\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatButtonModule,\\n    MatTreeModule,\\n    MatIconModule,\\n    MatExpansionModule,\\n    MatRippleModule,\\n    LinkDirective,\\n  ],\\n  templateUrl: \'./tissue-tree-list.component.html\',\\n  styleUrls: [\'./tissue-tree-list.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TissueTreeListComponent<K extends string, T extends DataNode<K>> implements OnChanges {\\n  /**\\n   * Input  of tissue tree list component\\n   */\\n  @Input() nodes: Record<K, T> = {} as Record<K, T>;\\n\\n  /**\\n   * Node selected, to view the data associated with it\\n   */\\n  @Input() selected?: T = undefined;\\n\\n  /**\\n   * Output  of tissue tree list component\\n   */\\n  @Output() readonly selectedChange = new EventEmitter<T | undefined>();\\n\\n  /**\\n   * tree controller, used to control the nodes in the tree\\n   */\\n  readonly control = new FlatTreeControl<InternalNode<K, T>>(\\n    (node) => node.level,\\n    (node) => node.expandable\\n  );\\n\\n  /**\\n   * Flattener of tissue tree list component, returns flat-data structure\\n   */\\n  readonly flattener = new MatTreeFlattener<T, InternalNode<K, T>>(\\n    (node, level) => ({\\n      label: node.label,\\n      expandable: (node.children?.length ?? 0) > 0,\\n      level,\\n      data: node,\\n    }),\\n    (node) => node.level,\\n    (node) => node.expandable,\\n    (node) => node.children?.map((id) => this.nodes[id])\\n  );\\n\\n  /**\\n   * Data source of tissue tree list component, defines the data in mat-tree\\n   */\\n  readonly dataSource = new MatTreeFlatDataSource(this.control, this.flattener);\\n\\n  /**\\n   * Take actions if any data changes\\n   * @param changes changes in data\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'nodes\' in changes) {\\n      this.dataSource.data = this.findRootNodes();\\n    }\\n    if (\'selected\' in changes) {\\n      const path = this.selected ? this.dfsFindPath(this.findRootNodes(), this.selected) : [];\\n      this.expandPath(path);\\n    }\\n  }\\n\\n  /**\\n   * check if the current node has children\\n   * @param node current selected node\\n   * @returns boolean, which means if node has children\\n   */\\n  hasChild(_: number, node: InternalNode<K, T>): boolean {\\n    return node.expandable;\\n  }\\n\\n  /**\\n   * It selects the node, which is clicked.\\n   * @param node Tissue Tree Item, which is clicked\\n   */\\n  selectNode(node: T): void {\\n    if (this.selected !== node) {\\n      this.selected = node;\\n      this.selectedChange.emit(this.selected);\\n    }\\n  }\\n\\n  /**\\n   * Resets selection and collapes all nodes of the tree.\\n   */\\n  resetSelection(): void {\\n    this.selected = undefined;\\n    this.control.collapseAll();\\n  }\\n\\n  /**\\n   * It creates a copy of the input nodes object.\\n   * It iterates over it and removes all the children nodes from it.\\n   * @returns remaining nodes which are root nodes.\\n   */\\n  private findRootNodes(): T[] {\\n    const { nodes } = this;\\n    const roots = { ...this.nodes };\\n    for (const key in nodes) {\\n      for (const child of nodes[key].children ?? []) {\\n        delete roots[child];\\n      }\\n    }\\n\\n    return Object.values(roots);\\n  }\\n\\n  /**\\n   * expands the tree nodes based on the path provided.\\n   * @param path is given as an input.\\n   */\\n  private expandPath(path: DataNode<K>[]): void {\\n    const nodes = this.control.dataNodes.filter((node) => path.includes(node.data));\\n    nodes.forEach((node) => this.control.expand(node));\\n  }\\n\\n  /**\\n   * It used the logic of depth first search to find the target node.\\n   * returns the path to the target node.\\n   */\\n  private dfsFindPath(nodes: T[], target: T, path: T[] = []): T[] {\\n    for (const node of nodes) {\\n      path.push(node);\\n      if (node === target) {\\n        return path;\\n      }\\n\\n      const savedLength = path.length;\\n      const children = node.children?.map((id) => this.nodes[id]) ?? [];\\n      if (this.dfsFindPath(children, target, path).length > savedLength) {\\n        return path;\\n      }\\n\\n      path.pop();\\n    }\\n\\n    return path;\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n\\n  .row {\\n    min-height: 2rem;\\n\\n    &.selected {\\n      background-color: vars.$accent-lighter-rgb;\\n    }\\n\\n    .toggle {\\n      width: 2rem;\\n      height: 2rem;\\n      padding: 0.25rem;\\n    }\\n\\n    .label-container {\\n      display: flex;\\n      align-items: center;\\n      height: 2rem;\\n      padding: 0 1rem;\\n      border-radius: 0.25rem;\\n\\n      .link {\\n        cursor: pointer;\\n        text-decoration: none;\\n        color: rgba(vars.$dark-primary-text);\\n      }\\n    }\\n\\n    &.selected .label-container .link {\\n      color: vars.$accent-rgb;\\n    }\\n  }\\n}\\n","styleUrl":"./tissue-tree-list.component.scss"}],"stylesData":"","implements":["OnChanges"],"templateData":"<mat-tree [dataSource]=\\"dataSource\\" [treeControl]=\\"control\\" class=\\"tree\\">\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level\\"\\n    [matTreeNodePadding]=\\"level\\"\\n    matTreeNodePaddingIndent=\\"64\\"\\n    [class.selected]=\\"node.data === selected\\"\\n    class=\\"row\\"\\n    tabIndex=\\"0\\"\\n  >\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n\\n  <mat-tree-node\\n    *matTreeNodeDef=\\"let node; let level = level; when: hasChild\\"\\n    class=\\"row\\"\\n    [class.selected]=\\"node.data === selected\\"\\n  >\\n    <button mat-icon-button matTreeNodeToggle class=\\"toggle\\" [attr.aria-label]=\\"\'Toggle \' + node.label\\">\\n      <mat-icon>\\n        {{ control.isExpanded(node) ? \'keyboard_arrow_up\' : \'chevron_right\' }}\\n      </mat-icon>\\n    </button>\\n\\n    <ng-container [ngTemplateOutlet]=\\"label\\" [ngTemplateOutletContext]=\\"node\\"> </ng-container>\\n  </mat-tree-node>\\n</mat-tree>\\n\\n<ng-template let-label=\\"label\\" let-data=\\"data\\" #label>\\n  <div class=\\"label-container\\" matRipple [matRippleDisabled]=\\"!data.link\\">\\n    <a\\n      *ngIf=\\"data.link; else noLink\\"\\n      [hraLink]=\\"data.link\\"\\n      [queryParams]=\\"{ id: data.id }\\"\\n      class=\\"link\\"\\n      (click)=\\"selectNode(data)\\"\\n    >\\n      {{ label }}\\n    </a>\\n    <ng-template #noLink>\\n      <span>{{ label }}</span>\\n    </ng-template>\\n  </div>\\n</ng-template>\\n"},{"name":"TitleCardComponent","id":"component-TitleCardComponent-dda33e0370aff82797f5b3494c98b25f59e8b87daefd03e828cec8116928222c19885f73255625acfce7c66d590784fd1ad8faa664dac65130f8119fc2670670","file":"src/lib/title-card/title-card.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-title-card","styleUrls":["./title-card.component.scss"],"styles":[],"templateUrl":["./title-card.component.html"],"viewProviders":[],"inputsClass":[{"name":"description","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nDescription for the title card shown to the user","description":"<p>Description for the title card shown to the user</p>\\n","line":19,"type":"string","decorators":[]},{"name":"title","defaultValue":"\'\'","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTitle for the title card shown to the user","description":"<p>Title for the title card shown to the user</p>\\n","line":16,"type":"string","decorators":[]}],"outputsClass":[],"propertiesClass":[],"methodsClass":[],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Displays title card to the user with title and description</p>\\n","rawdescription":"\\nDisplays title card to the user with title and description","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MarkdownModule } from \'ngx-markdown\';\\n\\n/** Displays title card to the user with title and description */\\n@Component({\\n  selector: \'hra-title-card\',\\n  standalone: true,\\n  imports: [CommonModule, MarkdownModule],\\n  templateUrl: \'./title-card.component.html\',\\n  styleUrls: [\'./title-card.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class TitleCardComponent {\\n  /** Title for the title card shown to the user*/\\n  @Input() title = \'\';\\n\\n  /** Description for the title card shown to the user*/\\n  @Input() description = \'\';\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":":host {\\n  display: block;\\n\\n  .title {\\n    margin-bottom: 0.5rem;\\n  }\\n}\\n","styleUrl":"./title-card.component.scss"}],"stylesData":"","templateData":"<h1 class=\\"title\\">{{ title }}</h1>\\n<markdown class=\\"description\\" [data]=\\"description\\"></markdown>\\n"}],"modules":[],"miscellaneous":{"variables":[{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"},{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"},{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}],"functions":[],"typealiases":[],"enumerations":[],"groupedVariables":{"src/lib/footer/footer.component.ts":[{"name":"DOWNLOADS_LIST_POSITION","ctype":"miscellaneous","subtype":"variable","file":"src/lib/footer/footer.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    panelClass: \'above\',\\n    originX: \'start\',\\n    originY: \'top\',\\n    overlayX: \'start\',\\n    overlayY: \'bottom\',\\n    offsetY: 0,\\n  },\\n  {\\n    panelClass: \'below\',\\n    originX: \'start\',\\n    originY: \'bottom\',\\n    overlayX: \'start\',\\n    overlayY: \'top\',\\n  },\\n]","rawdescription":"Positioning value for the download list popup","description":"<p>Positioning value for the download list popup</p>\\n"}],"src/lib/contact-modal/contact-modal.component.ts":[{"name":"EMPTY_CONTACT_DATA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/contact-modal/contact-modal.component.ts","deprecated":false,"deprecationMessage":"","type":"Partial<ContactData>","defaultValue":"{\\n  email: undefined,\\n  subject: undefined,\\n  message: undefined,\\n}","rawdescription":"Initial empty contact data","description":"<p>Initial empty contact data</p>\\n"}],"src/lib/interactive-svg/interactive-svg.component.ts":[{"name":"HOVER_DELAY","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"number","defaultValue":"200","rawdescription":"Delay before tooltip becomes visible","description":"<p>Delay before tooltip becomes visible</p>\\n"},{"name":"TOOLTIP_POSITIONS","ctype":"miscellaneous","subtype":"variable","file":"src/lib/interactive-svg/interactive-svg.component.ts","deprecated":false,"deprecationMessage":"","type":"ConnectedPosition[]","defaultValue":"[\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'start\',\\n    overlayY: \'center\',\\n    offsetX: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'end\',\\n    overlayY: \'center\',\\n    offsetX: -8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'top\',\\n    offsetY: 8,\\n  },\\n  {\\n    originX: \'center\',\\n    originY: \'center\',\\n    overlayX: \'center\',\\n    overlayY: \'bottom\',\\n    offsetY: -8,\\n  },\\n]","rawdescription":"Tooltip position settings","description":"<p>Tooltip position settings</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{}}}')},"./dist/compodoc/components-organisms/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[{"name":"DataCell","id":"interface-DataCell-93e9233d9ec131548d007fb9ba477b6be92bed42800bbfdaec9bba79083be78395b48ae94df9c237b67be79f014cfed1e91965ba7aa39f30e46a5f7ee7546402","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule, MatTableDataSource } from \'@angular/material/table\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    cell: string;\\n    biomarker: string;\\n    meanExpression: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n  /** Number of datasets for this Tissue */\\n  datasetCount: number;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n    datasetCount: 0,\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Getter method to provide the definations of the columns */\\n  get columnsWithTypeAndCount(): string[] {\\n    return [\'type\', \'count\', ...this.columns];\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\\n\\n  /**\\n   * sets the data source for the table on every change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.dataSource.data = this.data;\\n    }\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(\\n      this.gradient[index + 1]?.color ?? this.gradient[this.gradient.length - 1].color\\n    );\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius ?? this.sizes[0].radius;\\n    const maxSize: number = this.sizes[index + 1]?.radius ?? this.sizes[this.sizes.length - 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => Math.round(component).toString(16))\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * rocesses the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label, datasetCount },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${datasetCount}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n}\\n","properties":[{"name":"color","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Represents the color of the icon</p>\\n","line":22,"rawdescription":"\\nRepresents the color of the icon"},{"name":"data","deprecated":false,"deprecationMessage":"","type":"literal type","optional":false,"description":"<p>Represents the data for the data card</p>\\n","line":26,"rawdescription":"\\nRepresents the data for the data card"},{"name":"size","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>Represents the size of the icon</p>\\n","line":24,"rawdescription":"\\nRepresents the size of the icon"}],"indexSignatures":[],"kind":165,"description":"<p>An interface representing a single cell of the table.</p>\\n","rawdescription":"\\n\\nAn interface representing a single cell of the table.\\n","methods":[]},{"name":"TissueInfo","id":"interface-TissueInfo-93e9233d9ec131548d007fb9ba477b6be92bed42800bbfdaec9bba79083be78395b48ae94df9c237b67be79f014cfed1e91965ba7aa39f30e46a5f7ee7546402","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","type":"interface","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule, MatTableDataSource } from \'@angular/material/table\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    cell: string;\\n    biomarker: string;\\n    meanExpression: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n  /** Number of datasets for this Tissue */\\n  datasetCount: number;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n    datasetCount: 0,\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Getter method to provide the definations of the columns */\\n  get columnsWithTypeAndCount(): string[] {\\n    return [\'type\', \'count\', ...this.columns];\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\\n\\n  /**\\n   * sets the data source for the table on every change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.dataSource.data = this.data;\\n    }\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(\\n      this.gradient[index + 1]?.color ?? this.gradient[this.gradient.length - 1].color\\n    );\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius ?? this.sizes[0].radius;\\n    const maxSize: number = this.sizes[index + 1]?.radius ?? this.sizes[this.sizes.length - 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => Math.round(component).toString(16))\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * rocesses the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label, datasetCount },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${datasetCount}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n}\\n","properties":[{"name":"datasetCount","deprecated":false,"deprecationMessage":"","type":"number","optional":false,"description":"<p>Number of datasets for this Tissue</p>\\n","line":42,"rawdescription":"\\nNumber of datasets for this Tissue"},{"name":"id","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>ID of the Tissue</p>\\n","line":38,"rawdescription":"\\nID of the Tissue"},{"name":"label","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>Name of the Tissue</p>\\n","line":40,"rawdescription":"\\nName of the Tissue"}],"indexSignatures":[],"kind":165,"description":"<p>Details of the Tissue</p>\\n","rawdescription":"\\n\\nDetails of the Tissue\\n","methods":[]}],"injectables":[],"guards":[],"interceptors":[],"classes":[],"directives":[],"components":[{"name":"BiomarkerTableComponent","id":"component-BiomarkerTableComponent-93e9233d9ec131548d007fb9ba477b6be92bed42800bbfdaec9bba79083be78395b48ae94df9c237b67be79f014cfed1e91965ba7aa39f30e46a5f7ee7546402","file":"src/lib/biomarker-table/biomarker-table.component.ts","changeDetection":"ChangeDetectionStrategy.OnPush","encapsulation":[],"entryComponents":[],"inputs":[],"outputs":[],"providers":[],"selector":"hra-biomarker-table","styleUrls":["./biomarker-table.component.scss"],"styles":[],"templateUrl":["./biomarker-table.component.html"],"viewProviders":[],"inputsClass":[{"name":"columns","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nColumns for the table","description":"<p>Columns for the table</p>\\n","line":74,"type":"string[]","decorators":[]},{"name":"data","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nRows of the table","description":"<p>Rows of the table</p>\\n","line":77,"type":"DataRow<T>[]","decorators":[]},{"name":"gradient","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nGradient colors along with their stop points","description":"<p>Gradient colors along with their stop points</p>\\n","line":80,"type":"GradientPoint[]","decorators":[]},{"name":"sizes","defaultValue":"[]","deprecated":false,"deprecationMessage":"","rawdescription":"\\nTaking input for the radius of the circle and the label to be displayed.","description":"<p>Taking input for the radius of the circle and the label to be displayed.</p>\\n","line":83,"type":"SizeLegend[]","decorators":[]},{"name":"tissueInfo","defaultValue":"{\\n    id: \'\',\\n    label: \'\',\\n    datasetCount: 0,\\n  }","deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nInput: TissueInfo carrying the details of the tissue open\\n","description":"<p>Input: TissueInfo carrying the details of the tissue open</p>\\n","line":67,"type":"TissueInfo","decorators":[]}],"outputsClass":[],"propertiesClass":[{"name":"dataSource","defaultValue":"new MatTableDataSource<DataRow<T>>([])","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Source for the table</p>\\n","line":91,"rawdescription":"\\nSource for the table","modifierKind":[144]}],"methodsClass":[{"name":"getColor","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"string","typeParameters":[],"line":163,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nCalculates the color of this value on this gradient\\n","description":"<p>Calculates the color of this value on this gradient</p>\\n","jsdoctags":[{"name":{"pos":4697,"end":4702,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":4691,"end":4696,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":4709,"end":4716,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"getHoverData","args":[{"type":"[number, DataRow<T>]","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"[][]","typeParameters":[],"line":190,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nrocesses the object for hover data for Table Cell\\n","description":"<p>rocesses the object for hover data for Table Cell</p>\\n","jsdoctags":[{"type":"[number, DataRow<T>]","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":5431,"end":5438,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"getMinMaxColor","args":[{"name":"meanExpression","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":131,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets Min and Max color grade based on the meanExpression value\\n","description":"<p>Gets Min and Max color grade based on the meanExpression value</p>\\n","jsdoctags":[{"name":{"pos":3464,"end":3478,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"meanExpression"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":3458,"end":3463,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":3485,"end":3492,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"getMinMaxSize","args":[{"name":"percentage","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"literal type","typeParameters":[],"line":149,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nGets Min and Max size grade based on the Percentage value\\n","description":"<p>Gets Min and Max size grade based on the Percentage value</p>\\n","jsdoctags":[{"name":{"pos":4118,"end":4128,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"percentage"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":4112,"end":4117,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":4135,"end":4142,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"getSize","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":179,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\ngets Size of the Cell based on the percentage value\\n","description":"<p>gets Size of the Cell based on the percentage value</p>\\n","jsdoctags":[{"name":{"pos":5100,"end":5105,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":5094,"end":5099,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":5112,"end":5119,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"hex2rgb","args":[{"name":"hex","type":"string","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"RGBTriplet","typeParameters":[],"line":119,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nConverts HexCode to RGB\\n","description":"<p>Converts HexCode to RGB</p>\\n","jsdoctags":[{"name":{"pos":3155,"end":3158,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"hex"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":3149,"end":3154,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":3165,"end":3172,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]},{"name":"lerp","args":[{"name":"value","type":"number","deprecated":false,"deprecationMessage":""},{"name":"min","type":"number","deprecated":false,"deprecationMessage":""},{"name":"max","type":"number","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"number","typeParameters":[],"line":110,"deprecated":false,"deprecationMessage":"","rawdescription":"\\nLerp function to give value beween min and max value based on the given value\\n\\n","description":"<p>Lerp function to give value beween min and max value based on the given value</p>\\n","jsdoctags":[{"name":{"pos":2943,"end":2948,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"value"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":2937,"end":2942,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":2961,"end":2964,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"min"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":2955,"end":2960,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"name":{"pos":2977,"end":2980,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"max"},"type":"number","deprecated":false,"deprecationMessage":"","tagName":{"pos":2971,"end":2976,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":""},{"tagName":{"pos":2987,"end":2994,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":""}]}],"deprecated":false,"deprecationMessage":"","hostBindings":[],"hostListeners":[],"description":"<p>Cell types table, describing the types and quanitites of cells for a specific organ</p>\\n","rawdescription":"\\nCell types table, describing the types and quanitites of cells for a specific organ","type":"component","sourceCode":"import { ChangeDetectionStrategy, Component, Input, OnChanges, SimpleChanges } from \'@angular/core\';\\nimport { CommonModule } from \'@angular/common\';\\nimport { MatTableModule, MatTableDataSource } from \'@angular/material/table\';\\nimport {\\n  BiomarkerTableDataCardComponent,\\n  BiomarkerTableDataIconComponent,\\n  DataItem,\\n} from \'@hra-ui/components/molecules\';\\nimport { HoverDirective } from \'@hra-ui/cdk\';\\nimport { GradientPoint, SizeLegend } from \'@hra-ui/components/atoms\';\\n\\n/**\\n * RGBTriblet of type RGB to store color\\n */\\ntype RGBTriplet = [number, number, number];\\n\\n/**\\n * An interface representing a single cell of the table.\\n */\\nexport interface DataCell {\\n  /** Represents the color of the icon */\\n  color: string;\\n  /** Represents the size of the icon */\\n  size: number;\\n  /** Represents the data for the data card */\\n  data: {\\n    cell: string;\\n    biomarker: string;\\n    meanExpression: number;\\n  };\\n}\\n\\n/**\\n * Details of the Tissue\\n */\\nexport interface TissueInfo {\\n  /** ID of the Tissue */\\n  id: string;\\n  /** Name of the Tissue */\\n  label: string;\\n  /** Number of datasets for this Tissue */\\n  datasetCount: number;\\n}\\n\\n/** Describes the composition of a single row in the table */\\nexport type DataRow<T> = [string, number | undefined, ...(T | undefined)[]];\\n\\n/** Cell types table, describing the types and quanitites of cells for a specific organ */\\n@Component({\\n  selector: \'hra-biomarker-table\',\\n  standalone: true,\\n  imports: [\\n    CommonModule,\\n    MatTableModule,\\n    BiomarkerTableDataIconComponent,\\n    HoverDirective,\\n    BiomarkerTableDataCardComponent,\\n  ],\\n  templateUrl: \'./biomarker-table.component.html\',\\n  styleUrls: [\'./biomarker-table.component.scss\'],\\n  changeDetection: ChangeDetectionStrategy.OnPush,\\n})\\nexport class BiomarkerTableComponent<T extends DataCell> implements OnChanges {\\n  /**\\n   * Input: TissueInfo carrying the details of the tissue open\\n   */\\n  @Input() tissueInfo: TissueInfo = {\\n    id: \'\',\\n    label: \'\',\\n    datasetCount: 0,\\n  };\\n\\n  /** Columns for the table */\\n  @Input() columns: string[] = [];\\n\\n  /** Rows of the table */\\n  @Input() data: DataRow<T>[] = [];\\n\\n  /** Gradient colors along with their stop points */\\n  @Input() gradient: GradientPoint[] = [];\\n\\n  /** Taking input for the radius of the circle and the label to be displayed. */\\n  @Input() sizes: SizeLegend[] = [];\\n\\n  /** Getter method to provide the definations of the columns */\\n  get columnsWithTypeAndCount(): string[] {\\n    return [\'type\', \'count\', ...this.columns];\\n  }\\n\\n  /** Source for the table */\\n  readonly dataSource = new MatTableDataSource<DataRow<T>>([]);\\n\\n  /**\\n   * sets the data source for the table on every change\\n   * @param changes object consisting of change in the Input\\n   */\\n  ngOnChanges(changes: SimpleChanges): void {\\n    if (\'data\' in changes) {\\n      this.dataSource.data = this.data;\\n    }\\n  }\\n\\n  /** Lerp function to give value beween min and max value based on the given value\\n   *\\n   * @param value\\n   * @param min\\n   * @param max\\n   * @returns\\n   */\\n  lerp(value: number, min: number, max: number): number {\\n    return min * (1 - value) + max * value;\\n  }\\n\\n  /**\\n   * Converts HexCode to RGB\\n   * @param hex\\n   * @returns\\n   */\\n  hex2rgb(hex: string): RGBTriplet {\\n    const r = parseInt(hex.slice(1, 3), 16);\\n    const g = parseInt(hex.slice(3, 5), 16);\\n    const b = parseInt(hex.slice(5, 7), 16);\\n    return [r, g, b];\\n  }\\n\\n  /**\\n   * Gets Min and Max color grade based on the meanExpression value\\n   * @param meanExpression\\n   * @returns\\n   */\\n  getMinMaxColor(meanExpression: number): { minColor: RGBTriplet; maxColor: RGBTriplet } {\\n    const index = this.gradient.findIndex((item, i, arr) => {\\n      return meanExpression >= item.percentage && meanExpression <= arr[i + 1]?.percentage;\\n    });\\n\\n    const minColor: RGBTriplet = this.hex2rgb(this.gradient[index]?.color ?? this.gradient[0].color);\\n    const maxColor: RGBTriplet = this.hex2rgb(\\n      this.gradient[index + 1]?.color ?? this.gradient[this.gradient.length - 1].color\\n    );\\n\\n    return { minColor, maxColor };\\n  }\\n\\n  /**\\n   * Gets Min and Max size grade based on the Percentage value\\n   * @param percentage\\n   * @returns\\n   */\\n  getMinMaxSize(percentage: number): { minSize: number; maxSize: number } {\\n    const index = this.sizes.findIndex((item, i, arr) => {\\n      return percentage >= parseFloat(item.label) / 100 && percentage <= parseFloat(arr[i + 1]?.label) / 100;\\n    });\\n    const minSize: number = this.sizes[index]?.radius ?? this.sizes[0].radius;\\n    const maxSize: number = this.sizes[index + 1]?.radius ?? this.sizes[this.sizes.length - 1].radius;\\n    return { minSize, maxSize };\\n  }\\n\\n  /**\\n   * Calculates the color of this value on this gradient\\n   * @param value\\n   * @returns\\n   */\\n  getColor(value: number): string {\\n    const { minColor, maxColor } = this.getMinMaxColor(value);\\n    return (\\n      \'#\' +\\n      minColor\\n        .map((min, index) => this.lerp(value, min, maxColor[index]))\\n        .map((component) => Math.round(component).toString(16))\\n        .join(\'\')\\n    );\\n  }\\n\\n  /**\\n   * gets Size of the Cell based on the percentage value\\n   * @param value\\n   * @returns\\n   */\\n  getSize(value: number): number {\\n    const { minSize, maxSize } = this.getMinMaxSize(value);\\n    return this.lerp(value, minSize, maxSize);\\n  }\\n\\n  /**\\n   * rocesses the object for hover data for Table Cell\\n   * @param index index of the row of the datasource\\n   * @param row row of the datasource\\n   * @returns\\n   */\\n  getHoverData([index, row]: [number, DataRow<T>]): DataItem[][] {\\n    if (row[index] === undefined) {\\n      return [];\\n    }\\n\\n    const {\\n      tissueInfo: { id, label, datasetCount },\\n    } = this;\\n    const {\\n      data: { cell, biomarker, meanExpression },\\n    } = row[index] as T;\\n\\n    return [\\n      [\\n        { label: \'Functional Tissue Unit Name\', value: label },\\n        { label: \'Uberon ID\', value: id },\\n        { label: \'#Datasets\', value: `${datasetCount}` },\\n      ],\\n      [\\n        { label: \'Cell Type Name\', value: row[0] },\\n        { label: \'CL ID\', value: cell },\\n        { label: \'Number of Cells\', value: `${row[1]}` },\\n      ],\\n      [\\n        { label: \'Gene Name\', value: this.columns[index - 2] },\\n        { label: \'HGNC ID\', value: biomarker },\\n        { label: \'Mean Expression Value\', value: meanExpression.toFixed(6) },\\n      ],\\n    ];\\n  }\\n}\\n","assetsDirs":[],"styleUrlsData":[{"data":"@use \'utils\';\\n@use \'variables\' as vars;\\n\\n:host {\\n  display: block;\\n  max-height: 16.5rem;\\n  max-width: 43rem;\\n\\n  .sr-only {\\n    @include utils.sr-only();\\n  }\\n\\n  .table {\\n    margin-left: -1px;\\n    .emptyFiller {\\n      padding: 1.3rem;\\n    }\\n  }\\n  .table th {\\n    background-color: #fff7f8;\\n    color: #59264d;\\n    text-align: right;\\n  }\\n\\n  .table td {\\n    border-bottom: 0.063rem solid #d3d3d3;\\n    border-left: 0.063rem solid #d3d3d3;\\n  }\\n\\n  .table tr:first-child td {\\n    border-top: 0rem solid #d3d3d3;\\n  }\\n\\n  tr > td:first-child {\\n    text-align: left;\\n    padding: 0 2rem;\\n  }\\n\\n  tr > th:first-child {\\n    text-align: left;\\n    padding: 0 2rem;\\n  }\\n\\n  tr > td:last-of-type {\\n    border-right: 0.063rem solid #d3d3d3;\\n  }\\n\\n  tr > th:last-of-type {\\n    border-right: 0.063rem solid #d3d3d3;\\n  }\\n\\n  .type {\\n    height: 3rem;\\n    max-width: 26rem;\\n    min-width: 17rem;\\n    border-radius: 0rem;\\n    white-space: nowrap;\\n  }\\n\\n  .count {\\n    text-align: right;\\n    height: 3rem;\\n    min-width: 6.5rem;\\n  }\\n\\n  .icon-header {\\n    max-width: 5rem;\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n  }\\n\\n  .icon-cell {\\n    max-width: 5rem;\\n    min-height: 3rem;\\n\\n    .icon {\\n      margin: auto;\\n    }\\n  }\\n}\\n\\n::ng-deep .mat-mdc-tab-header {\\n  margin-left: -1px !important;\\n}\\n\\n::ng-deep .biomarker-table-hover.full-column-name {\\n  display: flex;\\n  padding: 1rem 1.5rem;\\n  border-radius: 0.5rem;\\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\\n  background-color: vars.$primary-contrast-rgb;\\n  overflow: auto;\\n  max-width: fit-content;\\n}\\n","styleUrl":"./biomarker-table.component.scss"}],"stylesData":"","implements":["OnChanges"],"accessors":{"columnsWithTypeAndCount":{"name":"columnsWithTypeAndCount","getSignature":{"name":"columnsWithTypeAndCount","type":"[]","returnType":"string[]","line":86,"rawdescription":"\\nGetter method to provide the definations of the columns","description":"<p>Getter method to provide the definations of the columns</p>\\n"}}},"templateData":"<table class=\\"table\\" mat-table [dataSource]=\\"dataSource\\">\\n  <caption class=\\"sr-only\\">\\n    Cell type table by Biomarker\\n  </caption>\\n\\n  <ng-container matColumnDef=\\"type\\">\\n    <th mat-header-cell *matHeaderCellDef>Cell Type</th>\\n\\n    <td class=\\"type\\" mat-cell *matCellDef=\\"let element\\">\\n      {{ element[0] }}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container matColumnDef=\\"count\\">\\n    <th class=\\"count\\" mat-header-cell *matHeaderCellDef>Cell Count</th>\\n\\n    <td class=\\"count\\" mat-cell *matCellDef=\\"let element\\">\\n      {{ element[1] !== undefined ? (element[1] | number) : \'no data\' }}\\n    </td>\\n  </ng-container>\\n\\n  <ng-container *ngFor=\\"let column of columns; let index = index\\" [matColumnDef]=\\"column\\">\\n    <th class=\\"icon-header\\" mat-header-cell *matHeaderCellDef [hraHover]=\\"columnHover\\" [hraHoverData]=\\"column\\">\\n      {{ column }}\\n    </th>\\n\\n    <td class=\\"icon-cell\\" mat-cell *matCellDef=\\"let element\\">\\n      <hra-biomarker-table-data-icon\\n        class=\\"icon\\"\\n        *ngIf=\\"element[index + 2] !== undefined; else emptyCell\\"\\n        [color]=\\"getColor(element[index + 2].color)\\"\\n        [size]=\\"getSize(element[index + 2].size)\\"\\n        [hraHover]=\\"dataHover\\"\\n        [hraHoverData]=\\"[index + 2, element]\\"\\n      >\\n      </hra-biomarker-table-data-icon>\\n\\n      <ng-template #emptyCell>\\n        <div class=\\"empty\\" [hraHover]=\\"dataHover\\" [hraHoverData]=\\"[index + 2, element]\\"></div>\\n      </ng-template>\\n    </td>\\n  </ng-container>\\n\\n  <tr mat-header-row *matHeaderRowDef=\\"columnsWithTypeAndCount\\"></tr>\\n  <tr mat-row *matRowDef=\\"let row; columns: columnsWithTypeAndCount\\"></tr>\\n</table>\\n\\n<ng-template #columnHover let-columnName>\\n  <div class=\\"biomarker-table-hover full-column-name\\">\\n    {{ columnName }}\\n  </div>\\n</ng-template>\\n\\n<ng-template #dataHover let-data>\\n  <hra-biomarker-table-data-card [data]=\\"getHoverData(data)\\"> </hra-biomarker-table-data-card>\\n</ng-template>\\n"}],"modules":[],"miscellaneous":{"variables":[],"functions":[],"typealiases":[{"name":"DataRow","ctype":"miscellaneous","subtype":"typealias","rawtype":"[string, , ...[]]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Describes the composition of a single row in the table</p>\\n","kind":183},{"name":"RGBTriplet","ctype":"miscellaneous","subtype":"typealias","rawtype":"[number, number, number]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>RGBTriblet of type RGB to store color</p>\\n","kind":183}],"enumerations":[],"groupedVariables":{},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/lib/biomarker-table/biomarker-table.component.ts":[{"name":"DataRow","ctype":"miscellaneous","subtype":"typealias","rawtype":"[string, , ...[]]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>Describes the composition of a single row in the table</p>\\n","kind":183},{"name":"RGBTriplet","ctype":"miscellaneous","subtype":"typealias","rawtype":"[number, number, number]","file":"src/lib/biomarker-table/biomarker-table.component.ts","deprecated":false,"deprecationMessage":"","description":"<p>RGBTriblet of type RGB to store color</p>\\n","kind":183}]}}}')},"./dist/compodoc/shared-theming/documentation.json":module=>{"use strict";module.exports=JSON.parse('{"pipes":[],"interfaces":[],"injectables":[{"name":"ThemingState","id":"injectable-ThemingState-bc96eb085e9f41108d0a07c93ef58359e93bf96384f9b49b4e90d3f6f570a75ca04b1bd6fce0878c0c58715039571f02f400086da7f63acae3a2987851ae31fa","file":"src/lib/state/theming.state.ts","properties":[],"methods":[{"name":"load","args":[{"name":"ctx","type":"ThemingContext","deprecated":false,"deprecationMessage":""},{"type":"Load","deprecated":false,"deprecationMessage":""}],"optional":false,"returnType":"Observable<>","typeParameters":[],"line":44,"deprecated":false,"deprecationMessage":"","rawdescription":"\\n\\nAction for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.\\n","description":"<p>Action for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.</p>\\n","decorators":[{"name":"Action","stringifiedArguments":"Load"}],"jsdoctags":[{"name":{"pos":1096,"end":1099,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"ctx"},"type":"ThemingContext","deprecated":false,"deprecationMessage":"","tagName":{"pos":1090,"end":1095,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>State Context</p>\\n"},{"type":"Load","deprecated":false,"deprecationMessage":"","tagName":{"text":"param"}},{"tagName":{"pos":1173,"end":1180,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"returns"},"comment":"<p>asyncronous data from the url</p>\\n"}]}],"deprecated":false,"deprecationMessage":"","description":"<p>State for keeping track of theming applied</p>\\n","rawdescription":"\\n\\nState for keeping track of theming applied\\n","sourceCode":"import { HttpClient } from \'@angular/common/http\';\\nimport { inject, Injectable } from \'@angular/core\';\\nimport { Action, State } from \'@ngxs/store\';\\nimport { MaterialCssVariables, MaterialCssVarsService } from \'angular-material-css-vars\';\\nimport { load } from \'js-yaml\';\\nimport { map, Observable, tap } from \'rxjs\';\\nimport { Load } from \'./theming.actions\';\\nimport { ThemingContext, ThemingModel, THEMING_FILE_SCHEMA } from \'./theming.model\';\\n\\n/**\\n * State for keeping track of theming applied\\n */\\n@State<ThemingModel>({\\n  /**\\n   * name of the state\\n   */\\n  name: \'theming\',\\n  /**\\n   * state variables default value\\n   */\\n  defaults: {},\\n})\\n/**\\n * Theming state class\\n */\\n@Injectable()\\nexport class ThemingState {\\n  /**\\n   * http service for link loading\\n   */\\n  private readonly http = inject(HttpClient);\\n  /**\\n   * Material-vars service for setting theming variables\\n   */\\n  private readonly materialVars = inject(MaterialCssVarsService);\\n\\n  /**\\n   * Action for loading yaml, reading data from yaml, setting state variables, and set material-css-vars variables for dynamic theming.\\n   * @param ctx State Context\\n   * @param action Action with url(yaml url) to load\\n   * @returns asyncronous data from the url\\n   */\\n  @Action(Load)\\n  load(ctx: ThemingContext, { url }: Load): Observable<unknown> {\\n    return this.http.get(url, { responseType: \'text\' }).pipe(\\n      map((data) => load(data, { filename: url })),\\n      map((data) => THEMING_FILE_SCHEMA.parse(data)),\\n      tap((data) => ctx.setState(data)),\\n      tap((data) => this.setVariables(data))\\n    );\\n  }\\n\\n  /**\\n   * Set values to the material-css-vars pallete keys\\n   * @param data key-value pairs set in state\\n   */\\n  private setVariables(data: ThemingModel): void {\\n    for (const [key, value] of Object.entries(data)) {\\n      this.materialVars.setVariable(key as MaterialCssVariables, value);\\n    }\\n  }\\n}\\n","type":"injectable"}],"guards":[],"interceptors":[],"classes":[{"name":"Load","id":"class-Load-469f09c45915febbba378ba114f9cebc6d6342ca6e618a54edaa277bdc8b3fbbce18cea9b8c908ad8794b8a3f9a2fac6a9e21ab80e6e979fda2c08bca4eb995b","file":"src/lib/state/theming.actions.ts","deprecated":false,"deprecationMessage":"","type":"class","sourceCode":"export class Load {\\n  /**\\n   * static type for the action\\n   */\\n  static readonly type = \'[Theming] Load Theming File\';\\n  /**\\n   * Initialising type for the  action\\n   */\\n  readonly type = Load.type;\\n\\n  /**\\n   * It takes URL of the yaml file, and loads it.\\n   * @param url URL of the yaml file, containing theming color key-value pairs\\n   */\\n  constructor(readonly url: string) {}\\n}\\n","constructorObj":{"name":"constructor","description":"<p>It takes URL of the yaml file, and loads it.</p>\\n","deprecated":false,"deprecationMessage":"","args":[{"name":"url","type":"string","deprecated":false,"deprecationMessage":""}],"line":12,"rawdescription":"\\n\\nIt takes URL of the yaml file, and loads it.\\n","jsdoctags":[{"name":{"pos":354,"end":357,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"url"},"type":"string","deprecated":false,"deprecationMessage":"","tagName":{"pos":348,"end":353,"flags":4227072,"modifierFlagsCache":0,"transformFlags":0,"kind":79,"escapedText":"param"},"comment":"<p>URL of the yaml file, containing theming color key-value pairs</p>\\n"}]},"properties":[{"name":"type","defaultValue":"\'[Theming] Load Theming File\'","deprecated":false,"deprecationMessage":"","type":"string","optional":false,"description":"<p>static type for the action</p>\\n","line":8,"rawdescription":"\\n\\nstatic type for the action\\n","modifierKind":[124,144]},{"name":"type","defaultValue":"Load.type","deprecated":false,"deprecationMessage":"","type":"","optional":false,"description":"<p>Initialising type for the  action</p>\\n","line":12,"rawdescription":"\\n\\nInitialising type for the  action\\n","modifierKind":[144]}],"description":"<p>Load Action, which is triggered to load yaml file, to get theming pallete</p>\\n","rawdescription":"\\n\\nLoad Action, which is triggered to load yaml file, to get theming pallete\\n","methods":[],"indexSignatures":[],"inputsClass":[],"outputsClass":[],"hostBindings":[],"hostListeners":[]}],"directives":[],"components":[],"modules":[{"name":"ThemingModule","id":"module-ThemingModule-a5ac292a1d8f0af8ae5b93edb01358072adb02eaa2e0139627ccb0f40b61d38613bc286464b0e4b2577330616277bc72746d8169acd7a4f527abd04f0e0fe000","description":"<p>Configures global theming</p>\\n","deprecationMessage":"","deprecated":false,"file":"src/lib/theming.module.ts","methods":[],"sourceCode":"import { NgModule } from \'@angular/core\';\\nimport { NgxsModule } from \'@ngxs/store\';\\nimport { MaterialCssVarsModule } from \'angular-material-css-vars\';\\nimport { ThemingState } from \'./state/theming.state\';\\n\\n/** Configures global theming */\\n@NgModule({\\n  imports: [MaterialCssVarsModule.forRoot({}), NgxsModule.forFeature([ThemingState])],\\n})\\nexport class ThemingModule {}\\n","children":[{"type":"providers","elements":[]},{"type":"declarations","elements":[]},{"type":"imports","elements":[]},{"type":"exports","elements":[]},{"type":"bootstrap","elements":[]},{"type":"classes","elements":[]}]}],"miscellaneous":{"variables":[{"name":"placeholder","ctype":"miscellaneous","subtype":"variable","file":"src/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"undefined","rawdescription":"Placeholder to make build and tests pass until any actual library code is created","description":"<p>Placeholder to make build and tests pass until any actual library code is created</p>\\n"},{"name":"THEMING_FILE_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(z.nativeEnum(MaterialCssVariables), z.string())","rawdescription":"Theming mdoel schema, having records with key as material-css-vars pallete keys and string values","description":"<p>Theming mdoel schema, having records with key as material-css-vars pallete keys and string values</p>\\n"}],"functions":[],"typealiases":[{"name":"ThemingContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ThemingModel>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State context for theming, with reference of model</p>\\n","kind":177},{"name":"ThemingModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for theming</p>\\n","kind":177}],"enumerations":[],"groupedVariables":{"src/index.ts":[{"name":"placeholder","ctype":"miscellaneous","subtype":"variable","file":"src/index.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"undefined","rawdescription":"Placeholder to make build and tests pass until any actual library code is created","description":"<p>Placeholder to make build and tests pass until any actual library code is created</p>\\n"}],"src/lib/state/theming.model.ts":[{"name":"THEMING_FILE_SCHEMA","ctype":"miscellaneous","subtype":"variable","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","type":"","defaultValue":"z.record(z.nativeEnum(MaterialCssVariables), z.string())","rawdescription":"Theming mdoel schema, having records with key as material-css-vars pallete keys and string values","description":"<p>Theming mdoel schema, having records with key as material-css-vars pallete keys and string values</p>\\n"}]},"groupedFunctions":{},"groupedEnumerations":{},"groupedTypeAliases":{"src/lib/state/theming.model.ts":[{"name":"ThemingContext","ctype":"miscellaneous","subtype":"typealias","rawtype":"StateContext<ThemingModel>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>State context for theming, with reference of model</p>\\n","kind":177},{"name":"ThemingModel","ctype":"miscellaneous","subtype":"typealias","rawtype":"z.infer<>","file":"src/lib/state/theming.model.ts","deprecated":false,"deprecationMessage":"","description":"<p>Model for theming</p>\\n","kind":177}]}}}')}},__webpack_require__=>{var __webpack_exec__=moduleId=>__webpack_require__(__webpack_require__.s=moduleId);__webpack_require__.O(0,[650],(()=>(__webpack_exec__("./storybook-config-entry.js"),__webpack_exec__("./.storybook/styles.scss?ngGlobalStyle"))));__webpack_require__.O()}]);