(self.webpackChunkhra_ui=self.webpackChunkhra_ui||[]).push([[614],{"./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: var(--palette-primary-contrast-500-rgb);\n}\n:host .mat-mdc-cell {\n  padding: 0.25rem 0rem;\n}\n:host .mat-mdc-row {\n  height: -moz-fit-content;\n  height: fit-content;\n}\n:host .no-border {\n  border: none;\n}\n:host .label {\n  color: #243142;\n  padding-right: 3rem;\n}\n:host .value {\n  color: #4c5a69;\n}\n:host .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n  border-radius: 50%;\n  --radius: 0.625rem;\n  width: var(--radius);\n  height: var(--radius);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource":(module,__unused_webpack_exports,__webpack_require__)=>{var ___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/noSourceMaps.js"),___CSS_LOADER_EXPORT___=__webpack_require__("./node_modules/css-loader/dist/runtime/api.js")(___CSS_LOADER_API_NO_SOURCEMAP_IMPORT___);___CSS_LOADER_EXPORT___.push([module.id,":host {\n  display: block;\n}\n:host .sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n:host .table th {\n  background-color: #fff7f8;\n  color: #59264d;\n  text-align: right;\n  border-top: 0.063rem solid #d3d3d3;\n  border-bottom: 0.063rem solid #d3d3d3;\n  border-left: 0.063rem solid #d3d3d3;\n}\n:host .table td {\n  border-bottom: 0.063rem solid #d3d3d3;\n  border-left: 0.063rem solid #d3d3d3;\n}\n:host .table tr:first-child td {\n  border-top: 0.063rem solid #d3d3d3;\n}\n:host tr > td:first-child {\n  text-align: left;\n  padding: 0 2rem;\n}\n:host tr > th:first-child {\n  text-align: left;\n  padding: 0 2rem;\n}\n:host tr > td:last-of-type {\n  border-right: 0.063rem solid #d3d3d3;\n}\n:host tr > th:last-of-type {\n  border-right: 0.063rem solid #d3d3d3;\n}\n:host .type {\n  height: 3rem;\n  max-width: 26rem;\n  min-width: 17rem;\n  border-radius: 0rem;\n  white-space: nowrap;\n}\n:host .count {\n  text-align: right;\n  height: 3rem;\n  min-width: 6.5rem;\n}\n:host .icon-header {\n  max-width: 5rem;\n  white-space: nowrap;\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n:host .icon-cell {\n  max-width: 5rem;\n  min-height: 3rem;\n}\n:host .icon-cell .icon {\n  margin: auto;\n}\n\n::ng-deep .biomarker-table-hover.full-column-name {\n  display: flex;\n  padding: 1rem 1.5rem;\n  border-radius: 0.5rem;\n  box-shadow: 0.063rem 0.125rem 1rem 0.125rem rgba(0, 0, 0, 0.16);\n  background-color: var(--palette-primary-contrast-500-rgb);\n}",""]),module.exports=___CSS_LOADER_EXPORT___.toString()},"./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.stories.ts":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Primary:()=>Primary,default:()=>biomarker_table_component_stories});var tslib_es6=__webpack_require__("./node_modules/tslib/tslib.es6.js");var _class,biomarker_table_componentngResource=__webpack_require__("./libs/components/organisms/src/lib/biomarker-table/biomarker-table.component.scss?ngResource"),biomarker_table_componentngResource_default=__webpack_require__.n(biomarker_table_componentngResource),core=__webpack_require__("./node_modules/@angular/core/fesm2020/core.mjs"),common=__webpack_require__("./node_modules/@angular/common/fesm2020/common.mjs"),table=__webpack_require__("./node_modules/@angular/material/fesm2020/table.mjs"),biomarker_table_data_icon_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-icon/biomarker-table-data-icon.component.scss?ngResource"),biomarker_table_data_icon_componentngResource_default=__webpack_require__.n(biomarker_table_data_icon_componentngResource);let BiomarkerTableDataIconComponent=((_class=class BiomarkerTableDataIconComponent{constructor(){this.color="",this.size=0}}).propDecorators={color:[{type:core.HostBinding,args:["style.background-color"]},{type:core.Input}],size:[{type:core.HostBinding,args:["style.--radius.rem"]},{type:core.Input}]},_class);BiomarkerTableDataIconComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"hra-biomarker-table-data-icon",standalone:!0,imports:[common.CommonModule],template:"",changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_icon_componentngResource_default()]})],BiomarkerTableDataIconComponent);var biomarker_table_data_card_component_class,biomarker_table_data_card_componentngResource=__webpack_require__("./libs/components/molecules/src/lib/biomarker-table-data-card/biomarker-table-data-card.component.scss?ngResource"),biomarker_table_data_card_componentngResource_default=__webpack_require__.n(biomarker_table_data_card_componentngResource);let BiomarkerTableDataCardComponent=((biomarker_table_data_card_component_class=class BiomarkerTableDataCardComponent{constructor(){this.data=[],this.sectionItems=[]}ngOnChanges(changes){"data"in changes&&this.updateSectionItems()}updateSectionItems(){const newSectionItems=[];this.data.forEach(((section,sectionIndex)=>{section.forEach(((item,itemIndex)=>{newSectionItems.push({data:item,section:sectionIndex,isLastItem:itemIndex===section.length-1})}))})),this.sectionItems=newSectionItems}}).propDecorators={data:[{type:core.Input}]},biomarker_table_data_card_component_class);BiomarkerTableDataCardComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"hra-biomarker-table-data-card",standalone:!0,imports:[common.CommonModule,table.p0],template:'<div class="no-data" *ngIf="sectionItems.length === 0">No data</div>\n<table mat-table *ngIf="sectionItems.length > 0" [dataSource]="sectionItems">\n  <caption class="sr-only">\n    Biomarker Table Data Card\n  </caption>\n\n  \x3c!-- Label Column --\x3e\n  <ng-container matColumnDef="label">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Label</th>\n    <td class="label" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.label }}\n    </td>\n  </ng-container>\n\n  \x3c!-- Value Column --\x3e\n  <ng-container matColumnDef="value">\n    <th class="sr-only" mat-header-cell *matHeaderCellDef>Item Value</th>\n    <td class="value" mat-cell *matCellDef="let element" [class.no-border]="!element.isLastItem">\n      {{ element.data.value }}\n    </td>\n  </ng-container>\n\n  <tr mat-row *matRowDef="let row; columns: [\'label\', \'value\']"></tr>\n</table>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_data_card_componentngResource_default()]})],BiomarkerTableDataCardComponent);var hover_directive_class,overlay=__webpack_require__("./node_modules/@angular/cdk/fesm2020/overlay.mjs"),portal=__webpack_require__("./node_modules/@angular/cdk/fesm2020/portal.mjs");let HoverDirective=((hover_directive_class=class HoverDirective{constructor(){this.el=(0,core.inject)(core.ElementRef).nativeElement,this.overlayRef=(0,core.inject)(overlay.aV).create({positionStrategy:(0,core.inject)(overlay.aV).position().flexibleConnectedTo(this.el).withPositions([new overlay.tR({originX:"end",originY:"bottom"},{overlayX:"end",overlayY:"top"}),new overlay.tR({originX:"start",originY:"top"},{overlayX:"start",overlayY:"bottom"}),new overlay.tR({originX:"start",originY:"bottom"},{overlayX:"start",overlayY:"top"}),new overlay.tR({originX:"end",originY:"top"},{overlayX:"end",overlayY:"bottom"})]).withPush(!0)}),this.viewContainerRef=(0,core.inject)(core.ViewContainerRef)}set content(content){this.portal=new portal.UE(content,this.viewContainerRef,this._data),this.updateContent()}set data(data){this._data={$implicit:data},this.portal&&(this.portal.context=this._data,this.updateContent())}startHover(){const{overlayRef,portal}=this;!overlayRef.hasAttached()&&portal&&overlayRef.attach(portal)}endHover(){const{overlayRef}=this;overlayRef.hasAttached()&&overlayRef.detach()}updateContent(){const{overlayRef,portal}=this;overlayRef.hasAttached()&&portal&&(overlayRef.detach(),overlayRef.attach(portal))}}).propDecorators={content:[{type:core.Input,args:["hraHover"]}],data:[{type:core.Input,args:["hraHoverData"]}],startHover:[{type:core.HostListener,args:["mouseover"]}],endHover:[{type:core.HostListener,args:["mouseout"]}]},hover_directive_class);var biomarker_table_component_class;HoverDirective=(0,tslib_es6.gn)([(0,core.Directive)({selector:"[hraHover]",standalone:!0})],HoverDirective);let BiomarkerTableComponent=((biomarker_table_component_class=class BiomarkerTableComponent{constructor(){this.columns=[],this.data=[],this.dataSource=new table.by([])}get columnsWithTypeAndCount(){return["type","count",...this.columns]}ngOnChanges(changes){"data"in changes&&(this.dataSource.data=this.data)}}).propDecorators={columns:[{type:core.Input}],data:[{type:core.Input}]},biomarker_table_component_class);BiomarkerTableComponent=(0,tslib_es6.gn)([(0,core.Component)({selector:"hra-biomarker-table",standalone:!0,imports:[common.CommonModule,table.p0,BiomarkerTableDataIconComponent,HoverDirective,BiomarkerTableDataCardComponent],template:'<table class="table" mat-table [dataSource]="dataSource">\n  <caption class="sr-only">\n    Cell type table by Biomarker\n  </caption>\n\n  <ng-container matColumnDef="type">\n    <th mat-header-cell *matHeaderCellDef>Cell Type</th>\n\n    <td class="type" mat-cell *matCellDef="let element">\n      {{ element[0] }}\n    </td>\n  </ng-container>\n\n  <ng-container matColumnDef="count">\n    <th class="count" mat-header-cell *matHeaderCellDef>Cell Count</th>\n\n    <td class="count" mat-cell *matCellDef="let element">\n      {{ element[1] !== undefined ? (element[1] | number) : \'no data\' }}\n    </td>\n  </ng-container>\n\n  <ng-container *ngFor="let column of columns; let index = index" [matColumnDef]="column">\n    <th class="icon-header" mat-header-cell *matHeaderCellDef [hraHover]="columnHover" [hraHoverData]="column">\n      {{ column }}\n    </th>\n\n    <td class="icon-cell" mat-cell *matCellDef="let element">\n      <hra-biomarker-table-data-icon\n        class="icon"\n        *ngIf="element[index + 2] !== undefined"\n        [color]="element[index + 2].color"\n        [size]="element[index + 2].size"\n        [hraHover]="dataHover"\n        [hraHoverData]="element[index + 2].data"\n      >\n      </hra-biomarker-table-data-icon>\n    </td>\n  </ng-container>\n\n  <tr mat-header-row *matHeaderRowDef="columnsWithTypeAndCount"></tr>\n  <tr mat-row *matRowDef="let row; columns: columnsWithTypeAndCount"></tr>\n</table>\n\n<ng-template #columnHover let-columnName>\n  <div class="biomarker-table-hover full-column-name">\n    {{ columnName }}\n  </div>\n</ng-template>\n\n<ng-template #dataHover let-data>\n  <hra-biomarker-table-data-card [data]="data"> </hra-biomarker-table-data-card>\n</ng-template>\n',changeDetection:core.ChangeDetectionStrategy.OnPush,styles:[biomarker_table_componentngResource_default()]})],BiomarkerTableComponent);const biomarker_table_component_stories={title:"BiomarkerTableComponent",component:BiomarkerTableComponent},Primary=(args=>({props:args})).bind({});Primary.args={columns:["RGMB","SOX9","CD44","LGR5","chromosome inavalitentte A"],data:[["absorptive cell",2764,{color:"#9ca5ee",size:.56,data:[[{label:"Name",value:"capillary endolitheal cell"},{label:"ID-UBERON",value:"123456"},{label:"#Datasets",value:"45"}],[{label:"Name ",value:"endolitheal cell"},{label:"ID-CL",value:"CL:1234567"},{label:"MEAN VALUE",value:"0.012"},{label:"ID-HGNC",value:"HGNC:12345"}]]},void 0,{color:"#c6e2ff",size:.9,data:[]},void 0,{color:"#6f1414",size:.43,data:[]}],["enteroendocrine cell",17,void 0,{color:"#00ffb2",size:.689,data:[]},void 0],["epithelial stem cell",187,{color:"#cb7b97",size:.625,data:[]},{color:"#f5f0e0",size:1.25,data:[]},void 0,void 0,{color:"#efe1ce",size:2,data:[]}],["goblet cell",void 0,{color:"#926aa6",size:1.25,data:[]},void 0,{color:"#9ca5ee",size:.9,data:[]},{color:"#b2d5ba",size:.9,data:[]}]]},Primary.parameters={...Primary.parameters,docs:{...Primary.parameters?.docs,source:{originalSource:"args => ({\n  props: args\n})",...Primary.parameters?.docs?.source}}}}}]);