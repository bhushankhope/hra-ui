import {
  createRxDatabase,
  RxDatabase,
  RxCollection,
  RxJsonSchema,
  RxDocument,
  RxDatabaseCreator
} from 'rxdb';
import { Observable } from 'rxjs';

export interface IndexedItemFilter {
  sex?: 'Both' | 'Male' | 'Female';
  ageRange?: [number, number];
  bmiRange?: [number, number];
  ontologyTerms?: string[];
}

export interface AggregateResult {
  label: string;
  count: string | number;
}

export interface ImageViewerData {
  id: string;
  metadata: { [label: string]: string };
}

export type IndexedItemType = {
  id: string;
  last_updated: number; // timemillis

  // Searchable fields
  sex?: 'Male' | 'Female';
  age?: number;
  bmi?: number;
  ontologyTerms?: Set<string>;
};

export type IndexedItemMethods<T = unknown> = {
  getSource: () => Promise<T | null>;
};

export type IndexedItem<T> = RxDocument<IndexedItemType, IndexedItemMethods<T>>;

export type IndexedItemCollectionMethods<T> = {
  getListResults: (filter?: IndexedItemFilter) => Observable<IndexedItem<T>[]>;
  getAggregateResults: (filter?: IndexedItemFilter) => Observable<AggregateResult[]>;
  getImageViewerData: (id: string) => Observable<ImageViewerData>;
};

type IndexedItemCollection<T> = RxCollection<IndexedItemType, IndexedItemMethods<T>>;

type Collections<T> = {
  items: IndexedItemCollection<T>
};

export type IndexedItemDatabase<T> = RxDatabase<Collections<T>>;

export const indexedItemSchema: RxJsonSchema<IndexedItemType> = {
  title: 'Indexed Item',
  description: 'An item indexed and usable from the CCF UI',
  version: 0,
  keyCompression: true,
  type: 'object',
  properties: {
    id: {
      type: 'string',
      primary: true
    },
    last_updated: {
      type: 'number',
      default: new Date().valueOf()
    },
    sex: {
      type: 'string',
      enum: ['Male', 'Female']
    },
    age: {
      type: 'integer'
    },
    bmi: {
      type: 'number'
    },
    ontologyTerms: {
      type: 'array',
      items: {
        type: 'string'
      }
    }
  },
  required: ['id', 'last_updated']
};

export async function createDB<T = unknown>(options: RxDatabaseCreator): Promise<IndexedItemDatabase<T>> {
  const memoize = new WeakMap<IndexedItem<T>, T>();
  const indexedItemMethods: IndexedItemMethods<T> = {
    async getSource(this: IndexedItem<T>): Promise<T | null> {
      if (memoize.get(this)) {
        return memoize.get(this) as T;
      }
      const attachment = this.getAttachment('source.json');
      if (attachment) {
        const source = JSON.parse(await attachment.getStringData()) as T;
        memoize.set(this, source);
        return source;
      } else {
        return null;
      }
    }
  };

  const indexedItemCollectionMethods: IndexedItemCollectionMethods<T> = {
    getListResults(this: IndexedItemCollection<T>, filter?: IndexedItemFilter): Observable<IndexedItem<T>[]> {
      return null;
    },
    getAggregateResults(this: IndexedItemCollection<T>, filter?: IndexedItemFilter): Observable<AggregateResult[]> {
      return null;
    },
    getImageViewerData(this: IndexedItemCollection<T>, id: string): Observable<ImageViewerData> {
      return null;
    }
  };

  const database: IndexedItemDatabase<T> = await createRxDatabase<IndexedItemDatabase<T>>(options);

  await database.collection({
    name: 'indexedItems',
    schema: indexedItemSchema,
    methods: indexedItemMethods,
    statics: indexedItemCollectionMethods
  });

  return database;
}


